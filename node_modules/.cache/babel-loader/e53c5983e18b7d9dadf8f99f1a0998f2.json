{"ast":null,"code":"import { keys } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { BOXPLOT, BOXPLOT_PARTS, normalizeBoxPlot } from './boxplot';\nimport { ERRORBAND, ERRORBAND_PARTS, normalizeErrorBand } from './errorband';\nimport { ERRORBAR, ERRORBAR_PARTS, normalizeErrorBar } from './errorbar';\n/**\n * Registry index for all composite mark's normalizer\n */\n\nconst compositeMarkRegistry = {};\nexport function add(mark, run, parts) {\n  const normalizer = new CompositeMarkNormalizer(mark, run);\n  compositeMarkRegistry[mark] = {\n    normalizer,\n    parts\n  };\n}\nexport function remove(mark) {\n  delete compositeMarkRegistry[mark];\n}\nexport function getAllCompositeMarks() {\n  return keys(compositeMarkRegistry);\n}\nadd(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\nadd(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\nadd(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);","map":{"version":3,"sources":["../../../src/compositemark/index.ts"],"names":[],"mappings":"AAKA,SAAQ,IAAR,QAAmB,SAAnB;AACA,SAAQ,uBAAR,QAAsC,QAAtC;AACA,SAAQ,OAAR,EAA0B,aAA1B,EAA0E,gBAA1E,QAAiG,WAAjG;AACA,SACE,SADF,EAGE,eAHF,EAME,kBANF,QAOO,aAPP;AAQA,SACE,QADF,EAGE,cAHF,EAOE,iBAPF,QAQO,YARP;AAmBA;;;;AAGA,MAAM,qBAAqB,GAKvB,EALJ;AAOA,OAAM,SAAU,GAAV,CAAc,IAAd,EAA4B,GAA5B,EAA6D,KAA7D,EAA4E;AAChF,QAAM,UAAU,GAAG,IAAI,uBAAJ,CAA4B,IAA5B,EAAkC,GAAlC,CAAnB;AACA,EAAA,qBAAqB,CAAC,IAAD,CAArB,GAA8B;AAAC,IAAA,UAAD;AAAa,IAAA;AAAb,GAA9B;AACD;AAED,OAAM,SAAU,MAAV,CAAiB,IAAjB,EAA6B;AACjC,SAAO,qBAAqB,CAAC,IAAD,CAA5B;AACD;AAOD,OAAM,SAAU,oBAAV,GAA8B;AAClC,SAAO,IAAI,CAAC,qBAAD,CAAX;AACD;AAQD,GAAG,CAAC,OAAD,EAAU,gBAAV,EAA4B,aAA5B,CAAH;AACA,GAAG,CAAC,QAAD,EAAW,iBAAX,EAA8B,cAA9B,CAAH;AACA,GAAG,CAAC,SAAD,EAAY,kBAAZ,EAAgC,eAAhC,CAAH","sourcesContent":["import {Field} from '../channeldef';\nimport {Encoding} from '../encoding';\nimport {NormalizerParams} from '../normalize';\nimport {GenericUnitSpec, NormalizedLayerSpec} from '../spec';\nimport {EncodingFacetMapping} from '../spec/facet';\nimport {keys} from '../util';\nimport {CompositeMarkNormalizer} from './base';\nimport {BOXPLOT, BoxPlot, BOXPLOT_PARTS, BoxPlotConfigMixins, BoxPlotDef, normalizeBoxPlot} from './boxplot';\nimport {\n  ERRORBAND,\n  ErrorBand,\n  ERRORBAND_PARTS,\n  ErrorBandConfigMixins,\n  ErrorBandDef,\n  normalizeErrorBand\n} from './errorband';\nimport {\n  ERRORBAR,\n  ErrorBar,\n  ERRORBAR_PARTS,\n  ErrorBarConfigMixins,\n  ErrorBarDef,\n  ErrorExtraEncoding,\n  normalizeErrorBar\n} from './errorbar';\n\nexport {BoxPlotConfig} from './boxplot';\nexport {ErrorBandConfigMixins} from './errorband';\nexport {ErrorBarConfigMixins} from './errorbar';\n\nexport type CompositeMarkNormalizerRun = (\n  spec: GenericUnitSpec<any, any>,\n  params: NormalizerParams\n) => NormalizedLayerSpec;\n\n/**\n * Registry index for all composite mark's normalizer\n */\nconst compositeMarkRegistry: {\n  [mark: string]: {\n    normalizer: CompositeMarkNormalizer<any>;\n    parts: string[];\n  };\n} = {};\n\nexport function add(mark: string, run: CompositeMarkNormalizerRun, parts: string[]) {\n  const normalizer = new CompositeMarkNormalizer(mark, run);\n  compositeMarkRegistry[mark] = {normalizer, parts};\n}\n\nexport function remove(mark: string) {\n  delete compositeMarkRegistry[mark];\n}\n\nexport type CompositeEncoding = Encoding<Field> & ErrorExtraEncoding<Field>;\nexport type FacetedCompositeEncoding = Encoding<Field> & ErrorExtraEncoding<Field> & EncodingFacetMapping<Field>;\n\nexport type CompositeMark = BoxPlot | ErrorBar | ErrorBand;\n\nexport function getAllCompositeMarks() {\n  return keys(compositeMarkRegistry);\n}\n\nexport type CompositeMarkDef = BoxPlotDef | ErrorBarDef | ErrorBandDef;\n\nexport type CompositeAggregate = BoxPlot | ErrorBar | ErrorBand;\n\nexport interface CompositeMarkConfigMixins extends BoxPlotConfigMixins, ErrorBarConfigMixins, ErrorBandConfigMixins {}\n\nadd(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\nadd(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\nadd(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}