{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\FirstML\\\\AnotherMl.js\";\nimport React from \"react\"; //import * as t_f from '@tensorflow/tfjs-node'\n\nimport * as tf from '@tensorflow/tfjs';\nimport LineGraph from 'C:/NewReactResume/resm/src/Components/ChartJs/Charts.js'; //const model = tf.sequential();\n//this is how you export a variable lmao\n\nexport const theindata = {\n  data: this.state.x\n};\nexport const thelabels = {\n  labels: this.state.labels\n};\nconst model = tf.sequential({\n  layers: [tf.layers.dense({\n    inputShape: [5],\n    units: 5,\n    activation: 'sigmoid'\n  }), tf.layers.dense({\n    units: 5,\n    activation: 'softmax'\n  })]\n});\nvar prediction_;\nexport default class AnotherMl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isTfReady: false,\n      trained: false,\n      isitraining: false,\n      x: null,\n      y: null,\n      loss: null,\n      datasets: null,\n      counter: 0,\n      prediction: null\n    };\n    model.compile({\n      optimizer: 'sgd',\n      loss: 'categoricalCrossentropy',\n      metrics: ['accuracy']\n    });\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n\n    this.setState({\n      isTfReady: true\n    });\n    this.setState({\n      trained: false\n    }); //this.setState({counter:0+1})\n    //this.train()\n    //this.setState({training:true})\n    //const source = { uri: response.uri }\n\n    this.trainTheModel();\n  }\n\n  async trainTheModel() {\n    // Generate dummy data.\n    const data = tf.randomNormal([100, 5]);\n    const labels = tf.randomUniform([100, 5]);\n    this.setState({\n      isitraining: true\n    });\n    this.setState({\n      x: data\n    });\n    this.setState({\n      y: labels\n    });\n    let counter = 0;\n\n    function onBatchEnd(batch, logs) {\n      console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\n      console.log(typeof logs.loss); //this.setState({loss : logs.loss})\n\n      let hi = async () => {}; //  hi()\n      //counter += 1;\n      //isTraining()\n      //)\n\n    }\n\n    function updateChart(logs) {} //console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\n    // Train for 5 epochs with batch size of 32.\n\n\n    model.fit(data, labels, {\n      epochs: 1,\n      batchSize: 10,\n      callbacks: {\n        onBatchEnd\n      }\n    }).then(info => {\n      //this.setState({isitraining:false})\n      console.log('Final accuracy', info.history.acc);\n      this.setState({\n        isitraining: false\n      });\n      this.setState({\n        trained: true\n      });\n      this.thePrediction();\n    }); //this.thePrediction()\n  }\n\n  async thePrediction() {\n    if (this.state.trained) {\n      prediction_ = await model.predict(tf.randomNormal([3, 5])); //console.log(prediction_?\"yes\":\"no\")\n      //console.log(prediction_.print())\n\n      this.setState({\n        prediction: prediction_.toString(prediction_.print())\n      }); //this.setState({prediction: prediction_.print()})\n      //console.log(prediction_.print())\n    }\n  }\n\n  render() {\n    const {\n      isTfReady,\n      trained,\n      isitraining,\n      x,\n      y,\n      prediction\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, this.state.isTfReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Yes Ready\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Not Ready\"), this.state.isitraining ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Yes Training\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Not Training\"), this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Yes Trained\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Not Trained\"), this.state.prediction && this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, JSON.stringify(this.state.prediction), \" \") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Not\"), JSON.stringify(this.state.x), React.createElement(LineGraph, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/AnotherMl.js"],"names":["React","tf","LineGraph","theindata","data","state","x","thelabels","labels","model","sequential","layers","dense","inputShape","units","activation","prediction_","AnotherMl","Component","constructor","props","isTfReady","trained","isitraining","y","loss","datasets","counter","prediction","compile","optimizer","metrics","componentDidMount","ready","setState","trainTheModel","randomNormal","randomUniform","onBatchEnd","batch","logs","console","log","acc","hi","updateChart","fit","epochs","batchSize","callbacks","then","info","history","thePrediction","predict","toString","print","render","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n//import * as t_f from '@tensorflow/tfjs-node'\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport LineGraph from 'C:/NewReactResume/resm/src/Components/ChartJs/Charts.js'\r\n\r\n//const model = tf.sequential();\r\n//this is how you export a variable lmao\r\nexport const theindata = {data:this.state.x}\r\nexport const thelabels = {labels:this.state.labels}\r\n\r\nconst model = tf.sequential({\r\n    layers: [\r\n      tf.layers.dense({inputShape: [5], units: 5, activation: 'sigmoid'}),\r\n      tf.layers.dense({units: 5, activation: 'softmax'}),\r\n    ]\r\n   });\r\nvar prediction_;\r\n\r\nexport default class AnotherMl extends React.Component{\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        model.compile({\r\n            optimizer: 'sgd',\r\n            loss: 'categoricalCrossentropy',\r\n            metrics: ['accuracy']\r\n          });\r\n\r\n      }\r\n\r\n\r\n        state = {\r\n            isTfReady:false,\r\n            trained:false,\r\n            isitraining: false,\r\n            x : null, \r\n            y : null,\r\n            loss: null,\r\n            datasets : null, \r\n            counter : 0,\r\n            prediction:null\r\n        }  \r\n    \r\n    async componentDidMount() {\r\n        // Wait for tf to be ready.\r\n        await tf.ready();\r\n        // Signal to the app that tensorflow.js can now be used.\r\n        this.setState({isTfReady: true})\r\n        this.setState({trained: false})\r\n        //this.setState({counter:0+1})\r\n        //this.train()\r\n        //this.setState({training:true})\r\n        //const source = { uri: response.uri }\r\n        this.trainTheModel()\r\n\r\n    }\r\n    \r\n    \r\n\r\n    async trainTheModel(){\r\n\r\n\r\n        // Generate dummy data.\r\n        const data = tf.randomNormal([100, 5]);\r\n        const labels = tf.randomUniform([100, 5]);\r\n        this.setState({isitraining:true})\r\n        this.setState({x:data})\r\n        this.setState({y:labels})\r\n        let counter = 0;\r\n\r\n        function onBatchEnd(batch, logs) {\r\n            \r\n            console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\r\n            console.log(typeof(logs.loss))\r\n            //this.setState({loss : logs.loss})\r\n            let hi = async () => {\r\n                \r\n                \r\n            }\r\n            //  hi()\r\n            //counter += 1;\r\n            //isTraining()\r\n            //)\r\n        }\r\n\r\n        function updateChart(logs) {\r\n            \r\n            //console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\r\n        }\r\n\r\n        // Train for 5 epochs with batch size of 32.\r\n        model.fit(data, labels, {\r\n        epochs: 1,\r\n        batchSize: 10,\r\n        callbacks: {onBatchEnd}\r\n        }).then(info => {\r\n            //this.setState({isitraining:false})\r\n            console.log('Final accuracy', info.history.acc);\r\n            this.setState({isitraining:false})\r\n            this.setState({trained:true})\r\n            this.thePrediction()\r\n        });\r\n\r\n            //this.thePrediction()\r\n        \r\n    }\r\n\r\n    async thePrediction(){\r\n\r\n        if(this.state.trained)\r\n            {\r\n                prediction_ = await model.predict(tf.randomNormal([3, 5]));\r\n                //console.log(prediction_?\"yes\":\"no\")\r\n                //console.log(prediction_.print())\r\n                this.setState({prediction: prediction_.toString(prediction_.print())})\r\n                \r\n\r\n                //this.setState({prediction: prediction_.print()})\r\n                //console.log(prediction_.print())\r\n            }\r\n    }\r\n\r\n    \r\n    render()\r\n        {\r\n            const { isTfReady, trained, isitraining,  x, y, prediction} = this.state\r\n            \r\n            return (\r\n\r\n            <div>\r\n                \r\n                {this.state.isTfReady?<p>Yes Ready</p>:<p>Not Ready</p>}\r\n                {this.state.isitraining?<p>Yes Training</p>:<p>Not Training</p>}\r\n                {this.state.trained?<p>Yes Trained</p>:<p>Not Trained</p>}\r\n                {this.state.prediction && this.state.trained? <p>{JSON.stringify(this.state.prediction)} </p>: <p>Not</p>}\r\n                {JSON.stringify(this.state.x)}\r\n                <LineGraph\r\n                    />\r\n            </div>\r\n            );\r\n        }\r\n    \r\n\r\n}"]},"metadata":{},"sourceType":"module"}