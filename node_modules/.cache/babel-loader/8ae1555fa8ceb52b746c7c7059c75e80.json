{"ast":null,"code":"import { isObject } from 'vega-util';\nexport function Entry(type, value, params, parent) {\n  this.id = -1;\n  this.type = type;\n  this.value = value;\n  this.params = params;\n  if (parent) this.parent = parent;\n}\nexport function entry(type, value, params, parent) {\n  return new Entry(type, value, params, parent);\n}\nexport function operator(value, params) {\n  return entry('operator', value, params);\n} // -----\n\nexport function ref(op) {\n  var ref = {\n    $ref: op.id\n  }; // if operator not yet registered, cache ref to resolve later\n\n  if (op.id < 0) (op.refs = op.refs || []).push(ref);\n  return ref;\n}\nexport var tupleidRef = {\n  $tupleid: 1,\n  toString: function () {\n    return ':_tupleid_:';\n  }\n};\nexport function fieldRef(field, name) {\n  return name ? {\n    $field: field,\n    $name: name\n  } : {\n    $field: field\n  };\n}\nexport var keyFieldRef = fieldRef('key');\nexport function compareRef(fields, orders) {\n  return {\n    $compare: fields,\n    $order: orders\n  };\n}\nexport function keyRef(fields, flat) {\n  var ref = {\n    $key: fields\n  };\n  if (flat) ref.$flat = true;\n  return ref;\n} // -----\n\nexport var Ascending = 'ascending';\nexport var Descending = 'descending';\nexport function sortKey(sort) {\n  return !isObject(sort) ? '' : (sort.order === Descending ? '-' : '+') + aggrField(sort.op, sort.field);\n}\nexport function aggrField(op, field) {\n  return (op && op.signal ? '$' + op.signal : op || '') + (op && field ? '_' : '') + (field && field.signal ? '$' + field.signal : field || '');\n} // -----\n\nexport var Scope = 'scope';\nexport var View = 'view';\nexport function isSignal(_) {\n  return _ && _.signal;\n}\nexport function isExpr(_) {\n  return _ && _.expr;\n}\nexport function hasSignal(_) {\n  if (isSignal(_)) return true;\n  if (isObject(_)) for (var key in _) {\n    if (hasSignal(_[key])) return true;\n  }\n  return false;\n}\nexport function value(specValue, defaultValue) {\n  return specValue != null ? specValue : defaultValue;\n}\nexport function deref(v) {\n  return v && v.signal || v;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-parser/src/util.js"],"names":["isObject","Entry","type","value","params","parent","id","entry","operator","ref","op","$ref","refs","push","tupleidRef","$tupleid","toString","fieldRef","field","name","$field","$name","keyFieldRef","compareRef","fields","orders","$compare","$order","keyRef","flat","$key","$flat","Ascending","Descending","sortKey","sort","order","aggrField","signal","Scope","View","isSignal","_","isExpr","expr","hasSignal","key","specValue","defaultValue","deref","v"],"mappings":"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","sourcesContent":["import {isObject} from 'vega-util';\n\nexport function Entry(type, value, params, parent) {\n  this.id = -1;\n  this.type = type;\n  this.value = value;\n  this.params = params;\n  if (parent) this.parent = parent;\n}\n\nexport function entry(type, value, params, parent) {\n  return new Entry(type, value, params, parent);\n}\n\nexport function operator(value, params) {\n  return entry('operator', value, params);\n}\n\n// -----\n\nexport function ref(op) {\n  var ref = {$ref: op.id};\n  // if operator not yet registered, cache ref to resolve later\n  if (op.id < 0) (op.refs = op.refs || []).push(ref);\n  return ref;\n}\n\nexport var tupleidRef = {\n  $tupleid: 1,\n  toString: function() { return ':_tupleid_:'; }\n};\n\nexport function fieldRef(field, name) {\n  return name ? {$field: field, $name: name} : {$field: field};\n}\n\nexport var keyFieldRef = fieldRef('key');\n\nexport function compareRef(fields, orders) {\n  return {$compare: fields, $order: orders};\n}\n\nexport function keyRef(fields, flat) {\n  var ref = {$key: fields};\n  if (flat) ref.$flat = true;\n  return ref;\n}\n\n// -----\n\nexport var Ascending  = 'ascending';\n\nexport var Descending = 'descending';\n\nexport function sortKey(sort) {\n  return !isObject(sort) ? ''\n    : (sort.order === Descending ? '-' : '+')\n      + aggrField(sort.op, sort.field);\n}\n\nexport function aggrField(op, field) {\n  return (op && op.signal ? '$' + op.signal : op || '')\n    + (op && field ? '_' : '')\n    + (field && field.signal ? '$' + field.signal : field || '');\n}\n\n// -----\n\nexport var Scope = 'scope';\n\nexport var View = 'view';\n\nexport function isSignal(_) {\n  return _ && _.signal;\n}\n\nexport function isExpr(_) {\n  return _ && _.expr;\n}\n\nexport function hasSignal(_) {\n  if (isSignal(_)) return true;\n  if (isObject(_)) for (var key in _) {\n    if (hasSignal(_[key])) return true;\n  }\n  return false;\n}\n\nexport function value(specValue, defaultValue) {\n  return specValue != null ? specValue : defaultValue;\n}\n\nexport function deref(v) {\n  return v && v.signal || v;\n}\n"]},"metadata":{},"sourceType":"module"}