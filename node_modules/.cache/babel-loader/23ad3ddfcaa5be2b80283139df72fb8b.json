{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\SliderInput\\\\SliderInput.js\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Box from '@material-ui/core/Box';\nimport Slider from \"@material-ui/core/Slider\";\nimport Tracks from '@material-ui/core/Slider';\nimport SliderHandle from \"./SLider.Handle\";\nimport SliderTrack from \"./Slider.Track\";\n\nclass ControlledSlider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      values: [this.props.defaultValue],\n      update: [this.props.defaultValue]\n    };\n\n    this.onUpdate = update => {\n      this.setState({\n        update\n      }); // Use the first value from the array because this only supports one handle\n\n      this.props.onUpdate && this.props.onUpdate(update[0]);\n    };\n\n    this.onChange = values => {\n      this.setState({\n        values\n      }); // Use the first value from the array because this only supports one handle\n\n      this.props.onChange && this.props.onChange(values[0]);\n    };\n\n    this.onStart = values => {\n      this.setState({\n        values\n      }); // Use the first value from the array because this only supports one handle\n\n      this.props.onSlideStart && this.props.onSlideStart(values[0]);\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // Need this to dynamically update state from props\n    if (props.defaultValue !== state.values[0]) {\n      return {\n        values: [props.defaultValue]\n      };\n    } // Return null if the state hasn't changed\n\n\n    return null;\n  }\n\n  render() {\n    const {\n      values\n    } = this.state;\n    const {\n      min,\n      max,\n      step,\n      onFocus,\n      onBlur,\n      ...restProps\n    } = this.props;\n    return React.createElement(Box, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Slider, Object.assign({\n      mode: 1,\n      step: step,\n      domain: [min, max],\n      onUpdate: this.onUpdate,\n      onChange: this.onChange,\n      onSlideStart: this.onSlideStart,\n      values: values\n    }, restProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Box, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, ({\n      getRailProps\n    }) => React.createElement(StyledRail, Object.assign({}, getRailProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }))), React.createElement(Box, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, ({\n      handles,\n      getHandleProps\n    }) => React.createElement(\"div\", {\n      className: \"slider-handles\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, handles.map(handle => React.createElement(SliderHandle, {\n      key: handle.id,\n      handle: handle,\n      domain: [this.props.min, this.props.max],\n      getHandleProps: getHandleProps,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })))), React.createElement(Tracks, {\n      right: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, ({\n      tracks,\n      getTrackProps\n    }) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, tracks.map(({\n      id,\n      source,\n      target\n    }) => React.createElement(SliderTrack, {\n      key: id,\n      source: source,\n      target: target,\n      getTrackProps: getTrackProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst Container = styled.div`\n  height: 24px;\n  padding-top: 12px;\n  width: 100%;\n`;\nconst StyledSlider = styled(Slider)`\n  position: relative;\n  width: 100%;\n`;\nconst StyledRail = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 14px;\n  border-radius: 7px;\n  cursor: pointer;\n  background-color: #cbcbcb;\n`;\nexport default ControlledSlider;","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/SliderInput/SliderInput.js"],"names":["React","styled","Box","Slider","Tracks","SliderHandle","SliderTrack","ControlledSlider","Component","state","values","props","defaultValue","update","onUpdate","setState","onChange","onStart","onSlideStart","getDerivedStateFromProps","render","min","max","step","onFocus","onBlur","restProps","getRailProps","handles","getHandleProps","map","handle","id","tracks","getTrackProps","source","target","Container","div","StyledSlider","StyledRail"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Box from '@material-ui/core/Box'\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Tracks from '@material-ui/core/Slider'\r\nimport SliderHandle from \"./SLider.Handle\";\r\nimport SliderTrack from \"./Slider.Track\";\r\n\r\nclass ControlledSlider extends React.Component {\r\n  // Both values need to be arrays\r\n  state = {\r\n    values: [this.props.defaultValue],\r\n    update: [this.props.defaultValue]\r\n  };\r\n\r\n  onUpdate = update => {\r\n    this.setState({ update });\r\n    // Use the first value from the array because this only supports one handle\r\n    this.props.onUpdate && this.props.onUpdate(update[0]);\r\n  };\r\n\r\n  onChange = values => {\r\n    this.setState({ values });\r\n    // Use the first value from the array because this only supports one handle\r\n    this.props.onChange && this.props.onChange(values[0]);\r\n  };\r\n\r\n  onStart = values => {\r\n    this.setState({ values });\r\n    // Use the first value from the array because this only supports one handle\r\n    this.props.onSlideStart && this.props.onSlideStart(values[0]);\r\n  };\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    // Need this to dynamically update state from props\r\n    if (props.defaultValue !== state.values[0]) {\r\n      return {\r\n        values: [props.defaultValue]\r\n      };\r\n    }\r\n    // Return null if the state hasn't changed\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const { values } = this.state;\r\n    const { min, max, step, onFocus, onBlur, ...restProps } = this.props;\r\n    return (\r\n      <Box>\r\n        <Slider\r\n          mode={1}\r\n          step={step}\r\n          domain={[min, max]}\r\n          onUpdate={this.onUpdate}\r\n          onChange={this.onChange}\r\n          onSlideStart={this.onSlideStart}\r\n          values={values}\r\n          {...restProps}\r\n        >\r\n          <Box>\r\n            {({ getRailProps }) => <StyledRail {...getRailProps()} />}\r\n          </Box>\r\n          <Box>\r\n            {({ handles, getHandleProps }) => (\r\n              <div className=\"slider-handles\">\r\n                {handles.map(handle => (\r\n                  <SliderHandle\r\n                    key={handle.id}\r\n                    handle={handle}\r\n                    domain={[this.props.min, this.props.max]}\r\n                    getHandleProps={getHandleProps}\r\n                    onFocus={onFocus}\r\n                    onBlur={onBlur}\r\n                  />\r\n                ))}\r\n              </div>\r\n            )}\r\n          </Box>\r\n          <Tracks right={false}>\r\n            {({ tracks, getTrackProps }) => (\r\n              <div>\r\n                {tracks.map(({ id, source, target }) => (\r\n                  <SliderTrack\r\n                    key={id}\r\n                    source={source}\r\n                    target={target}\r\n                    getTrackProps={getTrackProps}\r\n                  />\r\n                ))}\r\n              </div>\r\n            )}\r\n          </Tracks>\r\n        </Slider>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nconst Container = styled.div`\r\n  height: 24px;\r\n  padding-top: 12px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledSlider = styled(Slider)`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledRail = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 14px;\r\n  border-radius: 7px;\r\n  cursor: pointer;\r\n  background-color: #cbcbcb;\r\n`;\r\nexport default ControlledSlider;\r\n"]},"metadata":{},"sourceType":"module"}