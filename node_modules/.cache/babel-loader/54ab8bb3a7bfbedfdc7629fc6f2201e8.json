{"ast":null,"code":"import { AxisRole, LegendRole, TitleRole, FrameRole, ScopeRole, RowHeader, RowFooter, RowTitle, ColHeader, ColFooter, ColTitle, Top, Bottom, Left, Right, Fit, FitX, FitY, Pad, None, Padding } from './constants';\nimport { axisLayout, isYAxis } from './layout/axis';\nimport { gridLayout, trellisLayout } from './layout/grid';\nimport { legendLayout, legendParams } from './layout/legend';\nimport { titleLayout } from './layout/title';\nimport { Transform } from 'vega-dataflow';\nimport { Bounds } from 'vega-scenegraph';\nimport { inherits } from 'vega-util';\n/**\n * Layout view elements such as axes and legends.\n * Also performs size adjustments.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.mark - Scenegraph mark of groups to layout.\n */\n\nexport default function ViewLayout(params) {\n  Transform.call(this, null, params);\n}\nvar prototype = inherits(ViewLayout, Transform);\n\nprototype.transform = function (_, pulse) {\n  // TODO incremental update, output?\n  var view = pulse.dataflow;\n\n  _.mark.items.forEach(function (group) {\n    if (_.layout) trellisLayout(view, group, _.layout);\n    layoutGroup(view, group, _);\n  });\n\n  if (_.modified()) pulse.reflow();\n  return pulse;\n};\n\nfunction layoutGroup(view, group, _) {\n  var items = group.items,\n      width = Math.max(0, group.width || 0),\n      height = Math.max(0, group.height || 0),\n      viewBounds = new Bounds().set(0, 0, width, height),\n      xBounds = viewBounds.clone(),\n      yBounds = viewBounds.clone(),\n      legends = [],\n      title,\n      mark,\n      orient,\n      b,\n      i,\n      n; // layout axes, gather legends, collect bounds\n\n  for (i = 0, n = items.length; i < n; ++i) {\n    mark = items[i];\n\n    switch (mark.role) {\n      case AxisRole:\n        b = isYAxis(mark) ? xBounds : yBounds;\n        b.union(axisLayout(view, mark, width, height));\n        break;\n\n      case TitleRole:\n        title = mark;\n        break;\n\n      case LegendRole:\n        legends.push(legendLayout(view, mark));\n        break;\n\n      case FrameRole:\n      case ScopeRole:\n      case RowHeader:\n      case RowFooter:\n      case RowTitle:\n      case ColHeader:\n      case ColFooter:\n      case ColTitle:\n        xBounds.union(mark.bounds);\n        yBounds.union(mark.bounds);\n        break;\n\n      default:\n        viewBounds.union(mark.bounds);\n    }\n  } // layout legends, adjust viewBounds\n\n\n  if (legends.length) {\n    // group legends by orient\n    const l = {};\n    legends.forEach(item => {\n      orient = item.orient || Right;\n      if (orient !== None) (l[orient] || (l[orient] = [])).push(item);\n    }); // perform grid layout for each orient group\n\n    for (let orient in l) {\n      const g = l[orient];\n      gridLayout(view, g, legendParams(g, orient, _.legends, xBounds, yBounds, width, height));\n    } // update view bounds\n\n\n    legends.forEach(item => {\n      const b = item.bounds;\n\n      if (!b.equals(item._bounds)) {\n        item.bounds = item._bounds;\n        view.dirty(item); // dirty previous location\n\n        item.bounds = b;\n        view.dirty(item);\n      }\n\n      if (_.autosize && _.autosize.type === Fit) {\n        // For autosize fit, incorporate the orthogonal dimension only.\n        // Legends that overrun the chart area will then be clipped;\n        // otherwise the chart area gets reduced to nothing!\n        switch (item.orient) {\n          case Left:\n          case Right:\n            viewBounds.add(b.x1, 0).add(b.x2, 0);\n            break;\n\n          case Top:\n          case Bottom:\n            viewBounds.add(0, b.y1).add(0, b.y2);\n        }\n      } else {\n        viewBounds.union(b);\n      }\n    });\n  } // combine bounding boxes\n\n\n  viewBounds.union(xBounds).union(yBounds); // layout title, adjust bounds\n\n  if (title) {\n    viewBounds.union(titleLayout(view, title, width, height, viewBounds));\n  } // override aggregated view bounds if content is clipped\n\n\n  if (group.clip) {\n    viewBounds.set(0, 0, group.width || 0, group.height || 0);\n  } // perform size adjustment\n\n\n  viewSizeLayout(view, group, viewBounds, _);\n}\n\nfunction viewSizeLayout(view, group, viewBounds, _) {\n  var auto = _.autosize || {},\n      type = auto.type,\n      viewWidth = view._width,\n      viewHeight = view._height,\n      padding = view.padding();\n  if (view._autosize < 1 || !type) return;\n  var width = Math.max(0, group.width || 0),\n      left = Math.max(0, Math.ceil(-viewBounds.x1)),\n      right = Math.max(0, Math.ceil(viewBounds.x2 - width)),\n      height = Math.max(0, group.height || 0),\n      top = Math.max(0, Math.ceil(-viewBounds.y1)),\n      bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));\n\n  if (auto.contains === Padding) {\n    viewWidth -= padding.left + padding.right;\n    viewHeight -= padding.top + padding.bottom;\n  }\n\n  if (type === None) {\n    left = 0;\n    top = 0;\n    width = viewWidth;\n    height = viewHeight;\n  } else if (type === Fit) {\n    width = Math.max(0, viewWidth - left - right);\n    height = Math.max(0, viewHeight - top - bottom);\n  } else if (type === FitX) {\n    width = Math.max(0, viewWidth - left - right);\n    viewHeight = height + top + bottom;\n  } else if (type === FitY) {\n    viewWidth = width + left + right;\n    height = Math.max(0, viewHeight - top - bottom);\n  } else if (type === Pad) {\n    viewWidth = width + left + right;\n    viewHeight = height + top + bottom;\n  }\n\n  view._resizeView(viewWidth, viewHeight, width, height, [left, top], auto.resize);\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-view-transforms/src/ViewLayout.js"],"names":["AxisRole","LegendRole","TitleRole","FrameRole","ScopeRole","RowHeader","RowFooter","RowTitle","ColHeader","ColFooter","ColTitle","Top","Bottom","Left","Right","Fit","FitX","FitY","Pad","None","Padding","axisLayout","isYAxis","gridLayout","trellisLayout","legendLayout","legendParams","titleLayout","Transform","Bounds","inherits","ViewLayout","params","call","prototype","transform","_","pulse","view","dataflow","mark","items","forEach","group","layout","layoutGroup","modified","reflow","width","Math","max","height","viewBounds","set","xBounds","clone","yBounds","legends","title","orient","b","i","n","length","role","union","push","bounds","l","item","g","equals","_bounds","dirty","autosize","type","add","x1","x2","y1","y2","clip","viewSizeLayout","auto","viewWidth","_width","viewHeight","_height","padding","_autosize","left","ceil","right","top","bottom","contains","_resizeView","resize"],"mappings":"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","sourcesContent":["import {\n  AxisRole, LegendRole, TitleRole, FrameRole, ScopeRole,\n  RowHeader, RowFooter, RowTitle, ColHeader, ColFooter, ColTitle,\n  Top, Bottom, Left, Right,\n  Fit, FitX, FitY, Pad, None, Padding\n} from './constants';\n\nimport {axisLayout, isYAxis} from './layout/axis';\nimport {gridLayout, trellisLayout} from './layout/grid';\nimport {legendLayout, legendParams} from './layout/legend';\nimport {titleLayout} from './layout/title';\n\nimport {Transform} from 'vega-dataflow';\nimport {Bounds} from 'vega-scenegraph';\nimport {inherits} from 'vega-util';\n\n/**\n * Layout view elements such as axes and legends.\n * Also performs size adjustments.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.mark - Scenegraph mark of groups to layout.\n */\nexport default function ViewLayout(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype = inherits(ViewLayout, Transform);\n\nprototype.transform = function(_, pulse) {\n  // TODO incremental update, output?\n  var view = pulse.dataflow;\n  _.mark.items.forEach(function(group) {\n    if (_.layout) trellisLayout(view, group, _.layout);\n    layoutGroup(view, group, _);\n  });\n  if (_.modified()) pulse.reflow();\n  return pulse;\n};\n\nfunction layoutGroup(view, group, _) {\n  var items = group.items,\n      width = Math.max(0, group.width || 0),\n      height = Math.max(0, group.height || 0),\n      viewBounds = new Bounds().set(0, 0, width, height),\n      xBounds = viewBounds.clone(),\n      yBounds = viewBounds.clone(),\n      legends = [], title,\n      mark, orient, b, i, n;\n\n  // layout axes, gather legends, collect bounds\n  for (i=0, n=items.length; i<n; ++i) {\n    mark = items[i];\n    switch (mark.role) {\n      case AxisRole:\n        b = isYAxis(mark) ? xBounds : yBounds;\n        b.union(axisLayout(view, mark, width, height));\n        break;\n      case TitleRole:\n        title = mark;\n        break;\n      case LegendRole:\n        legends.push(legendLayout(view, mark));\n        break;\n      case FrameRole:\n      case ScopeRole:\n      case RowHeader:\n      case RowFooter:\n      case RowTitle:\n      case ColHeader:\n      case ColFooter:\n      case ColTitle:\n        xBounds.union(mark.bounds);\n        yBounds.union(mark.bounds);\n        break;\n      default:\n        viewBounds.union(mark.bounds);\n    }\n  }\n\n  // layout legends, adjust viewBounds\n  if (legends.length) {\n    // group legends by orient\n    const l = {};\n    legends.forEach(item => {\n      orient = item.orient || Right;\n      if (orient !== None) (l[orient] || (l[orient] = [])).push(item);\n    });\n\n    // perform grid layout for each orient group\n    for (let orient in l) {\n      const g = l[orient];\n      gridLayout(view, g, legendParams(\n        g, orient, _.legends, xBounds, yBounds, width, height\n      ));\n    }\n\n    // update view bounds\n    legends.forEach(item => {\n      const b = item.bounds;\n\n      if (!b.equals(item._bounds)) {\n        item.bounds = item._bounds;\n        view.dirty(item); // dirty previous location\n        item.bounds = b;\n        view.dirty(item);\n      }\n\n      if (_.autosize && _.autosize.type === Fit) {\n        // For autosize fit, incorporate the orthogonal dimension only.\n        // Legends that overrun the chart area will then be clipped;\n        // otherwise the chart area gets reduced to nothing!\n        switch(item.orient) {\n          case Left:\n          case Right:\n            viewBounds.add(b.x1, 0).add(b.x2, 0);\n            break;\n          case Top:\n          case Bottom:\n            viewBounds.add(0, b.y1).add(0, b.y2);\n        }\n      } else {\n        viewBounds.union(b);\n      }\n    });\n  }\n\n  // combine bounding boxes\n  viewBounds.union(xBounds).union(yBounds);\n\n  // layout title, adjust bounds\n  if (title) {\n    viewBounds.union(titleLayout(view, title, width, height, viewBounds));\n  }\n\n  // override aggregated view bounds if content is clipped\n  if (group.clip) {\n    viewBounds.set(0, 0, group.width || 0, group.height || 0);\n  }\n\n  // perform size adjustment\n  viewSizeLayout(view, group, viewBounds, _);\n}\n\nfunction viewSizeLayout(view, group, viewBounds, _) {\n  var auto = _.autosize || {},\n      type = auto.type,\n      viewWidth = view._width,\n      viewHeight = view._height,\n      padding = view.padding();\n\n  if (view._autosize < 1 || !type) return;\n\n  var width  = Math.max(0, group.width || 0),\n      left   = Math.max(0, Math.ceil(-viewBounds.x1)),\n      right  = Math.max(0, Math.ceil(viewBounds.x2 - width)),\n      height = Math.max(0, group.height || 0),\n      top    = Math.max(0, Math.ceil(-viewBounds.y1)),\n      bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));\n\n  if (auto.contains === Padding) {\n    viewWidth -= padding.left + padding.right;\n    viewHeight -= padding.top + padding.bottom;\n  }\n\n  if (type === None) {\n    left = 0;\n    top = 0;\n    width = viewWidth;\n    height = viewHeight;\n  }\n\n  else if (type === Fit) {\n    width = Math.max(0, viewWidth - left - right);\n    height = Math.max(0, viewHeight - top - bottom);\n  }\n\n  else if (type === FitX) {\n    width = Math.max(0, viewWidth - left - right);\n    viewHeight = height + top + bottom;\n  }\n\n  else if (type === FitY) {\n    viewWidth = width + left + right;\n    height = Math.max(0, viewHeight - top - bottom);\n  }\n\n  else if (type === Pad) {\n    viewWidth = width + left + right;\n    viewHeight = height + top + bottom;\n  }\n\n  view._resizeView(\n    viewWidth, viewHeight,\n    width, height,\n    [left, top],\n    auto.resize\n  );\n}\n"]},"metadata":{},"sourceType":"module"}