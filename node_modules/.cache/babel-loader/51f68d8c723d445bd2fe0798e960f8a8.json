{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst d3_format_1 = require(\"d3-format\");\n\nconst d3_selection_1 = require(\"d3-selection\");\n\nconst glamor_1 = require(\"glamor\");\n\nconst render_utils_1 = require(\"./render_utils\");\n/**\n * Renders a table\n *\n * ```js\n * const headers = [\n *  'Col 1',\n *  'Col 2',\n *  'Col 3',\n * ];\n *\n * const values = [\n *  [1, 2, 3],\n *  ['4', '5', '6'],\n *  ['strong>7</strong>', true, false],\n * ];\n *\n * const surface = { name: 'Table', tab: 'Charts' };\n * tfvis.render.table(surface, { headers, values });\n * ```\n *\n * @param opts.fontSize fontSize in pixels for text in the chart.\n *\n */\n\n/** @doc {heading: 'Charts', namespace: 'render'} */\n\n\nfunction table(container, // tslint:disable-next-line:no-any\ndata, opts = {}) {\n  if (data && data.headers == null) {\n    throw new Error('Data to render must have a \"headers\" property');\n  }\n\n  if (data && data.values == null) {\n    throw new Error('Data to render must have a \"values\" property');\n  }\n\n  const drawArea = render_utils_1.getDrawArea(container);\n  const options = Object.assign({}, defaultOpts, opts);\n  let table = d3_selection_1.select(drawArea).select('table.tf-table');\n  const tableStyle = glamor_1.css({\n    fontSize: options.fontSize || '.875rem',\n    width: '100%',\n    maxWidth: '64rem',\n    marginRight: 'auto',\n    marginLeft: 'auto'\n  }); // If a table is not already present on this element add one\n\n  if (table.size() === 0) {\n    table = d3_selection_1.select(drawArea).append('table');\n    table.attr('class', ` ${tableStyle} tf-table`);\n    table.append('thead').append('tr');\n    table.append('tbody');\n  }\n\n  if (table.size() !== 1) {\n    throw new Error('Error inserting table');\n  } //\n  // Add the reader row\n  //\n\n\n  const headerRowStyle = glamor_1.css({\n    fontWeight: '600',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: '1px',\n    borderColor: 'rgba( 0, 0, 0, .2 )',\n    textAlign: 'left',\n    paddingBottom: '1rem',\n    paddingRight: '1rem',\n    backgroundColor: '#fff'\n  });\n  const headers = table.select('thead').select('tr').selectAll('th').data(data.headers);\n  const headersEnter = headers.enter().append('th').attr('class', `${headerRowStyle}`);\n  headers.merge(headersEnter).html(d => d);\n  headers.exit().remove(); //\n  // Add the data rows\n  //\n\n  const format = d3_format_1.format(',.4~f');\n  const rows = table.select('tbody').selectAll('tr').data(data.values);\n  const rowsEnter = rows.enter().append('tr'); // Nested selection to add individual cells\n\n  const cellStyle = glamor_1.css({\n    padding: '0.25rem',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: '1px',\n    borderColor: 'rgba( 0, 0, 0, .2 )'\n  });\n  const cells = rows.merge(rowsEnter).selectAll('td').data(d => d);\n  const cellsEnter = cells.enter().append('td').attr('class', `${cellStyle}`);\n  cells.merge(cellsEnter).html(d => typeof d === 'number' ? format(d) : d);\n  cells.exit().remove();\n  rows.exit().remove();\n}\n\nexports.table = table;\nconst defaultOpts = {\n  fontSize: 14\n};","map":{"version":3,"sources":["../../src/render/table.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {format as d3Format} from 'd3-format';\nimport {select as d3Select} from 'd3-selection';\nimport {css} from 'glamor';\nimport {Drawable, TableData} from '../types';\nimport {getDrawArea} from './render_utils';\n\n/**\n * Renders a table\n *\n * ```js\n * const headers = [\n *  'Col 1',\n *  'Col 2',\n *  'Col 3',\n * ];\n *\n * const values = [\n *  [1, 2, 3],\n *  ['4', '5', '6'],\n *  ['strong>7</strong>', true, false],\n * ];\n *\n * const surface = { name: 'Table', tab: 'Charts' };\n * tfvis.render.table(surface, { headers, values });\n * ```\n *\n * @param opts.fontSize fontSize in pixels for text in the chart.\n *\n */\n/** @doc {heading: 'Charts', namespace: 'render'} */\nexport function table(\n    container: Drawable,\n    // tslint:disable-next-line:no-any\n    data: TableData, opts: {fontSize?: number} = {}) {\n  if (data && data.headers == null) {\n    throw new Error('Data to render must have a \"headers\" property');\n  }\n\n  if (data && data.values == null) {\n    throw new Error('Data to render must have a \"values\" property');\n  }\n\n  const drawArea = getDrawArea(container);\n\n  const options = Object.assign({}, defaultOpts, opts);\n\n  let table = d3Select(drawArea).select('table.tf-table');\n\n  const tableStyle = css({\n    fontSize: options.fontSize || '.875rem',\n    width: '100%',\n    maxWidth: '64rem',\n    marginRight: 'auto',\n    marginLeft: 'auto',\n  });\n\n  // If a table is not already present on this element add one\n  if (table.size() === 0) {\n    table = d3Select(drawArea).append('table');\n\n    table.attr('class', ` ${tableStyle} tf-table`);\n\n    table.append('thead').append('tr');\n    table.append('tbody');\n  }\n\n  if (table.size() !== 1) {\n    throw new Error('Error inserting table');\n  }\n\n  //\n  // Add the reader row\n  //\n  const headerRowStyle = css({\n    fontWeight: '600',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: '1px',\n    borderColor: 'rgba( 0, 0, 0, .2 )',\n    textAlign: 'left',\n    paddingBottom: '1rem',\n    paddingRight: '1rem',\n    backgroundColor: '#fff',\n  });\n  const headers =\n      table.select('thead').select('tr').selectAll('th').data(data.headers);\n  const headersEnter =\n      headers.enter().append('th').attr('class', `${headerRowStyle}`);\n  headers.merge(headersEnter).html(d => d);\n\n  headers.exit().remove();\n\n  //\n  // Add the data rows\n  //\n  const format = d3Format(',.4~f');\n\n  const rows = table.select('tbody').selectAll('tr').data(data.values);\n  const rowsEnter = rows.enter().append('tr');\n\n  // Nested selection to add individual cells\n  const cellStyle = css({\n    padding: '0.25rem',\n    borderBottomStyle: 'solid',\n    borderBottomWidth: '1px',\n    borderColor: 'rgba( 0, 0, 0, .2 )',\n  });\n  const cells = rows.merge(rowsEnter).selectAll('td').data(d => d);\n  const cellsEnter = cells.enter().append('td').attr('class', `${cellStyle}`);\n  cells.merge(cellsEnter).html(d => typeof d === 'number' ? format(d) : d);\n\n  cells.exit().remove();\n  rows.exit().remove();\n}\n\nconst defaultOpts = {\n  fontSize: 14,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}