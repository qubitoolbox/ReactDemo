{"ast":null,"code":"import Pulse from './Pulse';\nimport { error, inherits, isArray } from 'vega-util';\n/**\n * Represents a set of multiple pulses. Used as input for operators\n * that accept multiple pulses at a time. Contained pulses are\n * accessible via the public \"pulses\" array property. This pulse doe\n * not carry added, removed or modified tuples directly. However,\n * the visit method can be used to traverse all such tuples contained\n * in sub-pulses with a timestamp matching this parent multi-pulse.\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The timestamp.\n * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n */\n\nexport default function MultiPulse(dataflow, stamp, pulses, encode) {\n  var p = this,\n      c = 0,\n      pulse,\n      hash,\n      i,\n      n,\n      f;\n  this.dataflow = dataflow;\n  this.stamp = stamp;\n  this.fields = null;\n  this.encode = encode || null;\n  this.pulses = pulses;\n\n  for (i = 0, n = pulses.length; i < n; ++i) {\n    pulse = pulses[i];\n    if (pulse.stamp !== stamp) continue;\n\n    if (pulse.fields) {\n      hash = p.fields || (p.fields = {});\n\n      for (f in pulse.fields) {\n        hash[f] = 1;\n      }\n    }\n\n    if (pulse.changed(p.ADD)) c |= p.ADD;\n    if (pulse.changed(p.REM)) c |= p.REM;\n    if (pulse.changed(p.MOD)) c |= p.MOD;\n  }\n\n  this.changes = c;\n}\nvar prototype = inherits(MultiPulse, Pulse);\n/**\n * Creates a new pulse based on the values of this pulse.\n * The dataflow, time stamp and field modification values are copied over.\n * @return {Pulse}\n */\n\nprototype.fork = function (flags) {\n  var p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);\n\n  if (flags !== undefined) {\n    if (flags & p.ADD) {\n      this.visit(p.ADD, function (t) {\n        return p.add.push(t);\n      });\n    }\n\n    if (flags & p.REM) {\n      this.visit(p.REM, function (t) {\n        return p.rem.push(t);\n      });\n    }\n\n    if (flags & p.MOD) {\n      this.visit(p.MOD, function (t) {\n        return p.mod.push(t);\n      });\n    }\n  }\n\n  return p;\n};\n\nprototype.changed = function (flags) {\n  return this.changes & flags;\n};\n\nprototype.modified = function (_) {\n  var p = this,\n      fields = p.fields;\n  return !(fields && p.changes & p.MOD) ? 0 : isArray(_) ? _.some(function (f) {\n    return fields[f];\n  }) : fields[_];\n};\n\nprototype.filter = function () {\n  error('MultiPulse does not support filtering.');\n};\n\nprototype.materialize = function () {\n  error('MultiPulse does not support materialization.');\n};\n\nprototype.visit = function (flags, visitor) {\n  var p = this,\n      pulses = p.pulses,\n      n = pulses.length,\n      i = 0;\n\n  if (flags & p.SOURCE) {\n    for (; i < n; ++i) {\n      pulses[i].visit(flags, visitor);\n    }\n  } else {\n    for (; i < n; ++i) {\n      if (pulses[i].stamp === p.stamp) {\n        pulses[i].visit(flags, visitor);\n      }\n    }\n  }\n\n  return p;\n};","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-dataflow/src/MultiPulse.js"],"names":["Pulse","error","inherits","isArray","MultiPulse","dataflow","stamp","pulses","encode","p","c","pulse","hash","i","n","f","fields","length","changed","ADD","REM","MOD","changes","prototype","fork","flags","init","NO_FIELDS","undefined","visit","t","add","push","rem","mod","modified","_","some","filter","materialize","visitor","SOURCE"],"mappings":"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","sourcesContent":["import Pulse from './Pulse';\nimport {error, inherits, isArray} from 'vega-util';\n\n/**\n * Represents a set of multiple pulses. Used as input for operators\n * that accept multiple pulses at a time. Contained pulses are\n * accessible via the public \"pulses\" array property. This pulse doe\n * not carry added, removed or modified tuples directly. However,\n * the visit method can be used to traverse all such tuples contained\n * in sub-pulses with a timestamp matching this parent multi-pulse.\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The timestamp.\n * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n */\nexport default function MultiPulse(dataflow, stamp, pulses, encode) {\n  var p = this,\n      c = 0,\n      pulse, hash, i, n, f;\n\n  this.dataflow = dataflow;\n  this.stamp = stamp;\n  this.fields = null;\n  this.encode = encode || null;\n  this.pulses = pulses;\n\n  for (i=0, n=pulses.length; i<n; ++i) {\n    pulse = pulses[i];\n    if (pulse.stamp !== stamp) continue;\n\n    if (pulse.fields) {\n      hash = p.fields || (p.fields = {});\n      for (f in pulse.fields) { hash[f] = 1; }\n    }\n\n    if (pulse.changed(p.ADD)) c |= p.ADD;\n    if (pulse.changed(p.REM)) c |= p.REM;\n    if (pulse.changed(p.MOD)) c |= p.MOD;\n  }\n\n  this.changes = c;\n}\n\nvar prototype = inherits(MultiPulse, Pulse);\n\n/**\n * Creates a new pulse based on the values of this pulse.\n * The dataflow, time stamp and field modification values are copied over.\n * @return {Pulse}\n */\nprototype.fork = function(flags) {\n  var p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);\n  if (flags !== undefined) {\n    if (flags & p.ADD) {\n      this.visit(p.ADD, function(t) { return p.add.push(t); });\n    }\n    if (flags & p.REM) {\n      this.visit(p.REM, function(t) { return p.rem.push(t); });\n    }\n    if (flags & p.MOD) {\n      this.visit(p.MOD, function(t) { return p.mod.push(t); });\n    }\n  }\n  return p;\n};\n\nprototype.changed = function(flags) {\n  return this.changes & flags;\n};\n\nprototype.modified = function(_) {\n  var p = this, fields = p.fields;\n  return !(fields && (p.changes & p.MOD)) ? 0\n    : isArray(_) ? _.some(function(f) { return fields[f]; })\n    : fields[_];\n};\n\nprototype.filter = function() {\n  error('MultiPulse does not support filtering.');\n};\n\nprototype.materialize = function() {\n  error('MultiPulse does not support materialization.');\n};\n\nprototype.visit = function(flags, visitor) {\n  var p = this,\n      pulses = p.pulses,\n      n = pulses.length,\n      i = 0;\n\n  if (flags & p.SOURCE) {\n    for (; i<n; ++i) {\n      pulses[i].visit(flags, visitor);\n    }\n  } else {\n    for (; i<n; ++i) {\n      if (pulses[i].stamp === p.stamp) {\n        pulses[i].visit(flags, visitor);\n      }\n    }\n  }\n\n  return p;\n};\n"]},"metadata":{},"sourceType":"module"}