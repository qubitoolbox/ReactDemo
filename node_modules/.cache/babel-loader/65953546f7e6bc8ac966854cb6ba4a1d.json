{"ast":null,"code":"import { contains, getFirstDefined } from '../../util';\n/**\n * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.\n */\n\nexport function getHeaderChannel(channel, orient) {\n  if (contains(['top', 'bottom'], orient)) {\n    return 'column';\n  } else if (contains(['left', 'right'], orient)) {\n    return 'row';\n  }\n\n  return channel === 'row' ? 'row' : 'column';\n}\nexport function getHeaderProperty(prop, facetFieldDef, config, channel) {\n  const headerSpecificConfig = channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;\n  return getFirstDefined(facetFieldDef && facetFieldDef.header ? facetFieldDef.header[prop] : undefined, headerSpecificConfig[prop], config.header[prop]);\n}\nexport function getHeaderProperties(properties, facetFieldDef, config, channel) {\n  const props = {};\n\n  for (const prop of properties) {\n    const value = getHeaderProperty(prop, facetFieldDef, config, channel);\n\n    if (value !== undefined) {\n      props[prop] = value;\n    }\n  }\n\n  return props;\n}","map":{"version":3,"sources":["../../../../src/compile/header/common.ts"],"names":[],"mappings":"AAKA,SAAQ,QAAR,EAAkB,eAAlB,QAAwC,YAAxC;AAGA;;;;AAGA,OAAM,SAAU,gBAAV,CAA2B,OAA3B,EAAkD,MAAlD,EAAgE;AACpE,MAAI,QAAQ,CAAC,CAAC,KAAD,EAAQ,QAAR,CAAD,EAAoB,MAApB,CAAZ,EAAyC;AACvC,WAAO,QAAP;AACD,GAFD,MAEO,IAAI,QAAQ,CAAC,CAAC,MAAD,EAAS,OAAT,CAAD,EAAoB,MAApB,CAAZ,EAAyC;AAC9C,WAAO,KAAP;AACD;;AACD,SAAO,OAAO,KAAK,KAAZ,GAAoB,KAApB,GAA4B,QAAnC;AACD;AAED,OAAM,SAAU,iBAAV,CACJ,IADI,EAEJ,aAFI,EAGJ,MAHI,EAIJ,OAJI,EAIiB;AAErB,QAAM,oBAAoB,GACxB,OAAO,KAAK,KAAZ,GAAoB,MAAM,CAAC,SAA3B,GAAuC,OAAO,KAAK,QAAZ,GAAuB,MAAM,CAAC,YAA9B,GAA6C,MAAM,CAAC,WAD7F;AAGA,SAAO,eAAe,CACpB,aAAa,IAAI,aAAa,CAAC,MAA/B,GAAwC,aAAa,CAAC,MAAd,CAAqB,IAArB,CAAxC,GAAqE,SADjD,EAEpB,oBAAoB,CAAC,IAAD,CAFA,EAGpB,MAAM,CAAC,MAAP,CAAc,IAAd,CAHoB,CAAtB;AAKD;AAED,OAAM,SAAU,mBAAV,CACJ,UADI,EAEJ,aAFI,EAGJ,MAHI,EAIJ,OAJI,EAIiB;AAErB,QAAM,KAAK,GAAG,EAAd;;AACA,OAAK,MAAM,IAAX,IAAmB,UAAnB,EAA+B;AAC7B,UAAM,KAAK,GAAG,iBAAiB,CAAC,IAAD,EAAO,aAAP,EAAsB,MAAtB,EAA8B,OAA9B,CAA/B;;AACA,QAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,MAAA,KAAK,CAAC,IAAD,CAAL,GAAc,KAAd;AACD;AACF;;AACD,SAAO,KAAP;AACD","sourcesContent":["import {Orient} from 'vega';\nimport {FacetChannel} from '../../channel';\nimport {Config} from '../../config';\nimport {Header} from '../../header';\nimport {FacetFieldDef} from '../../spec/facet';\nimport {contains, getFirstDefined} from '../../util';\nimport {HeaderChannel} from './component';\n\n/**\n * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.\n */\nexport function getHeaderChannel(channel: FacetChannel, orient: Orient): HeaderChannel {\n  if (contains(['top', 'bottom'], orient)) {\n    return 'column';\n  } else if (contains(['left', 'right'], orient)) {\n    return 'row';\n  }\n  return channel === 'row' ? 'row' : 'column';\n}\n\nexport function getHeaderProperty<P extends keyof Header>(\n  prop: P,\n  facetFieldDef: FacetFieldDef<string>,\n  config: Config,\n  channel: FacetChannel\n): Header[P] {\n  const headerSpecificConfig =\n    channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;\n\n  return getFirstDefined(\n    facetFieldDef && facetFieldDef.header ? facetFieldDef.header[prop] : undefined,\n    headerSpecificConfig[prop],\n    config.header[prop]\n  );\n}\n\nexport function getHeaderProperties(\n  properties: (keyof Header)[],\n  facetFieldDef: FacetFieldDef<string>,\n  config: Config,\n  channel: FacetChannel\n): Header {\n  const props = {};\n  for (const prop of properties) {\n    const value = getHeaderProperty(prop, facetFieldDef, config, channel);\n    if (value !== undefined) {\n      props[prop] = value;\n    }\n  }\n  return props;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}