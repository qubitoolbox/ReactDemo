{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { getSizeType, POSITION_SCALE_CHANNELS } from '../channel';\nimport { isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isUnitSpec } from '../spec/unit';\nimport { keys } from '../util';\nexport class RangeStepNormalizer {\n  constructor() {\n    this.name = 'RangeStep';\n  }\n\n  hasMatchingType(spec) {\n    var _a, _b;\n\n    if (isUnitSpec(spec) && spec.encoding) {\n      for (const channel of POSITION_SCALE_CHANNELS) {\n        const def = spec.encoding[channel];\n\n        if (def && isFieldDef(def)) {\n          if ((_b = (_a = def) === null || _a === void 0 ? void 0 : _a.scale) === null || _b === void 0 ? void 0 : _b['rangeStep']) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  run(spec) {\n    var _a, _b;\n\n    const sizeMixins = {};\n    let encoding = Object.assign({}, spec.encoding);\n\n    for (const channel of POSITION_SCALE_CHANNELS) {\n      const sizeType = getSizeType(channel);\n      const def = encoding[channel];\n\n      if (def && isFieldDef(def)) {\n        if ((_b = (_a = def) === null || _a === void 0 ? void 0 : _a.scale) === null || _b === void 0 ? void 0 : _b['rangeStep']) {\n          const {\n            scale\n          } = def,\n                defWithoutScale = __rest(def, [\"scale\"]);\n\n          const _c = scale,\n                {\n            rangeStep\n          } = _c,\n                scaleWithoutRangeStep = __rest(_c, [\"rangeStep\"]);\n\n          sizeMixins[sizeType] = {\n            step: scale['rangeStep']\n          };\n          log.warn(log.message.RANGE_STEP_DEPRECATED);\n          encoding = Object.assign(Object.assign({}, encoding), {\n            [channel]: Object.assign(Object.assign({}, defWithoutScale), keys(scaleWithoutRangeStep).length > 0 ? {\n              scale: scaleWithoutRangeStep\n            } : {})\n          });\n        }\n      }\n    }\n\n    return Object.assign(Object.assign(Object.assign({}, sizeMixins), spec), {\n      encoding\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/normalize/rangestep.ts"],"names":[],"mappings":"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","sourcesContent":["import {getSizeType, POSITION_SCALE_CHANNELS} from '../channel';\nimport {isFieldDef} from '../channeldef';\nimport {Encoding} from '../encoding';\nimport * as log from '../log';\nimport {Scale} from '../scale';\nimport {GenericSpec} from '../spec';\nimport {GenericUnitSpec, isUnitSpec, NormalizedUnitSpec} from '../spec/unit';\nimport {keys} from '../util';\nimport {NonFacetUnitNormalizer} from './base';\n\ntype UnitSpecWithRangeStep = GenericUnitSpec<Encoding<string>, any>; // this is not accurate, but it's not worth making it accurate\n\nexport class RangeStepNormalizer implements NonFacetUnitNormalizer<UnitSpecWithRangeStep> {\n  public name = 'RangeStep';\n\n  public hasMatchingType(spec: GenericSpec<any, any>): spec is UnitSpecWithRangeStep {\n    if (isUnitSpec(spec) && spec.encoding) {\n      for (const channel of POSITION_SCALE_CHANNELS) {\n        const def = spec.encoding[channel];\n        if (def && isFieldDef(def)) {\n          if (def?.scale?.['rangeStep']) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  public run(spec: UnitSpecWithRangeStep): NormalizedUnitSpec {\n    const sizeMixins = {};\n    let encoding = {...spec.encoding};\n\n    for (const channel of POSITION_SCALE_CHANNELS) {\n      const sizeType = getSizeType(channel);\n      const def = encoding[channel];\n      if (def && isFieldDef(def)) {\n        if (def?.scale?.['rangeStep']) {\n          const {scale, ...defWithoutScale} = def;\n\n          const {rangeStep, ...scaleWithoutRangeStep} = scale as Scale & {rangeStep: number};\n          sizeMixins[sizeType] = {step: scale['rangeStep']};\n\n          log.warn(log.message.RANGE_STEP_DEPRECATED);\n\n          encoding = {\n            ...encoding,\n            [channel]: {\n              ...defWithoutScale,\n              ...(keys(scaleWithoutRangeStep).length > 0 ? {scale: scaleWithoutRangeStep} : {})\n            }\n          };\n        }\n      }\n    }\n    return {\n      ...sizeMixins,\n      ...spec,\n      encoding\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}