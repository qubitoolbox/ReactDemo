{"ast":null,"code":"import { Split } from '../split';\n/**\n * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)\n * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the\n * same field again (or differently).\n */\n\nexport class AncestorParse extends Split {\n  constructor(explicit = {}, implicit = {}, parseNothing = false) {\n    super(explicit, implicit);\n    this.explicit = explicit;\n    this.implicit = implicit;\n    this.parseNothing = parseNothing;\n  }\n\n  clone() {\n    const clone = super.clone();\n    clone.parseNothing = this.parseNothing;\n    return clone;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/compile/data/index.ts"],"names":[],"mappings":"AAEA,SAAQ,KAAR,QAAoB,UAApB;AAkDA;;;;;;AAKA,OAAM,MAAO,aAAP,SAA6B,KAA7B,CAAyC;AAC7C,EAAA,WAAA,CACkB,QAAA,GAA2B,EAD7C,EAEkB,QAAA,GAA2B,EAF7C,EAGS,YAAA,GAAe,KAHxB,EAG6B;AAE3B,UAAM,QAAN,EAAgB,QAAhB;AAJgB,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACT,SAAA,YAAA,GAAA,YAAA;AAGR;;AAEM,EAAA,KAAK,GAAA;AACV,UAAM,KAAK,GAAG,MAAM,KAAN,EAAd;AACA,IAAA,KAAK,CAAC,YAAN,GAAqB,KAAK,YAA1B;AACA,WAAO,KAAP;AACD;;AAb4C","sourcesContent":["import {Parse} from '../../data';\nimport {Dict} from '../../util';\nimport {Split} from '../split';\nimport {OutputNode} from './dataflow';\nimport {FacetNode} from './facet';\nimport {SourceNode} from './source';\n\nexport interface DataComponent {\n  /**\n   * A list of unique sources.\n   */\n  sources: SourceNode[];\n\n  /**\n   * Registry of output nodes.\n   */\n  outputNodes: Dict<OutputNode | FacetNode>;\n\n  /**\n   * How often is an output node used. If it is not used, we don't need to\n   * instantiate it in the assemble step.\n   */\n  outputNodeRefCounts: Dict<number>;\n\n  /**\n   * The output node before aggregation.\n   */\n  raw?: OutputNode;\n\n  /**\n   * The main output node.\n   */\n  main?: OutputNode;\n\n  /**\n   * For facets, we store the reference to the root node.\n   */\n  facetRoot?: FacetNode;\n\n  /**\n   * True if the data for this model is faceted.\n   * A dataset is faceted if a parent model is a facet and no new dataset is\n   * defined (which would make the data unfaceted again).\n   */\n  isFaceted: boolean;\n\n  /**\n   * Parse properties passed down from ancestors. Helps us to keep track of what has been parsed or is derived.\n   */\n  ancestorParse?: AncestorParse;\n}\n\n/**\n * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)\n * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the\n * same field again (or differently).\n */\nexport class AncestorParse extends Split<Parse> {\n  constructor(\n    public readonly explicit: Partial<Parse> = {},\n    public readonly implicit: Partial<Parse> = {},\n    public parseNothing = false\n  ) {\n    super(explicit, implicit);\n  }\n\n  public clone(): AncestorParse {\n    const clone = super.clone() as AncestorParse;\n    clone.parseNothing = this.parseNothing;\n    return clone;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}