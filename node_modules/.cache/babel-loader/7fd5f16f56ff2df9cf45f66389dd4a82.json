{"ast":null,"code":"import 'array-flat-polyfill';\nimport { default as clone_ } from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport const deepEqual = deepEqual_;\nexport const duplicate = clone_;\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // â†’ {'a': 1, 'c': 3}\n */\n\nexport function pick(obj, props) {\n  const copy = {};\n\n  for (const prop of props) {\n    if (hasOwnProperty(obj, prop)) {\n      copy[prop] = obj[prop];\n    }\n  }\n\n  return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\n\nexport function omit(obj, props) {\n  const copy = Object.assign({}, obj);\n\n  for (const prop of props) {\n    delete copy[prop];\n  }\n\n  return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\n\nSet.prototype['toJSON'] = function () {\n  return `Set(${[...this].map(x => stableStringify(x)).join(',')})`;\n};\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\n\n\nexport const stringify = stableStringify;\n/**\n * Converts any object to a string of limited size, or a number.\n */\n\nexport function hash(a) {\n  if (isNumber(a)) {\n    return a;\n  }\n\n  const str = isString(a) ? a : stableStringify(a); // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n\n  if (str.length < 250) {\n    return str;\n  } // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n\n\n  let h = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n\n  return h;\n}\nexport function isNullOrFalse(x) {\n  return x === false || x === null;\n}\nexport function contains(array, item) {\n  return array.indexOf(item) > -1;\n}\n/** Returns the array without the elements in item */\n\nexport function without(array, excludedItems) {\n  return array.filter(item => !contains(excludedItems, item));\n}\nexport function union(array, other) {\n  return array.concat(without(other, array));\n}\n/**\n * Returns true if any item returns true.\n */\n\nexport function some(arr, f) {\n  let i = 0;\n\n  for (const [k, a] of arr.entries()) {\n    if (f(a, k, i++)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Returns true if all items return true.\n */\n\nexport function every(arr, f) {\n  let i = 0;\n\n  for (const [k, a] of arr.entries()) {\n    if (!f(a, k, i++)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * recursively merges src into dest\n */\n\nexport function mergeDeep(dest, ...src) {\n  for (const s of src) {\n    deepMerge_(dest, s !== null && s !== void 0 ? s : {});\n  }\n\n  return dest;\n}\n\nfunction deepMerge_(dest, src) {\n  for (const property of Object.keys(src)) {\n    writeConfig(dest, property, src[property], true);\n  }\n}\n\nexport function unique(values, f) {\n  const results = [];\n  const u = {};\n  let v;\n\n  for (const val of values) {\n    v = f(val);\n\n    if (v in u) {\n      continue;\n    }\n\n    u[v] = 1;\n    results.push(val);\n  }\n\n  return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\n\nexport function isEqual(dict, other) {\n  const dictKeys = keys(dict);\n  const otherKeys = keys(other);\n\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n\n  for (const key of dictKeys) {\n    if (dict[key] !== other[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function setEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (const e of a) {\n    if (!b.has(e)) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function hasIntersection(a, b) {\n  for (const key of a) {\n    if (b.has(key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function prefixGenerator(a) {\n  const prefixes = new Set();\n\n  for (const x of a) {\n    const splitField = splitAccessPath(x); // Wrap every element other than the first in `[]`\n\n    const wrappedWithAccessors = splitField.map((y, i) => i === 0 ? y : `[${y}]`);\n    const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n    computedPrefixes.forEach(y => prefixes.add(y));\n  }\n\n  return prefixes;\n}\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\n\nexport function fieldIntersection(a, b) {\n  if (a === undefined || b === undefined) {\n    return true;\n  }\n\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n} // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\n\nexport const keys = Object.keys;\nexport function vals(x) {\n  const _vals = [];\n\n  for (const k in x) {\n    if (hasOwnProperty(x, k)) {\n      _vals.push(x[k]);\n    }\n  }\n\n  return _vals;\n}\nexport function entries(x) {\n  const _entries = [];\n\n  for (const k in x) {\n    if (hasOwnProperty(x, k)) {\n      _entries.push({\n        key: k,\n        value: x[k]\n      });\n    }\n  }\n\n  return _entries;\n}\nexport function isBoolean(b) {\n  return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\n\nexport function varName(s) {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  const alphanumericS = s.replace(/\\W/g, '_'); // Add _ if the string has leading numbers.\n\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n  if (isLogicalNot(op)) {\n    return '!(' + logicalExpr(op.not, cb) + ')';\n  } else if (isLogicalAnd(op)) {\n    return '(' + op.and.map(and => logicalExpr(and, cb)).join(') && (') + ')';\n  } else if (isLogicalOr(op)) {\n    return '(' + op.or.map(or => logicalExpr(or, cb)).join(') || (') + ')';\n  } else {\n    return cb(op);\n  }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\n\nexport function deleteNestedProperty(obj, orderedProps) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n\n  const prop = orderedProps.shift(); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n\n  if (deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n\n  return keys(obj).length === 0;\n}\nexport function titlecase(s) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\n\nexport function accessPathWithDatum(path, datum = 'datum') {\n  const pieces = splitAccessPath(path);\n  const prefixes = [];\n\n  for (let i = 1; i <= pieces.length; i++) {\n    const prefix = `[${pieces.slice(0, i).map(stringValue).join('][')}]`;\n    prefixes.push(`${datum}${prefix}`);\n  }\n\n  return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\n\nexport function flatAccessWithDatum(path, datum = 'datum') {\n  return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\n\nexport function replacePathInField(path) {\n  return `${splitAccessPath(path).map(p => replaceAll(p, '.', '\\\\.')).join('\\\\.')}`;\n}\n/**\n * Replace all ocurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\n\nexport function replaceAll(string, find, replacement) {\n  return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\n\nexport function removePathFromField(path) {\n  return `${splitAccessPath(path).join('.')}`;\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\n\nexport function accessPathDepth(path) {\n  if (!path) {\n    return 0;\n  }\n\n  return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\n\nexport function getFirstDefined(...args) {\n  for (const arg of args) {\n    if (arg !== undefined) {\n      return arg;\n    }\n  }\n\n  return undefined;\n} // variable used to generate id\n\nlet idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\n\nexport function uniqueId(prefix) {\n  const id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\n\nexport function resetIdCounter() {\n  idCounter = 42;\n}\nexport function internalField(name) {\n  return isInternalField(name) ? name : `__${name}`;\n}\nexport function isInternalField(name) {\n  return name.indexOf('__') === 0;\n}\n/**\n * Normalize angle to be within [0,360).\n */\n\nexport function normalizeAngle(angle) {\n  return (angle % 360 + 360) % 360;\n}","map":{"version":3,"sources":["../../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import 'array-flat-polyfill';\nimport {default as clone_} from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport {hasOwnProperty, isNumber, isString, splitAccessPath, stringValue, writeConfig} from 'vega-util';\nimport {isLogicalAnd, isLogicalNot, isLogicalOr, LogicalOperand} from './logical';\n\nexport const deepEqual = deepEqual_;\nexport const duplicate = clone_;\n\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // â†’ {'a': 1, 'c': 3}\n */\nexport function pick<T extends object, K extends keyof T>(obj: T, props: readonly K[]): Pick<T, K> {\n  const copy: any = {};\n  for (const prop of props) {\n    if (hasOwnProperty(obj, prop)) {\n      copy[prop] = obj[prop];\n    }\n  }\n  return copy;\n}\n\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\nexport function omit<T extends object, K extends keyof T>(obj: T, props: readonly K[]): Omit<T, K> {\n  const copy = {...(obj as any)};\n  for (const prop of props) {\n    delete copy[prop];\n  }\n  return copy;\n}\n\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\nSet.prototype['toJSON'] = function() {\n  return `Set(${[...this].map(x => stableStringify(x)).join(',')})`;\n};\n\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\nexport const stringify = stableStringify;\n\n/**\n * Converts any object to a string of limited size, or a number.\n */\nexport function hash(a: any): string | number {\n  if (isNumber(a)) {\n    return a;\n  }\n\n  const str = isString(a) ? a : stableStringify(a);\n\n  // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n  if (str.length < 250) {\n    return str;\n  }\n\n  // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n  let h = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    h = (h << 5) - h + char;\n    h = h & h; // Convert to 32bit integer\n  }\n  return h;\n}\n\nexport function isNullOrFalse(x: any): x is false | null {\n  return x === false || x === null;\n}\n\nexport function contains<T>(array: readonly T[], item: T) {\n  return array.indexOf(item) > -1;\n}\n\n/** Returns the array without the elements in item */\nexport function without<T>(array: readonly T[], excludedItems: readonly T[]) {\n  return array.filter(item => !contains(excludedItems, item));\n}\n\nexport function union<T>(array: readonly T[], other: readonly T[]) {\n  return array.concat(without(other, array));\n}\n\n/**\n * Returns true if any item returns true.\n */\nexport function some<T>(arr: readonly T[], f: (d: T, k?: any, i?: any) => boolean) {\n  let i = 0;\n  for (const [k, a] of arr.entries()) {\n    if (f(a, k, i++)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if all items return true.\n */\nexport function every<T>(arr: readonly T[], f: (d: T, k?: any, i?: any) => boolean) {\n  let i = 0;\n  for (const [k, a] of arr.entries()) {\n    if (!f(a, k, i++)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Like TS Partial but applies recursively to all properties.\n */\nexport type DeepPartial<T> = {[P in keyof T]?: DeepPartial<T[P]>};\n\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep<T>(dest: T, ...src: readonly DeepPartial<T>[]): T {\n  for (const s of src) {\n    deepMerge_(dest, s ?? {});\n  }\n  return dest;\n}\n\nfunction deepMerge_(dest: any, src: any) {\n  for (const property of Object.keys(src)) {\n    writeConfig(dest, property, src[property], true);\n  }\n}\n\nexport function unique<T>(values: readonly T[], f: (item: T) => string | number): T[] {\n  const results: T[] = [];\n  const u = {};\n  let v: string | number;\n  for (const val of values) {\n    v = f(val);\n    if (v in u) {\n      continue;\n    }\n    u[v] = 1;\n    results.push(val);\n  }\n  return results;\n}\n\nexport interface Dict<T> {\n  [key: string]: T;\n}\n\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\nexport function isEqual<T>(dict: Dict<T>, other: Dict<T>) {\n  const dictKeys = keys(dict);\n  const otherKeys = keys(other);\n  if (dictKeys.length !== otherKeys.length) {\n    return false;\n  }\n  for (const key of dictKeys) {\n    if (dict[key] !== other[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function setEqual<T>(a: Set<T>, b: Set<T>) {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const e of a) {\n    if (!b.has(e)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function hasIntersection<T>(a: ReadonlySet<T>, b: ReadonlySet<T>) {\n  for (const key of a) {\n    if (b.has(key)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function prefixGenerator(a: ReadonlySet<string>): ReadonlySet<string> {\n  const prefixes = new Set<string>();\n  for (const x of a) {\n    const splitField = splitAccessPath(x);\n    // Wrap every element other than the first in `[]`\n    const wrappedWithAccessors = splitField.map((y, i) => (i === 0 ? y : `[${y}]`));\n    const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n    computedPrefixes.forEach(y => prefixes.add(y));\n  }\n  return prefixes;\n}\n\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\nexport function fieldIntersection(a: ReadonlySet<string>, b: ReadonlySet<string>): boolean {\n  if (a === undefined || b === undefined) {\n    return true;\n  }\n  return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n}\n\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport const keys = Object.keys as <T>(o: T) => Extract<keyof T, string>[];\n\nexport function vals<T>(x: {[key: string]: T}): T[] {\n  const _vals: T[] = [];\n  for (const k in x) {\n    if (hasOwnProperty(x, k)) {\n      _vals.push(x[k]);\n    }\n  }\n  return _vals;\n}\n\nexport function entries<T>(x: {[key: string]: T}): {key: string; value: T}[] {\n  const _entries: {key: string; value: T}[] = [];\n  for (const k in x) {\n    if (hasOwnProperty(x, k)) {\n      _entries.push({\n        key: k,\n        value: x[k]\n      });\n    }\n  }\n  return _entries;\n}\n\n// Using mapped type to declare a collect of flags for a string literal type S\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\nexport type Flag<S extends string> = {[K in S]: 1};\n\nexport function isBoolean(b: any): b is boolean {\n  return b === true || b === false;\n}\n\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s: string): string {\n  // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n  const alphanumericS = s.replace(/\\W/g, '_');\n\n  // Add _ if the string has leading numbers.\n  return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\n\nexport function logicalExpr<T>(op: LogicalOperand<T>, cb: (...args: readonly any[]) => string): string {\n  if (isLogicalNot(op)) {\n    return '!(' + logicalExpr(op.not, cb) + ')';\n  } else if (isLogicalAnd(op)) {\n    return '(' + op.and.map((and: LogicalOperand<T>) => logicalExpr(and, cb)).join(') && (') + ')';\n  } else if (isLogicalOr(op)) {\n    return '(' + op.or.map((or: LogicalOperand<T>) => logicalExpr(or, cb)).join(') || (') + ')';\n  } else {\n    return cb(op);\n  }\n}\n\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj: any, orderedProps: string[]) {\n  if (orderedProps.length === 0) {\n    return true;\n  }\n  const prop = orderedProps.shift()!; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  if (deleteNestedProperty(obj[prop], orderedProps)) {\n    delete obj[prop];\n  }\n  return keys(obj).length === 0;\n}\n\nexport function titlecase(s: string) {\n  return s.charAt(0).toUpperCase() + s.substr(1);\n}\n\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path: string, datum = 'datum') {\n  const pieces = splitAccessPath(path);\n  const prefixes = [];\n  for (let i = 1; i <= pieces.length; i++) {\n    const prefix = `[${pieces\n      .slice(0, i)\n      .map(stringValue)\n      .join('][')}]`;\n    prefixes.push(`${datum}${prefix}`);\n  }\n  return prefixes.join(' && ');\n}\n\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path: string, datum: 'datum' | 'parent' | 'datum.datum' = 'datum') {\n  return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\n\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path: string) {\n  return `${splitAccessPath(path)\n    .map(p => replaceAll(p, '.', '\\\\.'))\n    .join('\\\\.')}`;\n}\n\n/**\n * Replace all ocurrences of a string with another string.\n *\n * @param string the string to replace in\n * @param find the string to replace\n * @param replacement the replacement\n */\nexport function replaceAll(string: string, find: string, replacement: string) {\n  return string.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replacement);\n}\n\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path: string) {\n  return `${splitAccessPath(path).join('.')}`;\n}\n\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path: string) {\n  if (!path) {\n    return 0;\n  }\n  return splitAccessPath(path).length;\n}\n\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\nexport function getFirstDefined<T>(...args: readonly T[]): T | undefined {\n  for (const arg of args) {\n    if (arg !== undefined) {\n      return arg;\n    }\n  }\n  return undefined;\n}\n\n// variable used to generate id\nlet idCounter = 42;\n\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\nexport function uniqueId(prefix?: string) {\n  const id = ++idCounter;\n  return prefix ? String(prefix) + id : id;\n}\n\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\nexport function resetIdCounter() {\n  idCounter = 42;\n}\n\nexport function internalField(name: string) {\n  return isInternalField(name) ? name : `__${name}`;\n}\n\nexport function isInternalField(name: string) {\n  return name.indexOf('__') === 0;\n}\n\n/**\n * Normalize angle to be within [0,360).\n */\nexport function normalizeAngle(angle: number) {\n  return ((angle % 360) + 360) % 360;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}