{"ast":null,"code":"import * as log from '../../../log';\nimport { isPathMark } from '../../../mark';\nimport { tooltip } from '../../mark/encode';\nconst VORONOI = 'voronoi';\nconst nearest = {\n  has: selCmpt => {\n    return selCmpt.type !== 'interval' && selCmpt.nearest;\n  },\n  parse: (model, selCmpt) => {\n    // Scope selection events to the voronoi mark to prevent capturing\n    // events that occur on the group mark (https://github.com/vega/vega/issues/2112).\n    if (selCmpt.events) {\n      for (const s of selCmpt.events) {\n        s.markname = model.getName(VORONOI);\n      }\n    }\n  },\n  marks: (model, selCmpt, marks) => {\n    const {\n      x,\n      y\n    } = selCmpt.project.hasChannel;\n    const markType = model.mark;\n\n    if (isPathMark(markType)) {\n      log.warn(log.message.nearestNotSupportForContinuous(markType));\n      return marks;\n    }\n\n    const cellDef = {\n      name: model.getName(VORONOI),\n      type: 'path',\n      interactive: true,\n      from: {\n        data: model.getName('marks')\n      },\n      encode: {\n        update: Object.assign({\n          fill: {\n            value: 'transparent'\n          },\n          strokeWidth: {\n            value: 0.35\n          },\n          stroke: {\n            value: 'transparent'\n          },\n          isVoronoi: {\n            value: true\n          }\n        }, tooltip(model, {\n          reactiveGeom: true\n        }))\n      },\n      transform: [{\n        type: 'voronoi',\n        x: {\n          expr: x || !y ? 'datum.datum.x || 0' : '0'\n        },\n        y: {\n          expr: y || !x ? 'datum.datum.y || 0' : '0'\n        },\n        size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n      }]\n    };\n    let index = 0;\n    let exists = false;\n    marks.forEach((mark, i) => {\n      var _a;\n\n      const name = (_a = mark.name, _a !== null && _a !== void 0 ? _a : '');\n\n      if (name === model.component.mark[0].name) {\n        index = i;\n      } else if (name.indexOf(VORONOI) >= 0) {\n        exists = true;\n      }\n    });\n\n    if (!exists) {\n      marks.splice(index + 1, 0, cellDef);\n    }\n\n    return marks;\n  }\n};\nexport default nearest;","map":{"version":3,"sources":["../../../../../src/compile/selection/transforms/nearest.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,GAAZ,MAAqB,cAArB;AACA,SAAQ,UAAR,QAAyB,eAAzB;AACA,SAAQ,OAAR,QAAsB,mBAAtB;AAGA,MAAM,OAAO,GAAG,SAAhB;AAEA,MAAM,OAAO,GAAsB;AACjC,EAAA,GAAG,EAAE,OAAO,IAAG;AACb,WAAO,OAAO,CAAC,IAAR,KAAiB,UAAjB,IAA+B,OAAO,CAAC,OAA9C;AACD,GAHgC;AAKjC,EAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,OAAR,KAAmB;AACxB;AACA;AACA,QAAI,OAAO,CAAC,MAAZ,EAAoB;AAClB,WAAK,MAAM,CAAX,IAAgB,OAAO,CAAC,MAAxB,EAAgC;AAC9B,QAAA,CAAC,CAAC,QAAF,GAAa,KAAK,CAAC,OAAN,CAAc,OAAd,CAAb;AACD;AACF;AACF,GAbgC;AAejC,EAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,OAAR,EAAiB,KAAjB,KAA0B;AAC/B,UAAM;AAAC,MAAA,CAAD;AAAI,MAAA;AAAJ,QAAS,OAAO,CAAC,OAAR,CAAgB,UAA/B;AACA,UAAM,QAAQ,GAAG,KAAK,CAAC,IAAvB;;AACA,QAAI,UAAU,CAAC,QAAD,CAAd,EAA0B;AACxB,MAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,8BAAZ,CAA2C,QAA3C,CAAT;AACA,aAAO,KAAP;AACD;;AAED,UAAM,OAAO,GAAG;AACd,MAAA,IAAI,EAAE,KAAK,CAAC,OAAN,CAAc,OAAd,CADQ;AAEd,MAAA,IAAI,EAAE,MAFQ;AAGd,MAAA,WAAW,EAAE,IAHC;AAId,MAAA,IAAI,EAAE;AAAC,QAAA,IAAI,EAAE,KAAK,CAAC,OAAN,CAAc,OAAd;AAAP,OAJQ;AAKd,MAAA,MAAM,EAAE;AACN,QAAA,MAAM,EAAA,MAAA,CAAA,MAAA,CAAA;AACJ,UAAA,IAAI,EAAE;AAAC,YAAA,KAAK,EAAE;AAAR,WADF;AAEJ,UAAA,WAAW,EAAE;AAAC,YAAA,KAAK,EAAE;AAAR,WAFT;AAGJ,UAAA,MAAM,EAAE;AAAC,YAAA,KAAK,EAAE;AAAR,WAHJ;AAIJ,UAAA,SAAS,EAAE;AAAC,YAAA,KAAK,EAAE;AAAR;AAJP,SAAA,EAKD,OAAO,CAAC,KAAD,EAAQ;AAAC,UAAA,YAAY,EAAE;AAAf,SAAR,CALN;AADA,OALM;AAcd,MAAA,SAAS,EAAE,CACT;AACE,QAAA,IAAI,EAAE,SADR;AAEE,QAAA,CAAC,EAAE;AAAC,UAAA,IAAI,EAAE,CAAC,IAAI,CAAC,CAAN,GAAU,oBAAV,GAAiC;AAAxC,SAFL;AAGE,QAAA,CAAC,EAAE;AAAC,UAAA,IAAI,EAAE,CAAC,IAAI,CAAC,CAAN,GAAU,oBAAV,GAAiC;AAAxC,SAHL;AAIE,QAAA,IAAI,EAAE,CAAC,KAAK,CAAC,gBAAN,CAAuB,OAAvB,CAAD,EAAkC,KAAK,CAAC,gBAAN,CAAuB,QAAvB,CAAlC;AAJR,OADS;AAdG,KAAhB;AAwBA,QAAI,KAAK,GAAG,CAAZ;AACA,QAAI,MAAM,GAAG,KAAb;AACA,IAAA,KAAK,CAAC,OAAN,CAAc,CAAC,IAAD,EAAO,CAAP,KAAY;;;AACxB,YAAM,IAAI,IAAA,EAAA,GAAG,IAAI,CAAC,IAAR,EAAY,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAhB,CAAV;;AACA,UAAI,IAAI,KAAK,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,CAArB,EAAwB,IAArC,EAA2C;AACzC,QAAA,KAAK,GAAG,CAAR;AACD,OAFD,MAEO,IAAI,IAAI,CAAC,OAAL,CAAa,OAAb,KAAyB,CAA7B,EAAgC;AACrC,QAAA,MAAM,GAAG,IAAT;AACD;AACF,KAPD;;AASA,QAAI,CAAC,MAAL,EAAa;AACX,MAAA,KAAK,CAAC,MAAN,CAAa,KAAK,GAAG,CAArB,EAAwB,CAAxB,EAA2B,OAA3B;AACD;;AAED,WAAO,KAAP;AACD;AA/DgC,CAAnC;AAkEA,eAAe,OAAf","sourcesContent":["import * as log from '../../../log';\nimport {isPathMark} from '../../../mark';\nimport {tooltip} from '../../mark/encode';\nimport {TransformCompiler} from './transforms';\n\nconst VORONOI = 'voronoi';\n\nconst nearest: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type !== 'interval' && selCmpt.nearest;\n  },\n\n  parse: (model, selCmpt) => {\n    // Scope selection events to the voronoi mark to prevent capturing\n    // events that occur on the group mark (https://github.com/vega/vega/issues/2112).\n    if (selCmpt.events) {\n      for (const s of selCmpt.events) {\n        s.markname = model.getName(VORONOI);\n      }\n    }\n  },\n\n  marks: (model, selCmpt, marks) => {\n    const {x, y} = selCmpt.project.hasChannel;\n    const markType = model.mark;\n    if (isPathMark(markType)) {\n      log.warn(log.message.nearestNotSupportForContinuous(markType));\n      return marks;\n    }\n\n    const cellDef = {\n      name: model.getName(VORONOI),\n      type: 'path',\n      interactive: true,\n      from: {data: model.getName('marks')},\n      encode: {\n        update: {\n          fill: {value: 'transparent'},\n          strokeWidth: {value: 0.35},\n          stroke: {value: 'transparent'},\n          isVoronoi: {value: true},\n          ...tooltip(model, {reactiveGeom: true})\n        }\n      },\n      transform: [\n        {\n          type: 'voronoi',\n          x: {expr: x || !y ? 'datum.datum.x || 0' : '0'},\n          y: {expr: y || !x ? 'datum.datum.y || 0' : '0'},\n          size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n        }\n      ]\n    };\n\n    let index = 0;\n    let exists = false;\n    marks.forEach((mark, i) => {\n      const name = mark.name ?? '';\n      if (name === model.component.mark[0].name) {\n        index = i;\n      } else if (name.indexOf(VORONOI) >= 0) {\n        exists = true;\n      }\n    });\n\n    if (!exists) {\n      marks.splice(index + 1, 0, cellDef);\n    }\n\n    return marks;\n  }\n};\n\nexport default nearest;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}