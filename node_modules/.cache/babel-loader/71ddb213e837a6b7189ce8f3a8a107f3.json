{"ast":null,"code":"import HierarchyLayout from './HierarchyLayout';\nimport { error, hasOwnProperty, inherits } from 'vega-util';\nimport { tree, cluster } from 'd3-hierarchy';\nvar Layouts = {\n  tidy: tree,\n  cluster: cluster\n};\nvar Output = ['x', 'y', 'depth', 'children'];\n/**\n * Tree layout. Depending on the method parameter, performs either\n * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\n\nexport default function Tree(params) {\n  HierarchyLayout.call(this, params);\n}\nTree.Definition = {\n  \"type\": \"Tree\",\n  \"metadata\": {\n    \"tree\": true,\n    \"modifies\": true\n  },\n  \"params\": [{\n    \"name\": \"field\",\n    \"type\": \"field\"\n  }, {\n    \"name\": \"sort\",\n    \"type\": \"compare\"\n  }, {\n    \"name\": \"method\",\n    \"type\": \"enum\",\n    \"default\": \"tidy\",\n    \"values\": [\"tidy\", \"cluster\"]\n  }, {\n    \"name\": \"size\",\n    \"type\": \"number\",\n    \"array\": true,\n    \"length\": 2\n  }, {\n    \"name\": \"nodeSize\",\n    \"type\": \"number\",\n    \"array\": true,\n    \"length\": 2\n  }, {\n    \"name\": \"separation\",\n    \"type\": \"boolean\",\n    \"default\": true\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"array\": true,\n    \"length\": Output.length,\n    \"default\": Output\n  }]\n};\nvar prototype = inherits(Tree, HierarchyLayout);\n/**\n * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n */\n\nprototype.layout = function (method) {\n  var m = method || 'tidy';\n  if (hasOwnProperty(Layouts, m)) return Layouts[m]();else error('Unrecognized Tree layout method: ' + m);\n};\n\nprototype.params = ['size', 'nodeSize'];\nprototype.fields = Output;","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-hierarchy/src/Tree.js"],"names":["HierarchyLayout","error","hasOwnProperty","inherits","tree","cluster","Layouts","tidy","Output","Tree","params","call","Definition","length","prototype","layout","method","m","fields"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,SAAQC,KAAR,EAAeC,cAAf,EAA+BC,QAA/B,QAA8C,WAA9C;AACA,SAAQC,IAAR,EAAcC,OAAd,QAA4B,cAA5B;AAEA,IAAIC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAEH,IADM;AAEZC,EAAAA,OAAO,EAAEA;AAFG,CAAd;AAKA,IAAIG,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,EAAoB,UAApB,CAAb;AAEA;;;;;;;AAMA,eAAe,SAASC,IAAT,CAAcC,MAAd,EAAsB;AACnCV,EAAAA,eAAe,CAACW,IAAhB,CAAqB,IAArB,EAA2BD,MAA3B;AACD;AAEDD,IAAI,CAACG,UAAL,GAAkB;AAChB,UAAQ,MADQ;AAEhB,cAAY;AAAC,YAAQ,IAAT;AAAe,gBAAY;AAA3B,GAFI;AAGhB,YAAU,CACR;AAAE,YAAQ,OAAV;AAAmB,YAAQ;AAA3B,GADQ,EAER;AAAE,YAAQ,MAAV;AAAkB,YAAQ;AAA1B,GAFQ,EAGR;AAAE,YAAQ,QAAV;AAAoB,YAAQ,MAA5B;AAAoC,eAAW,MAA/C;AAAuD,cAAU,CAAC,MAAD,EAAS,SAAT;AAAjE,GAHQ,EAIR;AAAE,YAAQ,MAAV;AAAkB,YAAQ,QAA1B;AAAoC,aAAS,IAA7C;AAAmD,cAAU;AAA7D,GAJQ,EAKR;AAAE,YAAQ,UAAV;AAAsB,YAAQ,QAA9B;AAAwC,aAAS,IAAjD;AAAuD,cAAU;AAAjE,GALQ,EAMR;AAAE,YAAQ,YAAV;AAAwB,YAAQ,SAAhC;AAA2C,eAAW;AAAtD,GANQ,EAOR;AAAE,YAAQ,IAAV;AAAgB,YAAQ,QAAxB;AAAkC,aAAS,IAA3C;AAAiD,cAAUJ,MAAM,CAACK,MAAlE;AAA0E,eAAWL;AAArF,GAPQ;AAHM,CAAlB;AAcA,IAAIM,SAAS,GAAGX,QAAQ,CAACM,IAAD,EAAOT,eAAP,CAAxB;AAEA;;;;AAGAc,SAAS,CAACC,MAAV,GAAmB,UAASC,MAAT,EAAiB;AAClC,MAAIC,CAAC,GAAGD,MAAM,IAAI,MAAlB;AACA,MAAId,cAAc,CAACI,OAAD,EAAUW,CAAV,CAAlB,EAAgC,OAAOX,OAAO,CAACW,CAAD,CAAP,EAAP,CAAhC,KACKhB,KAAK,CAAC,sCAAsCgB,CAAvC,CAAL;AACN,CAJD;;AAMAH,SAAS,CAACJ,MAAV,GAAmB,CAAC,MAAD,EAAS,UAAT,CAAnB;AAEAI,SAAS,CAACI,MAAV,GAAmBV,MAAnB","sourcesContent":["import HierarchyLayout from './HierarchyLayout';\nimport {error, hasOwnProperty, inherits} from 'vega-util';\nimport {tree, cluster} from 'd3-hierarchy';\n\nvar Layouts = {\n  tidy: tree,\n  cluster: cluster\n};\n\nvar Output = ['x', 'y', 'depth', 'children'];\n\n/**\n * Tree layout. Depending on the method parameter, performs either\n * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nexport default function Tree(params) {\n  HierarchyLayout.call(this, params);\n}\n\nTree.Definition = {\n  \"type\": \"Tree\",\n  \"metadata\": {\"tree\": true, \"modifies\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\" },\n    { \"name\": \"sort\", \"type\": \"compare\" },\n    { \"name\": \"method\", \"type\": \"enum\", \"default\": \"tidy\", \"values\": [\"tidy\", \"cluster\"] },\n    { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"nodeSize\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"separation\", \"type\": \"boolean\", \"default\": true },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": Output.length, \"default\": Output }\n  ]\n};\n\nvar prototype = inherits(Tree, HierarchyLayout);\n\n/**\n * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n */\nprototype.layout = function(method) {\n  var m = method || 'tidy';\n  if (hasOwnProperty(Layouts, m)) return Layouts[m]();\n  else error('Unrecognized Tree layout method: ' + m);\n};\n\nprototype.params = ['size', 'nodeSize'];\n\nprototype.fields = Output;\n"]},"metadata":{},"sourceType":"module"}