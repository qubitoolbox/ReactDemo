{"ast":null,"code":"import { Index, Label, Offset, Size, Value, zero, one, Skip, GuideLabelStyle, LegendScales } from './constants';\nimport guideGroup from './guide-group';\nimport guideMark from './guide-mark';\nimport { lookup } from './guide-util';\nimport { SymbolMark, TextMark } from '../marks/marktypes';\nimport { ScopeRole, LegendSymbolRole, LegendLabelRole } from '../marks/roles';\nimport { addEncoders, encoder, extendEncode } from '../encode/encode-util'; // userEncode is top-level, includes entries, symbols, labels\n\nexport default function (spec, config, userEncode, dataRef, columns) {\n  var _ = lookup(spec, config),\n      entries = userEncode.entries,\n      interactive = !!(entries && entries.interactive),\n      name = entries ? entries.name : undefined,\n      height = _('clipHeight'),\n      symbolOffset = _('symbolOffset'),\n      valueRef = {\n    data: 'value'\n  },\n      encode = {},\n      xSignal = `(${columns}) ? datum.${Offset} : datum.${Size}`,\n      yEncode = height ? encoder(height) : {\n    field: Size\n  },\n      index = `datum.${Index}`,\n      ncols = `max(1, ${columns})`,\n      enter,\n      update,\n      labelOffset,\n      symbols,\n      labels,\n      nrows,\n      sort;\n\n  yEncode.mult = 0.5; // -- LEGEND SYMBOLS --\n\n  encode = {\n    enter: enter = {\n      opacity: zero,\n      x: {\n        signal: xSignal,\n        mult: 0.5,\n        offset: symbolOffset\n      },\n      y: yEncode\n    },\n    update: update = {\n      opacity: one,\n      x: enter.x,\n      y: enter.y\n    },\n    exit: {\n      opacity: zero\n    }\n  };\n  var baseFill = null,\n      baseStroke = null;\n\n  if (!spec.fill) {\n    baseFill = config.symbolBaseFillColor;\n    baseStroke = config.symbolBaseStrokeColor;\n  }\n\n  addEncoders(encode, {\n    fill: _('symbolFillColor', baseFill),\n    shape: _('symbolType'),\n    size: _('symbolSize'),\n    stroke: _('symbolStrokeColor', baseStroke),\n    strokeDash: _('symbolDash'),\n    strokeDashOffset: _('symbolDashOffset'),\n    strokeWidth: _('symbolStrokeWidth')\n  }, {\n    // update\n    opacity: _('symbolOpacity')\n  });\n  LegendScales.forEach(function (scale) {\n    if (spec[scale]) {\n      update[scale] = enter[scale] = {\n        scale: spec[scale],\n        field: Value\n      };\n    }\n  });\n  symbols = guideMark(SymbolMark, LegendSymbolRole, null, Value, valueRef, encode, userEncode.symbols);\n  if (height) symbols.clip = true; // -- LEGEND LABELS --\n\n  labelOffset = encoder(symbolOffset);\n  labelOffset.offset = _('labelOffset');\n  encode = {\n    enter: enter = {\n      opacity: zero,\n      x: {\n        signal: xSignal,\n        offset: labelOffset\n      },\n      y: yEncode\n    },\n    update: update = {\n      opacity: one,\n      text: {\n        field: Label\n      },\n      x: enter.x,\n      y: enter.y\n    },\n    exit: {\n      opacity: zero\n    }\n  };\n  addEncoders(encode, {\n    align: _('labelAlign'),\n    baseline: _('labelBaseline'),\n    fill: _('labelColor'),\n    fillOpacity: _('labelOpacity'),\n    font: _('labelFont'),\n    fontSize: _('labelFontSize'),\n    fontStyle: _('labelFontStyle'),\n    fontWeight: _('labelFontWeight'),\n    limit: _('labelLimit')\n  });\n  labels = guideMark(TextMark, LegendLabelRole, GuideLabelStyle, Value, valueRef, encode, userEncode.labels); // -- LEGEND ENTRY GROUPS --\n\n  encode = {\n    enter: {\n      noBound: {\n        value: !height\n      },\n      // ignore width/height in bounds calc\n      width: zero,\n      height: height ? encoder(height) : zero,\n      opacity: zero\n    },\n    exit: {\n      opacity: zero\n    },\n    update: update = {\n      opacity: one,\n      row: {\n        signal: null\n      },\n      column: {\n        signal: null\n      }\n    }\n  }; // annotate and sort groups to ensure correct ordering\n\n  if (_.isVertical(true)) {\n    nrows = `ceil(item.mark.items.length / ${ncols})`;\n    update.row.signal = `${index}%${nrows}`;\n    update.column.signal = `floor(${index} / ${nrows})`;\n    sort = {\n      field: ['row', index]\n    };\n  } else {\n    update.row.signal = `floor(${index} / ${ncols})`;\n    update.column.signal = `${index} % ${ncols}`;\n    sort = {\n      field: index\n    };\n  } // handle zero column case (implies infinite columns)\n\n\n  update.column.signal = `(${columns})?${update.column.signal}:${index}`; // facet legend entries into sub-groups\n\n  dataRef = {\n    facet: {\n      data: dataRef,\n      name: 'value',\n      groupby: Index\n    }\n  };\n  spec = guideGroup(ScopeRole, null, name, dataRef, interactive, extendEncode(encode, entries, Skip), [symbols, labels]);\n  spec.sort = sort;\n  return spec;\n}\nexport function legendSymbolLayout(spec, config) {\n  const _ = lookup(spec, config); // layout parameters for legend entries\n\n\n  return {\n    align: _('gridAlign'),\n    columns: _.entryColumns(),\n    center: {\n      row: true,\n      column: false\n    },\n    padding: {\n      row: _('rowPadding'),\n      column: _('columnPadding')\n    }\n  };\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-parser/src/parsers/guides/legend-symbol-groups.js"],"names":["Index","Label","Offset","Size","Value","zero","one","Skip","GuideLabelStyle","LegendScales","guideGroup","guideMark","lookup","SymbolMark","TextMark","ScopeRole","LegendSymbolRole","LegendLabelRole","addEncoders","encoder","extendEncode","spec","config","userEncode","dataRef","columns","_","entries","interactive","name","undefined","height","symbolOffset","valueRef","data","encode","xSignal","yEncode","field","index","ncols","enter","update","labelOffset","symbols","labels","nrows","sort","mult","opacity","x","signal","offset","y","exit","baseFill","baseStroke","fill","symbolBaseFillColor","symbolBaseStrokeColor","shape","size","stroke","strokeDash","strokeDashOffset","strokeWidth","forEach","scale","clip","text","align","baseline","fillOpacity","font","fontSize","fontStyle","fontWeight","limit","noBound","value","width","row","column","isVertical","facet","groupby","legendSymbolLayout","entryColumns","center","padding"],"mappings":"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","sourcesContent":["import {\n  Index, Label, Offset, Size, Value, zero, one,\n  Skip, GuideLabelStyle, LegendScales\n} from './constants';\nimport guideGroup from './guide-group';\nimport guideMark from './guide-mark';\nimport {lookup} from './guide-util';\nimport {SymbolMark, TextMark} from '../marks/marktypes';\nimport {ScopeRole, LegendSymbolRole, LegendLabelRole} from '../marks/roles';\nimport {addEncoders, encoder, extendEncode} from '../encode/encode-util';\n\n// userEncode is top-level, includes entries, symbols, labels\nexport default function(spec, config, userEncode, dataRef, columns) {\n  var _ = lookup(spec, config),\n      entries = userEncode.entries,\n      interactive = !!(entries && entries.interactive),\n      name = entries ? entries.name : undefined,\n      height = _('clipHeight'),\n      symbolOffset = _('symbolOffset'),\n      valueRef = {data: 'value'},\n      encode = {},\n      xSignal = `(${columns}) ? datum.${Offset} : datum.${Size}`,\n      yEncode = height ? encoder(height) : {field: Size},\n      index = `datum.${Index}`,\n      ncols = `max(1, ${columns})`,\n      enter, update, labelOffset, symbols, labels, nrows, sort;\n\n  yEncode.mult = 0.5;\n\n  // -- LEGEND SYMBOLS --\n  encode = {\n    enter:  enter = {\n      opacity: zero,\n      x: {signal: xSignal, mult: 0.5, offset: symbolOffset},\n      y: yEncode\n    },\n    update: update = {\n      opacity: one,\n      x: enter.x,\n      y: enter.y\n    },\n    exit: {\n      opacity: zero\n    }\n  };\n\n  var baseFill = null,\n      baseStroke = null;\n  if (!spec.fill) {\n    baseFill = config.symbolBaseFillColor;\n    baseStroke = config.symbolBaseStrokeColor;\n  }\n\n  addEncoders(encode, {\n    fill:             _('symbolFillColor', baseFill),\n    shape:            _('symbolType'),\n    size:             _('symbolSize'),\n    stroke:           _('symbolStrokeColor', baseStroke),\n    strokeDash:       _('symbolDash'),\n    strokeDashOffset: _('symbolDashOffset'),\n    strokeWidth:      _('symbolStrokeWidth')\n  }, { // update\n    opacity:          _('symbolOpacity')\n  });\n\n  LegendScales.forEach(function(scale) {\n    if (spec[scale]) {\n      update[scale] = enter[scale] = {scale: spec[scale], field: Value};\n    }\n  });\n\n  symbols = guideMark(\n    SymbolMark, LegendSymbolRole, null,\n    Value, valueRef, encode, userEncode.symbols\n  );\n  if (height) symbols.clip = true;\n\n  // -- LEGEND LABELS --\n  labelOffset = encoder(symbolOffset);\n  labelOffset.offset = _('labelOffset');\n\n  encode = {\n    enter:  enter = {\n      opacity: zero,\n      x: {signal: xSignal, offset: labelOffset},\n      y: yEncode\n    },\n    update: update = {\n      opacity: one,\n      text: {field: Label},\n      x: enter.x,\n      y: enter.y\n    },\n    exit: {\n      opacity: zero\n    }\n  };\n\n  addEncoders(encode, {\n    align:       _('labelAlign'),\n    baseline:    _('labelBaseline'),\n    fill:        _('labelColor'),\n    fillOpacity: _('labelOpacity'),\n    font:        _('labelFont'),\n    fontSize:    _('labelFontSize'),\n    fontStyle:   _('labelFontStyle'),\n    fontWeight:  _('labelFontWeight'),\n    limit:       _('labelLimit')\n  });\n\n  labels = guideMark(\n    TextMark, LegendLabelRole, GuideLabelStyle,\n    Value, valueRef, encode, userEncode.labels\n  );\n\n  // -- LEGEND ENTRY GROUPS --\n  encode = {\n    enter: {\n      noBound: {value: !height}, // ignore width/height in bounds calc\n      width: zero,\n      height: height ? encoder(height) : zero,\n      opacity: zero\n    },\n    exit: {opacity: zero},\n    update: update = {\n      opacity: one,\n      row: {signal: null},\n      column: {signal: null}\n    }\n  };\n\n  // annotate and sort groups to ensure correct ordering\n  if (_.isVertical(true)) {\n    nrows = `ceil(item.mark.items.length / ${ncols})`;\n    update.row.signal = `${index}%${nrows}`;\n    update.column.signal = `floor(${index} / ${nrows})`;\n    sort = {field: ['row', index]};\n  } else {\n    update.row.signal = `floor(${index} / ${ncols})`;\n    update.column.signal = `${index} % ${ncols}`;\n    sort = {field: index};\n  }\n  // handle zero column case (implies infinite columns)\n  update.column.signal = `(${columns})?${update.column.signal}:${index}`;\n\n  // facet legend entries into sub-groups\n  dataRef = {facet: {data: dataRef, name: 'value', groupby: Index}};\n\n  spec = guideGroup(\n    ScopeRole, null, name, dataRef, interactive,\n    extendEncode(encode, entries, Skip), [symbols, labels]\n  );\n  spec.sort = sort;\n  return spec;\n}\n\nexport function legendSymbolLayout(spec, config) {\n  const _ = lookup(spec, config);\n\n  // layout parameters for legend entries\n  return {\n    align:   _('gridAlign'),\n    columns: _.entryColumns(),\n    center:  {\n      row: true,\n      column: false\n    },\n    padding: {\n      row:    _('rowPadding'),\n      column: _('columnPadding')\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}