{"ast":null,"code":"import { tickCount, tickFormat, tickValues, validTicks } from './ticks';\nimport { Transform, ingest } from 'vega-dataflow';\nimport { inherits } from 'vega-util';\n/**\n * Generates axis ticks for visualizing a spatial scale.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Scale} params.scale - The scale to generate ticks for.\n * @param {*} [params.count=10] - The approximate number of ticks, or\n *   desired tick interval, to use.\n * @param {Array<*>} [params.values] - The exact tick values to use.\n *   These must be legal domain values for the provided scale.\n *   If provided, the count argument is ignored.\n * @param {function(*):string} [params.formatSpecifier] - A format specifier\n *   to use in conjunction with scale.tickFormat. Legal values are\n *   any valid d3 4.0 format specifier.\n * @param {function(*):string} [params.format] - The format function to use.\n *   If provided, the formatSpecifier argument is ignored.\n */\n\nexport default function AxisTicks(params) {\n  Transform.call(this, null, params);\n}\nvar prototype = inherits(AxisTicks, Transform);\n\nprototype.transform = function (_, pulse) {\n  if (this.value && !_.modified()) {\n    return pulse.StopPropagation;\n  }\n\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      ticks = this.value,\n      scale = _.scale,\n      tally = _.count == null ? _.values ? _.values.length : 10 : _.count,\n      count = tickCount(scale, tally, _.minstep),\n      format = _.format || tickFormat(scale, count, _.formatSpecifier, _.formatType, !!_.values),\n      values = _.values ? validTicks(scale, _.values, count) : tickValues(scale, count);\n  if (ticks) out.rem = ticks;\n  ticks = values.map(function (value, i) {\n    return ingest({\n      index: i / (values.length - 1 || 1),\n      value: value,\n      label: format(value)\n    });\n  });\n\n  if (_.extra && ticks.length) {\n    // add an extra tick pegged to the initial domain value\n    // this is used to generate axes with 'binned' domains\n    ticks.push(ingest({\n      index: -1,\n      extra: {\n        value: ticks[0].value\n      },\n      label: ''\n    }));\n  }\n\n  out.source = ticks;\n  out.add = ticks;\n  this.value = ticks;\n  return out;\n};","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-encode/src/AxisTicks.js"],"names":["tickCount","tickFormat","tickValues","validTicks","Transform","ingest","inherits","AxisTicks","params","call","prototype","transform","_","pulse","value","modified","StopPropagation","out","fork","NO_SOURCE","NO_FIELDS","ticks","scale","tally","count","values","length","minstep","format","formatSpecifier","formatType","rem","map","i","index","label","extra","push","source","add"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,UAAnB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA4D,SAA5D;AACA,SAAQC,SAAR,EAAmBC,MAAnB,QAAgC,eAAhC;AACA,SAAQC,QAAR,QAAuB,WAAvB;AAEA;;;;;;;;;;;;;;;;;AAgBA,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACxCJ,EAAAA,SAAS,CAACK,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2BD,MAA3B;AACD;AAED,IAAIE,SAAS,GAAGJ,QAAQ,CAACC,SAAD,EAAYH,SAAZ,CAAxB;;AAEAM,SAAS,CAACC,SAAV,GAAsB,UAASC,CAAT,EAAYC,KAAZ,EAAmB;AACvC,MAAI,KAAKC,KAAL,IAAc,CAACF,CAAC,CAACG,QAAF,EAAnB,EAAiC;AAC/B,WAAOF,KAAK,CAACG,eAAb;AACD;;AAED,MAAIC,GAAG,GAAGJ,KAAK,CAACK,IAAN,CAAWL,KAAK,CAACM,SAAN,GAAkBN,KAAK,CAACO,SAAnC,CAAV;AAAA,MACIC,KAAK,GAAG,KAAKP,KADjB;AAAA,MAEIQ,KAAK,GAAGV,CAAC,CAACU,KAFd;AAAA,MAGIC,KAAK,GAAGX,CAAC,CAACY,KAAF,IAAW,IAAX,GAAmBZ,CAAC,CAACa,MAAF,GAAWb,CAAC,CAACa,MAAF,CAASC,MAApB,GAA6B,EAAhD,GAAsDd,CAAC,CAACY,KAHpE;AAAA,MAIIA,KAAK,GAAGxB,SAAS,CAACsB,KAAD,EAAQC,KAAR,EAAeX,CAAC,CAACe,OAAjB,CAJrB;AAAA,MAKIC,MAAM,GAAGhB,CAAC,CAACgB,MAAF,IAAY3B,UAAU,CAACqB,KAAD,EAAQE,KAAR,EAAeZ,CAAC,CAACiB,eAAjB,EAAkCjB,CAAC,CAACkB,UAApC,EAAgD,CAAC,CAAClB,CAAC,CAACa,MAApD,CALnC;AAAA,MAMIA,MAAM,GAAGb,CAAC,CAACa,MAAF,GAAWtB,UAAU,CAACmB,KAAD,EAAQV,CAAC,CAACa,MAAV,EAAkBD,KAAlB,CAArB,GAAgDtB,UAAU,CAACoB,KAAD,EAAQE,KAAR,CANvE;AAQA,MAAIH,KAAJ,EAAWJ,GAAG,CAACc,GAAJ,GAAUV,KAAV;AAEXA,EAAAA,KAAK,GAAGI,MAAM,CAACO,GAAP,CAAW,UAASlB,KAAT,EAAgBmB,CAAhB,EAAmB;AACpC,WAAO5B,MAAM,CAAC;AACZ6B,MAAAA,KAAK,EAAED,CAAC,IAAIR,MAAM,CAACC,MAAP,GAAgB,CAAhB,IAAqB,CAAzB,CADI;AAEZZ,MAAAA,KAAK,EAAEA,KAFK;AAGZqB,MAAAA,KAAK,EAAEP,MAAM,CAACd,KAAD;AAHD,KAAD,CAAb;AAKD,GANO,CAAR;;AAQA,MAAIF,CAAC,CAACwB,KAAF,IAAWf,KAAK,CAACK,MAArB,EAA6B;AAC3B;AACA;AACAL,IAAAA,KAAK,CAACgB,IAAN,CAAWhC,MAAM,CAAC;AAChB6B,MAAAA,KAAK,EAAE,CAAC,CADQ;AAEhBE,MAAAA,KAAK,EAAE;AAACtB,QAAAA,KAAK,EAAEO,KAAK,CAAC,CAAD,CAAL,CAASP;AAAjB,OAFS;AAGhBqB,MAAAA,KAAK,EAAE;AAHS,KAAD,CAAjB;AAKD;;AAEDlB,EAAAA,GAAG,CAACqB,MAAJ,GAAajB,KAAb;AACAJ,EAAAA,GAAG,CAACsB,GAAJ,GAAUlB,KAAV;AACA,OAAKP,KAAL,GAAaO,KAAb;AAEA,SAAOJ,GAAP;AACD,CAtCD","sourcesContent":["import {tickCount, tickFormat, tickValues, validTicks} from './ticks';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Generates axis ticks for visualizing a spatial scale.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Scale} params.scale - The scale to generate ticks for.\n * @param {*} [params.count=10] - The approximate number of ticks, or\n *   desired tick interval, to use.\n * @param {Array<*>} [params.values] - The exact tick values to use.\n *   These must be legal domain values for the provided scale.\n *   If provided, the count argument is ignored.\n * @param {function(*):string} [params.formatSpecifier] - A format specifier\n *   to use in conjunction with scale.tickFormat. Legal values are\n *   any valid d3 4.0 format specifier.\n * @param {function(*):string} [params.format] - The format function to use.\n *   If provided, the formatSpecifier argument is ignored.\n */\nexport default function AxisTicks(params) {\n  Transform.call(this, null, params);\n}\n\nvar prototype = inherits(AxisTicks, Transform);\n\nprototype.transform = function(_, pulse) {\n  if (this.value && !_.modified()) {\n    return pulse.StopPropagation;\n  }\n\n  var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n      ticks = this.value,\n      scale = _.scale,\n      tally = _.count == null ? (_.values ? _.values.length : 10) : _.count,\n      count = tickCount(scale, tally, _.minstep),\n      format = _.format || tickFormat(scale, count, _.formatSpecifier, _.formatType, !!_.values),\n      values = _.values ? validTicks(scale, _.values, count) : tickValues(scale, count);\n\n  if (ticks) out.rem = ticks;\n\n  ticks = values.map(function(value, i) {\n    return ingest({\n      index: i / (values.length - 1 || 1),\n      value: value,\n      label: format(value)\n    });\n  });\n\n  if (_.extra && ticks.length) {\n    // add an extra tick pegged to the initial domain value\n    // this is used to generate axes with 'binned' domains\n    ticks.push(ingest({\n      index: -1,\n      extra: {value: ticks[0].value},\n      label: ''\n    }));\n  }\n\n  out.source = ticks;\n  out.add = ticks;\n  this.value = ticks;\n\n  return out;\n};\n"]},"metadata":{},"sourceType":"module"}