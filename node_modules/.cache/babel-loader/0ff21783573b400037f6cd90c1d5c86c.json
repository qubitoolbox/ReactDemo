{"ast":null,"code":"import { array8, array16, array32 } from './arrays';\n/**\n * Maintains CrossFilter state.\n */\n\nexport default function Bitmaps() {\n  var width = 8,\n      data = [],\n      seen = array32(0),\n      curr = array(0, width),\n      prev = array(0, width);\n  return {\n    data: function () {\n      return data;\n    },\n    seen: function () {\n      return seen = lengthen(seen, data.length);\n    },\n    add: function (array) {\n      for (var i = 0, j = data.length, n = array.length, t; i < n; ++i) {\n        t = array[i];\n        t._index = j++;\n        data.push(t);\n      }\n    },\n    remove: function (num, map) {\n      // map: index -> boolean (true => remove)\n      var n = data.length,\n          copy = Array(n - num),\n          reindex = data,\n          // reuse old data array for index map\n      t,\n          i,\n          j; // seek forward to first removal\n\n      for (i = 0; !map[i] && i < n; ++i) {\n        copy[i] = data[i];\n        reindex[i] = i;\n      } // condense arrays\n\n\n      for (j = i; i < n; ++i) {\n        t = data[i];\n\n        if (!map[i]) {\n          reindex[i] = j;\n          curr[j] = curr[i];\n          prev[j] = prev[i];\n          copy[j] = t;\n          t._index = j++;\n        } else {\n          reindex[i] = -1;\n        }\n\n        curr[i] = 0; // clear unused bits\n      }\n\n      data = copy;\n      return reindex;\n    },\n    size: function () {\n      return data.length;\n    },\n    curr: function () {\n      return curr;\n    },\n    prev: function () {\n      return prev;\n    },\n    reset: function (k) {\n      prev[k] = curr[k];\n    },\n    all: function () {\n      return width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff;\n    },\n    set: function (k, one) {\n      curr[k] |= one;\n    },\n    clear: function (k, one) {\n      curr[k] &= ~one;\n    },\n    resize: function (n, m) {\n      var k = curr.length;\n\n      if (n > k || m > width) {\n        width = Math.max(m, width);\n        curr = array(n, width, curr);\n        prev = array(n, width);\n      }\n    }\n  };\n}\n\nfunction lengthen(array, length, copy) {\n  if (array.length >= length) return array;\n  copy = copy || new array.constructor(length);\n  copy.set(array);\n  return copy;\n}\n\nfunction array(n, m, array) {\n  var copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);\n  if (array) copy.set(array);\n  return copy;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-crossfilter/src/Bitmaps.js"],"names":["array8","array16","array32","Bitmaps","width","data","seen","curr","array","prev","lengthen","length","add","i","j","n","t","_index","push","remove","num","map","copy","Array","reindex","size","reset","k","all","set","one","clear","resize","m","Math","max","constructor"],"mappings":"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","sourcesContent":["import {array8, array16, array32} from './arrays';\n\n/**\n * Maintains CrossFilter state.\n */\nexport default function Bitmaps() {\n\n  var width = 8,\n      data = [],\n      seen = array32(0),\n      curr = array(0, width),\n      prev = array(0, width);\n\n  return {\n\n    data: function() { return data; },\n\n    seen: function() {\n      return (seen = lengthen(seen, data.length));\n    },\n\n    add: function(array) {\n      for (var i=0, j=data.length, n=array.length, t; i<n; ++i) {\n        t = array[i];\n        t._index = j++;\n        data.push(t);\n      }\n    },\n\n    remove: function(num, map) { // map: index -> boolean (true => remove)\n      var n = data.length,\n          copy = Array(n - num),\n          reindex = data, // reuse old data array for index map\n          t, i, j;\n\n      // seek forward to first removal\n      for (i=0; !map[i] && i<n; ++i) {\n        copy[i] = data[i];\n        reindex[i] = i;\n      }\n\n      // condense arrays\n      for (j=i; i<n; ++i) {\n        t = data[i];\n        if (!map[i]) {\n          reindex[i] = j;\n          curr[j] = curr[i];\n          prev[j] = prev[i];\n          copy[j] = t;\n          t._index = j++;\n        } else {\n          reindex[i] = -1;\n        }\n        curr[i] = 0; // clear unused bits\n      }\n\n      data = copy;\n      return reindex;\n    },\n\n    size: function() { return data.length; },\n\n    curr: function() { return curr; },\n\n    prev: function() { return prev; },\n\n    reset: function(k) { prev[k] = curr[k]; },\n\n    all: function() {\n      return width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff;\n    },\n\n    set: function(k, one) { curr[k] |= one; },\n\n    clear: function(k, one) { curr[k] &= ~one; },\n\n    resize: function(n, m) {\n      var k = curr.length;\n      if (n > k || m > width) {\n        width = Math.max(m, width);\n        curr = array(n, width, curr);\n        prev = array(n, width);\n      }\n    }\n  };\n}\n\nfunction lengthen(array, length, copy) {\n  if (array.length >= length) return array;\n  copy = copy || new array.constructor(length);\n  copy.set(array);\n  return copy;\n}\n\nfunction array(n, m, array) {\n  var copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);\n  if (array) copy.set(array);\n  return copy;\n}\n"]},"metadata":{},"sourceType":"module"}