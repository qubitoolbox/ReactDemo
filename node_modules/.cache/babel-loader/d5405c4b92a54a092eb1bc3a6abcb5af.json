{"ast":null,"code":"import Constants from './constants';\nimport Functions from './functions';\nimport { error, hasOwnProperty, isFunction, isString, toSet } from 'vega-util';\n\nfunction stripQuotes(s) {\n  var n = s && s.length - 1;\n  return n && (s[0] === '\"' && s[n] === '\"' || s[0] === '\\'' && s[n] === '\\'') ? s.slice(1, -1) : s;\n}\n\nexport default function (opt) {\n  opt = opt || {};\n  var whitelist = opt.whitelist ? toSet(opt.whitelist) : {},\n      blacklist = opt.blacklist ? toSet(opt.blacklist) : {},\n      constants = opt.constants || Constants,\n      functions = (opt.functions || Functions)(visit),\n      globalvar = opt.globalvar,\n      fieldvar = opt.fieldvar,\n      globals = {},\n      fields = {},\n      memberDepth = 0;\n  var outputGlobal = isFunction(globalvar) ? globalvar : function (id) {\n    return globalvar + '[\"' + id + '\"]';\n  };\n\n  function visit(ast) {\n    if (isString(ast)) return ast;\n    var generator = Generators[ast.type];\n    if (generator == null) error('Unsupported type: ' + ast.type);\n    return generator(ast);\n  }\n\n  var Generators = {\n    Literal: function (n) {\n      return n.raw;\n    },\n    Identifier: function (n) {\n      var id = n.name;\n\n      if (memberDepth > 0) {\n        return id;\n      } else if (hasOwnProperty(blacklist, id)) {\n        return error('Illegal identifier: ' + id);\n      } else if (hasOwnProperty(constants, id)) {\n        return constants[id];\n      } else if (hasOwnProperty(whitelist, id)) {\n        return id;\n      } else {\n        globals[id] = 1;\n        return outputGlobal(id);\n      }\n    },\n    MemberExpression: function (n) {\n      var d = !n.computed;\n      var o = visit(n.object);\n      if (d) memberDepth += 1;\n      var p = visit(n.property);\n\n      if (o === fieldvar) {\n        // strip quotes to sanitize field name (#1653)\n        fields[stripQuotes(p)] = 1;\n      }\n\n      if (d) memberDepth -= 1;\n      return o + (d ? '.' + p : '[' + p + ']');\n    },\n    CallExpression: function (n) {\n      if (n.callee.type !== 'Identifier') {\n        error('Illegal callee type: ' + n.callee.type);\n      }\n\n      var callee = n.callee.name;\n      var args = n.arguments;\n      var fn = hasOwnProperty(functions, callee) && functions[callee];\n      if (!fn) error('Unrecognized function: ' + callee);\n      return isFunction(fn) ? fn(args) : fn + '(' + args.map(visit).join(',') + ')';\n    },\n    ArrayExpression: function (n) {\n      return '[' + n.elements.map(visit).join(',') + ']';\n    },\n    BinaryExpression: function (n) {\n      return '(' + visit(n.left) + n.operator + visit(n.right) + ')';\n    },\n    UnaryExpression: function (n) {\n      return '(' + n.operator + visit(n.argument) + ')';\n    },\n    ConditionalExpression: function (n) {\n      return '(' + visit(n.test) + '?' + visit(n.consequent) + ':' + visit(n.alternate) + ')';\n    },\n    LogicalExpression: function (n) {\n      return '(' + visit(n.left) + n.operator + visit(n.right) + ')';\n    },\n    ObjectExpression: function (n) {\n      return '{' + n.properties.map(visit).join(',') + '}';\n    },\n    Property: function (n) {\n      memberDepth += 1;\n      var k = visit(n.key);\n      memberDepth -= 1;\n      return k + ':' + visit(n.value);\n    }\n  };\n\n  function codegen(ast) {\n    var result = {\n      code: visit(ast),\n      globals: Object.keys(globals),\n      fields: Object.keys(fields)\n    };\n    globals = {};\n    fields = {};\n    return result;\n  }\n\n  codegen.functions = functions;\n  codegen.constants = constants;\n  return codegen;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-expression/src/codegen.js"],"names":["Constants","Functions","error","hasOwnProperty","isFunction","isString","toSet","stripQuotes","s","n","length","slice","opt","whitelist","blacklist","constants","functions","visit","globalvar","fieldvar","globals","fields","memberDepth","outputGlobal","id","ast","generator","Generators","type","Literal","raw","Identifier","name","MemberExpression","d","computed","o","object","p","property","CallExpression","callee","args","arguments","fn","map","join","ArrayExpression","elements","BinaryExpression","left","operator","right","UnaryExpression","argument","ConditionalExpression","test","consequent","alternate","LogicalExpression","ObjectExpression","properties","Property","k","key","value","codegen","result","code","Object","keys"],"mappings":"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","sourcesContent":["import Constants from './constants';\nimport Functions from './functions';\nimport {error, hasOwnProperty, isFunction, isString, toSet} from 'vega-util';\n\nfunction stripQuotes(s) {\n  var n = s && s.length - 1;\n  return n && (\n      (s[0]==='\"' && s[n]==='\"') ||\n      (s[0]==='\\'' && s[n]==='\\'')\n    ) ? s.slice(1, -1) : s;\n}\n\nexport default function(opt) {\n  opt = opt || {};\n\n  var whitelist = opt.whitelist ? toSet(opt.whitelist) : {},\n      blacklist = opt.blacklist ? toSet(opt.blacklist) : {},\n      constants = opt.constants || Constants,\n      functions = (opt.functions || Functions)(visit),\n      globalvar = opt.globalvar,\n      fieldvar = opt.fieldvar,\n      globals = {},\n      fields = {},\n      memberDepth = 0;\n\n  var outputGlobal = isFunction(globalvar)\n    ? globalvar\n    : function (id) { return globalvar + '[\"' + id + '\"]'; };\n\n  function visit(ast) {\n    if (isString(ast)) return ast;\n    var generator = Generators[ast.type];\n    if (generator == null) error('Unsupported type: ' + ast.type);\n    return generator(ast);\n  }\n\n  var Generators = {\n    Literal: function(n) {\n        return n.raw;\n      },\n\n    Identifier: function(n) {\n      var id = n.name;\n      if (memberDepth > 0) {\n        return id;\n      } else if (hasOwnProperty(blacklist, id)) {\n        return error('Illegal identifier: ' + id);\n      } else if (hasOwnProperty(constants, id)) {\n        return constants[id];\n      } else if (hasOwnProperty(whitelist, id)) {\n        return id;\n      } else {\n        globals[id] = 1;\n        return outputGlobal(id);\n      }\n    },\n\n    MemberExpression: function(n) {\n        var d = !n.computed;\n        var o = visit(n.object);\n        if (d) memberDepth += 1;\n        var p = visit(n.property);\n        if (o === fieldvar) {\n          // strip quotes to sanitize field name (#1653)\n          fields[stripQuotes(p)] = 1;\n        }\n        if (d) memberDepth -= 1;\n        return o + (d ? '.'+p : '['+p+']');\n      },\n\n    CallExpression: function(n) {\n        if (n.callee.type !== 'Identifier') {\n          error('Illegal callee type: ' + n.callee.type);\n        }\n        var callee = n.callee.name;\n        var args = n.arguments;\n        var fn = hasOwnProperty(functions, callee) && functions[callee];\n        if (!fn) error('Unrecognized function: ' + callee);\n        return isFunction(fn)\n          ? fn(args)\n          : fn + '(' + args.map(visit).join(',') + ')';\n      },\n\n    ArrayExpression: function(n) {\n        return '[' + n.elements.map(visit).join(',') + ']';\n      },\n\n    BinaryExpression: function(n) {\n        return '(' + visit(n.left) + n.operator + visit(n.right) + ')';\n      },\n\n    UnaryExpression: function(n) {\n        return '(' + n.operator + visit(n.argument) + ')';\n      },\n\n    ConditionalExpression: function(n) {\n        return '(' + visit(n.test) +\n          '?' + visit(n.consequent) +\n          ':' + visit(n.alternate) +\n          ')';\n      },\n\n    LogicalExpression: function(n) {\n        return '(' + visit(n.left) + n.operator + visit(n.right) + ')';\n      },\n\n    ObjectExpression: function(n) {\n        return '{' + n.properties.map(visit).join(',') + '}';\n      },\n\n    Property: function(n) {\n        memberDepth += 1;\n        var k = visit(n.key);\n        memberDepth -= 1;\n        return k + ':' + visit(n.value);\n      }\n  };\n\n  function codegen(ast) {\n    var result = {\n      code:    visit(ast),\n      globals: Object.keys(globals),\n      fields:  Object.keys(fields)\n    };\n    globals = {};\n    fields = {};\n    return result;\n  }\n\n  codegen.functions = functions;\n  codegen.constants = constants;\n\n  return codegen;\n}\n"]},"metadata":{},"sourceType":"module"}