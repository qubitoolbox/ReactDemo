{"ast":null,"code":"import { Bounds, intersect } from 'vega-scenegraph';\nimport { array } from 'vega-util';\nexport default function (b, opt, group) {\n  if (!b) return [];\n  const [u, v] = b,\n        box = new Bounds().set(u[0], u[1], v[0], v[1]),\n        scene = group || this.context.dataflow.scenegraph().root;\n  return intersect(scene, box, filter(opt));\n}\n\nfunction filter(opt) {\n  let p = null;\n\n  if (opt) {\n    const types = array(opt.marktype),\n          names = array(opt.markname);\n\n    p = _ => (!types.length || types.some(t => _.marktype === t)) && (!names.length || names.some(s => _.name === s));\n  }\n\n  return p;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-functions/src/intersect.js"],"names":["Bounds","intersect","array","b","opt","group","u","v","box","set","scene","context","dataflow","scenegraph","root","filter","p","types","marktype","names","markname","_","length","some","t","s","name"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,SAAhB,QAAgC,iBAAhC;AACA,SAAQC,KAAR,QAAoB,WAApB;AAEA,eAAe,UAASC,CAAT,EAAYC,GAAZ,EAAiBC,KAAjB,EAAwB;AACrC,MAAI,CAACF,CAAL,EAAQ,OAAO,EAAP;AAER,QAAM,CAACG,CAAD,EAAIC,CAAJ,IAASJ,CAAf;AAAA,QACMK,GAAG,GAAG,IAAIR,MAAJ,GAAaS,GAAb,CAAiBH,CAAC,CAAC,CAAD,CAAlB,EAAuBA,CAAC,CAAC,CAAD,CAAxB,EAA6BC,CAAC,CAAC,CAAD,CAA9B,EAAmCA,CAAC,CAAC,CAAD,CAApC,CADZ;AAAA,QAEMG,KAAK,GAAGL,KAAK,IAAI,KAAKM,OAAL,CAAaC,QAAb,CAAsBC,UAAtB,GAAmCC,IAF1D;AAIA,SAAOb,SAAS,CAACS,KAAD,EAAQF,GAAR,EAAaO,MAAM,CAACX,GAAD,CAAnB,CAAhB;AACD;;AAED,SAASW,MAAT,CAAgBX,GAAhB,EAAqB;AACnB,MAAIY,CAAC,GAAG,IAAR;;AAEA,MAAIZ,GAAJ,EAAS;AACP,UAAMa,KAAK,GAAGf,KAAK,CAACE,GAAG,CAACc,QAAL,CAAnB;AAAA,UACMC,KAAK,GAAGjB,KAAK,CAACE,GAAG,CAACgB,QAAL,CADnB;;AAEAJ,IAAAA,CAAC,GAAGK,CAAC,IAAI,CAAC,CAACJ,KAAK,CAACK,MAAP,IAAiBL,KAAK,CAACM,IAAN,CAAWC,CAAC,IAAIH,CAAC,CAACH,QAAF,KAAeM,CAA/B,CAAlB,MACC,CAACL,KAAK,CAACG,MAAP,IAAiBH,KAAK,CAACI,IAAN,CAAWE,CAAC,IAAIJ,CAAC,CAACK,IAAF,KAAWD,CAA3B,CADlB,CAAT;AAED;;AAED,SAAOT,CAAP;AACD","sourcesContent":["import {Bounds, intersect} from 'vega-scenegraph';\nimport {array} from 'vega-util';\n\nexport default function(b, opt, group) {\n  if (!b) return [];\n\n  const [u, v] = b,\n        box = new Bounds().set(u[0], u[1], v[0], v[1]),\n        scene = group || this.context.dataflow.scenegraph().root;\n\n  return intersect(scene, box, filter(opt));\n}\n\nfunction filter(opt) {\n  let p = null;\n\n  if (opt) {\n    const types = array(opt.marktype),\n          names = array(opt.markname);\n    p = _ => (!types.length || types.some(t => _.marktype === t))\n          && (!names.length || names.some(s => _.name === s));\n  }\n\n  return p;\n}"]},"metadata":{},"sourceType":"module"}