{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for density transform nodes\n */\n\nexport class DensityTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    var _a, _b, _c;\n\n    super(parent);\n    this.transform = transform;\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n\n    const specifiedAs = (_a = this.transform.as, _a !== null && _a !== void 0 ? _a : [undefined, undefined]);\n    this.transform.as = [(_b = specifiedAs[0], _b !== null && _b !== void 0 ? _b : 'value'), (_c = specifiedAs[1], _c !== null && _c !== void 0 ? _c : 'density')];\n  }\n\n  clone() {\n    return new DensityTransformNode(null, duplicate(this.transform));\n  }\n\n  dependentFields() {\n    var _a;\n\n    return new Set([this.transform.density, ...(_a = this.transform.groupby, _a !== null && _a !== void 0 ? _a : [])]);\n  }\n\n  producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  hash() {\n    return `DensityTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    const _a = this.transform,\n          {\n      density\n    } = _a,\n          rest = __rest(_a, [\"density\"]);\n\n    const result = Object.assign({\n      type: 'kde',\n      field: density\n    }, rest);\n    return result;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/compile/data/density.ts"],"names":[],"mappings":";AAEA,SAAQ,SAAR,EAAmB,IAAnB,QAA8B,YAA9B;AACA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,OAAM,MAAO,oBAAP,SAAoC,YAApC,CAAgD;AAKpD,EAAA,WAAA,CAAY,MAAZ,EAA0C,SAA1C,EAAqE;;;AACnE,UAAM,MAAN;AADwC,SAAA,SAAA,GAAA,SAAA;AAExC,SAAK,SAAL,GAAiB,SAAS,CAAC,SAAD,CAA1B,CAFmE,CAE5B;;AACvC,UAAM,WAAW,IAAA,EAAA,GAAG,KAAK,SAAL,CAAe,EAAlB,EAAoB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,SAAD,EAAY,SAAZ,CAAxB,CAAjB;AACA,SAAK,SAAL,CAAe,EAAf,GAAoB,EAAA,EAAA,GAAC,WAAW,CAAC,CAAD,CAAZ,EAAe,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,OAAnB,IAA0B,EAAA,GAAE,WAAW,CAAC,CAAD,CAAb,EAAgB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,SAA9C,EAApB;AACD;;AATM,EAAA,KAAK,GAAA;AACV,WAAO,IAAI,oBAAJ,CAAyB,IAAzB,EAA+B,SAAS,CAAC,KAAK,SAAN,CAAxC,CAAP;AACD;;AASM,EAAA,eAAe,GAAA;;;AACpB,WAAO,IAAI,GAAJ,CAAQ,CAAC,KAAK,SAAL,CAAe,OAAhB,EAAyB,IAAG,EAAA,GAAC,KAAK,SAAL,CAAe,OAAhB,EAAuB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAA9B,CAAzB,CAAR,CAAP;AACD;;AAEM,EAAA,cAAc,GAAA;AACnB,WAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,EAAvB,CAAP;AACD;;AAEM,EAAA,IAAI,GAAA;AACT,WAAO,oBAAoB,IAAI,CAAC,KAAK,SAAN,CAAgB,EAA/C;AACD;;AAEM,EAAA,QAAQ,GAAA;AACb,UAAM,EAAA,GAAA,KAAA,SAAN;AAAA,UAAM;AAAC,MAAA;AAAD,QAAQ,EAAd;AAAA,UAAgB,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,SAAA,CAAA,CAAhB;;AACA,UAAM,MAAM,GAAA,MAAA,CAAA,MAAA,CAAA;AACV,MAAA,IAAI,EAAE,KADI;AAEV,MAAA,KAAK,EAAE;AAFG,KAAA,EAGP,IAHO,CAAZ;AAKA,WAAO,MAAP;AACD;;AAhCmD","sourcesContent":["import {KDETransform as VgKDETransform} from 'vega';\nimport {DensityTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for density transform nodes\n */\nexport class DensityTransformNode extends DataFlowNode {\n  public clone() {\n    return new DensityTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: DensityTransform) {\n    super(parent);\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const specifiedAs = this.transform.as ?? [undefined, undefined];\n    this.transform.as = [specifiedAs[0] ?? 'value', specifiedAs[1] ?? 'density'];\n  }\n\n  public dependentFields() {\n    return new Set([this.transform.density, ...(this.transform.groupby ?? [])]);\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  public hash() {\n    return `DensityTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgKDETransform {\n    const {density, ...rest} = this.transform;\n    const result: VgKDETransform = {\n      type: 'kde',\n      field: density,\n      ...rest\n    };\n    return result;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}