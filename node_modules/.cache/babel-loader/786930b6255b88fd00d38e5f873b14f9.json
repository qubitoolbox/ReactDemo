{"ast":null,"code":"import { isString } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2 } from '../../channel';\nimport { isValueDef } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class GeoPointNode extends DataFlowNode {\n  constructor(parent, projection, fields, as) {\n    super(parent);\n    this.projection = projection;\n    this.fields = fields;\n    this.as = as;\n  }\n\n  clone() {\n    return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n  }\n\n  static parseAll(parent, model) {\n    if (!model.projectionName()) {\n      return parent;\n    }\n\n    for (const coordinates of [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]) {\n      const pair = coordinates.map(channel => model.channelHasField(channel) ? model.fieldDef(channel).field : isValueDef(model.encoding[channel]) ? {\n        expr: model.encoding[channel].value + ''\n      } : undefined);\n      const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n\n      if (pair[0] || pair[1]) {\n        parent = new GeoPointNode(parent, model.projectionName(), pair, [model.getName('x' + suffix), model.getName('y' + suffix)]);\n      }\n    }\n\n    return parent;\n  }\n\n  dependentFields() {\n    return new Set(this.fields.filter(isString));\n  }\n\n  producedFields() {\n    return new Set(this.as);\n  }\n\n  hash() {\n    return `Geopoint ${this.projection} ${hash(this.fields)} ${hash(this.as)}`;\n  }\n\n  assemble() {\n    return {\n      type: 'geopoint',\n      projection: this.projection,\n      fields: this.fields,\n      as: this.as\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../../src/compile/data/geopoint.ts"],"names":[],"mappings":"AACA,SAAQ,QAAR,QAAuB,WAAvB;AACA,SAA4B,QAA5B,EAAsC,SAAtC,EAAiD,SAAjD,EAA4D,UAA5D,QAA6E,eAA7E;AACA,SAAQ,UAAR,QAAmC,kBAAnC;AACA,SAAQ,SAAR,EAAmB,IAAnB,QAA8B,YAA9B;AAGA,SAAQ,YAAR,QAA2B,YAA3B;AAEA,OAAM,MAAO,YAAP,SAA4B,YAA5B,CAAwC;AAK5C,EAAA,WAAA,CACE,MADF,EAEU,UAFV,EAGU,MAHV,EAIU,EAJV,EAI8B;AAE5B,UAAM,MAAN;AAJQ,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,EAAA,GAAA,EAAA;AAGT;;AAXM,EAAA,KAAK,GAAA;AACV,WAAO,IAAI,YAAJ,CAAiB,IAAjB,EAAuB,KAAK,UAA5B,EAAwC,SAAS,CAAC,KAAK,MAAN,CAAjD,EAAgE,SAAS,CAAC,KAAK,EAAN,CAAzE,CAAP;AACD;;AAWM,SAAO,QAAP,CAAgB,MAAhB,EAAsC,KAAtC,EAAsD;AAC3D,QAAI,CAAC,KAAK,CAAC,cAAN,EAAL,EAA6B;AAC3B,aAAO,MAAP;AACD;;AAED,SAAK,MAAM,WAAX,IAA0B,CACxB,CAAC,SAAD,EAAY,QAAZ,CADwB,EAExB,CAAC,UAAD,EAAa,SAAb,CAFwB,CAA1B,EAGoC;AAClC,YAAM,IAAI,GAAG,WAAW,CAAC,GAAZ,CAAgB,OAAO,IAClC,KAAK,CAAC,eAAN,CAAsB,OAAtB,IACI,KAAK,CAAC,QAAN,CAAe,OAAf,EAAwB,KAD5B,GAEI,UAAU,CAAC,KAAK,CAAC,QAAN,CAAe,OAAf,CAAD,CAAV,GACA;AAAC,QAAA,IAAI,EAAG,KAAK,CAAC,QAAN,CAAe,OAAf,EAA6C,KAA7C,GAAqD;AAA7D,OADA,GAEA,SALO,CAAb;AAQA,YAAM,MAAM,GAAG,WAAW,CAAC,CAAD,CAAX,KAAmB,UAAnB,GAAgC,GAAhC,GAAsC,EAArD;;AAEA,UAAI,IAAI,CAAC,CAAD,CAAJ,IAAW,IAAI,CAAC,CAAD,CAAnB,EAAwB;AACtB,QAAA,MAAM,GAAG,IAAI,YAAJ,CAAiB,MAAjB,EAAyB,KAAK,CAAC,cAAN,EAAzB,EAAiD,IAAjD,EAAuD,CAC9D,KAAK,CAAC,OAAN,CAAc,MAAM,MAApB,CAD8D,EAE9D,KAAK,CAAC,OAAN,CAAc,MAAM,MAApB,CAF8D,CAAvD,CAAT;AAID;AACF;;AAED,WAAO,MAAP;AACD;;AAEM,EAAA,eAAe,GAAA;AACpB,WAAO,IAAI,GAAJ,CAAQ,KAAK,MAAL,CAAY,MAAZ,CAAmB,QAAnB,CAAR,CAAP;AACD;;AAEM,EAAA,cAAc,GAAA;AACnB,WAAO,IAAI,GAAJ,CAAQ,KAAK,EAAb,CAAP;AACD;;AAEM,EAAA,IAAI,GAAA;AACT,WAAO,YAAY,KAAK,UAAU,IAAI,IAAI,CAAC,KAAK,MAAN,CAAa,IAAI,IAAI,CAAC,KAAK,EAAN,CAAS,EAAxE;AACD;;AAEM,EAAA,QAAQ,GAAA;AACb,WAAO;AACL,MAAA,IAAI,EAAE,UADD;AAEL,MAAA,UAAU,EAAE,KAAK,UAFZ;AAGL,MAAA,MAAM,EAAE,KAAK,MAHR;AAIL,MAAA,EAAE,EAAE,KAAK;AAJJ,KAAP;AAMD;;AA/D2C","sourcesContent":["import {GeoPointTransform as VgGeoPointTransform, Vector2} from 'vega';\nimport {isString} from 'vega-util';\nimport {GeoPositionChannel, LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2} from '../../channel';\nimport {isValueDef, ValueDef} from '../../channeldef';\nimport {duplicate, hash} from '../../util';\nimport {VgExprRef} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {DataFlowNode} from './dataflow';\n\nexport class GeoPointNode extends DataFlowNode {\n  public clone() {\n    return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n  }\n\n  constructor(\n    parent: DataFlowNode,\n    private projection: string,\n    private fields: [string | VgExprRef, string | VgExprRef],\n    private as: [string, string]\n  ) {\n    super(parent);\n  }\n\n  public static parseAll(parent: DataFlowNode, model: UnitModel): DataFlowNode {\n    if (!model.projectionName()) {\n      return parent;\n    }\n\n    for (const coordinates of [\n      [LONGITUDE, LATITUDE],\n      [LONGITUDE2, LATITUDE2]\n    ] as Vector2<GeoPositionChannel>[]) {\n      const pair = coordinates.map(channel =>\n        model.channelHasField(channel)\n          ? model.fieldDef(channel).field\n          : isValueDef(model.encoding[channel])\n          ? {expr: (model.encoding[channel] as ValueDef<number>).value + ''}\n          : undefined\n      ) as [GeoPositionChannel, GeoPositionChannel];\n\n      const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n\n      if (pair[0] || pair[1]) {\n        parent = new GeoPointNode(parent, model.projectionName(), pair, [\n          model.getName('x' + suffix),\n          model.getName('y' + suffix)\n        ]);\n      }\n    }\n\n    return parent;\n  }\n\n  public dependentFields() {\n    return new Set(this.fields.filter(isString));\n  }\n\n  public producedFields() {\n    return new Set(this.as);\n  }\n\n  public hash() {\n    return `Geopoint ${this.projection} ${hash(this.fields)} ${hash(this.as)}`;\n  }\n\n  public assemble(): VgGeoPointTransform {\n    return {\n      type: 'geopoint',\n      projection: this.projection,\n      fields: this.fields,\n      as: this.as\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}