{"ast":null,"code":"import { getMarkConfig } from '../common';\nimport * as encode from './encode';\nexport const text = {\n  vgMark: 'text',\n  encodeEntry: model => {\n    const {\n      config,\n      encoding\n    } = model;\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, encode.baseEncodeEntry(model, {\n      align: 'include',\n      baseline: 'include',\n      color: 'include',\n      size: 'ignore',\n      orient: 'ignore'\n    })), encode.pointPosition('x', model, {\n      defaultPos: 'mid'\n    })), encode.pointPosition('y', model, {\n      defaultPos: 'mid'\n    })), encode.text(model)), encode.nonPosition('size', model, {\n      vgChannel: 'fontSize' // VL's text size is fontSize\n\n    })), encode.valueIfDefined('align', align(model.markDef, encoding, config))), encode.valueIfDefined('baseline', baseline(model.markDef, encoding, config)));\n  }\n};\n\nfunction align(markDef, encoding, config) {\n  var _a;\n\n  const a = (_a = markDef.align, _a !== null && _a !== void 0 ? _a : getMarkConfig('align', markDef, config));\n\n  if (a === undefined) {\n    return 'center';\n  } // If there is a config, Vega-parser will process this already.\n\n\n  return undefined;\n}\n\nfunction baseline(markDef, encoding, config) {\n  var _a;\n\n  const b = (_a = markDef.baseline, _a !== null && _a !== void 0 ? _a : getMarkConfig('baseline', markDef, config));\n\n  if (b === undefined) {\n    return 'middle';\n  } // If there is a config, Vega-parser will process this already.\n\n\n  return undefined;\n}","map":{"version":3,"sources":["../../../../src/compile/mark/text.ts"],"names":[],"mappings":"AAGA,SAAQ,aAAR,QAA4B,WAA5B;AAGA,OAAO,KAAK,MAAZ,MAAwB,UAAxB;AAEA,OAAO,MAAM,IAAI,GAAiB;AAChC,EAAA,MAAM,EAAE,MADwB;AAGhC,EAAA,WAAW,EAAG,KAAD,IAAqB;AAChC,UAAM;AAAC,MAAA,MAAD;AAAS,MAAA;AAAT,QAAqB,KAA3B;AAEA,WAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,MAAM,CAAC,eAAP,CAAuB,KAAvB,EAA8B;AAC/B,MAAA,KAAK,EAAE,SADwB;AAE/B,MAAA,QAAQ,EAAE,SAFqB;AAG/B,MAAA,KAAK,EAAE,SAHwB;AAI/B,MAAA,IAAI,EAAE,QAJyB;AAK/B,MAAA,MAAM,EAAE;AALuB,KAA9B,CADL,CAAA,EAQK,MAAM,CAAC,aAAP,CAAqB,GAArB,EAA0B,KAA1B,EAAiC;AAAC,MAAA,UAAU,EAAE;AAAb,KAAjC,CARL,CAAA,EASK,MAAM,CAAC,aAAP,CAAqB,GAArB,EAA0B,KAA1B,EAAiC;AAAC,MAAA,UAAU,EAAE;AAAb,KAAjC,CATL,CAAA,EAUK,MAAM,CAAC,IAAP,CAAY,KAAZ,CAVL,CAAA,EAWK,MAAM,CAAC,WAAP,CAAmB,MAAnB,EAA2B,KAA3B,EAAkC;AACnC,MAAA,SAAS,EAAE,UADwB,CACb;;AADa,KAAlC,CAXL,CAAA,EAcK,MAAM,CAAC,cAAP,CAAsB,OAAtB,EAA+B,KAAK,CAAC,KAAK,CAAC,OAAP,EAAgB,QAAhB,EAA0B,MAA1B,CAApC,CAdL,CAAA,EAeK,MAAM,CAAC,cAAP,CAAsB,UAAtB,EAAkC,QAAQ,CAAC,KAAK,CAAC,OAAP,EAAgB,QAAhB,EAA0B,MAA1B,CAA1C,CAfL,CAAA;AAiBD;AAvB+B,CAA3B;;AA0BP,SAAS,KAAT,CAAe,OAAf,EAAiC,QAAjC,EAA6D,MAA7D,EAA2E;;;AACzE,QAAM,CAAC,IAAA,EAAA,GAAG,OAAO,CAAC,KAAX,EAAgB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,aAAa,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,CAAjC,CAAP;;AACA,MAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,WAAO,QAAP;AACD,GAJwE,CAKzE;;;AACA,SAAO,SAAP;AACD;;AAED,SAAS,QAAT,CAAkB,OAAlB,EAAoC,QAApC,EAAgE,MAAhE,EAA8E;;;AAC5E,QAAM,CAAC,IAAA,EAAA,GAAG,OAAO,CAAC,QAAX,EAAmB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,aAAa,CAAC,UAAD,EAAa,OAAb,EAAsB,MAAtB,CAApC,CAAP;;AACA,MAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,WAAO,QAAP;AACD,GAJ2E,CAK5E;;;AACA,SAAO,SAAP;AACD","sourcesContent":["import {Config} from '../../config';\nimport {Encoding} from '../../encoding';\nimport {MarkDef} from '../../mark';\nimport {getMarkConfig} from '../common';\nimport {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as encode from './encode';\n\nexport const text: MarkCompiler = {\n  vgMark: 'text',\n\n  encodeEntry: (model: UnitModel) => {\n    const {config, encoding} = model;\n\n    return {\n      ...encode.baseEncodeEntry(model, {\n        align: 'include',\n        baseline: 'include',\n        color: 'include',\n        size: 'ignore',\n        orient: 'ignore'\n      }),\n      ...encode.pointPosition('x', model, {defaultPos: 'mid'}),\n      ...encode.pointPosition('y', model, {defaultPos: 'mid'}),\n      ...encode.text(model),\n      ...encode.nonPosition('size', model, {\n        vgChannel: 'fontSize' // VL's text size is fontSize\n      }),\n      ...encode.valueIfDefined('align', align(model.markDef, encoding, config)),\n      ...encode.valueIfDefined('baseline', baseline(model.markDef, encoding, config))\n    };\n  }\n};\n\nfunction align(markDef: MarkDef, encoding: Encoding<string>, config: Config) {\n  const a = markDef.align ?? getMarkConfig('align', markDef, config);\n  if (a === undefined) {\n    return 'center';\n  }\n  // If there is a config, Vega-parser will process this already.\n  return undefined;\n}\n\nfunction baseline(markDef: MarkDef, encoding: Encoding<string>, config: Config) {\n  const b = markDef.baseline ?? getMarkConfig('baseline', markDef, config);\n  if (b === undefined) {\n    return 'middle';\n  }\n  // If there is a config, Vega-parser will process this already.\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}