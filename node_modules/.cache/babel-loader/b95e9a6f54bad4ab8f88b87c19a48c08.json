{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst render_utils_1 = require(\"../render/render_utils\");\n\nconst table_1 = require(\"../render/table\");\n/**\n * Renders a per class accuracy table for classification task evaluation\n *\n * ```js\n * const labels = tf.tensor1d([0, 0, 1, 2, 2, 2]);\n * const predictions = tf.tensor1d([0, 0, 0, 2, 1, 1]);\n *\n * const result = await tfvis.metrics.perClassAccuracy(labels, predictions);\n * console.log(result)\n *\n * const container = {name: 'Per Class Accuracy', tab: 'Evaluation'};\n * const categories = ['cat', 'dog', 'mouse'];\n * await tfvis.show.perClassAccuracy(container, result, categories);\n * ```\n *\n * @param container A `{name: string, tab?: string}` object specifying which\n * surface to render to.\n * @param classAccuracy An `Array<{accuracy: number, count: number}>` array with\n * the accuracy data. See metrics.perClassAccuracy for details on how to\n * generate this object.\n * @param classLabels An array of string labels for the classes in\n * `classAccuracy`. Optional.\n *\n */\n\n\nfunction showPerClassAccuracy(container, classAccuracy, classLabels) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const drawArea = render_utils_1.getDrawArea(container);\n    const headers = ['Class', 'Accuracy', '# Samples'];\n    const values = [];\n\n    for (let i = 0; i < classAccuracy.length; i++) {\n      const label = classLabels ? classLabels[i] : i.toString();\n      const classAcc = classAccuracy[i];\n      values.push([label, classAcc.accuracy, classAcc.count]);\n    }\n\n    return table_1.table(drawArea, {\n      headers,\n      values\n    });\n  });\n}\n\nexports.showPerClassAccuracy = showPerClassAccuracy;","map":{"version":3,"sources":["../../src/show/quality.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,MAAA,cAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAAsB,oBAAtB,CACI,SADJ,EAEI,aAFJ,EAGI,WAHJ,EAG0B;;AACxB,UAAM,QAAQ,GAAG,cAAA,CAAA,WAAA,CAAY,SAAZ,CAAjB;AAEA,UAAM,OAAO,GAAG,CACd,OADc,EAEd,UAFc,EAGd,WAHc,CAAhB;AAKA,UAAM,MAAM,GAAoC,EAAhD;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,aAAa,CAAC,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;AAC7C,YAAM,KAAK,GAAG,WAAW,GAAG,WAAW,CAAC,CAAD,CAAd,GAAoB,CAAC,CAAC,QAAF,EAA7C;AACA,YAAM,QAAQ,GAAG,aAAa,CAAC,CAAD,CAA9B;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,CAAC,KAAD,EAAQ,QAAQ,CAAC,QAAjB,EAA2B,QAAQ,CAAC,KAApC,CAAZ;AACD;;AAED,WAAO,OAAA,CAAA,KAAA,CAAM,QAAN,EAAgB;AAAC,MAAA,OAAD;AAAU,MAAA;AAAV,KAAhB,CAAP;AACD,G;AAAA;;AApBD,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getDrawArea} from '../render/render_utils';\nimport {table} from '../render/table';\nimport {Drawable} from '../types';\n\n/**\n * Renders a per class accuracy table for classification task evaluation\n *\n * ```js\n * const labels = tf.tensor1d([0, 0, 1, 2, 2, 2]);\n * const predictions = tf.tensor1d([0, 0, 0, 2, 1, 1]);\n *\n * const result = await tfvis.metrics.perClassAccuracy(labels, predictions);\n * console.log(result)\n *\n * const container = {name: 'Per Class Accuracy', tab: 'Evaluation'};\n * const categories = ['cat', 'dog', 'mouse'];\n * await tfvis.show.perClassAccuracy(container, result, categories);\n * ```\n *\n * @param container A `{name: string, tab?: string}` object specifying which\n * surface to render to.\n * @param classAccuracy An `Array<{accuracy: number, count: number}>` array with\n * the accuracy data. See metrics.perClassAccuracy for details on how to\n * generate this object.\n * @param classLabels An array of string labels for the classes in\n * `classAccuracy`. Optional.\n *\n */\nexport async function showPerClassAccuracy(\n    container: Drawable,\n    classAccuracy: Array<{accuracy: number, count: number}>,\n    classLabels?: string[]) {\n  const drawArea = getDrawArea(container);\n\n  const headers = [\n    'Class',\n    'Accuracy',\n    '# Samples',\n  ];\n  const values: Array<Array<(string | number)>> = [];\n\n  for (let i = 0; i < classAccuracy.length; i++) {\n    const label = classLabels ? classLabels[i] : i.toString();\n    const classAcc = classAccuracy[i];\n    values.push([label, classAcc.accuracy, classAcc.count]);\n  }\n\n  return table(drawArea, {headers, values});\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}