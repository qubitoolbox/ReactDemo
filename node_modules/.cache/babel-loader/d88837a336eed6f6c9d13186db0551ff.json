{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\FirstML\\\\AnotherMl.js\";\nimport React from \"react\"; //import * as t_f from '@tensorflow/tfjs-node'\n\nimport * as tf from '@tensorflow/tfjs';\nimport LineGraph from 'C:/NewReactResume/resm/src/Components/ChartJs/Charts.js';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport aPic from 'C:/NewReactResume/resm/src/assets/img/indicator.gif'; //const model = tf.sequential();\n//this is how you export a variable lmao\n\nexport var theindata; // = {data:state.x}\n\nexport var thelabels; // = {labels:state.y}\n\nconst model = tf.sequential({\n  layers: [tf.layers.dense({\n    inputShape: [5],\n    units: 5,\n    activation: 'sigmoid'\n  }), tf.layers.dense({\n    units: 10,\n    activation: 'relu'\n  }), tf.layers.dense({\n    units: 15,\n    activation: 'relu'\n  }), tf.layers.dense({\n    units: 5,\n    activation: 'relu'\n  })]\n});\nvar prediction_;\nexport var data_;\nvar labels;\nvar vlafs;\nvar dummy;\nvar dummy1;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(10)\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)'\n  },\n  avatar: {\n    backgroundColor: '#FFF'\n  }\n}));\nmodel.compile({\n  optimizer: 'adam',\n  loss: 'categoricalCrossentropy',\n  metrics: ['accuracy']\n});\nexport var state;\nexport default class AnotherMl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isTfReady: false,\n      trained: false,\n      isitraining: false,\n      x: null,\n      y: null,\n      loss: null,\n      measure: null,\n      measure1: null,\n      datasets: null,\n      counter: 0,\n      prediction: null\n    };\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n\n    this.setState({\n      isTfReady: true\n    });\n    this.setState({\n      trained: false\n    }); //this.setState({counter:0+1})\n    //this.train()\n    //this.setState({training:true})\n    //const source = { uri: response.uri }\n\n    await this.trainTheModel();\n  }\n\n  async trainTheModel() {\n    // Generate dummy data.\n    data_ = tf.randomNormal([100, 5]);\n    labels = tf.randomUniform([100, 5]);\n    this.setState({\n      isitraining: true\n    }); //console.log(data.print())\n    //console.log(labels.print())\n    //this.setState({x:data.array()})\n    //this.setState({y:labels})\n    //data_.array().then(array=>console.log(array))\n\n    let counter = 0; //vlafs = await data.data()//.then(array => console.log(array))\n    //console.log(vlafs)\n    //console.log(vlafs)\n    //console.log(JSON.stringify(this.state.x))\n\n    function onBatchEnd(batch, logs) {\n      console.log(`Accuracy: ${logs.acc}`, `loss: ${logs.loss}`, `epoch: ${counter}`); //console.log(typeof(logs.loss))\n      //this.setState({loss : logs.loss})\n      //let hi = async () => {\n      //}\n      //  hi()\n      //counter += 1;\n      //isTraining()\n      //)\n    }\n\n    function updateChart(logs) {} //console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\n    // Train for 5 epochs with batch size of 32.\n\n\n    model.fit(data_, labels, {\n      epochs: 1,\n      //add sliders to these options.\n      batchSize: 10,\n      callbacks: {\n        onBatchEnd\n      }\n    }).then(info => {\n      //this.setState({isitraining:false})\n      //console.log('Final accuracy', info.history.acc);\n      this.setState({\n        isitraining: false\n      });\n      this.setState({\n        trained: true\n      });\n      this.thePrediction(); //model.summary()\n    }); //this.thePrediction()\n  }\n\n  async thePrediction() {\n    if (this.state.trained) {\n      prediction_ = await model.predict(tf.randomNormal([3, 5])); //console.log(prediction_?\"yes\":\"no\")\n      //console.log(prediction_.print())\n\n      this.setState({\n        prediction: prediction_.toString(prediction_.print())\n      }); //this.setState({prediction: prediction_.print()})\n      //console.log(prediction_.print())\n    }\n\n    this.randomm();\n  }\n\n  async randomm() {\n    dummy = await model.getWeights().values().next().value; //valid call\n    //dummy1 = await model.loss.toString()\n\n    dummy1 = JSON.stringify(model.summary()); //dummy = await model.trainableWeights.toString() not iter\n    //model.g\n    //console.log(\"cokooooooo\",dummy)\n\n    this.setState({\n      measure1: dummy1\n    }); //console.log(this.state.measure1)\n    //document.writeln(this.state.measure1)\n  }\n\n  render() {\n    const {\n      isTfReady,\n      trained,\n      isitraining,\n      measure,\n      x,\n      y,\n      prediction\n    } = this.state;\n    theindata = {\n      data: [1, 2, 3, 4]\n    }; //console.log(\"connn \", theindata)\n\n    thelabels = {\n      labels: {\n        labels: [\"app\", \"ape\", \"ssa\", \"as\", \"art\"]\n      }\n    }; //console.log(theindata)\n    //there shoud be sliders accepting params\n    //there should  be popovers informational of whats going on\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Is TensorFlow Ready?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, this.state.isTfReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Yes Ready\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Not Ready\")))), React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Is the model Training?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, this.state.isitraining ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Yes Training...\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Not Training\")))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Prediction Results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), this.state.prediction && this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, this.state.prediction, \" \") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Loading\", React.createElement(\"img\", {\n      src: aPic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }))))))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Weights from Model\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, this.state.measure1) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Loading\", React.createElement(\"img\", {\n      src: aPic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    })))))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"eval\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, this.state.measure) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"Loading\", React.createElement(\"img\", {\n      src: aPic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    })))))));\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/AnotherMl.js"],"names":["React","tf","LineGraph","Grid","makeStyles","CardHeader","Card","CardContent","aPic","theindata","thelabels","model","sequential","layers","dense","inputShape","units","activation","prediction_","data_","labels","vlafs","dummy","dummy1","useStyles","theme","root","marginTop","spacing","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","compile","optimizer","loss","metrics","state","AnotherMl","Component","constructor","props","isTfReady","trained","isitraining","x","y","measure","measure1","datasets","counter","prediction","componentDidMount","ready","setState","trainTheModel","randomNormal","randomUniform","onBatchEnd","batch","logs","console","log","acc","updateChart","fit","epochs","batchSize","callbacks","then","info","thePrediction","predict","toString","print","randomm","getWeights","values","next","value","JSON","stringify","summary","render","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAOC,SAAP,MAAsB,yDAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,IAAP,MAAiB,qDAAjB,C,CACA;AACA;;AACA,OAAO,IAAIC,SAAJ,C,CAAc;;AACrB,OAAO,IAAIC,SAAJ,C,CAAc;;AAErB,MAAMC,KAAK,GAAGV,EAAE,CAACW,UAAH,CAAc;AACxBC,EAAAA,MAAM,EAAE,CACNZ,EAAE,CAACY,MAAH,CAAUC,KAAV,CAAgB;AAACC,IAAAA,UAAU,EAAE,CAAC,CAAD,CAAb;AAAkBC,IAAAA,KAAK,EAAE,CAAzB;AAA4BC,IAAAA,UAAU,EAAE;AAAxC,GAAhB,CADM,EAENhB,EAAE,CAACY,MAAH,CAAUC,KAAV,CAAgB;AAACE,IAAAA,KAAK,EAAC,EAAP;AAAWC,IAAAA,UAAU,EAAC;AAAtB,GAAhB,CAFM,EAGNhB,EAAE,CAACY,MAAH,CAAUC,KAAV,CAAgB;AAACE,IAAAA,KAAK,EAAC,EAAP;AAAWC,IAAAA,UAAU,EAAC;AAAtB,GAAhB,CAHM,EAINhB,EAAE,CAACY,MAAH,CAAUC,KAAV,CAAgB;AAACE,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,UAAU,EAAE;AAAvB,GAAhB,CAJM;AADgB,CAAd,CAAd;AAQA,IAAIC,WAAJ;AACA,OAAO,IAAIC,KAAJ;AACP,IAAIC,MAAJ;AACA,IAAIC,KAAJ;AACA,IAAIC,KAAJ;AACA,IAAIC,MAAJ;AAEA,MAAMC,SAAS,GAAGpB,UAAU,CAACqB,KAAK,KAAK;AACnCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAACF,KAAK,CAACG,OAAN,CAAc,EAAd;AADN,GAD6B;AAInCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE,CADH;AAELC,IAAAA,UAAU,EAAE,QAFP,CAEiB;;AAFjB,GAJ4B;AAQnCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,SAAS,EAAE,cADL;AAENC,IAAAA,UAAU,EAAE,MAFN;AAGNC,IAAAA,UAAU,EAAEV,KAAK,CAACW,WAAN,CAAkBC,MAAlB,CAAyB,WAAzB,EAAsC;AAChDC,MAAAA,QAAQ,EAAEb,KAAK,CAACW,WAAN,CAAkBE,QAAlB,CAA2BC;AADW,KAAtC;AAHN,GAR2B;AAenCC,EAAAA,UAAU,EAAE;AACVP,IAAAA,SAAS,EAAE;AADD,GAfuB;AAkBnCQ,EAAAA,MAAM,EAAE;AACNC,IAAAA,eAAe,EAAE;AADX;AAlB2B,CAAL,CAAN,CAA5B;AAuBE/B,KAAK,CAACgC,OAAN,CAAc;AACZC,EAAAA,SAAS,EAAE,MADC;AAEZC,EAAAA,IAAI,EAAE,yBAFM;AAGZC,EAAAA,OAAO,EAAE,CAAC,UAAD;AAHG,CAAd;AAKF,OAAO,IAAIC,KAAJ;AAEP,eAAe,MAAMC,SAAN,SAAwBhD,KAAK,CAACiD,SAA9B,CAAuC;AAElDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAEf,UAAMA,KAAN;AAFe,SAKfJ,KALe,GAKP;AACJK,MAAAA,SAAS,EAAC,KADN;AAEJC,MAAAA,OAAO,EAAC,KAFJ;AAGJC,MAAAA,WAAW,EAAE,KAHT;AAIJC,MAAAA,CAAC,EAAG,IAJA;AAKJC,MAAAA,CAAC,EAAG,IALA;AAMJX,MAAAA,IAAI,EAAE,IANF;AAOJY,MAAAA,OAAO,EAAE,IAPL;AAQJC,MAAAA,QAAQ,EAAC,IARL;AASJC,MAAAA,QAAQ,EAAG,IATP;AAUJC,MAAAA,OAAO,EAAG,CAVN;AAWJC,MAAAA,UAAU,EAAC;AAXP,KALO;AAIhB;;AAeH,QAAMC,iBAAN,GAA0B;AACtB;AACA,UAAM7D,EAAE,CAAC8D,KAAH,EAAN,CAFsB,CAGtB;;AACA,SAAKC,QAAL,CAAc;AAACZ,MAAAA,SAAS,EAAE;AAAZ,KAAd;AACA,SAAKY,QAAL,CAAc;AAACX,MAAAA,OAAO,EAAE;AAAV,KAAd,EALsB,CAMtB;AACA;AACA;AACA;;AACA,UAAM,KAAKY,aAAL,EAAN;AACH;;AACD,QAAMA,aAAN,GAAqB;AAEjB;AACA9C,IAAAA,KAAK,GAAGlB,EAAE,CAACiE,YAAH,CAAgB,CAAC,GAAD,EAAM,CAAN,CAAhB,CAAR;AACA9C,IAAAA,MAAM,GAAGnB,EAAE,CAACkE,aAAH,CAAiB,CAAC,GAAD,EAAM,CAAN,CAAjB,CAAT;AACA,SAAKH,QAAL,CAAc;AAACV,MAAAA,WAAW,EAAC;AAAb,KAAd,EALiB,CAMjB;AACA;AACA;AACA;AACA;;AACA,QAAIM,OAAO,GAAG,CAAd,CAXiB,CAajB;AACA;AACA;AACA;;AAEA,aAASQ,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;AAE7BC,MAAAA,OAAO,CAACC,GAAR,CAAa,aAAYF,IAAI,CAACG,GAAI,EAAlC,EAAuC,SAAQH,IAAI,CAACzB,IAAK,EAAzD,EAA8D,UAASe,OAAQ,EAA/E,EAF6B,CAI7B;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACH;;AAED,aAASc,WAAT,CAAqBJ,IAArB,EAA2B,CAG1B,CAHD,CAEI;AAGJ;;;AACA3D,IAAAA,KAAK,CAACgE,GAAN,CAAUxD,KAAV,EAAiBC,MAAjB,EAAyB;AACzBwD,MAAAA,MAAM,EAAE,CADiB;AACd;AACXC,MAAAA,SAAS,EAAE,EAFc;AAGzBC,MAAAA,SAAS,EAAE;AAACV,QAAAA;AAAD;AAHc,KAAzB,EAIGW,IAJH,CAIQC,IAAI,IAAI;AACZ;AACA;AACA,WAAKhB,QAAL,CAAc;AAACV,QAAAA,WAAW,EAAC;AAAb,OAAd;AACA,WAAKU,QAAL,CAAc;AAACX,QAAAA,OAAO,EAAC;AAAT,OAAd;AACA,WAAK4B,aAAL,GALY,CAMZ;AACH,KAXD,EAzCiB,CAwDb;AAEP;;AAGD,QAAMA,aAAN,GAAqB;AAEjB,QAAG,KAAKlC,KAAL,CAAWM,OAAd,EACI;AACInC,MAAAA,WAAW,GAAG,MAAMP,KAAK,CAACuE,OAAN,CAAcjF,EAAE,CAACiE,YAAH,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB,CAAd,CAApB,CADJ,CAEI;AACA;;AACA,WAAKF,QAAL,CAAc;AAACH,QAAAA,UAAU,EAAE3C,WAAW,CAACiE,QAAZ,CAAqBjE,WAAW,CAACkE,KAAZ,EAArB;AAAb,OAAd,EAJJ,CAOI;AACA;AACH;;AACL,SAAKC,OAAL;AACH;;AAED,QAAMA,OAAN,GAAe;AAEX/D,IAAAA,KAAK,GAAG,MAAMX,KAAK,CAAC2E,UAAN,GAAmBC,MAAnB,GAA4BC,IAA5B,GAAmCC,KAAjD,CAFW,CAE4C;AACvD;;AACAlE,IAAAA,MAAM,GAAGmE,IAAI,CAACC,SAAL,CAAehF,KAAK,CAACiF,OAAN,EAAf,CAAT,CAJW,CAMX;AACA;AACA;;AACA,SAAK5B,QAAL,CAAc;AAACN,MAAAA,QAAQ,EAAEnC;AAAX,KAAd,EATW,CAUX;AACA;AACH;;AAEDsE,EAAAA,MAAM,GACF;AACI,UAAM;AAAEzC,MAAAA,SAAF;AAAaC,MAAAA,OAAb;AAAsBC,MAAAA,WAAtB;AAAmCG,MAAAA,OAAnC;AAA4CF,MAAAA,CAA5C;AAA+CC,MAAAA,CAA/C;AAAkDK,MAAAA;AAAlD,QAAiE,KAAKd,KAA5E;AACAtC,IAAAA,SAAS,GAAG;AAACqF,MAAAA,IAAI,EAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP;AAAN,KAAZ,CAFJ,CAGI;;AACApF,IAAAA,SAAS,GAAG;AAACU,MAAAA,MAAM,EAAE;AAAEA,QAAAA,MAAM,EAAC,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,IAAnB,EAAwB,KAAxB;AAAT;AAAT,KAAZ,CAJJ,CAOI;AACA;AACA;;AACA,WAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,UAAD;AAEG,MAAA,KAAK,EAAC,sBAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAMI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAK2B,KAAL,CAAWK,SAAX,GAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAArB,GAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAD1C,CANJ,CADJ,CADA,EAaE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,UAAD;AAEK,MAAA,KAAK,EAAC,wBAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAKC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKL,KAAL,CAAWO,WAAX,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAvB,GAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADnD,CALD,CADJ,CAbF,EAyBG,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,UAAD;AAEI,MAAA,KAAK,EAAC,oBAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAKK,KAAKP,KAAL,CAAWc,UAAX,IAAyB,KAAKd,KAAL,CAAWM,OAApC,GAA6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKN,KAAL,CAAWc,UAAf,MAA7C,GAA8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAU;AAAK,MAAA,GAAG,EAAErD,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV,CALnF,CADJ,CADJ,CAFJ,CAzBH,CADD,EAyCI,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,UAAD;AAEI,MAAA,KAAK,EAAC,oBAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAKI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAKuC,KAAL,CAAWM,OAAX,GAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKN,KAAL,CAAWW,QAAf,CAAnB,GAAgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAU;AAAK,MAAA,GAAG,EAAElD,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV,CAFrD,CALJ,CADJ,CADA,CAzCJ,EAwDI,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,UAAD;AAEI,MAAA,KAAK,EAAC,MAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAKI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKuC,KAAL,CAAWM,OAAX,GAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKN,KAAL,CAAWU,OAAf,CAAnB,GAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAU;AAAK,MAAA,GAAG,EAAEjD,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV,CADpD,CALJ,CADJ,CADJ,CAxDJ,CAFA;AA0EH;;AAjN6C","sourcesContent":["import React from \"react\";\r\n//import * as t_f from '@tensorflow/tfjs-node'\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport LineGraph from 'C:/NewReactResume/resm/src/Components/ChartJs/Charts.js'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport aPic from 'C:/NewReactResume/resm/src/assets/img/indicator.gif'\r\n//const model = tf.sequential();\r\n//this is how you export a variable lmao\r\nexport var theindata;// = {data:state.x}\r\nexport var thelabels;// = {labels:state.y}\r\n\r\nconst model = tf.sequential({\r\n    layers: [\r\n      tf.layers.dense({inputShape: [5], units: 5, activation: 'sigmoid'}),\r\n      tf.layers.dense({units:10, activation:'relu'}),\r\n      tf.layers.dense({units:15, activation:'relu'}),\r\n      tf.layers.dense({units: 5, activation: 'relu'}),\r\n    ]\r\n   });\r\nvar prediction_;\r\nexport var data_;\r\nvar labels;\r\nvar vlafs;\r\nvar dummy;\r\nvar dummy1;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      marginTop:theme.spacing(10),\r\n    },\r\n    media: {\r\n      height: 0,\r\n      paddingTop: '56.25%', // 16:9\r\n    },\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n      backgroundColor: '#FFF',\r\n    },\r\n  }));\r\n\r\n  model.compile({\r\n    optimizer: 'adam',\r\n    loss: 'categoricalCrossentropy',\r\n    metrics: ['accuracy']\r\n  });\r\nexport var state;\r\n\r\nexport default class AnotherMl extends React.Component{\r\n    \r\n    constructor(props) {\r\n\r\n        super(props);\r\n        \r\n      }\r\n        state = {\r\n            isTfReady:false,\r\n            trained:false,\r\n            isitraining: false,\r\n            x : null, \r\n            y : null,\r\n            loss: null,\r\n            measure: null,\r\n            measure1:null,\r\n            datasets : null, \r\n            counter : 0,\r\n            prediction:null\r\n        }  \r\n    \r\n    async componentDidMount() {\r\n        // Wait for tf to be ready.\r\n        await tf.ready();\r\n        // Signal to the app that tensorflow.js can now be used.\r\n        this.setState({isTfReady: true})\r\n        this.setState({trained: false})\r\n        //this.setState({counter:0+1})\r\n        //this.train()\r\n        //this.setState({training:true})\r\n        //const source = { uri: response.uri }\r\n        await this.trainTheModel()\r\n    }\r\n    async trainTheModel(){\r\n\r\n        // Generate dummy data.\r\n        data_ = tf.randomNormal([100, 5]);\r\n        labels = tf.randomUniform([100, 5]);\r\n        this.setState({isitraining:true})\r\n        //console.log(data.print())\r\n        //console.log(labels.print())\r\n        //this.setState({x:data.array()})\r\n        //this.setState({y:labels})\r\n        //data_.array().then(array=>console.log(array))\r\n        let counter = 0;\r\n        \r\n        //vlafs = await data.data()//.then(array => console.log(array))\r\n        //console.log(vlafs)\r\n        //console.log(vlafs)\r\n        //console.log(JSON.stringify(this.state.x))\r\n\r\n        function onBatchEnd(batch, logs) {\r\n            \r\n            console.log(`Accuracy: ${logs.acc}`,  `loss: ${logs.loss}`,  `epoch: ${counter}`);\r\n            \r\n            //console.log(typeof(logs.loss))\r\n            //this.setState({loss : logs.loss})\r\n            //let hi = async () => {\r\n                \r\n                \r\n            //}\r\n            \r\n            //  hi()\r\n            //counter += 1;\r\n            //isTraining()\r\n            //)\r\n        }\r\n\r\n        function updateChart(logs) {\r\n            \r\n            //console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\r\n        }\r\n\r\n        // Train for 5 epochs with batch size of 32.\r\n        model.fit(data_, labels, {\r\n        epochs: 1, //add sliders to these options.\r\n        batchSize: 10,\r\n        callbacks: {onBatchEnd}\r\n        }).then(info => {\r\n            //this.setState({isitraining:false})\r\n            //console.log('Final accuracy', info.history.acc);\r\n            this.setState({isitraining:false})\r\n            this.setState({trained:true})\r\n            this.thePrediction()\r\n            //model.summary()\r\n        });\r\n\r\n        \r\n\r\n            //this.thePrediction()\r\n        \r\n    }\r\n    \r\n\r\n    async thePrediction(){\r\n\r\n        if(this.state.trained)\r\n            {\r\n                prediction_ = await model.predict(tf.randomNormal([3, 5]));\r\n                //console.log(prediction_?\"yes\":\"no\")\r\n                //console.log(prediction_.print())\r\n                this.setState({prediction: prediction_.toString(prediction_.print())})\r\n                \r\n\r\n                //this.setState({prediction: prediction_.print()})\r\n                //console.log(prediction_.print())\r\n            }\r\n        this.randomm()\r\n    }\r\n\r\n    async randomm(){\r\n\r\n        dummy = await model.getWeights().values().next().value //valid call\r\n        //dummy1 = await model.loss.toString()\r\n        dummy1 = JSON.stringify(model.summary())\r\n        \r\n        //dummy = await model.trainableWeights.toString() not iter\r\n        //model.g\r\n        //console.log(\"cokooooooo\",dummy)\r\n        this.setState({measure1: dummy1})\r\n        //console.log(this.state.measure1)\r\n        //document.writeln(this.state.measure1)\r\n    }\r\n    \r\n    render()\r\n        {\r\n            const { isTfReady, trained, isitraining, measure, x, y, prediction } = this.state\r\n            theindata = {data:[1,2,3,4]}\r\n            //console.log(\"connn \", theindata)\r\n            thelabels = {labels: { labels:[\"app\",\"ape\",\"ssa\",\"as\",\"art\"]\r\n            }\r\n        }\r\n            //console.log(theindata)\r\n            //there shoud be sliders accepting params\r\n            //there should  be popovers informational of whats going on\r\n            return (\r\n\r\n            <div>\r\n             <Grid container>\r\n             <Grid item xs={3}>\r\n                 <Card>\r\n                 <CardHeader\r\n        \r\n                    title=\"Is TensorFlow Ready?\"\r\n                        />\r\n                        \r\n                     <CardContent>\r\n                        {this.state.isTfReady?<p>Yes Ready</p>:<p>Not Ready</p>}\r\n                    </CardContent>\r\n                </Card>\r\n               </Grid> \r\n               <Grid item xs={3}>\r\n                   <Card>\r\n                   <CardHeader\r\n        \r\n                        title=\"Is the model Training?\"\r\n                            />\r\n                    <CardContent>\r\n                        {this.state.isitraining?<p>Yes Training...</p>:<p>Not Training</p>}\r\n                    </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                \r\n                <Grid container>\r\n                \r\n                    <Grid item md={12}>\r\n                        <Card>\r\n                            <CardContent>\r\n                            <CardHeader\r\n        \r\n                                title=\"Prediction Results\"\r\n                                    />\r\n                                {this.state.prediction && this.state.trained? <p>{this.state.prediction} </p>: <p>Loading<img src={aPic}></img></p>}\r\n                            </CardContent>\r\n                            </Card>\r\n                    </Grid>\r\n                </Grid>\r\n                </Grid>\r\n                <Grid container>\r\n                <Grid item md={12}>\r\n                    <Card>\r\n                    <CardHeader\r\n        \r\n                        title=\"Weights from Model\"\r\n                            />\r\n                        <CardContent>\r\n                            \r\n                            {this.state.trained?<p>{this.state.measure1}</p>:<p>Loading<img src={aPic}></img></p>}\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n\r\n                </Grid>\r\n                <Grid container>\r\n                    <Grid item md={12}>\r\n                        <Card>\r\n                        <CardHeader\r\n            \r\n                            title=\"eval\"\r\n                                />\r\n                            <CardContent>\r\n                                {this.state.trained?<p>{this.state.measure}</p>:<p>Loading<img src={aPic}></img></p>}\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </div>\r\n            );\r\n        }\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}