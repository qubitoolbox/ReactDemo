{"ast":null,"code":"/*\n  The following expression parser is based on Esprima (http://esprima.org/).\n  Original header comment and license for Esprima is included here:\n\n  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\nimport ASTNode from './ast';\nvar TokenName, source, index, length, lookahead;\nvar TokenBooleanLiteral = 1,\n    TokenEOF = 2,\n    TokenIdentifier = 3,\n    TokenKeyword = 4,\n    TokenNullLiteral = 5,\n    TokenNumericLiteral = 6,\n    TokenPunctuator = 7,\n    TokenStringLiteral = 8,\n    TokenRegularExpression = 9;\nTokenName = {};\nTokenName[TokenBooleanLiteral] = 'Boolean';\nTokenName[TokenEOF] = '<end>';\nTokenName[TokenIdentifier] = 'Identifier';\nTokenName[TokenKeyword] = 'Keyword';\nTokenName[TokenNullLiteral] = 'Null';\nTokenName[TokenNumericLiteral] = 'Numeric';\nTokenName[TokenPunctuator] = 'Punctuator';\nTokenName[TokenStringLiteral] = 'String';\nTokenName[TokenRegularExpression] = 'RegularExpression';\nvar SyntaxArrayExpression = 'ArrayExpression',\n    SyntaxBinaryExpression = 'BinaryExpression',\n    SyntaxCallExpression = 'CallExpression',\n    SyntaxConditionalExpression = 'ConditionalExpression',\n    SyntaxIdentifier = 'Identifier',\n    SyntaxLiteral = 'Literal',\n    SyntaxLogicalExpression = 'LogicalExpression',\n    SyntaxMemberExpression = 'MemberExpression',\n    SyntaxObjectExpression = 'ObjectExpression',\n    SyntaxProperty = 'Property',\n    SyntaxUnaryExpression = 'UnaryExpression'; // Error messages should be identical to V8.\n\nvar MessageUnexpectedToken = 'Unexpected token %0',\n    MessageUnexpectedNumber = 'Unexpected number',\n    MessageUnexpectedString = 'Unexpected string',\n    MessageUnexpectedIdentifier = 'Unexpected identifier',\n    MessageUnexpectedReserved = 'Unexpected reserved word',\n    MessageUnexpectedEOS = 'Unexpected end of input',\n    MessageInvalidRegExp = 'Invalid regular expression',\n    MessageUnterminatedRegExp = 'Invalid regular expression: missing /',\n    MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',\n    MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';\nvar ILLEGAL = 'ILLEGAL',\n    DISABLED = 'Disabled.'; // See also tools/generate-unicode-regex.py.\n\nvar RegexNonAsciiIdentifierStart = new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\"),\n    // eslint-disable-next-line no-misleading-character-class\nRegexNonAsciiIdentifierPart = new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0300-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u0483-\\\\u0487\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0610-\\\\u061A\\\\u0620-\\\\u0669\\\\u066E-\\\\u06D3\\\\u06D5-\\\\u06DC\\\\u06DF-\\\\u06E8\\\\u06EA-\\\\u06FC\\\\u06FF\\\\u0710-\\\\u074A\\\\u074D-\\\\u07B1\\\\u07C0-\\\\u07F5\\\\u07FA\\\\u0800-\\\\u082D\\\\u0840-\\\\u085B\\\\u08A0-\\\\u08B2\\\\u08E4-\\\\u0963\\\\u0966-\\\\u096F\\\\u0971-\\\\u0983\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BC-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CE\\\\u09D7\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E3\\\\u09E6-\\\\u09F1\\\\u0A01-\\\\u0A03\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A66-\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABC-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AD0\\\\u0AE0-\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0B01-\\\\u0B03\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3C-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B56\\\\u0B57\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B71\\\\u0B82\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD0\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C03\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C58\\\\u0C59\\\\u0C60-\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C81-\\\\u0C83\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBC-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CDE\\\\u0CE0-\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0CF1\\\\u0CF2\\\\u0D01-\\\\u0D03\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4E\\\\u0D57\\\\u0D60-\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D7A-\\\\u0D7F\\\\u0D82\\\\u0D83\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E01-\\\\u0E3A\\\\u0E40-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB9\\\\u0EBB-\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F71-\\\\u0F84\\\\u0F86-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u1000-\\\\u1049\\\\u1050-\\\\u109D\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u135D-\\\\u135F\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1714\\\\u1720-\\\\u1734\\\\u1740-\\\\u1753\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1772\\\\u1773\\\\u1780-\\\\u17D3\\\\u17D7\\\\u17DC\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u1810-\\\\u1819\\\\u1820-\\\\u1877\\\\u1880-\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u19D0-\\\\u19D9\\\\u1A00-\\\\u1A1B\\\\u1A20-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AA7\\\\u1AB0-\\\\u1ABD\\\\u1B00-\\\\u1B4B\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1BF3\\\\u1C00-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C4D-\\\\u1C7D\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CF6\\\\u1CF8\\\\u1CF9\\\\u1D00-\\\\u1DF5\\\\u1DFC-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u200C\\\\u200D\\\\u203F\\\\u2040\\\\u2054\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D7F-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2DE0-\\\\u2DFF\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u302F\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u3099\\\\u309A\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA62B\\\\uA640-\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA67F-\\\\uA69D\\\\uA69F-\\\\uA6F1\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA827\\\\uA840-\\\\uA873\\\\uA880-\\\\uA8C4\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F7\\\\uA8FB\\\\uA900-\\\\uA92D\\\\uA930-\\\\uA953\\\\uA960-\\\\uA97C\\\\uA980-\\\\uA9C0\\\\uA9CF-\\\\uA9D9\\\\uA9E0-\\\\uA9FE\\\\uAA00-\\\\uAA36\\\\uAA40-\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA60-\\\\uAA76\\\\uAA7A-\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEF\\\\uAAF2-\\\\uAAF6\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2D\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF10-\\\\uFF19\\\\uFF21-\\\\uFF3A\\\\uFF3F\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\"); // Ensure the condition is true, otherwise throw an error.\n// This is only to have a better contract semantic, i.e. another safety net\n// to catch a logic error. The condition shall be fulfilled in normal case.\n// Do NOT use this to enforce a certain condition on any user input.\n\nfunction assert(condition, message) {\n  /* istanbul ignore next */\n  if (!condition) {\n    throw new Error('ASSERT: ' + message);\n  }\n}\n\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 && ch <= 0x39; // 0..9\n}\n\nfunction isHexDigit(ch) {\n  return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n}\n\nfunction isOctalDigit(ch) {\n  return '01234567'.indexOf(ch) >= 0;\n} // 7.2 White Space\n\n\nfunction isWhiteSpace(ch) {\n  return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0;\n} // 7.3 Line Terminators\n\n\nfunction isLineTerminator(ch) {\n  return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;\n} // 7.6 Identifier Names and Identifiers\n\n\nfunction isIdentifierStart(ch) {\n  return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)\n  ch >= 0x41 && ch <= 0x5A || // A..Z\n  ch >= 0x61 && ch <= 0x7A || // a..z\n  ch === 0x5C || // \\ (backslash)\n  ch >= 0x80 && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch));\n}\n\nfunction isIdentifierPart(ch) {\n  return ch === 0x24 || ch === 0x5F || // $ (dollar) and _ (underscore)\n  ch >= 0x41 && ch <= 0x5A || // A..Z\n  ch >= 0x61 && ch <= 0x7A || // a..z\n  ch >= 0x30 && ch <= 0x39 || // 0..9\n  ch === 0x5C || // \\ (backslash)\n  ch >= 0x80 && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch));\n} // 7.6.1.1 Keywords\n\n\nvar keywords = {\n  'if': 1,\n  'in': 1,\n  'do': 1,\n  'var': 1,\n  'for': 1,\n  'new': 1,\n  'try': 1,\n  'let': 1,\n  'this': 1,\n  'else': 1,\n  'case': 1,\n  'void': 1,\n  'with': 1,\n  'enum': 1,\n  'while': 1,\n  'break': 1,\n  'catch': 1,\n  'throw': 1,\n  'const': 1,\n  'yield': 1,\n  'class': 1,\n  'super': 1,\n  'return': 1,\n  'typeof': 1,\n  'delete': 1,\n  'switch': 1,\n  'export': 1,\n  'import': 1,\n  'public': 1,\n  'static': 1,\n  'default': 1,\n  'finally': 1,\n  'extends': 1,\n  'package': 1,\n  'private': 1,\n  'function': 1,\n  'continue': 1,\n  'debugger': 1,\n  'interface': 1,\n  'protected': 1,\n  'instanceof': 1,\n  'implements': 1\n};\n\nfunction skipComment() {\n  var ch;\n\n  while (index < length) {\n    ch = source.charCodeAt(index);\n\n    if (isWhiteSpace(ch) || isLineTerminator(ch)) {\n      ++index;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction scanHexEscape(prefix) {\n  var i,\n      len,\n      ch,\n      code = 0;\n  len = prefix === 'u' ? 4 : 2;\n\n  for (i = 0; i < len; ++i) {\n    if (index < length && isHexDigit(source[index])) {\n      ch = source[index++];\n      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n    } else {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n  }\n\n  return String.fromCharCode(code);\n}\n\nfunction scanUnicodeCodePointEscape() {\n  var ch, code, cu1, cu2;\n  ch = source[index];\n  code = 0; // At least, one hex digit is required.\n\n  if (ch === '}') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  while (index < length) {\n    ch = source[index++];\n\n    if (!isHexDigit(ch)) {\n      break;\n    }\n\n    code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n  }\n\n  if (code > 0x10FFFF || ch !== '}') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  } // UTF-16 Encoding\n\n\n  if (code <= 0xFFFF) {\n    return String.fromCharCode(code);\n  }\n\n  cu1 = (code - 0x10000 >> 10) + 0xD800;\n  cu2 = (code - 0x10000 & 1023) + 0xDC00;\n  return String.fromCharCode(cu1, cu2);\n}\n\nfunction getEscapedIdentifier() {\n  var ch, id;\n  ch = source.charCodeAt(index++);\n  id = String.fromCharCode(ch); // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n  if (ch === 0x5C) {\n    if (source.charCodeAt(index) !== 0x75) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    ++index;\n    ch = scanHexEscape('u');\n\n    if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n\n    id = ch;\n  }\n\n  while (index < length) {\n    ch = source.charCodeAt(index);\n\n    if (!isIdentifierPart(ch)) {\n      break;\n    }\n\n    ++index;\n    id += String.fromCharCode(ch); // '\\u' (U+005C, U+0075) denotes an escaped character.\n\n    if (ch === 0x5C) {\n      id = id.substr(0, id.length - 1);\n\n      if (source.charCodeAt(index) !== 0x75) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n\n      ++index;\n      ch = scanHexEscape('u');\n\n      if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n\n      id += ch;\n    }\n  }\n\n  return id;\n}\n\nfunction getIdentifier() {\n  var start, ch;\n  start = index++;\n\n  while (index < length) {\n    ch = source.charCodeAt(index);\n\n    if (ch === 0x5C) {\n      // Blackslash (U+005C) marks Unicode escape sequence.\n      index = start;\n      return getEscapedIdentifier();\n    }\n\n    if (isIdentifierPart(ch)) {\n      ++index;\n    } else {\n      break;\n    }\n  }\n\n  return source.slice(start, index);\n}\n\nfunction scanIdentifier() {\n  var start, id, type;\n  start = index; // Backslash (U+005C) starts an escaped character.\n\n  id = source.charCodeAt(index) === 0x5C ? getEscapedIdentifier() : getIdentifier(); // There is no keyword or literal with only one character.\n  // Thus, it must be an identifier.\n\n  if (id.length === 1) {\n    type = TokenIdentifier;\n  } else if (keywords.hasOwnProperty(id)) {\n    // eslint-disable-line no-prototype-builtins\n    type = TokenKeyword;\n  } else if (id === 'null') {\n    type = TokenNullLiteral;\n  } else if (id === 'true' || id === 'false') {\n    type = TokenBooleanLiteral;\n  } else {\n    type = TokenIdentifier;\n  }\n\n  return {\n    type: type,\n    value: id,\n    start: start,\n    end: index\n  };\n} // 7.7 Punctuators\n\n\nfunction scanPunctuator() {\n  var start = index,\n      code = source.charCodeAt(index),\n      code2,\n      ch1 = source[index],\n      ch2,\n      ch3,\n      ch4;\n\n  switch (code) {\n    // Check for most common single-character punctuators.\n    case 0x2E: // . dot\n\n    case 0x28: // ( open bracket\n\n    case 0x29: // ) close bracket\n\n    case 0x3B: // ; semicolon\n\n    case 0x2C: // , comma\n\n    case 0x7B: // { open curly brace\n\n    case 0x7D: // } close curly brace\n\n    case 0x5B: // [\n\n    case 0x5D: // ]\n\n    case 0x3A: // :\n\n    case 0x3F: // ?\n\n    case 0x7E:\n      // ~\n      ++index;\n      return {\n        type: TokenPunctuator,\n        value: String.fromCharCode(code),\n        start: start,\n        end: index\n      };\n\n    default:\n      code2 = source.charCodeAt(index + 1); // '=' (U+003D) marks an assignment or comparison operator.\n\n      if (code2 === 0x3D) {\n        switch (code) {\n          case 0x2B: // +\n\n          case 0x2D: // -\n\n          case 0x2F: // /\n\n          case 0x3C: // <\n\n          case 0x3E: // >\n\n          case 0x5E: // ^\n\n          case 0x7C: // |\n\n          case 0x25: // %\n\n          case 0x26: // &\n\n          case 0x2A:\n            // *\n            index += 2;\n            return {\n              type: TokenPunctuator,\n              value: String.fromCharCode(code) + String.fromCharCode(code2),\n              start: start,\n              end: index\n            };\n\n          case 0x21: // !\n\n          case 0x3D:\n            // =\n            index += 2; // !== and ===\n\n            if (source.charCodeAt(index) === 0x3D) {\n              ++index;\n            }\n\n            return {\n              type: TokenPunctuator,\n              value: source.slice(start, index),\n              start: start,\n              end: index\n            };\n        }\n      }\n\n  } // 4-character punctuator: >>>=\n\n\n  ch4 = source.substr(index, 4);\n\n  if (ch4 === '>>>=') {\n    index += 4;\n    return {\n      type: TokenPunctuator,\n      value: ch4,\n      start: start,\n      end: index\n    };\n  } // 3-character punctuators: === !== >>> <<= >>=\n\n\n  ch3 = ch4.substr(0, 3);\n\n  if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n    index += 3;\n    return {\n      type: TokenPunctuator,\n      value: ch3,\n      start: start,\n      end: index\n    };\n  } // Other 2-character punctuators: ++ -- << >> && ||\n\n\n  ch2 = ch3.substr(0, 2);\n\n  if (ch1 === ch2[1] && '+-<>&|'.indexOf(ch1) >= 0 || ch2 === '=>') {\n    index += 2;\n    return {\n      type: TokenPunctuator,\n      value: ch2,\n      start: start,\n      end: index\n    };\n  } // 1-character punctuators: < > = ! + - * % & | ^ /\n\n\n  if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n    ++index;\n    return {\n      type: TokenPunctuator,\n      value: ch1,\n      start: start,\n      end: index\n    };\n  }\n\n  throwError({}, MessageUnexpectedToken, ILLEGAL);\n} // 7.8.3 Numeric Literals\n\n\nfunction scanHexLiteral(start) {\n  var number = '';\n\n  while (index < length) {\n    if (!isHexDigit(source[index])) {\n      break;\n    }\n\n    number += source[index++];\n  }\n\n  if (number.length === 0) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  if (isIdentifierStart(source.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseInt('0x' + number, 16),\n    start: start,\n    end: index\n  };\n}\n\nfunction scanOctalLiteral(start) {\n  var number = '0' + source[index++];\n\n  while (index < length) {\n    if (!isOctalDigit(source[index])) {\n      break;\n    }\n\n    number += source[index++];\n  }\n\n  if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseInt(number, 8),\n    octal: true,\n    start: start,\n    end: index\n  };\n}\n\nfunction scanNumericLiteral() {\n  var number, start, ch;\n  ch = source[index];\n  assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');\n  start = index;\n  number = '';\n\n  if (ch !== '.') {\n    number = source[index++];\n    ch = source[index]; // Hex number starts with '0x'.\n    // Octal number starts with '0'.\n\n    if (number === '0') {\n      if (ch === 'x' || ch === 'X') {\n        ++index;\n        return scanHexLiteral(start);\n      }\n\n      if (isOctalDigit(ch)) {\n        return scanOctalLiteral(start);\n      } // decimal number starts with '0' such as '09' is illegal.\n\n\n      if (ch && isDecimalDigit(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n    }\n\n    while (isDecimalDigit(source.charCodeAt(index))) {\n      number += source[index++];\n    }\n\n    ch = source[index];\n  }\n\n  if (ch === '.') {\n    number += source[index++];\n\n    while (isDecimalDigit(source.charCodeAt(index))) {\n      number += source[index++];\n    }\n\n    ch = source[index];\n  }\n\n  if (ch === 'e' || ch === 'E') {\n    number += source[index++];\n    ch = source[index];\n\n    if (ch === '+' || ch === '-') {\n      number += source[index++];\n    }\n\n    if (isDecimalDigit(source.charCodeAt(index))) {\n      while (isDecimalDigit(source.charCodeAt(index))) {\n        number += source[index++];\n      }\n    } else {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n  }\n\n  if (isIdentifierStart(source.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseFloat(number),\n    start: start,\n    end: index\n  };\n} // 7.8.4 String Literals\n\n\nfunction scanStringLiteral() {\n  var str = '',\n      quote,\n      start,\n      ch,\n      code,\n      octal = false;\n  quote = source[index];\n  assert(quote === '\\'' || quote === '\"', 'String literal must starts with a quote');\n  start = index;\n  ++index;\n\n  while (index < length) {\n    ch = source[index++];\n\n    if (ch === quote) {\n      quote = '';\n      break;\n    } else if (ch === '\\\\') {\n      ch = source[index++];\n\n      if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n        switch (ch) {\n          case 'u':\n          case 'x':\n            if (source[index] === '{') {\n              ++index;\n              str += scanUnicodeCodePointEscape();\n            } else {\n              str += scanHexEscape(ch);\n            }\n\n            break;\n\n          case 'n':\n            str += '\\n';\n            break;\n\n          case 'r':\n            str += '\\r';\n            break;\n\n          case 't':\n            str += '\\t';\n            break;\n\n          case 'b':\n            str += '\\b';\n            break;\n\n          case 'f':\n            str += '\\f';\n            break;\n\n          case 'v':\n            str += '\\x0B';\n            break;\n\n          default:\n            if (isOctalDigit(ch)) {\n              code = '01234567'.indexOf(ch); // \\0 is not octal escape sequence\n\n              if (code !== 0) {\n                octal = true;\n              }\n\n              if (index < length && isOctalDigit(source[index])) {\n                octal = true;\n                code = code * 8 + '01234567'.indexOf(source[index++]); // 3 digits are only allowed when string starts\n                // with 0, 1, 2, 3\n\n                if ('0123'.indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) {\n                  code = code * 8 + '01234567'.indexOf(source[index++]);\n                }\n              }\n\n              str += String.fromCharCode(code);\n            } else {\n              str += ch;\n            }\n\n            break;\n        }\n      } else {\n        if (ch === '\\r' && source[index] === '\\n') {\n          ++index;\n        }\n      }\n    } else if (isLineTerminator(ch.charCodeAt(0))) {\n      break;\n    } else {\n      str += ch;\n    }\n  }\n\n  if (quote !== '') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenStringLiteral,\n    value: str,\n    octal: octal,\n    start: start,\n    end: index\n  };\n}\n\nfunction testRegExp(pattern, flags) {\n  var tmp = pattern;\n\n  if (flags.indexOf('u') >= 0) {\n    // Replace each astral symbol and every Unicode code point\n    // escape sequence with a single ASCII symbol to avoid throwing on\n    // regular expressions that are only valid in combination with the\n    // `/u` flag.\n    // Note: replacing with the ASCII symbol `x` might cause false\n    // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n    // perfectly valid pattern that is equivalent to `[a-b]`, but it\n    // would be replaced by `[x-b]` which throws an error.\n    tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function ($0, $1) {\n      if (parseInt($1, 16) <= 0x10FFFF) {\n        return 'x';\n      }\n\n      throwError({}, MessageInvalidRegExp);\n    }).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, 'x');\n  } // First, detect invalid regular expressions.\n\n\n  try {\n    new RegExp(tmp);\n  } catch (e) {\n    throwError({}, MessageInvalidRegExp);\n  } // Return a regular expression object for this pattern-flag pair, or\n  // `null` in case the current environment doesn't support the flags it\n  // uses.\n\n\n  try {\n    return new RegExp(pattern, flags);\n  } catch (exception) {\n    return null;\n  }\n}\n\nfunction scanRegExpBody() {\n  var ch, str, classMarker, terminated, body;\n  ch = source[index];\n  assert(ch === '/', 'Regular expression literal must start with a slash');\n  str = source[index++];\n  classMarker = false;\n  terminated = false;\n\n  while (index < length) {\n    ch = source[index++];\n    str += ch;\n\n    if (ch === '\\\\') {\n      ch = source[index++]; // ECMA-262 7.8.5\n\n      if (isLineTerminator(ch.charCodeAt(0))) {\n        throwError({}, MessageUnterminatedRegExp);\n      }\n\n      str += ch;\n    } else if (isLineTerminator(ch.charCodeAt(0))) {\n      throwError({}, MessageUnterminatedRegExp);\n    } else if (classMarker) {\n      if (ch === ']') {\n        classMarker = false;\n      }\n    } else {\n      if (ch === '/') {\n        terminated = true;\n        break;\n      } else if (ch === '[') {\n        classMarker = true;\n      }\n    }\n  }\n\n  if (!terminated) {\n    throwError({}, MessageUnterminatedRegExp);\n  } // Exclude leading and trailing slash.\n\n\n  body = str.substr(1, str.length - 2);\n  return {\n    value: body,\n    literal: str\n  };\n}\n\nfunction scanRegExpFlags() {\n  var ch, str, flags;\n  str = '';\n  flags = '';\n\n  while (index < length) {\n    ch = source[index];\n\n    if (!isIdentifierPart(ch.charCodeAt(0))) {\n      break;\n    }\n\n    ++index;\n\n    if (ch === '\\\\' && index < length) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    } else {\n      flags += ch;\n      str += ch;\n    }\n  }\n\n  if (flags.search(/[^gimuy]/g) >= 0) {\n    throwError({}, MessageInvalidRegExp, flags);\n  }\n\n  return {\n    value: flags,\n    literal: str\n  };\n}\n\nfunction scanRegExp() {\n  var start, body, flags, value;\n  lookahead = null;\n  skipComment();\n  start = index;\n  body = scanRegExpBody();\n  flags = scanRegExpFlags();\n  value = testRegExp(body.value, flags.value);\n  return {\n    literal: body.literal + flags.literal,\n    value: value,\n    regex: {\n      pattern: body.value,\n      flags: flags.value\n    },\n    start: start,\n    end: index\n  };\n}\n\nfunction isIdentifierName(token) {\n  return token.type === TokenIdentifier || token.type === TokenKeyword || token.type === TokenBooleanLiteral || token.type === TokenNullLiteral;\n}\n\nfunction advance() {\n  var ch;\n  skipComment();\n\n  if (index >= length) {\n    return {\n      type: TokenEOF,\n      start: index,\n      end: index\n    };\n  }\n\n  ch = source.charCodeAt(index);\n\n  if (isIdentifierStart(ch)) {\n    return scanIdentifier();\n  } // Very common: ( and ) and ;\n\n\n  if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n    return scanPunctuator();\n  } // String literal starts with single quote (U+0027) or double quote (U+0022).\n\n\n  if (ch === 0x27 || ch === 0x22) {\n    return scanStringLiteral();\n  } // Dot (.) U+002E can also start a floating-point number, hence the need\n  // to check the next character.\n\n\n  if (ch === 0x2E) {\n    if (isDecimalDigit(source.charCodeAt(index + 1))) {\n      return scanNumericLiteral();\n    }\n\n    return scanPunctuator();\n  }\n\n  if (isDecimalDigit(ch)) {\n    return scanNumericLiteral();\n  }\n\n  return scanPunctuator();\n}\n\nfunction lex() {\n  var token;\n  token = lookahead;\n  index = token.end;\n  lookahead = advance();\n  index = token.end;\n  return token;\n}\n\nfunction peek() {\n  var pos;\n  pos = index;\n  lookahead = advance();\n  index = pos;\n}\n\nfunction finishArrayExpression(elements) {\n  var node = new ASTNode(SyntaxArrayExpression);\n  node.elements = elements;\n  return node;\n}\n\nfunction finishBinaryExpression(operator, left, right) {\n  var node = new ASTNode(operator === '||' || operator === '&&' ? SyntaxLogicalExpression : SyntaxBinaryExpression);\n  node.operator = operator;\n  node.left = left;\n  node.right = right;\n  return node;\n}\n\nfunction finishCallExpression(callee, args) {\n  var node = new ASTNode(SyntaxCallExpression);\n  node.callee = callee;\n  node.arguments = args;\n  return node;\n}\n\nfunction finishConditionalExpression(test, consequent, alternate) {\n  var node = new ASTNode(SyntaxConditionalExpression);\n  node.test = test;\n  node.consequent = consequent;\n  node.alternate = alternate;\n  return node;\n}\n\nfunction finishIdentifier(name) {\n  var node = new ASTNode(SyntaxIdentifier);\n  node.name = name;\n  return node;\n}\n\nfunction finishLiteral(token) {\n  var node = new ASTNode(SyntaxLiteral);\n  node.value = token.value;\n  node.raw = source.slice(token.start, token.end);\n\n  if (token.regex) {\n    if (node.raw === '//') {\n      node.raw = '/(?:)/';\n    }\n\n    node.regex = token.regex;\n  }\n\n  return node;\n}\n\nfunction finishMemberExpression(accessor, object, property) {\n  var node = new ASTNode(SyntaxMemberExpression);\n  node.computed = accessor === '[';\n  node.object = object;\n  node.property = property;\n  if (!node.computed) property.member = true;\n  return node;\n}\n\nfunction finishObjectExpression(properties) {\n  var node = new ASTNode(SyntaxObjectExpression);\n  node.properties = properties;\n  return node;\n}\n\nfunction finishProperty(kind, key, value) {\n  var node = new ASTNode(SyntaxProperty);\n  node.key = key;\n  node.value = value;\n  node.kind = kind;\n  return node;\n}\n\nfunction finishUnaryExpression(operator, argument) {\n  var node = new ASTNode(SyntaxUnaryExpression);\n  node.operator = operator;\n  node.argument = argument;\n  node.prefix = true;\n  return node;\n} // Throw an exception\n\n\nfunction throwError(token, messageFormat) {\n  var error,\n      args = Array.prototype.slice.call(arguments, 2),\n      msg = messageFormat.replace(/%(\\d)/g, function (whole, index) {\n    assert(index < args.length, 'Message reference must be in range');\n    return args[index];\n  });\n  error = new Error(msg);\n  error.index = index;\n  error.description = msg;\n  throw error;\n} // Throw an exception because of the token.\n\n\nfunction throwUnexpected(token) {\n  if (token.type === TokenEOF) {\n    throwError(token, MessageUnexpectedEOS);\n  }\n\n  if (token.type === TokenNumericLiteral) {\n    throwError(token, MessageUnexpectedNumber);\n  }\n\n  if (token.type === TokenStringLiteral) {\n    throwError(token, MessageUnexpectedString);\n  }\n\n  if (token.type === TokenIdentifier) {\n    throwError(token, MessageUnexpectedIdentifier);\n  }\n\n  if (token.type === TokenKeyword) {\n    throwError(token, MessageUnexpectedReserved);\n  } // BooleanLiteral, NullLiteral, or Punctuator.\n\n\n  throwError(token, MessageUnexpectedToken, token.value);\n} // Expect the next token to match the specified punctuator.\n// If not, an exception will be thrown.\n\n\nfunction expect(value) {\n  var token = lex();\n\n  if (token.type !== TokenPunctuator || token.value !== value) {\n    throwUnexpected(token);\n  }\n} // Return true if the next token matches the specified punctuator.\n\n\nfunction match(value) {\n  return lookahead.type === TokenPunctuator && lookahead.value === value;\n} // Return true if the next token matches the specified keyword\n\n\nfunction matchKeyword(keyword) {\n  return lookahead.type === TokenKeyword && lookahead.value === keyword;\n} // 11.1.4 Array Initialiser\n\n\nfunction parseArrayInitialiser() {\n  var elements = [];\n  index = lookahead.start;\n  expect('[');\n\n  while (!match(']')) {\n    if (match(',')) {\n      lex();\n      elements.push(null);\n    } else {\n      elements.push(parseConditionalExpression());\n\n      if (!match(']')) {\n        expect(',');\n      }\n    }\n  }\n\n  lex();\n  return finishArrayExpression(elements);\n} // 11.1.5 Object Initialiser\n\n\nfunction parseObjectPropertyKey() {\n  var token;\n  index = lookahead.start;\n  token = lex(); // Note: This function is called only from parseObjectProperty(), where\n  // EOF and Punctuator tokens are already filtered out.\n\n  if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {\n    if (token.octal) {\n      throwError(token, MessageStrictOctalLiteral);\n    }\n\n    return finishLiteral(token);\n  }\n\n  return finishIdentifier(token.value);\n}\n\nfunction parseObjectProperty() {\n  var token, key, id, value;\n  index = lookahead.start;\n  token = lookahead;\n\n  if (token.type === TokenIdentifier) {\n    id = parseObjectPropertyKey();\n    expect(':');\n    value = parseConditionalExpression();\n    return finishProperty('init', id, value);\n  }\n\n  if (token.type === TokenEOF || token.type === TokenPunctuator) {\n    throwUnexpected(token);\n  } else {\n    key = parseObjectPropertyKey();\n    expect(':');\n    value = parseConditionalExpression();\n    return finishProperty('init', key, value);\n  }\n}\n\nfunction parseObjectInitialiser() {\n  var properties = [],\n      property,\n      name,\n      key,\n      map = {},\n      toString = String;\n  index = lookahead.start;\n  expect('{');\n\n  while (!match('}')) {\n    property = parseObjectProperty();\n\n    if (property.key.type === SyntaxIdentifier) {\n      name = property.key.name;\n    } else {\n      name = toString(property.key.value);\n    }\n\n    key = '$' + name;\n\n    if (Object.prototype.hasOwnProperty.call(map, key)) {\n      throwError({}, MessageStrictDuplicateProperty);\n    } else {\n      map[key] = true;\n    }\n\n    properties.push(property);\n\n    if (!match('}')) {\n      expect(',');\n    }\n  }\n\n  expect('}');\n  return finishObjectExpression(properties);\n} // 11.1.6 The Grouping Operator\n\n\nfunction parseGroupExpression() {\n  var expr;\n  expect('(');\n  expr = parseExpression();\n  expect(')');\n  return expr;\n} // 11.1 Primary Expressions\n\n\nvar legalKeywords = {\n  \"if\": 1,\n  \"this\": 1\n};\n\nfunction parsePrimaryExpression() {\n  var type, token, expr;\n\n  if (match('(')) {\n    return parseGroupExpression();\n  }\n\n  if (match('[')) {\n    return parseArrayInitialiser();\n  }\n\n  if (match('{')) {\n    return parseObjectInitialiser();\n  }\n\n  type = lookahead.type;\n  index = lookahead.start;\n\n  if (type === TokenIdentifier || legalKeywords[lookahead.value]) {\n    expr = finishIdentifier(lex().value);\n  } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {\n    if (lookahead.octal) {\n      throwError(lookahead, MessageStrictOctalLiteral);\n    }\n\n    expr = finishLiteral(lex());\n  } else if (type === TokenKeyword) {\n    throw new Error(DISABLED);\n  } else if (type === TokenBooleanLiteral) {\n    token = lex();\n    token.value = token.value === 'true';\n    expr = finishLiteral(token);\n  } else if (type === TokenNullLiteral) {\n    token = lex();\n    token.value = null;\n    expr = finishLiteral(token);\n  } else if (match('/') || match('/=')) {\n    expr = finishLiteral(scanRegExp());\n    peek();\n  } else {\n    throwUnexpected(lex());\n  }\n\n  return expr;\n} // 11.2 Left-Hand-Side Expressions\n\n\nfunction parseArguments() {\n  var args = [];\n  expect('(');\n\n  if (!match(')')) {\n    while (index < length) {\n      args.push(parseConditionalExpression());\n\n      if (match(')')) {\n        break;\n      }\n\n      expect(',');\n    }\n  }\n\n  expect(')');\n  return args;\n}\n\nfunction parseNonComputedProperty() {\n  var token;\n  index = lookahead.start;\n  token = lex();\n\n  if (!isIdentifierName(token)) {\n    throwUnexpected(token);\n  }\n\n  return finishIdentifier(token.value);\n}\n\nfunction parseNonComputedMember() {\n  expect('.');\n  return parseNonComputedProperty();\n}\n\nfunction parseComputedMember() {\n  var expr;\n  expect('[');\n  expr = parseExpression();\n  expect(']');\n  return expr;\n}\n\nfunction parseLeftHandSideExpressionAllowCall() {\n  var expr, args, property;\n  expr = parsePrimaryExpression();\n\n  for (;;) {\n    if (match('.')) {\n      property = parseNonComputedMember();\n      expr = finishMemberExpression('.', expr, property);\n    } else if (match('(')) {\n      args = parseArguments();\n      expr = finishCallExpression(expr, args);\n    } else if (match('[')) {\n      property = parseComputedMember();\n      expr = finishMemberExpression('[', expr, property);\n    } else {\n      break;\n    }\n  }\n\n  return expr;\n} // 11.3 Postfix Expressions\n\n\nfunction parsePostfixExpression() {\n  var expr = parseLeftHandSideExpressionAllowCall();\n\n  if (lookahead.type === TokenPunctuator) {\n    if (match('++') || match('--')) {\n      throw new Error(DISABLED);\n    }\n  }\n\n  return expr;\n} // 11.4 Unary Operators\n\n\nfunction parseUnaryExpression() {\n  var token, expr;\n\n  if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {\n    expr = parsePostfixExpression();\n  } else if (match('++') || match('--')) {\n    throw new Error(DISABLED);\n  } else if (match('+') || match('-') || match('~') || match('!')) {\n    token = lex();\n    expr = parseUnaryExpression();\n    expr = finishUnaryExpression(token.value, expr);\n  } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n    throw new Error(DISABLED);\n  } else {\n    expr = parsePostfixExpression();\n  }\n\n  return expr;\n}\n\nfunction binaryPrecedence(token) {\n  var prec = 0;\n\n  if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {\n    return 0;\n  }\n\n  switch (token.value) {\n    case '||':\n      prec = 1;\n      break;\n\n    case '&&':\n      prec = 2;\n      break;\n\n    case '|':\n      prec = 3;\n      break;\n\n    case '^':\n      prec = 4;\n      break;\n\n    case '&':\n      prec = 5;\n      break;\n\n    case '==':\n    case '!=':\n    case '===':\n    case '!==':\n      prec = 6;\n      break;\n\n    case '<':\n    case '>':\n    case '<=':\n    case '>=':\n    case 'instanceof':\n    case 'in':\n      prec = 7;\n      break;\n\n    case '<<':\n    case '>>':\n    case '>>>':\n      prec = 8;\n      break;\n\n    case '+':\n    case '-':\n      prec = 9;\n      break;\n\n    case '*':\n    case '/':\n    case '%':\n      prec = 11;\n      break;\n\n    default:\n      break;\n  }\n\n  return prec;\n} // 11.5 Multiplicative Operators\n// 11.6 Additive Operators\n// 11.7 Bitwise Shift Operators\n// 11.8 Relational Operators\n// 11.9 Equality Operators\n// 11.10 Binary Bitwise Operators\n// 11.11 Binary Logical Operators\n\n\nfunction parseBinaryExpression() {\n  var marker, markers, expr, token, prec, stack, right, operator, left, i;\n  marker = lookahead;\n  left = parseUnaryExpression();\n  token = lookahead;\n  prec = binaryPrecedence(token);\n\n  if (prec === 0) {\n    return left;\n  }\n\n  token.prec = prec;\n  lex();\n  markers = [marker, lookahead];\n  right = parseUnaryExpression();\n  stack = [left, token, right];\n\n  while ((prec = binaryPrecedence(lookahead)) > 0) {\n    // Reduce: make a binary expression from the three topmost entries.\n    while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n      right = stack.pop();\n      operator = stack.pop().value;\n      left = stack.pop();\n      markers.pop();\n      expr = finishBinaryExpression(operator, left, right);\n      stack.push(expr);\n    } // Shift.\n\n\n    token = lex();\n    token.prec = prec;\n    stack.push(token);\n    markers.push(lookahead);\n    expr = parseUnaryExpression();\n    stack.push(expr);\n  } // Final reduce to clean-up the stack.\n\n\n  i = stack.length - 1;\n  expr = stack[i];\n  markers.pop();\n\n  while (i > 1) {\n    markers.pop();\n    expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n    i -= 2;\n  }\n\n  return expr;\n} // 11.12 Conditional Operator\n\n\nfunction parseConditionalExpression() {\n  var expr, consequent, alternate;\n  expr = parseBinaryExpression();\n\n  if (match('?')) {\n    lex();\n    consequent = parseConditionalExpression();\n    expect(':');\n    alternate = parseConditionalExpression();\n    expr = finishConditionalExpression(expr, consequent, alternate);\n  }\n\n  return expr;\n} // 11.14 Comma Operator\n\n\nfunction parseExpression() {\n  var expr = parseConditionalExpression();\n\n  if (match(',')) {\n    throw new Error(DISABLED); // no sequence expressions\n  }\n\n  return expr;\n}\n\nexport default function (code) {\n  source = code;\n  index = 0;\n  length = source.length;\n  lookahead = null;\n  peek();\n  var expr = parseExpression();\n\n  if (lookahead.type !== TokenEOF) {\n    throw new Error(\"Unexpect token after expression.\");\n  }\n\n  return expr;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-expression/src/parser.js"],"names":["ASTNode","TokenName","source","index","length","lookahead","TokenBooleanLiteral","TokenEOF","TokenIdentifier","TokenKeyword","TokenNullLiteral","TokenNumericLiteral","TokenPunctuator","TokenStringLiteral","TokenRegularExpression","SyntaxArrayExpression","SyntaxBinaryExpression","SyntaxCallExpression","SyntaxConditionalExpression","SyntaxIdentifier","SyntaxLiteral","SyntaxLogicalExpression","SyntaxMemberExpression","SyntaxObjectExpression","SyntaxProperty","SyntaxUnaryExpression","MessageUnexpectedToken","MessageUnexpectedNumber","MessageUnexpectedString","MessageUnexpectedIdentifier","MessageUnexpectedReserved","MessageUnexpectedEOS","MessageInvalidRegExp","MessageUnterminatedRegExp","MessageStrictOctalLiteral","MessageStrictDuplicateProperty","ILLEGAL","DISABLED","RegexNonAsciiIdentifierStart","RegExp","RegexNonAsciiIdentifierPart","assert","condition","message","Error","isDecimalDigit","ch","isHexDigit","indexOf","isOctalDigit","isWhiteSpace","isLineTerminator","isIdentifierStart","test","String","fromCharCode","isIdentifierPart","keywords","skipComment","charCodeAt","scanHexEscape","prefix","i","len","code","toLowerCase","throwError","scanUnicodeCodePointEscape","cu1","cu2","getEscapedIdentifier","id","substr","getIdentifier","start","slice","scanIdentifier","type","hasOwnProperty","value","end","scanPunctuator","code2","ch1","ch2","ch3","ch4","scanHexLiteral","number","parseInt","scanOctalLiteral","octal","scanNumericLiteral","parseFloat","scanStringLiteral","str","quote","testRegExp","pattern","flags","tmp","replace","$0","$1","e","exception","scanRegExpBody","classMarker","terminated","body","literal","scanRegExpFlags","search","scanRegExp","regex","isIdentifierName","token","advance","lex","peek","pos","finishArrayExpression","elements","node","finishBinaryExpression","operator","left","right","finishCallExpression","callee","args","arguments","finishConditionalExpression","consequent","alternate","finishIdentifier","name","finishLiteral","raw","finishMemberExpression","accessor","object","property","computed","member","finishObjectExpression","properties","finishProperty","kind","key","finishUnaryExpression","argument","messageFormat","error","Array","prototype","call","msg","whole","description","throwUnexpected","expect","match","matchKeyword","keyword","parseArrayInitialiser","push","parseConditionalExpression","parseObjectPropertyKey","parseObjectProperty","parseObjectInitialiser","map","toString","Object","parseGroupExpression","expr","parseExpression","legalKeywords","parsePrimaryExpression","parseArguments","parseNonComputedProperty","parseNonComputedMember","parseComputedMember","parseLeftHandSideExpressionAllowCall","parsePostfixExpression","parseUnaryExpression","binaryPrecedence","prec","parseBinaryExpression","marker","markers","stack","pop"],"mappings":"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","sourcesContent":["/*\n  The following expression parser is based on Esprima (http://esprima.org/).\n  Original header comment and license for Esprima is included here:\n\n  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\nimport ASTNode from './ast';\n\nvar TokenName,\n    source,\n    index,\n    length,\n    lookahead;\n\nvar TokenBooleanLiteral = 1,\n    TokenEOF = 2,\n    TokenIdentifier = 3,\n    TokenKeyword = 4,\n    TokenNullLiteral = 5,\n    TokenNumericLiteral = 6,\n    TokenPunctuator = 7,\n    TokenStringLiteral = 8,\n    TokenRegularExpression = 9;\n\nTokenName = {};\nTokenName[TokenBooleanLiteral] = 'Boolean';\nTokenName[TokenEOF] = '<end>';\nTokenName[TokenIdentifier] = 'Identifier';\nTokenName[TokenKeyword] = 'Keyword';\nTokenName[TokenNullLiteral] = 'Null';\nTokenName[TokenNumericLiteral] = 'Numeric';\nTokenName[TokenPunctuator] = 'Punctuator';\nTokenName[TokenStringLiteral] = 'String';\nTokenName[TokenRegularExpression] = 'RegularExpression';\n\nvar SyntaxArrayExpression = 'ArrayExpression',\n    SyntaxBinaryExpression = 'BinaryExpression',\n    SyntaxCallExpression = 'CallExpression',\n    SyntaxConditionalExpression = 'ConditionalExpression',\n    SyntaxIdentifier = 'Identifier',\n    SyntaxLiteral = 'Literal',\n    SyntaxLogicalExpression = 'LogicalExpression',\n    SyntaxMemberExpression = 'MemberExpression',\n    SyntaxObjectExpression = 'ObjectExpression',\n    SyntaxProperty = 'Property',\n    SyntaxUnaryExpression = 'UnaryExpression';\n\n// Error messages should be identical to V8.\nvar MessageUnexpectedToken = 'Unexpected token %0',\n    MessageUnexpectedNumber = 'Unexpected number',\n    MessageUnexpectedString = 'Unexpected string',\n    MessageUnexpectedIdentifier = 'Unexpected identifier',\n    MessageUnexpectedReserved = 'Unexpected reserved word',\n    MessageUnexpectedEOS = 'Unexpected end of input',\n    MessageInvalidRegExp = 'Invalid regular expression',\n    MessageUnterminatedRegExp = 'Invalid regular expression: missing /',\n    MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',\n    MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';\n\nvar ILLEGAL = 'ILLEGAL',\n    DISABLED = 'Disabled.';\n\n// See also tools/generate-unicode-regex.py.\nvar RegexNonAsciiIdentifierStart = new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\"),\n    // eslint-disable-next-line no-misleading-character-class\n    RegexNonAsciiIdentifierPart = new RegExp(\"[\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0300-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u0483-\\\\u0487\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0610-\\\\u061A\\\\u0620-\\\\u0669\\\\u066E-\\\\u06D3\\\\u06D5-\\\\u06DC\\\\u06DF-\\\\u06E8\\\\u06EA-\\\\u06FC\\\\u06FF\\\\u0710-\\\\u074A\\\\u074D-\\\\u07B1\\\\u07C0-\\\\u07F5\\\\u07FA\\\\u0800-\\\\u082D\\\\u0840-\\\\u085B\\\\u08A0-\\\\u08B2\\\\u08E4-\\\\u0963\\\\u0966-\\\\u096F\\\\u0971-\\\\u0983\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BC-\\\\u09C4\\\\u09C7\\\\u09C8\\\\u09CB-\\\\u09CE\\\\u09D7\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E3\\\\u09E6-\\\\u09F1\\\\u0A01-\\\\u0A03\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A3C\\\\u0A3E-\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A66-\\\\u0A75\\\\u0A81-\\\\u0A83\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABC-\\\\u0AC5\\\\u0AC7-\\\\u0AC9\\\\u0ACB-\\\\u0ACD\\\\u0AD0\\\\u0AE0-\\\\u0AE3\\\\u0AE6-\\\\u0AEF\\\\u0B01-\\\\u0B03\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3C-\\\\u0B44\\\\u0B47\\\\u0B48\\\\u0B4B-\\\\u0B4D\\\\u0B56\\\\u0B57\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B63\\\\u0B66-\\\\u0B6F\\\\u0B71\\\\u0B82\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BBE-\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCD\\\\u0BD0\\\\u0BD7\\\\u0BE6-\\\\u0BEF\\\\u0C00-\\\\u0C03\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D-\\\\u0C44\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C58\\\\u0C59\\\\u0C60-\\\\u0C63\\\\u0C66-\\\\u0C6F\\\\u0C81-\\\\u0C83\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBC-\\\\u0CC4\\\\u0CC6-\\\\u0CC8\\\\u0CCA-\\\\u0CCD\\\\u0CD5\\\\u0CD6\\\\u0CDE\\\\u0CE0-\\\\u0CE3\\\\u0CE6-\\\\u0CEF\\\\u0CF1\\\\u0CF2\\\\u0D01-\\\\u0D03\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D-\\\\u0D44\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4E\\\\u0D57\\\\u0D60-\\\\u0D63\\\\u0D66-\\\\u0D6F\\\\u0D7A-\\\\u0D7F\\\\u0D82\\\\u0D83\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0DCA\\\\u0DCF-\\\\u0DD4\\\\u0DD6\\\\u0DD8-\\\\u0DDF\\\\u0DE6-\\\\u0DEF\\\\u0DF2\\\\u0DF3\\\\u0E01-\\\\u0E3A\\\\u0E40-\\\\u0E4E\\\\u0E50-\\\\u0E59\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB9\\\\u0EBB-\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EC8-\\\\u0ECD\\\\u0ED0-\\\\u0ED9\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F18\\\\u0F19\\\\u0F20-\\\\u0F29\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F3E-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F71-\\\\u0F84\\\\u0F86-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u1000-\\\\u1049\\\\u1050-\\\\u109D\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u135D-\\\\u135F\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1714\\\\u1720-\\\\u1734\\\\u1740-\\\\u1753\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1772\\\\u1773\\\\u1780-\\\\u17D3\\\\u17D7\\\\u17DC\\\\u17DD\\\\u17E0-\\\\u17E9\\\\u180B-\\\\u180D\\\\u1810-\\\\u1819\\\\u1820-\\\\u1877\\\\u1880-\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1920-\\\\u192B\\\\u1930-\\\\u193B\\\\u1946-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u19D0-\\\\u19D9\\\\u1A00-\\\\u1A1B\\\\u1A20-\\\\u1A5E\\\\u1A60-\\\\u1A7C\\\\u1A7F-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1AA7\\\\u1AB0-\\\\u1ABD\\\\u1B00-\\\\u1B4B\\\\u1B50-\\\\u1B59\\\\u1B6B-\\\\u1B73\\\\u1B80-\\\\u1BF3\\\\u1C00-\\\\u1C37\\\\u1C40-\\\\u1C49\\\\u1C4D-\\\\u1C7D\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CF6\\\\u1CF8\\\\u1CF9\\\\u1D00-\\\\u1DF5\\\\u1DFC-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u200C\\\\u200D\\\\u203F\\\\u2040\\\\u2054\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D7F-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2DE0-\\\\u2DFF\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u302F\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u3099\\\\u309A\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA62B\\\\uA640-\\\\uA66F\\\\uA674-\\\\uA67D\\\\uA67F-\\\\uA69D\\\\uA69F-\\\\uA6F1\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA827\\\\uA840-\\\\uA873\\\\uA880-\\\\uA8C4\\\\uA8D0-\\\\uA8D9\\\\uA8E0-\\\\uA8F7\\\\uA8FB\\\\uA900-\\\\uA92D\\\\uA930-\\\\uA953\\\\uA960-\\\\uA97C\\\\uA980-\\\\uA9C0\\\\uA9CF-\\\\uA9D9\\\\uA9E0-\\\\uA9FE\\\\uAA00-\\\\uAA36\\\\uAA40-\\\\uAA4D\\\\uAA50-\\\\uAA59\\\\uAA60-\\\\uAA76\\\\uAA7A-\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEF\\\\uAAF2-\\\\uAAF6\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABEA\\\\uABEC\\\\uABED\\\\uABF0-\\\\uABF9\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE2D\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF10-\\\\uFF19\\\\uFF21-\\\\uFF3A\\\\uFF3F\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\");\n\n// Ensure the condition is true, otherwise throw an error.\n// This is only to have a better contract semantic, i.e. another safety net\n// to catch a logic error. The condition shall be fulfilled in normal case.\n// Do NOT use this to enforce a certain condition on any user input.\n\nfunction assert(condition, message) {\n  /* istanbul ignore next */\n  if (!condition) {\n    throw new Error('ASSERT: ' + message);\n  }\n}\n\nfunction isDecimalDigit(ch) {\n  return (ch >= 0x30 && ch <= 0x39); // 0..9\n}\n\nfunction isHexDigit(ch) {\n  return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n}\n\nfunction isOctalDigit(ch) {\n  return '01234567'.indexOf(ch) >= 0;\n}\n\n// 7.2 White Space\n\nfunction isWhiteSpace(ch) {\n  return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n    (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n}\n\n// 7.3 Line Terminators\n\nfunction isLineTerminator(ch) {\n  return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n}\n\n// 7.6 Identifier Names and Identifiers\n\nfunction isIdentifierStart(ch) {\n  return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n    (ch >= 0x41 && ch <= 0x5A) || // A..Z\n    (ch >= 0x61 && ch <= 0x7A) || // a..z\n    (ch === 0x5C) || // \\ (backslash)\n    ((ch >= 0x80) && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch)));\n}\n\nfunction isIdentifierPart(ch) {\n  return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)\n    (ch >= 0x41 && ch <= 0x5A) || // A..Z\n    (ch >= 0x61 && ch <= 0x7A) || // a..z\n    (ch >= 0x30 && ch <= 0x39) || // 0..9\n    (ch === 0x5C) || // \\ (backslash)\n    ((ch >= 0x80) && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n}\n\n// 7.6.1.1 Keywords\n\nvar keywords = {\n  'if':1, 'in':1, 'do':1,\n  'var':1, 'for':1, 'new':1, 'try':1, 'let':1,\n  'this':1, 'else':1, 'case':1, 'void':1, 'with':1, 'enum':1,\n  'while':1, 'break':1, 'catch':1, 'throw':1, 'const':1, 'yield':1, 'class':1, 'super':1,\n  'return':1, 'typeof':1, 'delete':1, 'switch':1, 'export':1, 'import':1, 'public':1, 'static':1,\n  'default':1, 'finally':1, 'extends':1, 'package':1, 'private':1,\n  'function':1, 'continue':1, 'debugger':1,\n  'interface':1, 'protected':1,\n  'instanceof':1, 'implements':1\n};\n\nfunction skipComment() {\n  var ch;\n\n  while (index < length) {\n    ch = source.charCodeAt(index);\n\n    if (isWhiteSpace(ch) || isLineTerminator(ch)) {\n      ++index;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction scanHexEscape(prefix) {\n  var i, len, ch, code = 0;\n\n  len = (prefix === 'u') ? 4 : 2;\n  for (i = 0; i < len; ++i) {\n    if (index < length && isHexDigit(source[index])) {\n      ch = source[index++];\n      code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n    } else {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n  }\n  return String.fromCharCode(code);\n}\n\nfunction scanUnicodeCodePointEscape() {\n  var ch, code, cu1, cu2;\n\n  ch = source[index];\n  code = 0;\n\n  // At least, one hex digit is required.\n  if (ch === '}') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  while (index < length) {\n    ch = source[index++];\n    if (!isHexDigit(ch)) {\n      break;\n    }\n    code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n  }\n\n  if (code > 0x10FFFF || ch !== '}') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  // UTF-16 Encoding\n  if (code <= 0xFFFF) {\n    return String.fromCharCode(code);\n  }\n  cu1 = ((code - 0x10000) >> 10) + 0xD800;\n  cu2 = ((code - 0x10000) & 1023) + 0xDC00;\n  return String.fromCharCode(cu1, cu2);\n}\n\nfunction getEscapedIdentifier() {\n  var ch, id;\n\n  ch = source.charCodeAt(index++);\n  id = String.fromCharCode(ch);\n\n  // '\\u' (U+005C, U+0075) denotes an escaped character.\n  if (ch === 0x5C) {\n    if (source.charCodeAt(index) !== 0x75) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n    ++index;\n    ch = scanHexEscape('u');\n    if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n    id = ch;\n  }\n\n  while (index < length) {\n    ch = source.charCodeAt(index);\n    if (!isIdentifierPart(ch)) {\n      break;\n    }\n    ++index;\n    id += String.fromCharCode(ch);\n\n    // '\\u' (U+005C, U+0075) denotes an escaped character.\n    if (ch === 0x5C) {\n      id = id.substr(0, id.length - 1);\n      if (source.charCodeAt(index) !== 0x75) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      ++index;\n      ch = scanHexEscape('u');\n      if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n      id += ch;\n    }\n  }\n\n  return id;\n}\n\nfunction getIdentifier() {\n  var start, ch;\n\n  start = index++;\n  while (index < length) {\n    ch = source.charCodeAt(index);\n    if (ch === 0x5C) {\n      // Blackslash (U+005C) marks Unicode escape sequence.\n      index = start;\n      return getEscapedIdentifier();\n    }\n    if (isIdentifierPart(ch)) {\n      ++index;\n    } else {\n      break;\n    }\n  }\n\n  return source.slice(start, index);\n}\n\nfunction scanIdentifier() {\n  var start, id, type;\n\n  start = index;\n\n  // Backslash (U+005C) starts an escaped character.\n  id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();\n\n  // There is no keyword or literal with only one character.\n  // Thus, it must be an identifier.\n  if (id.length === 1) {\n    type = TokenIdentifier;\n  } else if (keywords.hasOwnProperty(id)) { // eslint-disable-line no-prototype-builtins\n    type = TokenKeyword;\n  } else if (id === 'null') {\n    type = TokenNullLiteral;\n  } else if (id === 'true' || id === 'false') {\n    type = TokenBooleanLiteral;\n  } else {\n    type = TokenIdentifier;\n  }\n\n  return {\n    type: type,\n    value: id,\n    start: start,\n    end: index\n  };\n}\n\n// 7.7 Punctuators\n\nfunction scanPunctuator() {\n  var start = index,\n    code = source.charCodeAt(index),\n    code2,\n    ch1 = source[index],\n    ch2,\n    ch3,\n    ch4;\n\n  switch (code) {\n\n    // Check for most common single-character punctuators.\n    case 0x2E: // . dot\n    case 0x28: // ( open bracket\n    case 0x29: // ) close bracket\n    case 0x3B: // ; semicolon\n    case 0x2C: // , comma\n    case 0x7B: // { open curly brace\n    case 0x7D: // } close curly brace\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x3A: // :\n    case 0x3F: // ?\n    case 0x7E: // ~\n      ++index;\n      return {\n        type: TokenPunctuator,\n        value: String.fromCharCode(code),\n        start: start,\n        end: index\n      };\n\n    default:\n      code2 = source.charCodeAt(index + 1);\n\n      // '=' (U+003D) marks an assignment or comparison operator.\n      if (code2 === 0x3D) {\n        switch (code) {\n          case 0x2B: // +\n          case 0x2D: // -\n          case 0x2F: // /\n          case 0x3C: // <\n          case 0x3E: // >\n          case 0x5E: // ^\n          case 0x7C: // |\n          case 0x25: // %\n          case 0x26: // &\n          case 0x2A: // *\n            index += 2;\n            return {\n              type: TokenPunctuator,\n              value: String.fromCharCode(code) + String.fromCharCode(code2),\n              start: start,\n              end: index\n            };\n\n          case 0x21: // !\n          case 0x3D: // =\n            index += 2;\n\n            // !== and ===\n            if (source.charCodeAt(index) === 0x3D) {\n              ++index;\n            }\n            return {\n              type: TokenPunctuator,\n              value: source.slice(start, index),\n              start: start,\n              end: index\n            };\n        }\n      }\n  }\n\n  // 4-character punctuator: >>>=\n\n  ch4 = source.substr(index, 4);\n\n  if (ch4 === '>>>=') {\n    index += 4;\n    return {\n      type: TokenPunctuator,\n      value: ch4,\n      start: start,\n      end: index\n    };\n  }\n\n  // 3-character punctuators: === !== >>> <<= >>=\n\n  ch3 = ch4.substr(0, 3);\n\n  if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {\n    index += 3;\n    return {\n      type: TokenPunctuator,\n      value: ch3,\n      start: start,\n      end: index\n    };\n  }\n\n  // Other 2-character punctuators: ++ -- << >> && ||\n  ch2 = ch3.substr(0, 2);\n\n  if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {\n    index += 2;\n    return {\n      type: TokenPunctuator,\n      value: ch2,\n      start: start,\n      end: index\n    };\n  }\n\n  // 1-character punctuators: < > = ! + - * % & | ^ /\n\n  if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n    ++index;\n    return {\n      type: TokenPunctuator,\n      value: ch1,\n      start: start,\n      end: index\n    };\n  }\n\n  throwError({}, MessageUnexpectedToken, ILLEGAL);\n}\n\n// 7.8.3 Numeric Literals\n\nfunction scanHexLiteral(start) {\n  var number = '';\n\n  while (index < length) {\n    if (!isHexDigit(source[index])) {\n      break;\n    }\n    number += source[index++];\n  }\n\n  if (number.length === 0) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  if (isIdentifierStart(source.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseInt('0x' + number, 16),\n    start: start,\n    end: index\n  };\n}\n\nfunction scanOctalLiteral(start) {\n  var number = '0' + source[index++];\n  while (index < length) {\n    if (!isOctalDigit(source[index])) {\n      break;\n    }\n    number += source[index++];\n  }\n\n  if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseInt(number, 8),\n    octal: true,\n    start: start,\n    end: index\n  };\n}\n\nfunction scanNumericLiteral() {\n  var number, start, ch;\n\n  ch = source[index];\n  assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\n    'Numeric literal must start with a decimal digit or a decimal point');\n\n  start = index;\n  number = '';\n  if (ch !== '.') {\n    number = source[index++];\n    ch = source[index];\n\n    // Hex number starts with '0x'.\n    // Octal number starts with '0'.\n    if (number === '0') {\n      if (ch === 'x' || ch === 'X') {\n        ++index;\n        return scanHexLiteral(start);\n      }\n      if (isOctalDigit(ch)) {\n        return scanOctalLiteral(start);\n      }\n\n      // decimal number starts with '0' such as '09' is illegal.\n      if (ch && isDecimalDigit(ch.charCodeAt(0))) {\n        throwError({}, MessageUnexpectedToken, ILLEGAL);\n      }\n    }\n\n    while (isDecimalDigit(source.charCodeAt(index))) {\n      number += source[index++];\n    }\n    ch = source[index];\n  }\n\n  if (ch === '.') {\n    number += source[index++];\n    while (isDecimalDigit(source.charCodeAt(index))) {\n      number += source[index++];\n    }\n    ch = source[index];\n  }\n\n  if (ch === 'e' || ch === 'E') {\n    number += source[index++];\n\n    ch = source[index];\n    if (ch === '+' || ch === '-') {\n      number += source[index++];\n    }\n    if (isDecimalDigit(source.charCodeAt(index))) {\n      while (isDecimalDigit(source.charCodeAt(index))) {\n        number += source[index++];\n      }\n    } else {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    }\n  }\n\n  if (isIdentifierStart(source.charCodeAt(index))) {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenNumericLiteral,\n    value: parseFloat(number),\n    start: start,\n    end: index\n  };\n}\n\n// 7.8.4 String Literals\n\nfunction scanStringLiteral() {\n  var str = '',\n    quote, start, ch, code, octal = false;\n\n  quote = source[index];\n  assert((quote === '\\'' || quote === '\"'),\n    'String literal must starts with a quote');\n\n  start = index;\n  ++index;\n\n  while (index < length) {\n    ch = source[index++];\n\n    if (ch === quote) {\n      quote = '';\n      break;\n    } else if (ch === '\\\\') {\n      ch = source[index++];\n      if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n        switch (ch) {\n          case 'u':\n          case 'x':\n            if (source[index] === '{') {\n              ++index;\n              str += scanUnicodeCodePointEscape();\n            } else {\n              str += scanHexEscape(ch);\n            }\n            break;\n          case 'n':\n            str += '\\n';\n            break;\n          case 'r':\n            str += '\\r';\n            break;\n          case 't':\n            str += '\\t';\n            break;\n          case 'b':\n            str += '\\b';\n            break;\n          case 'f':\n            str += '\\f';\n            break;\n          case 'v':\n            str += '\\x0B';\n            break;\n\n          default:\n            if (isOctalDigit(ch)) {\n              code = '01234567'.indexOf(ch);\n\n              // \\0 is not octal escape sequence\n              if (code !== 0) {\n                octal = true;\n              }\n\n              if (index < length && isOctalDigit(source[index])) {\n                octal = true;\n                code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                // 3 digits are only allowed when string starts\n                // with 0, 1, 2, 3\n                if ('0123'.indexOf(ch) >= 0 &&\n                  index < length &&\n                  isOctalDigit(source[index])) {\n                  code = code * 8 + '01234567'.indexOf(source[index++]);\n                }\n              }\n              str += String.fromCharCode(code);\n            } else {\n              str += ch;\n            }\n            break;\n        }\n      } else {\n        if (ch === '\\r' && source[index] === '\\n') {\n          ++index;\n        }\n      }\n    } else if (isLineTerminator(ch.charCodeAt(0))) {\n      break;\n    } else {\n      str += ch;\n    }\n  }\n\n  if (quote !== '') {\n    throwError({}, MessageUnexpectedToken, ILLEGAL);\n  }\n\n  return {\n    type: TokenStringLiteral,\n    value: str,\n    octal: octal,\n    start: start,\n    end: index\n  };\n}\n\nfunction testRegExp(pattern, flags) {\n  var tmp = pattern;\n\n  if (flags.indexOf('u') >= 0) {\n    // Replace each astral symbol and every Unicode code point\n    // escape sequence with a single ASCII symbol to avoid throwing on\n    // regular expressions that are only valid in combination with the\n    // `/u` flag.\n    // Note: replacing with the ASCII symbol `x` might cause false\n    // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n    // perfectly valid pattern that is equivalent to `[a-b]`, but it\n    // would be replaced by `[x-b]` which throws an error.\n    tmp = tmp\n      .replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function($0, $1) {\n        if (parseInt($1, 16) <= 0x10FFFF) {\n          return 'x';\n        }\n        throwError({}, MessageInvalidRegExp);\n      })\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, 'x');\n  }\n\n  // First, detect invalid regular expressions.\n  try {\n    new RegExp(tmp);\n  } catch (e) {\n    throwError({}, MessageInvalidRegExp);\n  }\n\n  // Return a regular expression object for this pattern-flag pair, or\n  // `null` in case the current environment doesn't support the flags it\n  // uses.\n  try {\n    return new RegExp(pattern, flags);\n  } catch (exception) {\n    return null;\n  }\n}\n\nfunction scanRegExpBody() {\n  var ch, str, classMarker, terminated, body;\n\n  ch = source[index];\n  assert(ch === '/', 'Regular expression literal must start with a slash');\n  str = source[index++];\n\n  classMarker = false;\n  terminated = false;\n  while (index < length) {\n    ch = source[index++];\n    str += ch;\n    if (ch === '\\\\') {\n      ch = source[index++];\n      // ECMA-262 7.8.5\n      if (isLineTerminator(ch.charCodeAt(0))) {\n        throwError({}, MessageUnterminatedRegExp);\n      }\n      str += ch;\n    } else if (isLineTerminator(ch.charCodeAt(0))) {\n      throwError({}, MessageUnterminatedRegExp);\n    } else if (classMarker) {\n      if (ch === ']') {\n        classMarker = false;\n      }\n    } else {\n      if (ch === '/') {\n        terminated = true;\n        break;\n      } else if (ch === '[') {\n        classMarker = true;\n      }\n    }\n  }\n\n  if (!terminated) {\n    throwError({}, MessageUnterminatedRegExp);\n  }\n\n  // Exclude leading and trailing slash.\n  body = str.substr(1, str.length - 2);\n  return {\n    value: body,\n    literal: str\n  };\n}\n\nfunction scanRegExpFlags() {\n  var ch, str, flags;\n\n  str = '';\n  flags = '';\n  while (index < length) {\n    ch = source[index];\n    if (!isIdentifierPart(ch.charCodeAt(0))) {\n      break;\n    }\n\n    ++index;\n    if (ch === '\\\\' && index < length) {\n      throwError({}, MessageUnexpectedToken, ILLEGAL);\n    } else {\n      flags += ch;\n      str += ch;\n    }\n  }\n\n  if (flags.search(/[^gimuy]/g) >= 0) {\n    throwError({}, MessageInvalidRegExp, flags);\n  }\n\n  return {\n    value: flags,\n    literal: str\n  };\n}\n\nfunction scanRegExp() {\n  var start, body, flags, value;\n\n  lookahead = null;\n  skipComment();\n  start = index;\n\n  body = scanRegExpBody();\n  flags = scanRegExpFlags();\n  value = testRegExp(body.value, flags.value);\n\n  return {\n    literal: body.literal + flags.literal,\n    value: value,\n    regex: {\n      pattern: body.value,\n      flags: flags.value\n    },\n    start: start,\n    end: index\n  };\n}\n\nfunction isIdentifierName(token) {\n  return token.type === TokenIdentifier ||\n    token.type === TokenKeyword ||\n    token.type === TokenBooleanLiteral ||\n    token.type === TokenNullLiteral;\n}\n\nfunction advance() {\n  var ch;\n\n  skipComment();\n\n  if (index >= length) {\n    return {\n      type: TokenEOF,\n      start: index,\n      end: index\n    };\n  }\n\n  ch = source.charCodeAt(index);\n\n  if (isIdentifierStart(ch)) {\n    return scanIdentifier();\n  }\n\n  // Very common: ( and ) and ;\n  if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {\n    return scanPunctuator();\n  }\n\n  // String literal starts with single quote (U+0027) or double quote (U+0022).\n  if (ch === 0x27 || ch === 0x22) {\n    return scanStringLiteral();\n  }\n\n\n  // Dot (.) U+002E can also start a floating-point number, hence the need\n  // to check the next character.\n  if (ch === 0x2E) {\n    if (isDecimalDigit(source.charCodeAt(index + 1))) {\n      return scanNumericLiteral();\n    }\n    return scanPunctuator();\n  }\n\n  if (isDecimalDigit(ch)) {\n    return scanNumericLiteral();\n  }\n\n  return scanPunctuator();\n}\n\nfunction lex() {\n  var token;\n\n  token = lookahead;\n  index = token.end;\n\n  lookahead = advance();\n\n  index = token.end;\n\n  return token;\n}\n\nfunction peek() {\n  var pos;\n\n  pos = index;\n\n  lookahead = advance();\n  index = pos;\n}\n\nfunction finishArrayExpression(elements) {\n  var node = new ASTNode(SyntaxArrayExpression);\n  node.elements = elements;\n  return node;\n}\n\nfunction finishBinaryExpression(operator, left, right) {\n  var node = new ASTNode((operator === '||' || operator === '&&') ? SyntaxLogicalExpression : SyntaxBinaryExpression);\n  node.operator = operator;\n  node.left = left;\n  node.right = right;\n  return node;\n}\n\nfunction finishCallExpression(callee, args) {\n  var node = new ASTNode(SyntaxCallExpression);\n  node.callee = callee;\n  node.arguments = args;\n  return node;\n}\n\nfunction finishConditionalExpression(test, consequent, alternate) {\n  var node = new ASTNode(SyntaxConditionalExpression);\n  node.test = test;\n  node.consequent = consequent;\n  node.alternate = alternate;\n  return node;\n}\n\nfunction finishIdentifier(name) {\n  var node = new ASTNode(SyntaxIdentifier);\n  node.name = name;\n  return node;\n}\n\nfunction finishLiteral(token) {\n  var node = new ASTNode(SyntaxLiteral);\n  node.value = token.value;\n  node.raw = source.slice(token.start, token.end);\n  if (token.regex) {\n    if (node.raw === '//') {\n      node.raw = '/(?:)/';\n    }\n    node.regex = token.regex;\n  }\n  return node;\n}\n\nfunction finishMemberExpression(accessor, object, property) {\n  var node = new ASTNode(SyntaxMemberExpression);\n  node.computed = accessor === '[';\n  node.object = object;\n  node.property = property;\n  if (!node.computed) property.member = true;\n  return node;\n}\n\nfunction finishObjectExpression(properties) {\n  var node = new ASTNode(SyntaxObjectExpression);\n  node.properties = properties;\n  return node;\n}\n\nfunction finishProperty(kind, key, value) {\n  var node = new ASTNode(SyntaxProperty);\n  node.key = key;\n  node.value = value;\n  node.kind = kind;\n  return node;\n}\n\nfunction finishUnaryExpression(operator, argument) {\n  var node = new ASTNode(SyntaxUnaryExpression);\n  node.operator = operator;\n  node.argument = argument;\n  node.prefix = true;\n  return node;\n}\n\n// Throw an exception\n\nfunction throwError(token, messageFormat) {\n  var error,\n    args = Array.prototype.slice.call(arguments, 2),\n    msg = messageFormat.replace(\n      /%(\\d)/g,\n      function(whole, index) {\n        assert(index < args.length, 'Message reference must be in range');\n        return args[index];\n      }\n    );\n\n\n  error = new Error(msg);\n  error.index = index;\n  error.description = msg;\n  throw error;\n}\n\n// Throw an exception because of the token.\n\nfunction throwUnexpected(token) {\n  if (token.type === TokenEOF) {\n    throwError(token, MessageUnexpectedEOS);\n  }\n\n  if (token.type === TokenNumericLiteral) {\n    throwError(token, MessageUnexpectedNumber);\n  }\n\n  if (token.type === TokenStringLiteral) {\n    throwError(token, MessageUnexpectedString);\n  }\n\n  if (token.type === TokenIdentifier) {\n    throwError(token, MessageUnexpectedIdentifier);\n  }\n\n  if (token.type === TokenKeyword) {\n    throwError(token, MessageUnexpectedReserved);\n  }\n\n  // BooleanLiteral, NullLiteral, or Punctuator.\n  throwError(token, MessageUnexpectedToken, token.value);\n}\n\n// Expect the next token to match the specified punctuator.\n// If not, an exception will be thrown.\n\nfunction expect(value) {\n  var token = lex();\n  if (token.type !== TokenPunctuator || token.value !== value) {\n    throwUnexpected(token);\n  }\n}\n\n// Return true if the next token matches the specified punctuator.\n\nfunction match(value) {\n  return lookahead.type === TokenPunctuator && lookahead.value === value;\n}\n\n// Return true if the next token matches the specified keyword\n\nfunction matchKeyword(keyword) {\n  return lookahead.type === TokenKeyword && lookahead.value === keyword;\n}\n\n// 11.1.4 Array Initialiser\n\nfunction parseArrayInitialiser() {\n  var elements = [];\n\n  index = lookahead.start;\n  expect('[');\n\n  while (!match(']')) {\n    if (match(',')) {\n      lex();\n      elements.push(null);\n    } else {\n      elements.push(parseConditionalExpression());\n\n      if (!match(']')) {\n        expect(',');\n      }\n    }\n  }\n\n  lex();\n\n  return finishArrayExpression(elements);\n}\n\n// 11.1.5 Object Initialiser\n\nfunction parseObjectPropertyKey() {\n  var token;\n\n  index = lookahead.start;\n  token = lex();\n\n  // Note: This function is called only from parseObjectProperty(), where\n  // EOF and Punctuator tokens are already filtered out.\n\n  if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {\n    if (token.octal) {\n      throwError(token, MessageStrictOctalLiteral);\n    }\n    return finishLiteral(token);\n  }\n\n  return finishIdentifier(token.value);\n}\n\nfunction parseObjectProperty() {\n  var token, key, id, value;\n\n  index = lookahead.start;\n  token = lookahead;\n\n  if (token.type === TokenIdentifier) {\n    id = parseObjectPropertyKey();\n    expect(':');\n    value = parseConditionalExpression();\n    return finishProperty('init', id, value);\n  }\n  if (token.type === TokenEOF || token.type === TokenPunctuator) {\n    throwUnexpected(token);\n  } else {\n    key = parseObjectPropertyKey();\n    expect(':');\n    value = parseConditionalExpression();\n    return finishProperty('init', key, value);\n  }\n}\n\nfunction parseObjectInitialiser() {\n  var properties = [],\n    property, name, key, map = {},\n    toString = String;\n\n  index = lookahead.start;\n  expect('{');\n\n  while (!match('}')) {\n    property = parseObjectProperty();\n\n    if (property.key.type === SyntaxIdentifier) {\n      name = property.key.name;\n    } else {\n      name = toString(property.key.value);\n    }\n\n    key = '$' + name;\n    if (Object.prototype.hasOwnProperty.call(map, key)) {\n      throwError({}, MessageStrictDuplicateProperty);\n    } else {\n      map[key] = true;\n    }\n\n    properties.push(property);\n\n    if (!match('}')) {\n      expect(',');\n    }\n  }\n\n  expect('}');\n\n  return finishObjectExpression(properties);\n}\n\n// 11.1.6 The Grouping Operator\n\nfunction parseGroupExpression() {\n  var expr;\n\n  expect('(');\n\n  expr = parseExpression();\n\n  expect(')');\n\n  return expr;\n}\n\n\n// 11.1 Primary Expressions\n\nvar legalKeywords = {\n  \"if\": 1,\n  \"this\": 1\n};\n\nfunction parsePrimaryExpression() {\n  var type, token, expr;\n\n  if (match('(')) {\n    return parseGroupExpression();\n  }\n\n  if (match('[')) {\n    return parseArrayInitialiser();\n  }\n\n  if (match('{')) {\n    return parseObjectInitialiser();\n  }\n\n  type = lookahead.type;\n  index = lookahead.start;\n\n\n  if (type === TokenIdentifier || legalKeywords[lookahead.value]) {\n    expr = finishIdentifier(lex().value);\n  } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {\n    if (lookahead.octal) {\n      throwError(lookahead, MessageStrictOctalLiteral);\n    }\n    expr = finishLiteral(lex());\n  } else if (type === TokenKeyword) {\n    throw new Error(DISABLED);\n  } else if (type === TokenBooleanLiteral) {\n    token = lex();\n    token.value = (token.value === 'true');\n    expr = finishLiteral(token);\n  } else if (type === TokenNullLiteral) {\n    token = lex();\n    token.value = null;\n    expr = finishLiteral(token);\n  } else if (match('/') || match('/=')) {\n    expr = finishLiteral(scanRegExp());\n    peek();\n  } else {\n    throwUnexpected(lex());\n  }\n\n  return expr;\n}\n\n// 11.2 Left-Hand-Side Expressions\n\nfunction parseArguments() {\n  var args = [];\n\n  expect('(');\n\n  if (!match(')')) {\n    while (index < length) {\n      args.push(parseConditionalExpression());\n      if (match(')')) {\n        break;\n      }\n      expect(',');\n    }\n  }\n\n  expect(')');\n\n  return args;\n}\n\nfunction parseNonComputedProperty() {\n  var token;\n  index = lookahead.start;\n  token = lex();\n\n  if (!isIdentifierName(token)) {\n    throwUnexpected(token);\n  }\n\n  return finishIdentifier(token.value);\n}\n\nfunction parseNonComputedMember() {\n  expect('.');\n\n  return parseNonComputedProperty();\n}\n\nfunction parseComputedMember() {\n  var expr;\n\n  expect('[');\n\n  expr = parseExpression();\n\n  expect(']');\n\n  return expr;\n}\n\nfunction parseLeftHandSideExpressionAllowCall() {\n  var expr, args, property;\n\n  expr = parsePrimaryExpression();\n\n  for (;;) {\n    if (match('.')) {\n      property = parseNonComputedMember();\n      expr = finishMemberExpression('.', expr, property);\n    } else if (match('(')) {\n      args = parseArguments();\n      expr = finishCallExpression(expr, args);\n    } else if (match('[')) {\n      property = parseComputedMember();\n      expr = finishMemberExpression('[', expr, property);\n    } else {\n      break;\n    }\n  }\n\n  return expr;\n}\n\n// 11.3 Postfix Expressions\n\nfunction parsePostfixExpression() {\n  var expr = parseLeftHandSideExpressionAllowCall();\n\n  if (lookahead.type === TokenPunctuator) {\n    if ((match('++') || match('--'))) {\n      throw new Error(DISABLED);\n    }\n  }\n\n  return expr;\n}\n\n// 11.4 Unary Operators\n\nfunction parseUnaryExpression() {\n  var token, expr;\n\n  if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {\n    expr = parsePostfixExpression();\n  } else if (match('++') || match('--')) {\n    throw new Error(DISABLED);\n  } else if (match('+') || match('-') || match('~') || match('!')) {\n    token = lex();\n    expr = parseUnaryExpression();\n    expr = finishUnaryExpression(token.value, expr);\n  } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n    throw new Error(DISABLED);\n  } else {\n    expr = parsePostfixExpression();\n  }\n\n  return expr;\n}\n\nfunction binaryPrecedence(token) {\n  var prec = 0;\n\n  if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {\n    return 0;\n  }\n\n  switch (token.value) {\n    case '||':\n      prec = 1;\n      break;\n\n    case '&&':\n      prec = 2;\n      break;\n\n    case '|':\n      prec = 3;\n      break;\n\n    case '^':\n      prec = 4;\n      break;\n\n    case '&':\n      prec = 5;\n      break;\n\n    case '==':\n    case '!=':\n    case '===':\n    case '!==':\n      prec = 6;\n      break;\n\n    case '<':\n    case '>':\n    case '<=':\n    case '>=':\n    case 'instanceof':\n    case 'in':\n      prec = 7;\n      break;\n\n    case '<<':\n    case '>>':\n    case '>>>':\n      prec = 8;\n      break;\n\n    case '+':\n    case '-':\n      prec = 9;\n      break;\n\n    case '*':\n    case '/':\n    case '%':\n      prec = 11;\n      break;\n\n    default:\n      break;\n  }\n\n  return prec;\n}\n\n// 11.5 Multiplicative Operators\n// 11.6 Additive Operators\n// 11.7 Bitwise Shift Operators\n// 11.8 Relational Operators\n// 11.9 Equality Operators\n// 11.10 Binary Bitwise Operators\n// 11.11 Binary Logical Operators\n\nfunction parseBinaryExpression() {\n  var marker, markers, expr, token, prec, stack, right, operator, left, i;\n\n  marker = lookahead;\n  left = parseUnaryExpression();\n\n  token = lookahead;\n  prec = binaryPrecedence(token);\n  if (prec === 0) {\n    return left;\n  }\n  token.prec = prec;\n  lex();\n\n  markers = [marker, lookahead];\n  right = parseUnaryExpression();\n\n  stack = [left, token, right];\n\n  while ((prec = binaryPrecedence(lookahead)) > 0) {\n\n    // Reduce: make a binary expression from the three topmost entries.\n    while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n      right = stack.pop();\n      operator = stack.pop().value;\n      left = stack.pop();\n      markers.pop();\n      expr = finishBinaryExpression(operator, left, right);\n      stack.push(expr);\n    }\n\n    // Shift.\n    token = lex();\n    token.prec = prec;\n    stack.push(token);\n    markers.push(lookahead);\n    expr = parseUnaryExpression();\n    stack.push(expr);\n  }\n\n  // Final reduce to clean-up the stack.\n  i = stack.length - 1;\n  expr = stack[i];\n  markers.pop();\n  while (i > 1) {\n    markers.pop()\n    expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n    i -= 2;\n  }\n\n  return expr;\n}\n\n// 11.12 Conditional Operator\n\nfunction parseConditionalExpression() {\n  var expr, consequent, alternate;\n\n  expr = parseBinaryExpression();\n\n  if (match('?')) {\n    lex();\n    consequent = parseConditionalExpression();\n    expect(':');\n    alternate = parseConditionalExpression();\n\n    expr = finishConditionalExpression(expr, consequent, alternate);\n  }\n\n  return expr;\n}\n\n// 11.14 Comma Operator\n\nfunction parseExpression() {\n  var expr = parseConditionalExpression();\n\n  if (match(',')) {\n    throw new Error(DISABLED); // no sequence expressions\n  }\n\n  return expr;\n}\n\nexport default function(code) {\n  source = code;\n  index = 0;\n  length = source.length;\n  lookahead = null;\n\n  peek();\n\n  var expr = parseExpression();\n\n  if (lookahead.type !== TokenEOF) {\n    throw new Error(\"Unexpect token after expression.\");\n  }\n  return expr;\n}\n"]},"metadata":{},"sourceType":"module"}