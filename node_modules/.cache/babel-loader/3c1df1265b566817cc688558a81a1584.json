{"ast":null,"code":"import element from './element';\nimport { debounce } from 'vega-util';\nimport { tickStep } from 'd3-array';\nvar BindClass = 'vega-bind',\n    NameClass = 'vega-bind-name',\n    RadioClass = 'vega-bind-radio',\n    OptionClass = 'vega-option-';\n/**\n * Bind a signal to an external HTML input element. The resulting two-way\n * binding will propagate input changes to signals, and propagate signal\n * changes to the input element state. If this view instance has no parent\n * element, we assume the view is headless and no bindings are created.\n * @param {Element|string} el - The parent DOM element to which the input\n *   element should be appended as a child. If string-valued, this argument\n *   will be treated as a CSS selector. If null or undefined, the parent\n *   element of this view will be used as the element.\n * @param {object} param - The binding parameters which specify the signal\n *   to bind to, the input element type, and type-specific configuration.\n * @return {View} - This view instance.\n */\n\nexport default function (view, el, binding) {\n  if (!el) return;\n  var param = binding.param,\n      bind = binding.state;\n\n  if (!bind) {\n    bind = binding.state = {\n      elements: null,\n      active: false,\n      set: null,\n      update: function (value) {\n        if (value !== view.signal(param.signal)) {\n          view.runAsync(null, function () {\n            bind.source = true;\n            view.signal(param.signal, value);\n          });\n        }\n      }\n    };\n\n    if (param.debounce) {\n      bind.update = debounce(param.debounce, bind.update);\n    }\n  }\n\n  generate(bind, el, param, view.signal(param.signal));\n\n  if (!bind.active) {\n    view.on(view._signals[param.signal], null, function () {\n      bind.source ? bind.source = false : bind.set(view.signal(param.signal));\n    });\n    bind.active = true;\n  }\n\n  return bind;\n}\n/**\n * Generate an HTML input form element and bind it to a signal.\n */\n\nfunction generate(bind, el, param, value) {\n  var div = element('div', {\n    'class': BindClass\n  });\n  div.appendChild(element('span', {\n    'class': NameClass\n  }, param.name || param.signal));\n  el.appendChild(div);\n  var input = form;\n\n  switch (param.input) {\n    case 'checkbox':\n      input = checkbox;\n      break;\n\n    case 'select':\n      input = select;\n      break;\n\n    case 'radio':\n      input = radio;\n      break;\n\n    case 'range':\n      input = range;\n      break;\n  }\n\n  input(bind, div, param, value);\n}\n/**\n * Generates an arbitrary input form element.\n * The input type is controlled via user-provided parameters.\n */\n\n\nfunction form(bind, el, param, value) {\n  var node = element('input');\n\n  for (var key in param) {\n    if (key !== 'signal' && key !== 'element') {\n      node.setAttribute(key === 'input' ? 'type' : key, param[key]);\n    }\n  }\n\n  node.setAttribute('name', param.signal);\n  node.value = value;\n  el.appendChild(node);\n  node.addEventListener('input', function () {\n    bind.update(node.value);\n  });\n  bind.elements = [node];\n\n  bind.set = function (value) {\n    node.value = value;\n  };\n}\n/**\n * Generates a checkbox input element.\n */\n\n\nfunction checkbox(bind, el, param, value) {\n  var attr = {\n    type: 'checkbox',\n    name: param.signal\n  };\n  if (value) attr.checked = true;\n  var node = element('input', attr);\n  el.appendChild(node);\n  node.addEventListener('change', function () {\n    bind.update(node.checked);\n  });\n  bind.elements = [node];\n\n  bind.set = function (value) {\n    node.checked = !!value || null;\n  };\n}\n/**\n * Generates a selection list input element.\n */\n\n\nfunction select(bind, el, param, value) {\n  var node = element('select', {\n    name: param.signal\n  }),\n      label = param.labels || [];\n  param.options.forEach(function (option, i) {\n    var attr = {\n      value: option\n    };\n    if (valuesEqual(option, value)) attr.selected = true;\n    node.appendChild(element('option', attr, (label[i] || option) + ''));\n  });\n  el.appendChild(node);\n  node.addEventListener('change', function () {\n    bind.update(param.options[node.selectedIndex]);\n  });\n  bind.elements = [node];\n\n  bind.set = function (value) {\n    for (var i = 0, n = param.options.length; i < n; ++i) {\n      if (valuesEqual(param.options[i], value)) {\n        node.selectedIndex = i;\n        return;\n      }\n    }\n  };\n}\n/**\n * Generates a radio button group.\n */\n\n\nfunction radio(bind, el, param, value) {\n  var group = element('span', {\n    'class': RadioClass\n  }),\n      label = param.labels || [];\n  el.appendChild(group);\n  bind.elements = param.options.map(function (option, i) {\n    var id = OptionClass + param.signal + '-' + option;\n    var attr = {\n      id: id,\n      type: 'radio',\n      name: param.signal,\n      value: option\n    };\n    if (valuesEqual(option, value)) attr.checked = true;\n    var input = element('input', attr);\n    input.addEventListener('change', function () {\n      bind.update(option);\n    });\n    group.appendChild(input);\n    group.appendChild(element('label', {\n      'for': id\n    }, (label[i] || option) + ''));\n    return input;\n  });\n\n  bind.set = function (value) {\n    var nodes = bind.elements,\n        i = 0,\n        n = nodes.length;\n\n    for (; i < n; ++i) {\n      if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;\n    }\n  };\n}\n/**\n * Generates a slider input element.\n */\n\n\nfunction range(bind, el, param, value) {\n  value = value !== undefined ? value : (+param.max + +param.min) / 2;\n  var max = param.max != null ? param.max : Math.max(100, +value) || 100,\n      min = param.min || Math.min(0, max, +value) || 0,\n      step = param.step || tickStep(min, max, 100);\n  var node = element('input', {\n    type: 'range',\n    name: param.signal,\n    min: min,\n    max: max,\n    step: step\n  });\n  node.value = value;\n  var label = element('label', {}, +value);\n  el.appendChild(node);\n  el.appendChild(label);\n\n  function update() {\n    label.textContent = node.value;\n    bind.update(+node.value);\n  } // subscribe to both input and change\n\n\n  node.addEventListener('input', update);\n  node.addEventListener('change', update);\n  bind.elements = [node];\n\n  bind.set = function (value) {\n    node.value = value;\n    label.textContent = value;\n  };\n}\n\nfunction valuesEqual(a, b) {\n  return a === b || a + '' === b + '';\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-view/src/bind.js"],"names":["element","debounce","tickStep","BindClass","NameClass","RadioClass","OptionClass","view","el","binding","param","bind","state","elements","active","set","update","value","signal","runAsync","source","generate","on","_signals","div","appendChild","name","input","form","checkbox","select","radio","range","node","key","setAttribute","addEventListener","attr","type","checked","label","labels","options","forEach","option","i","valuesEqual","selected","selectedIndex","n","length","group","map","id","nodes","undefined","max","min","Math","step","textContent","a","b"],"mappings":"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","sourcesContent":["import element from './element';\nimport {debounce} from 'vega-util';\nimport {tickStep} from 'd3-array';\n\nvar BindClass = 'vega-bind',\n    NameClass = 'vega-bind-name',\n    RadioClass = 'vega-bind-radio',\n    OptionClass = 'vega-option-';\n\n/**\n * Bind a signal to an external HTML input element. The resulting two-way\n * binding will propagate input changes to signals, and propagate signal\n * changes to the input element state. If this view instance has no parent\n * element, we assume the view is headless and no bindings are created.\n * @param {Element|string} el - The parent DOM element to which the input\n *   element should be appended as a child. If string-valued, this argument\n *   will be treated as a CSS selector. If null or undefined, the parent\n *   element of this view will be used as the element.\n * @param {object} param - The binding parameters which specify the signal\n *   to bind to, the input element type, and type-specific configuration.\n * @return {View} - This view instance.\n */\nexport default function(view, el, binding) {\n  if (!el) return;\n\n  var param = binding.param,\n      bind = binding.state;\n\n  if (!bind) {\n    bind = binding.state = {\n      elements: null,\n      active: false,\n      set: null,\n      update: function(value) {\n        if (value !== view.signal(param.signal)) {\n          view.runAsync(null, function() {\n            bind.source = true;\n            view.signal(param.signal, value);\n          });\n        }\n      }\n    };\n    if (param.debounce) {\n      bind.update = debounce(param.debounce, bind.update);\n    }\n  }\n\n  generate(bind, el, param, view.signal(param.signal));\n\n  if (!bind.active) {\n    view.on(view._signals[param.signal], null, function() {\n      bind.source\n        ? (bind.source = false)\n        : bind.set(view.signal(param.signal));\n    });\n    bind.active = true;\n  }\n\n  return bind;\n}\n\n/**\n * Generate an HTML input form element and bind it to a signal.\n */\nfunction generate(bind, el, param, value) {\n  var div = element('div', {'class': BindClass});\n\n  div.appendChild(element('span',\n    {'class': NameClass},\n    (param.name || param.signal)\n  ));\n\n  el.appendChild(div);\n\n  var input = form;\n  switch (param.input) {\n    case 'checkbox': input = checkbox; break;\n    case 'select':   input = select; break;\n    case 'radio':    input = radio; break;\n    case 'range':    input = range; break;\n  }\n\n  input(bind, div, param, value);\n}\n\n/**\n * Generates an arbitrary input form element.\n * The input type is controlled via user-provided parameters.\n */\nfunction form(bind, el, param, value) {\n  var node = element('input');\n\n  for (var key in param) {\n    if (key !== 'signal' && key !== 'element') {\n      node.setAttribute(key === 'input' ? 'type' : key, param[key]);\n    }\n  }\n  node.setAttribute('name', param.signal);\n  node.value = value;\n\n  el.appendChild(node);\n\n  node.addEventListener('input', function() {\n    bind.update(node.value);\n  });\n\n  bind.elements = [node];\n  bind.set = function(value) { node.value = value; };\n}\n\n/**\n * Generates a checkbox input element.\n */\nfunction checkbox(bind, el, param, value) {\n  var attr = {type: 'checkbox', name: param.signal};\n  if (value) attr.checked = true;\n  var node = element('input', attr);\n\n  el.appendChild(node);\n\n  node.addEventListener('change', function() {\n    bind.update(node.checked);\n  });\n\n  bind.elements = [node];\n  bind.set = function(value) { node.checked = !!value || null; }\n}\n\n/**\n * Generates a selection list input element.\n */\nfunction select(bind, el, param, value) {\n  var node = element('select', {name: param.signal}),\n      label = param.labels || [];\n\n  param.options.forEach(function(option, i) {\n    var attr = {value: option};\n    if (valuesEqual(option, value)) attr.selected = true;\n    node.appendChild(element('option', attr, (label[i] || option)+''));\n  });\n\n  el.appendChild(node);\n\n  node.addEventListener('change', function() {\n    bind.update(param.options[node.selectedIndex]);\n  });\n\n  bind.elements = [node];\n  bind.set = function(value) {\n    for (var i=0, n=param.options.length; i<n; ++i) {\n      if (valuesEqual(param.options[i], value)) {\n        node.selectedIndex = i; return;\n      }\n    }\n  };\n}\n\n/**\n * Generates a radio button group.\n */\nfunction radio(bind, el, param, value) {\n  var group = element('span', {'class': RadioClass}),\n      label = param.labels || [];\n\n  el.appendChild(group);\n\n  bind.elements = param.options.map(function(option, i) {\n    var id = OptionClass + param.signal + '-' + option;\n\n    var attr = {\n      id:    id,\n      type:  'radio',\n      name:  param.signal,\n      value: option\n    };\n    if (valuesEqual(option, value)) attr.checked = true;\n\n    var input = element('input', attr);\n\n    input.addEventListener('change', function() {\n      bind.update(option);\n    });\n\n    group.appendChild(input);\n    group.appendChild(element('label', {'for': id}, (label[i] || option)+''));\n\n    return input;\n  });\n\n  bind.set = function(value) {\n    var nodes = bind.elements,\n        i = 0,\n        n = nodes.length;\n    for (; i<n; ++i) {\n      if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;\n    }\n  };\n}\n\n/**\n * Generates a slider input element.\n */\nfunction range(bind, el, param, value) {\n  value = value !== undefined ? value : ((+param.max) + (+param.min)) / 2;\n\n  var max = param.max != null ? param.max : Math.max(100, +value) || 100,\n      min = param.min || Math.min(0, max, +value) || 0,\n      step = param.step || tickStep(min, max, 100);\n\n  var node = element('input', {\n    type:  'range',\n    name:  param.signal,\n    min:   min,\n    max:   max,\n    step:  step\n  });\n  node.value = value;\n\n  var label = element('label', {}, +value);\n\n  el.appendChild(node);\n  el.appendChild(label);\n\n  function update() {\n    label.textContent = node.value;\n    bind.update(+node.value);\n  }\n\n  // subscribe to both input and change\n  node.addEventListener('input', update);\n  node.addEventListener('change', update);\n\n  bind.elements = [node];\n  bind.set = function(value) {\n    node.value = value;\n    label.textContent = value;\n  };\n}\n\nfunction valuesEqual(a, b) {\n  return a === b || (a+'' === b+'');\n}\n"]},"metadata":{},"sourceType":"module"}