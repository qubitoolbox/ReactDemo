{"ast":null,"code":"var TUPLE_ID_KEY = Symbol('vega_id'),\n    TUPLE_ID = 1;\n/**\n * Resets the internal tuple id counter to one.\n */\n\nexport function reset() {\n  TUPLE_ID = 1;\n}\n/**\n * Checks if an input value is a registered tuple.\n * @param {*} t - The value to check.\n * @return {boolean} True if the input is a tuple, false otherwise.\n */\n\nexport function isTuple(t) {\n  return !!(t && tupleid(t));\n}\n/**\n * Returns the id of a tuple.\n * @param {object} t - The input tuple.\n * @return {*} the tuple id.\n */\n\nexport function tupleid(t) {\n  return t[TUPLE_ID_KEY];\n}\n/**\n * Sets the id of a tuple.\n * @param {object} t - The input tuple.\n * @param {*} id - The id value to set.\n * @return {object} the input tuple.\n */\n\nfunction setid(t, id) {\n  t[TUPLE_ID_KEY] = id;\n  return t;\n}\n/**\n * Ingest an object or value as a data tuple.\n * If the input value is an object, an id field will be added to it. For\n * efficiency, the input object is modified directly. A copy is not made.\n * If the input value is a literal, it will be wrapped in a new object\n * instance, with the value accessible as the 'data' property.\n * @param datum - The value to ingest.\n * @return {object} The ingested data tuple.\n */\n\n\nexport function ingest(datum) {\n  var t = datum === Object(datum) ? datum : {\n    data: datum\n  };\n  return tupleid(t) ? t : setid(t, TUPLE_ID++);\n}\n/**\n * Given a source tuple, return a derived copy.\n * @param {object} t - The source tuple.\n * @return {object} The derived tuple.\n */\n\nexport function derive(t) {\n  return rederive(t, ingest({}));\n}\n/**\n * Rederive a derived tuple by copying values from the source tuple.\n * @param {object} t - The source tuple.\n * @param {object} d - The derived tuple.\n * @return {object} The derived tuple.\n */\n\nexport function rederive(t, d) {\n  for (var k in t) d[k] = t[k];\n\n  return d;\n}\n/**\n * Replace an existing tuple with a new tuple.\n * @param {object} t - The existing data tuple.\n * @param {object} d - The new tuple that replaces the old.\n * @return {object} The new tuple.\n */\n\nexport function replace(t, d) {\n  return setid(d, tupleid(t));\n}\n/**\n * Generate an augmented comparator function that provides stable\n * sorting by tuple id when the given comparator produces ties.\n * @param {function} cmp - The comparator to augment.\n * @param {function} [f] - Optional tuple accessor function.\n * @return {function} An augmented comparator function.\n */\n\nexport function stableCompare(cmp, f) {\n  return !cmp ? null : f ? (a, b) => cmp(a, b) || tupleid(f(a)) - tupleid(f(b)) : (a, b) => cmp(a, b) || tupleid(a) - tupleid(b);\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-dataflow/src/Tuple.js"],"names":["TUPLE_ID_KEY","Symbol","TUPLE_ID","reset","isTuple","t","tupleid","setid","id","ingest","datum","Object","data","derive","rederive","d","k","replace","stableCompare","cmp","f","a","b"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,MAAM,CAAC,SAAD,CAAzB;AAAA,IACIC,QAAQ,GAAG,CADf;AAGA;;;;AAGA,OAAO,SAASC,KAAT,GAAiB;AACtBD,EAAAA,QAAQ,GAAG,CAAX;AACD;AAED;;;;;;AAKA,OAAO,SAASE,OAAT,CAAiBC,CAAjB,EAAoB;AACzB,SAAO,CAAC,EAAEA,CAAC,IAAIC,OAAO,CAACD,CAAD,CAAd,CAAR;AACD;AAED;;;;;;AAKA,OAAO,SAASC,OAAT,CAAiBD,CAAjB,EAAoB;AACzB,SAAOA,CAAC,CAACL,YAAD,CAAR;AACD;AAED;;;;;;;AAMA,SAASO,KAAT,CAAeF,CAAf,EAAkBG,EAAlB,EAAsB;AACpBH,EAAAA,CAAC,CAACL,YAAD,CAAD,GAAkBQ,EAAlB;AACA,SAAOH,CAAP;AACD;AAED;;;;;;;;;;;AASA,OAAO,SAASI,MAAT,CAAgBC,KAAhB,EAAuB;AAC5B,MAAIL,CAAC,GAAIK,KAAK,KAAKC,MAAM,CAACD,KAAD,CAAjB,GAA4BA,KAA5B,GAAoC;AAACE,IAAAA,IAAI,EAAEF;AAAP,GAA5C;AACA,SAAOJ,OAAO,CAACD,CAAD,CAAP,GAAaA,CAAb,GAAiBE,KAAK,CAACF,CAAD,EAAIH,QAAQ,EAAZ,CAA7B;AACD;AAED;;;;;;AAKA,OAAO,SAASW,MAAT,CAAgBR,CAAhB,EAAmB;AACxB,SAAOS,QAAQ,CAACT,CAAD,EAAII,MAAM,CAAC,EAAD,CAAV,CAAf;AACD;AAED;;;;;;;AAMA,OAAO,SAASK,QAAT,CAAkBT,CAAlB,EAAqBU,CAArB,EAAwB;AAC7B,OAAK,IAAIC,CAAT,IAAcX,CAAd,EAAiBU,CAAC,CAACC,CAAD,CAAD,GAAOX,CAAC,CAACW,CAAD,CAAR;;AACjB,SAAOD,CAAP;AACD;AAED;;;;;;;AAMA,OAAO,SAASE,OAAT,CAAiBZ,CAAjB,EAAoBU,CAApB,EAAuB;AAC5B,SAAOR,KAAK,CAACQ,CAAD,EAAIT,OAAO,CAACD,CAAD,CAAX,CAAZ;AACD;AAED;;;;;;;;AAOA,OAAO,SAASa,aAAT,CAAuBC,GAAvB,EAA4BC,CAA5B,EAA+B;AACpC,SAAO,CAACD,GAAD,GAAO,IAAP,GACHC,CAAC,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAUH,GAAG,CAACE,CAAD,EAAIC,CAAJ,CAAH,IAAchB,OAAO,CAACc,CAAC,CAACC,CAAD,CAAF,CAAP,GAAgBf,OAAO,CAACc,CAAC,CAACE,CAAD,CAAF,CAAlD,GACD,CAACD,CAAD,EAAIC,CAAJ,KAAUH,GAAG,CAACE,CAAD,EAAIC,CAAJ,CAAH,IAAchB,OAAO,CAACe,CAAD,CAAP,GAAaf,OAAO,CAACgB,CAAD,CAFhD;AAGD","sourcesContent":["var TUPLE_ID_KEY = Symbol('vega_id'),\n    TUPLE_ID = 1;\n\n/**\n * Resets the internal tuple id counter to one.\n */\nexport function reset() {\n  TUPLE_ID = 1;\n}\n\n/**\n * Checks if an input value is a registered tuple.\n * @param {*} t - The value to check.\n * @return {boolean} True if the input is a tuple, false otherwise.\n */\nexport function isTuple(t) {\n  return !!(t && tupleid(t));\n}\n\n/**\n * Returns the id of a tuple.\n * @param {object} t - The input tuple.\n * @return {*} the tuple id.\n */\nexport function tupleid(t) {\n  return t[TUPLE_ID_KEY];\n}\n\n/**\n * Sets the id of a tuple.\n * @param {object} t - The input tuple.\n * @param {*} id - The id value to set.\n * @return {object} the input tuple.\n */\nfunction setid(t, id) {\n  t[TUPLE_ID_KEY] = id;\n  return t;\n}\n\n/**\n * Ingest an object or value as a data tuple.\n * If the input value is an object, an id field will be added to it. For\n * efficiency, the input object is modified directly. A copy is not made.\n * If the input value is a literal, it will be wrapped in a new object\n * instance, with the value accessible as the 'data' property.\n * @param datum - The value to ingest.\n * @return {object} The ingested data tuple.\n */\nexport function ingest(datum) {\n  var t = (datum === Object(datum)) ? datum : {data: datum};\n  return tupleid(t) ? t : setid(t, TUPLE_ID++);\n}\n\n/**\n * Given a source tuple, return a derived copy.\n * @param {object} t - The source tuple.\n * @return {object} The derived tuple.\n */\nexport function derive(t) {\n  return rederive(t, ingest({}));\n}\n\n/**\n * Rederive a derived tuple by copying values from the source tuple.\n * @param {object} t - The source tuple.\n * @param {object} d - The derived tuple.\n * @return {object} The derived tuple.\n */\nexport function rederive(t, d) {\n  for (var k in t) d[k] = t[k];\n  return d;\n}\n\n/**\n * Replace an existing tuple with a new tuple.\n * @param {object} t - The existing data tuple.\n * @param {object} d - The new tuple that replaces the old.\n * @return {object} The new tuple.\n */\nexport function replace(t, d) {\n  return setid(d, tupleid(t));\n}\n\n/**\n * Generate an augmented comparator function that provides stable\n * sorting by tuple id when the given comparator produces ties.\n * @param {function} cmp - The comparator to augment.\n * @param {function} [f] - Optional tuple accessor function.\n * @return {function} An augmented comparator function.\n */\nexport function stableCompare(cmp, f) {\n  return !cmp ? null\n    : f ? (a, b) => cmp(a, b) || (tupleid(f(a)) - tupleid(f(b)))\n    : (a, b) => cmp(a, b) || (tupleid(a) - tupleid(b));\n}\n"]},"metadata":{},"sourceType":"module"}