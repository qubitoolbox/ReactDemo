{"ast":null,"code":"import { extend, identity, stringValue } from 'vega-util';\nexport function measureName(op, field, as) {\n  return as || op + (!field ? '' : '_' + field);\n}\nexport var AggregateOps = {\n  'values': measure({\n    name: 'values',\n    init: 'cell.store = true;',\n    set: 'cell.data.values()',\n    idx: -1\n  }),\n  'count': measure({\n    name: 'count',\n    set: 'cell.num'\n  }),\n  '__count__': measure({\n    name: 'count',\n    set: 'this.missing + this.valid'\n  }),\n  'missing': measure({\n    name: 'missing',\n    set: 'this.missing'\n  }),\n  'valid': measure({\n    name: 'valid',\n    set: 'this.valid'\n  }),\n  'sum': measure({\n    name: 'sum',\n    init: 'this.sum = 0;',\n    add: 'this.sum += +v;',\n    rem: 'this.sum -= v;',\n    set: 'this.sum'\n  }),\n  'mean': measure({\n    name: 'mean',\n    init: 'this.mean = 0;',\n    add: 'var d = v - this.mean; this.mean += d / this.valid;',\n    rem: 'var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;',\n    set: 'this.valid ? this.mean : undefined'\n  }),\n  'average': measure({\n    name: 'average',\n    set: 'this.valid ? this.mean : undefined',\n    req: ['mean'],\n    idx: 1\n  }),\n  'variance': measure({\n    name: 'variance',\n    init: 'this.dev = 0;',\n    add: 'this.dev += d * (v - this.mean);',\n    rem: 'this.dev -= d * (v - this.mean);',\n    set: 'this.valid > 1 ? this.dev / (this.valid-1) : undefined',\n    req: ['mean'],\n    idx: 1\n  }),\n  'variancep': measure({\n    name: 'variancep',\n    set: 'this.valid > 1 ? this.dev / this.valid : undefined',\n    req: ['variance'],\n    idx: 2\n  }),\n  'stdev': measure({\n    name: 'stdev',\n    set: 'this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : undefined',\n    req: ['variance'],\n    idx: 2\n  }),\n  'stdevp': measure({\n    name: 'stdevp',\n    set: 'this.valid > 1 ? Math.sqrt(this.dev / this.valid) : undefined',\n    req: ['variance'],\n    idx: 2\n  }),\n  'stderr': measure({\n    name: 'stderr',\n    set: 'this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : undefined',\n    req: ['variance'],\n    idx: 2\n  }),\n  'distinct': measure({\n    name: 'distinct',\n    set: 'cell.data.distinct(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'ci0': measure({\n    name: 'ci0',\n    set: 'cell.data.ci0(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'ci1': measure({\n    name: 'ci1',\n    set: 'cell.data.ci1(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'median': measure({\n    name: 'median',\n    set: 'cell.data.q2(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'q1': measure({\n    name: 'q1',\n    set: 'cell.data.q1(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'q3': measure({\n    name: 'q3',\n    set: 'cell.data.q3(this.get)',\n    req: ['values'],\n    idx: 3\n  }),\n  'argmin': measure({\n    name: 'argmin',\n    init: 'this.argmin = undefined;',\n    add: 'if (v < this.min) this.argmin = t;',\n    rem: 'if (v <= this.min) this.argmin = undefined;',\n    set: 'this.argmin || cell.data.argmin(this.get)',\n    req: ['min'],\n    str: ['values'],\n    idx: 3\n  }),\n  'argmax': measure({\n    name: 'argmax',\n    init: 'this.argmax = undefined;',\n    add: 'if (v > this.max) this.argmax = t;',\n    rem: 'if (v >= this.max) this.argmax = undefined;',\n    set: 'this.argmax || cell.data.argmax(this.get)',\n    req: ['max'],\n    str: ['values'],\n    idx: 3\n  }),\n  'min': measure({\n    name: 'min',\n    init: 'this.min = undefined;',\n    add: 'if (v < this.min || this.min === undefined) this.min = v;',\n    rem: 'if (v <= this.min) this.min = NaN;',\n    set: 'this.min = (Number.isNaN(this.min) ? cell.data.min(this.get) : this.min)',\n    str: ['values'],\n    idx: 4\n  }),\n  'max': measure({\n    name: 'max',\n    init: 'this.max = undefined;',\n    add: 'if (v > this.max || this.max === undefined) this.max = v;',\n    rem: 'if (v >= this.max) this.max = NaN;',\n    set: 'this.max = (Number.isNaN(this.max) ? cell.data.max(this.get) : this.max)',\n    str: ['values'],\n    idx: 4\n  })\n};\nexport var ValidAggregateOps = Object.keys(AggregateOps);\nexport function createMeasure(op, name) {\n  return AggregateOps[op](name);\n}\n\nfunction measure(base) {\n  return function (out) {\n    var m = extend({\n      init: '',\n      add: '',\n      rem: '',\n      idx: 0\n    }, base);\n    m.out = out || base.name;\n    return m;\n  };\n}\n\nfunction compareIndex(a, b) {\n  return a.idx - b.idx;\n}\n\nfunction resolve(agg, stream) {\n  function collect(m, a) {\n    function helper(r) {\n      if (!m[r]) collect(m, m[r] = AggregateOps[r]());\n    }\n\n    if (a.req) a.req.forEach(helper);\n    if (stream && a.str) a.str.forEach(helper);\n    return m;\n  }\n\n  var map = agg.reduce(collect, agg.reduce(function (m, a) {\n    m[a.name] = a;\n    return m;\n  }, {}));\n  var values = [],\n      key;\n\n  for (key in map) values.push(map[key]);\n\n  return values.sort(compareIndex);\n}\n\nexport function compileMeasures(agg, field) {\n  var get = field || identity,\n      all = resolve(agg, true),\n      // assume streaming removes may occur\n  init = 'var cell = this.cell; this.valid = 0; this.missing = 0;',\n      ctr = 'this.cell = cell; this.init();',\n      add = 'if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;',\n      rem = 'if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;',\n      set = 'var cell = this.cell;';\n  all.forEach(function (a) {\n    init += a.init;\n    add += a.add;\n    rem += a.rem;\n  });\n  agg.slice().sort(compareIndex).forEach(function (a) {\n    set += 't[' + stringValue(a.out) + ']=' + a.set + ';';\n  });\n  set += 'return t;';\n  ctr = Function('cell', ctr);\n  ctr.prototype.init = Function(init);\n  ctr.prototype.add = Function('v', 't', add);\n  ctr.prototype.rem = Function('v', 't', rem);\n  ctr.prototype.set = Function('t', set);\n  ctr.prototype.get = get;\n  ctr.fields = agg.map(function (_) {\n    return _.out;\n  });\n  return ctr;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-transforms/src/util/AggregateOps.js"],"names":["extend","identity","stringValue","measureName","op","field","as","AggregateOps","measure","name","init","set","idx","add","rem","req","str","ValidAggregateOps","Object","keys","createMeasure","base","out","m","compareIndex","a","b","resolve","agg","stream","collect","helper","r","forEach","map","reduce","values","key","push","sort","compileMeasures","get","all","ctr","slice","Function","prototype","fields","_"],"mappings":"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","sourcesContent":["import {extend, identity, stringValue} from 'vega-util';\n\nexport function measureName(op, field, as) {\n  return as || (op + (!field ? '' : '_' + field));\n}\n\nexport var AggregateOps = {\n  'values': measure({\n    name: 'values',\n    init: 'cell.store = true;',\n    set:  'cell.data.values()', idx: -1\n  }),\n  'count': measure({\n    name: 'count',\n    set:  'cell.num'\n  }),\n  '__count__': measure({\n    name: 'count',\n    set:  'this.missing + this.valid'\n  }),\n  'missing': measure({\n    name: 'missing',\n    set:  'this.missing'\n  }),\n  'valid': measure({\n    name: 'valid',\n    set:  'this.valid'\n  }),\n  'sum': measure({\n    name: 'sum',\n    init: 'this.sum = 0;',\n    add:  'this.sum += +v;',\n    rem:  'this.sum -= v;',\n    set:  'this.sum'\n  }),\n  'mean': measure({\n    name: 'mean',\n    init: 'this.mean = 0;',\n    add:  'var d = v - this.mean; this.mean += d / this.valid;',\n    rem:  'var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;',\n    set:  'this.valid ? this.mean : undefined'\n  }),\n  'average': measure({\n    name: 'average',\n    set:  'this.valid ? this.mean : undefined',\n    req:  ['mean'], idx: 1\n  }),\n  'variance': measure({\n    name: 'variance',\n    init: 'this.dev = 0;',\n    add:  'this.dev += d * (v - this.mean);',\n    rem:  'this.dev -= d * (v - this.mean);',\n    set:  'this.valid > 1 ? this.dev / (this.valid-1) : undefined',\n    req:  ['mean'], idx: 1\n  }),\n  'variancep': measure({\n    name: 'variancep',\n    set:  'this.valid > 1 ? this.dev / this.valid : undefined',\n    req:  ['variance'], idx: 2\n  }),\n  'stdev': measure({\n    name: 'stdev',\n    set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : undefined',\n    req:  ['variance'], idx: 2\n  }),\n  'stdevp': measure({\n    name: 'stdevp',\n    set:  'this.valid > 1 ? Math.sqrt(this.dev / this.valid) : undefined',\n    req:  ['variance'], idx: 2\n  }),\n  'stderr': measure({\n    name: 'stderr',\n    set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : undefined',\n    req:  ['variance'], idx: 2\n  }),\n  'distinct': measure({\n    name: 'distinct',\n    set:  'cell.data.distinct(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'ci0': measure({\n    name: 'ci0',\n    set:  'cell.data.ci0(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'ci1': measure({\n    name: 'ci1',\n    set:  'cell.data.ci1(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'median': measure({\n    name: 'median',\n    set:  'cell.data.q2(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'q1': measure({\n    name: 'q1',\n    set:  'cell.data.q1(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'q3': measure({\n    name: 'q3',\n    set:  'cell.data.q3(this.get)',\n    req:  ['values'], idx: 3\n  }),\n  'argmin': measure({\n    name: 'argmin',\n    init: 'this.argmin = undefined;',\n    add:  'if (v < this.min) this.argmin = t;',\n    rem:  'if (v <= this.min) this.argmin = undefined;',\n    set:  'this.argmin || cell.data.argmin(this.get)',\n    req:  ['min'], str: ['values'], idx: 3\n  }),\n  'argmax': measure({\n    name: 'argmax',\n    init: 'this.argmax = undefined;',\n    add:  'if (v > this.max) this.argmax = t;',\n    rem:  'if (v >= this.max) this.argmax = undefined;',\n    set:  'this.argmax || cell.data.argmax(this.get)',\n    req:  ['max'], str: ['values'], idx: 3\n  }),\n  'min': measure({\n    name: 'min',\n    init: 'this.min = undefined;',\n    add:  'if (v < this.min || this.min === undefined) this.min = v;',\n    rem:  'if (v <= this.min) this.min = NaN;',\n    set:  'this.min = (Number.isNaN(this.min) ? cell.data.min(this.get) : this.min)',\n    str:  ['values'], idx: 4\n  }),\n  'max': measure({\n    name: 'max',\n    init: 'this.max = undefined;',\n    add:  'if (v > this.max || this.max === undefined) this.max = v;',\n    rem:  'if (v >= this.max) this.max = NaN;',\n    set:  'this.max = (Number.isNaN(this.max) ? cell.data.max(this.get) : this.max)',\n    str:  ['values'], idx: 4\n  })\n};\n\nexport var ValidAggregateOps = Object.keys(AggregateOps);\n\nexport function createMeasure(op, name) {\n  return AggregateOps[op](name);\n}\n\nfunction measure(base) {\n  return function(out) {\n    var m = extend({init:'', add:'', rem:'', idx:0}, base);\n    m.out = out || base.name;\n    return m;\n  };\n}\n\nfunction compareIndex(a, b) {\n  return a.idx - b.idx;\n}\n\nfunction resolve(agg, stream) {\n  function collect(m, a) {\n    function helper(r) { if (!m[r]) collect(m, m[r] = AggregateOps[r]()); }\n    if (a.req) a.req.forEach(helper);\n    if (stream && a.str) a.str.forEach(helper);\n    return m;\n  }\n  var map = agg.reduce(\n    collect,\n    agg.reduce(function(m, a) {\n      m[a.name] = a;\n      return m;\n    }, {})\n  );\n  var values = [], key;\n  for (key in map) values.push(map[key]);\n  return values.sort(compareIndex);\n}\n\nexport function compileMeasures(agg, field) {\n  var get = field || identity,\n      all = resolve(agg, true), // assume streaming removes may occur\n      init = 'var cell = this.cell; this.valid = 0; this.missing = 0;',\n      ctr = 'this.cell = cell; this.init();',\n      add = 'if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;',\n      rem = 'if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;',\n      set = 'var cell = this.cell;';\n\n  all.forEach(function(a) {\n    init += a.init;\n    add += a.add;\n    rem += a.rem;\n  });\n  agg.slice().sort(compareIndex).forEach(function(a) {\n    set += 't[' + stringValue(a.out) + ']=' + a.set + ';';\n  });\n  set += 'return t;';\n\n  ctr = Function('cell', ctr);\n  ctr.prototype.init = Function(init);\n  ctr.prototype.add = Function('v', 't', add);\n  ctr.prototype.rem = Function('v', 't', rem);\n  ctr.prototype.set = Function('t', set);\n  ctr.prototype.get = get;\n  ctr.fields = agg.map(function(_) { return _.out; });\n  return ctr;\n}\n"]},"metadata":{},"sourceType":"module"}