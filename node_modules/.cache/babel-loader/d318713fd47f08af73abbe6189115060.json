{"ast":null,"code":"import { error } from 'vega-util';\nexport default function (codegen) {\n  function fncall(name, args, cast, type) {\n    var obj = codegen(args[0]);\n\n    if (cast) {\n      obj = cast + '(' + obj + ')';\n      if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';\n    }\n\n    return obj + '.' + name + (type < 0 ? '' : type === 0 ? '()' : '(' + args.slice(1).map(codegen).join(',') + ')');\n  }\n\n  function fn(name, cast, type) {\n    return function (args) {\n      return fncall(name, args, cast, type);\n    };\n  }\n\n  var DATE = 'new Date',\n      STRING = 'String',\n      REGEXP = 'RegExp';\n  return {\n    // MATH functions\n    isNaN: 'Number.isNaN',\n    isFinite: 'Number.isFinite',\n    abs: 'Math.abs',\n    acos: 'Math.acos',\n    asin: 'Math.asin',\n    atan: 'Math.atan',\n    atan2: 'Math.atan2',\n    ceil: 'Math.ceil',\n    cos: 'Math.cos',\n    exp: 'Math.exp',\n    floor: 'Math.floor',\n    log: 'Math.log',\n    max: 'Math.max',\n    min: 'Math.min',\n    pow: 'Math.pow',\n    random: 'Math.random',\n    round: 'Math.round',\n    sin: 'Math.sin',\n    sqrt: 'Math.sqrt',\n    tan: 'Math.tan',\n    clamp: function (args) {\n      if (args.length < 3) error('Missing arguments to clamp function.');\n      if (args.length > 3) error('Too many arguments to clamp function.');\n      var a = args.map(codegen);\n      return 'Math.max(' + a[1] + ', Math.min(' + a[2] + ',' + a[0] + '))';\n    },\n    // DATE functions\n    now: 'Date.now',\n    utc: 'Date.UTC',\n    datetime: DATE,\n    date: fn('getDate', DATE, 0),\n    day: fn('getDay', DATE, 0),\n    year: fn('getFullYear', DATE, 0),\n    month: fn('getMonth', DATE, 0),\n    hours: fn('getHours', DATE, 0),\n    minutes: fn('getMinutes', DATE, 0),\n    seconds: fn('getSeconds', DATE, 0),\n    milliseconds: fn('getMilliseconds', DATE, 0),\n    time: fn('getTime', DATE, 0),\n    timezoneoffset: fn('getTimezoneOffset', DATE, 0),\n    utcdate: fn('getUTCDate', DATE, 0),\n    utcday: fn('getUTCDay', DATE, 0),\n    utcyear: fn('getUTCFullYear', DATE, 0),\n    utcmonth: fn('getUTCMonth', DATE, 0),\n    utchours: fn('getUTCHours', DATE, 0),\n    utcminutes: fn('getUTCMinutes', DATE, 0),\n    utcseconds: fn('getUTCSeconds', DATE, 0),\n    utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),\n    // sequence functions\n    length: fn('length', null, -1),\n    join: fn('join', null),\n    indexof: fn('indexOf', null),\n    lastindexof: fn('lastIndexOf', null),\n    slice: fn('slice', null),\n    reverse: function (args) {\n      return '(' + codegen(args[0]) + ').slice().reverse()';\n    },\n    // STRING functions\n    parseFloat: 'parseFloat',\n    parseInt: 'parseInt',\n    upper: fn('toUpperCase', STRING, 0),\n    lower: fn('toLowerCase', STRING, 0),\n    substring: fn('substring', STRING),\n    split: fn('split', STRING),\n    replace: fn('replace', STRING),\n    trim: fn('trim', STRING, 0),\n    // REGEXP functions\n    regexp: REGEXP,\n    test: fn('test', REGEXP),\n    // Control Flow functions\n    if: function (args) {\n      if (args.length < 3) error('Missing arguments to if function.');\n      if (args.length > 3) error('Too many arguments to if function.');\n      var a = args.map(codegen);\n      return '(' + a[0] + '?' + a[1] + ':' + a[2] + ')';\n    }\n  };\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-expression/src/functions.js"],"names":["error","codegen","fncall","name","args","cast","type","obj","lastIndexOf","slice","map","join","fn","DATE","STRING","REGEXP","isNaN","isFinite","abs","acos","asin","atan","atan2","ceil","cos","exp","floor","log","max","min","pow","random","round","sin","sqrt","tan","clamp","length","a","now","utc","datetime","date","day","year","month","hours","minutes","seconds","milliseconds","time","timezoneoffset","utcdate","utcday","utcyear","utcmonth","utchours","utcminutes","utcseconds","utcmilliseconds","indexof","lastindexof","reverse","parseFloat","parseInt","upper","lower","substring","split","replace","trim","regexp","test","if"],"mappings":"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","sourcesContent":["import {error} from 'vega-util';\n\nexport default function(codegen) {\n\n  function fncall(name, args, cast, type) {\n    var obj = codegen(args[0]);\n    if (cast) {\n      obj = cast + '(' + obj + ')';\n      if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';\n    }\n    return obj + '.' + name + (type < 0 ? '' : type === 0 ?\n      '()' :\n      '(' + args.slice(1).map(codegen).join(',') + ')');\n  }\n\n  function fn(name, cast, type) {\n    return function(args) {\n      return fncall(name, args, cast, type);\n    };\n  }\n\n  var DATE = 'new Date',\n      STRING = 'String',\n      REGEXP = 'RegExp';\n\n  return {\n    // MATH functions\n    isNaN:    'Number.isNaN',\n    isFinite: 'Number.isFinite',\n    abs:      'Math.abs',\n    acos:     'Math.acos',\n    asin:     'Math.asin',\n    atan:     'Math.atan',\n    atan2:    'Math.atan2',\n    ceil:     'Math.ceil',\n    cos:      'Math.cos',\n    exp:      'Math.exp',\n    floor:    'Math.floor',\n    log:      'Math.log',\n    max:      'Math.max',\n    min:      'Math.min',\n    pow:      'Math.pow',\n    random:   'Math.random',\n    round:    'Math.round',\n    sin:      'Math.sin',\n    sqrt:     'Math.sqrt',\n    tan:      'Math.tan',\n\n    clamp: function(args) {\n      if (args.length < 3) error('Missing arguments to clamp function.');\n      if (args.length > 3) error('Too many arguments to clamp function.');\n      var a = args.map(codegen);\n      return 'Math.max('+a[1]+', Math.min('+a[2]+','+a[0]+'))';\n    },\n\n    // DATE functions\n    now:             'Date.now',\n    utc:             'Date.UTC',\n    datetime:        DATE,\n    date:            fn('getDate', DATE, 0),\n    day:             fn('getDay', DATE, 0),\n    year:            fn('getFullYear', DATE, 0),\n    month:           fn('getMonth', DATE, 0),\n    hours:           fn('getHours', DATE, 0),\n    minutes:         fn('getMinutes', DATE, 0),\n    seconds:         fn('getSeconds', DATE, 0),\n    milliseconds:    fn('getMilliseconds', DATE, 0),\n    time:            fn('getTime', DATE, 0),\n    timezoneoffset:  fn('getTimezoneOffset', DATE, 0),\n    utcdate:         fn('getUTCDate', DATE, 0),\n    utcday:          fn('getUTCDay', DATE, 0),\n    utcyear:         fn('getUTCFullYear', DATE, 0),\n    utcmonth:        fn('getUTCMonth', DATE, 0),\n    utchours:        fn('getUTCHours', DATE, 0),\n    utcminutes:      fn('getUTCMinutes', DATE, 0),\n    utcseconds:      fn('getUTCSeconds', DATE, 0),\n    utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),\n\n    // sequence functions\n    length:      fn('length', null, -1),\n    join:        fn('join', null),\n    indexof:     fn('indexOf', null),\n    lastindexof: fn('lastIndexOf', null),\n    slice:       fn('slice', null),\n\n    reverse: function(args) {\n      return '('+codegen(args[0])+').slice().reverse()';\n    },\n\n    // STRING functions\n    parseFloat:  'parseFloat',\n    parseInt:    'parseInt',\n    upper:       fn('toUpperCase', STRING, 0),\n    lower:       fn('toLowerCase', STRING, 0),\n    substring:   fn('substring', STRING),\n    split:       fn('split', STRING),\n    replace:     fn('replace', STRING),\n    trim:        fn('trim', STRING, 0),\n\n    // REGEXP functions\n    regexp:  REGEXP,\n    test:    fn('test', REGEXP),\n\n    // Control Flow functions\n    if: function(args) {\n        if (args.length < 3) error('Missing arguments to if function.');\n        if (args.length > 3) error('Too many arguments to if function.');\n        var a = args.map(codegen);\n        return '('+a[0]+'?'+a[1]+':'+a[2]+')';\n      }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}