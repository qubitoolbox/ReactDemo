{"ast":null,"code":"import { transforms } from 'vega-dataflow';\nimport { isArray } from 'vega-util';\n/**\n * Get the current view state, consisting of signal values and/or data sets.\n * @param {object} [options] - Options flags indicating which state to export.\n *   If unspecified, all signals and data sets will be exported.\n * @param {function(string, Operator):boolean} [options.signals] - Optional\n *   predicate function for testing if a signal should be included in the\n *   exported state. If unspecified, all signals will be included, except for\n *   those named 'parent' or those which refer to a Transform value.\n * @param {function(string, object):boolean} [options.data] - Optional\n *   predicate function for testing if a data set's input should be included\n *   in the exported state. If unspecified, all data sets that have been\n *   explicitly modified will be included.\n * @param {boolean} [options.recurse=true] - Flag indicating if the exported\n *   state should recursively include state from group mark sub-contexts.\n * @return {object} - An object containing the exported state values.\n */\n\nexport function getState(options) {\n  return this._runtime.getState(options || {\n    data: dataTest,\n    signals: signalTest,\n    recurse: true\n  });\n}\n\nfunction dataTest(name, data) {\n  return data.modified && isArray(data.input.value) && name.indexOf('_:vega:_');\n}\n\nfunction signalTest(name, op) {\n  return !(name === 'parent' || op instanceof transforms.proxy);\n}\n/**\n * Sets the current view state and updates the view by invoking run.\n * @param {object} state - A state object containing signal and/or\n *   data set values, following the format used by the getState method.\n * @return {View} - This view instance.\n */\n\n\nexport function setState(state) {\n  this.runAsync(null, v => {\n    v._trigger = false;\n\n    v._runtime.setState(state);\n  }, v => {\n    v._trigger = true;\n  });\n  return this;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-view/src/state.js"],"names":["transforms","isArray","getState","options","_runtime","data","dataTest","signals","signalTest","recurse","name","modified","input","value","indexOf","op","proxy","setState","state","runAsync","v","_trigger"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,eAAzB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AAChC,SAAO,KAAKC,QAAL,CAAcF,QAAd,CAAuBC,OAAO,IAAI;AACvCE,IAAAA,IAAI,EAAKC,QAD8B;AAEvCC,IAAAA,OAAO,EAAEC,UAF8B;AAGvCC,IAAAA,OAAO,EAAE;AAH8B,GAAlC,CAAP;AAKD;;AAED,SAASH,QAAT,CAAkBI,IAAlB,EAAwBL,IAAxB,EAA8B;AAC5B,SAAOA,IAAI,CAACM,QAAL,IACAV,OAAO,CAACI,IAAI,CAACO,KAAL,CAAWC,KAAZ,CADP,IAEAH,IAAI,CAACI,OAAL,CAAa,UAAb,CAFP;AAGD;;AAED,SAASN,UAAT,CAAoBE,IAApB,EAA0BK,EAA1B,EAA8B;AAC5B,SAAO,EAAEL,IAAI,KAAK,QAAT,IAAqBK,EAAE,YAAYf,UAAU,CAACgB,KAAhD,CAAP;AACD;AAED;;;;;;;;AAMA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,OAAKC,QAAL,CAAc,IAAd,EACEC,CAAC,IAAI;AAAEA,IAAAA,CAAC,CAACC,QAAF,GAAa,KAAb;;AAAoBD,IAAAA,CAAC,CAAChB,QAAF,CAAWa,QAAX,CAAoBC,KAApB;AAA6B,GAD1D,EAEEE,CAAC,IAAI;AAAEA,IAAAA,CAAC,CAACC,QAAF,GAAa,IAAb;AAAoB,GAF7B;AAIA,SAAO,IAAP;AACD","sourcesContent":["import {transforms} from 'vega-dataflow';\nimport {isArray} from 'vega-util';\n\n/**\n * Get the current view state, consisting of signal values and/or data sets.\n * @param {object} [options] - Options flags indicating which state to export.\n *   If unspecified, all signals and data sets will be exported.\n * @param {function(string, Operator):boolean} [options.signals] - Optional\n *   predicate function for testing if a signal should be included in the\n *   exported state. If unspecified, all signals will be included, except for\n *   those named 'parent' or those which refer to a Transform value.\n * @param {function(string, object):boolean} [options.data] - Optional\n *   predicate function for testing if a data set's input should be included\n *   in the exported state. If unspecified, all data sets that have been\n *   explicitly modified will be included.\n * @param {boolean} [options.recurse=true] - Flag indicating if the exported\n *   state should recursively include state from group mark sub-contexts.\n * @return {object} - An object containing the exported state values.\n */\nexport function getState(options) {\n  return this._runtime.getState(options || {\n    data:    dataTest,\n    signals: signalTest,\n    recurse: true\n  });\n}\n\nfunction dataTest(name, data) {\n  return data.modified\n      && isArray(data.input.value)\n      && name.indexOf('_:vega:_');\n}\n\nfunction signalTest(name, op) {\n  return !(name === 'parent' || op instanceof transforms.proxy);\n}\n\n/**\n * Sets the current view state and updates the view by invoking run.\n * @param {object} state - A state object containing signal and/or\n *   data set values, following the format used by the getState method.\n * @return {View} - This view instance.\n */\nexport function setState(state) {\n  this.runAsync(null,\n    v => { v._trigger = false; v._runtime.setState(state); },\n    v => { v._trigger = true; }\n  );\n  return this;\n}\n"]},"metadata":{},"sourceType":"module"}