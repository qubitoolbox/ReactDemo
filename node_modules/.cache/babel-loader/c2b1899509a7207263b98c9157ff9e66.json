{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst vega_embed_1 = __importDefault(require(\"vega-embed\"));\n\nconst dom_1 = require(\"../util/dom\");\n\nconst render_utils_1 = require(\"./render_utils\");\n/**\n * Renders a barchart.\n *\n * ```js\n * const data = [\n *   { index: 0, value: 50 },\n *   { index: 1, value: 100 },\n *   { index: 2, value: 150 },\n *  ];\n *\n * // Render to visor\n * const surface = { name: 'Bar chart', tab: 'Charts' };\n * tfvis.render.barchart(surface, data);\n * ```\n *\n * @param data Data in the following format, (an array of objects)\n *    `[ {index: number, value: number} ... ]`\n *\n * @returns Promise - indicates completion of rendering\n */\n\n/** @doc {heading: 'Charts', namespace: 'render'} */\n\n\nfunction barchart(container, data, opts = {}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const drawArea = render_utils_1.getDrawArea(container);\n    const values = data;\n    const options = Object.assign({}, defaultOpts, opts); // If we have rendered this chart before with the same options we can do a\n    // data only update, else  we do a regular re-render.\n\n    if (instances.has(drawArea)) {\n      const instanceInfo = instances.get(drawArea);\n\n      if (render_utils_1.shallowEquals(options, instanceInfo.lastOptions)) {\n        yield render_utils_1.nextFrame();\n        const view = instanceInfo.view;\n        const changes = view.changeset().remove(() => true).insert(values);\n        yield view.change('values', changes).runAsync();\n        return;\n      }\n    }\n\n    const {\n      xLabel,\n      yLabel,\n      xType,\n      yType\n    } = options;\n    let xAxis = null;\n\n    if (xLabel != null) {\n      xAxis = {\n        title: xLabel\n      };\n    }\n\n    let yAxis = null;\n\n    if (yLabel != null) {\n      yAxis = {\n        title: yLabel\n      };\n    }\n\n    const embedOpts = {\n      actions: false,\n      mode: 'vega-lite',\n      defaultStyle: false\n    };\n    let colorEncoding;\n\n    if (options.color != null) {\n      if (Array.isArray(options.color)) {\n        colorEncoding = {\n          'field': 'index',\n          'type': 'nominal',\n          'scale': {\n            'range': options.color\n          }\n        };\n      } else {\n        colorEncoding = {\n          'value': options.color\n        };\n      }\n    } else {\n      colorEncoding = {\n        'value': '#4C78A0'\n      };\n    }\n\n    const spec = {\n      'width': options.width || dom_1.getDefaultWidth(drawArea),\n      'height': options.height || dom_1.getDefaultHeight(drawArea),\n      'padding': 0,\n      'autosize': {\n        'type': 'fit',\n        'contains': 'padding',\n        'resize': true\n      },\n      'config': {\n        'axis': {\n          'labelFontSize': options.fontSize,\n          'titleFontSize': options.fontSize\n        },\n        'text': {\n          'fontSize': options.fontSize\n        },\n        'legend': {\n          'labelFontSize': options.fontSize,\n          'titleFontSize': options.fontSize\n        }\n      },\n      'data': {\n        'values': values,\n        'name': 'values'\n      },\n      'mark': {\n        'type': 'bar',\n        'tooltip': true\n      },\n      'encoding': {\n        'x': {\n          'field': 'index',\n          'type': xType,\n          'axis': xAxis\n        },\n        'y': {\n          'field': 'value',\n          'type': yType,\n          'axis': yAxis\n        },\n        'color': colorEncoding\n      }\n    };\n    yield render_utils_1.nextFrame();\n    const embedRes = yield vega_embed_1.default(drawArea, spec, embedOpts);\n    instances.set(drawArea, {\n      view: embedRes.view,\n      lastOptions: options\n    });\n  });\n}\n\nexports.barchart = barchart;\nconst defaultOpts = {\n  xLabel: '',\n  yLabel: '',\n  xType: 'ordinal',\n  yType: 'quantitative',\n  fontSize: 11\n}; // We keep a map of containers to chart instances in order to reuse the\n// instance where possible.\n\nconst instances = new Map();","map":{"version":3,"sources":["../../src/render/barchart.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,MAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AAGA,MAAA,KAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA;;;AACA,SAAsB,QAAtB,CACI,SADJ,EACyB,IADzB,EAEI,IAAA,GAAqB,EAFzB,EAE2B;;AACzB,UAAM,QAAQ,GAAG,cAAA,CAAA,WAAA,CAAY,SAAZ,CAAjB;AACA,UAAM,MAAM,GAAG,IAAf;AACA,UAAM,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,WAAlB,EAA+B,IAA/B,CAAhB,C,CAEA;AACA;;AACA,QAAI,SAAS,CAAC,GAAV,CAAc,QAAd,CAAJ,EAA6B;AAC3B,YAAM,YAAY,GAAG,SAAS,CAAC,GAAV,CAAc,QAAd,CAArB;;AACA,UAAI,cAAA,CAAA,aAAA,CAAc,OAAd,EAAuB,YAAY,CAAC,WAApC,CAAJ,EAAsD;AACpD,cAAM,cAAA,CAAA,SAAA,EAAN;AACA,cAAM,IAAI,GAAG,YAAY,CAAC,IAA1B;AACA,cAAM,OAAO,GAAG,IAAI,CAAC,SAAL,GAAiB,MAAjB,CAAwB,MAAM,IAA9B,EAAoC,MAApC,CAA2C,MAA3C,CAAhB;AACA,cAAM,IAAI,CAAC,MAAL,CAAY,QAAZ,EAAsB,OAAtB,EAA+B,QAA/B,EAAN;AACA;AACD;AACF;;AAED,UAAM;AAAC,MAAA,MAAD;AAAS,MAAA,MAAT;AAAiB,MAAA,KAAjB;AAAwB,MAAA;AAAxB,QAAiC,OAAvC;AAEA,QAAI,KAAK,GAAY,IAArB;;AACA,QAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,MAAA,KAAK,GAAG;AAAC,QAAA,KAAK,EAAE;AAAR,OAAR;AACD;;AAED,QAAI,KAAK,GAAY,IAArB;;AACA,QAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,MAAA,KAAK,GAAG;AAAC,QAAA,KAAK,EAAE;AAAR,OAAR;AACD;;AAED,UAAM,SAAS,GAAG;AAChB,MAAA,OAAO,EAAE,KADO;AAEhB,MAAA,IAAI,EAAE,WAFU;AAGhB,MAAA,YAAY,EAAE;AAHE,KAAlB;AAMA,QAAI,aAAJ;;AAEA,QAAI,OAAO,CAAC,KAAR,IAAiB,IAArB,EAA2B;AACzB,UAAI,KAAK,CAAC,OAAN,CAAc,OAAO,CAAC,KAAtB,CAAJ,EAAkC;AAChC,QAAA,aAAa,GAAG;AACd,mBAAS,OADK;AAEd,kBAAQ,SAFM;AAGd,mBAAS;AACP,qBAAS,OAAO,CAAC;AADV;AAHK,SAAhB;AAOD,OARD,MAQO;AACL,QAAA,aAAa,GAAG;AAAC,mBAAS,OAAO,CAAC;AAAlB,SAAhB;AACD;AACF,KAZD,MAYO;AACL,MAAA,aAAa,GAAG;AAAC,iBAAS;AAAV,OAAhB;AACD;;AAED,UAAM,IAAI,GAAsB;AAC9B,eAAS,OAAO,CAAC,KAAR,IAAiB,KAAA,CAAA,eAAA,CAAgB,QAAhB,CADI;AAE9B,gBAAU,OAAO,CAAC,MAAR,IAAkB,KAAA,CAAA,gBAAA,CAAiB,QAAjB,CAFE;AAG9B,iBAAW,CAHmB;AAI9B,kBAAY;AACV,gBAAQ,KADE;AAEV,oBAAY,SAFF;AAGV,kBAAU;AAHA,OAJkB;AAS9B,gBAAU;AACR,gBAAQ;AACN,2BAAiB,OAAO,CAAC,QADnB;AAEN,2BAAiB,OAAO,CAAC;AAFnB,SADA;AAKR,gBAAQ;AAAC,sBAAY,OAAO,CAAC;AAArB,SALA;AAMR,kBAAU;AACR,2BAAiB,OAAO,CAAC,QADjB;AAER,2BAAiB,OAAO,CAAC;AAFjB;AANF,OAToB;AAoB9B,cAAQ;AAAC,kBAAU,MAAX;AAAmB,gBAAQ;AAA3B,OApBsB;AAqB9B,cAAQ;AACN,gBAAQ,KADF;AAEN,mBAAW;AAFL,OArBsB;AAyB9B,kBAAY;AACV,aAAK;AAAC,mBAAS,OAAV;AAAmB,kBAAQ,KAA3B;AAAkC,kBAAQ;AAA1C,SADK;AAEV,aAAK;AAAC,mBAAS,OAAV;AAAmB,kBAAQ,KAA3B;AAAkC,kBAAQ;AAA1C,SAFK;AAGV,iBAAS;AAHC;AAzBkB,KAAhC;AAgCA,UAAM,cAAA,CAAA,SAAA,EAAN;AACA,UAAM,QAAQ,GAAG,MAAM,YAAA,CAAA,OAAA,CAAM,QAAN,EAAgB,IAAhB,EAAsB,SAAtB,CAAvB;AACA,IAAA,SAAS,CAAC,GAAV,CAAc,QAAd,EAAwB;AACtB,MAAA,IAAI,EAAE,QAAQ,CAAC,IADO;AAEtB,MAAA,WAAW,EAAE;AAFS,KAAxB;AAID,G;AAAA;;AA9FD,OAAA,CAAA,QAAA,GAAA,QAAA;AAgGA,MAAM,WAAW,GAAG;AAClB,EAAA,MAAM,EAAE,EADU;AAElB,EAAA,MAAM,EAAE,EAFU;AAGlB,EAAA,KAAK,EAAE,SAHW;AAIlB,EAAA,KAAK,EAAE,cAJW;AAKlB,EAAA,QAAQ,EAAE;AALQ,CAApB,C,CAQA;AACA;;AACA,MAAM,SAAS,GACX,IAAI,GAAJ,EADJ","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport embed, {Mode, Result as EmbedRes, VisualizationSpec} from 'vega-embed';\n\nimport {BarChartOpts, Drawable} from '../types';\nimport {getDefaultHeight, getDefaultWidth} from '../util/dom';\nimport {getDrawArea, nextFrame, shallowEquals} from './render_utils';\n\n/**\n * Renders a barchart.\n *\n * ```js\n * const data = [\n *   { index: 0, value: 50 },\n *   { index: 1, value: 100 },\n *   { index: 2, value: 150 },\n *  ];\n *\n * // Render to visor\n * const surface = { name: 'Bar chart', tab: 'Charts' };\n * tfvis.render.barchart(surface, data);\n * ```\n *\n * @param data Data in the following format, (an array of objects)\n *    `[ {index: number, value: number} ... ]`\n *\n * @returns Promise - indicates completion of rendering\n */\n/** @doc {heading: 'Charts', namespace: 'render'} */\nexport async function barchart(\n    container: Drawable, data: Array<{index: number; value: number;}>,\n    opts: BarChartOpts = {}): Promise<void> {\n  const drawArea = getDrawArea(container);\n  const values = data;\n  const options = Object.assign({}, defaultOpts, opts);\n\n  // If we have rendered this chart before with the same options we can do a\n  // data only update, else  we do a regular re-render.\n  if (instances.has(drawArea)) {\n    const instanceInfo = instances.get(drawArea);\n    if (shallowEquals(options, instanceInfo.lastOptions)) {\n      await nextFrame();\n      const view = instanceInfo.view;\n      const changes = view.changeset().remove(() => true).insert(values);\n      await view.change('values', changes).runAsync();\n      return;\n    }\n  }\n\n  const {xLabel, yLabel, xType, yType} = options;\n\n  let xAxis: {}|null = null;\n  if (xLabel != null) {\n    xAxis = {title: xLabel};\n  }\n\n  let yAxis: {}|null = null;\n  if (yLabel != null) {\n    yAxis = {title: yLabel};\n  }\n\n  const embedOpts = {\n    actions: false,\n    mode: 'vega-lite' as Mode,\n    defaultStyle: false,\n  };\n\n  let colorEncoding;\n\n  if (options.color != null) {\n    if (Array.isArray(options.color)) {\n      colorEncoding = {\n        'field': 'index',\n        'type': 'nominal',\n        'scale': {\n          'range': options.color,\n        }\n      };\n    } else {\n      colorEncoding = {'value': options.color};\n    }\n  } else {\n    colorEncoding = {'value': '#4C78A0'};\n  }\n\n  const spec: VisualizationSpec = {\n    'width': options.width || getDefaultWidth(drawArea),\n    'height': options.height || getDefaultHeight(drawArea),\n    'padding': 0,\n    'autosize': {\n      'type': 'fit',\n      'contains': 'padding',\n      'resize': true,\n    },\n    'config': {\n      'axis': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      },\n      'text': {'fontSize': options.fontSize},\n      'legend': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      }\n    },\n    'data': {'values': values, 'name': 'values'},\n    'mark': {\n      'type': 'bar',\n      'tooltip': true,\n    },\n    'encoding': {\n      'x': {'field': 'index', 'type': xType, 'axis': xAxis},\n      'y': {'field': 'value', 'type': yType, 'axis': yAxis},\n      'color': colorEncoding,\n    },\n  } as VisualizationSpec;\n\n  await nextFrame();\n  const embedRes = await embed(drawArea, spec, embedOpts);\n  instances.set(drawArea, {\n    view: embedRes.view,\n    lastOptions: options,\n  });\n}\n\nconst defaultOpts = {\n  xLabel: '',\n  yLabel: '',\n  xType: 'ordinal',\n  yType: 'quantitative',\n  fontSize: 11,\n};\n\n// We keep a map of containers to chart instances in order to reuse the\n// instance where possible.\nconst instances: Map<HTMLElement, InstanceInfo> =\n    new Map<HTMLElement, InstanceInfo>();\n\ninterface InstanceInfo {\n  // tslint:disable-next-line:no-any\n  view: any;\n  lastOptions: BarChartOpts;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}