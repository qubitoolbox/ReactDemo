{"ast":null,"code":"/**\n * Definition for specifications in Vega-Lite. In general, there are 3 variants of specs for each type of specs:\n * - Generic specs are generic versions of specs and they are parameterized differently for internal and external specs.\n * - The external specs (no prefix) would allow composite marks, row/column encodings, and mark macros like point/line overlay.\n * - The internal specs (with `Normalized` prefix) would only support primitive marks and support no macros/shortcuts.\n */\nexport { isAnyConcatSpec, isHConcatSpec, isVConcatSpec } from './concat';\nexport { isFacetSpec } from './facet';\nexport { isLayerSpec } from './layer';\nexport { isRepeatSpec } from './repeat';\nexport { isUnitSpec } from './unit';","map":{"version":3,"sources":["../../../src/spec/index.ts"],"names":[],"mappings":"AAAA;;;;;;AAgBA,SAGE,eAHF,EAIE,aAJF,EAKE,aALF,QAOO,UAPP;AAQA,SAA0B,WAA1B,QAAiE,SAAjE;AACA,SAA0B,WAA1B,QAAiG,SAAjG;AACA,SAA2B,YAA3B,QAAoE,UAApE;AAEA,SAA0C,UAA1C,QAAyF,QAAzF","sourcesContent":["/**\n * Definition for specifications in Vega-Lite. In general, there are 3 variants of specs for each type of specs:\n * - Generic specs are generic versions of specs and they are parameterized differently for internal and external specs.\n * - The external specs (no prefix) would allow composite marks, row/column encodings, and mark macros like point/line overlay.\n * - The internal specs (with `Normalized` prefix) would only support primitive marks and support no macros/shortcuts.\n */\n\nimport {DataMixins} from './base';\nimport {GenericConcatSpec, GenericHConcatSpec, GenericVConcatSpec} from './concat';\nimport {GenericFacetSpec} from './facet';\nimport {GenericLayerSpec, LayerSpec, NormalizedLayerSpec} from './layer';\nimport {GenericRepeatSpec} from './repeat';\nimport {TopLevel} from './toplevel';\nimport {FacetedUnitSpec, GenericUnitSpec, NormalizedUnitSpec, TopLevelUnitSpec} from './unit';\n\nexport {BaseSpec, LayoutSizeMixins} from './base';\nexport {\n  GenericHConcatSpec,\n  GenericVConcatSpec,\n  isAnyConcatSpec,\n  isHConcatSpec,\n  isVConcatSpec,\n  NormalizedConcatSpec\n} from './concat';\nexport {GenericFacetSpec, isFacetSpec, NormalizedFacetSpec} from './facet';\nexport {GenericLayerSpec, isLayerSpec, LayerSpec as ExtendedLayerSpec, NormalizedLayerSpec} from './layer';\nexport {GenericRepeatSpec, isRepeatSpec, NormalizedRepeatSpec} from './repeat';\nexport {TopLevel} from './toplevel';\nexport {FacetedUnitSpec, GenericUnitSpec, isUnitSpec, NormalizedUnitSpec, UnitSpec} from './unit';\n\n/**\n * Any specification in Vega-Lite.\n */\nexport type GenericSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>> =\n  | U\n  | L\n  | GenericFacetSpec<U, L>\n  | GenericRepeatSpec<U, L>\n  | GenericConcatSpec<U, L>\n  | GenericVConcatSpec<U, L>\n  | GenericHConcatSpec<U, L>;\n\n/**\n * Specs with only primitive marks and without other macros.\n */\nexport type NormalizedSpec = GenericSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport type TopLevelFacetSpec = TopLevel<GenericFacetSpec<FacetedUnitSpec, LayerSpec>> & DataMixins;\n\n/**\n * A Vega-Lite top-level specification.\n * This is the root class for all Vega-Lite specifications.\n * (The json schema is generated from this type.)\n */\nexport type TopLevelSpec =\n  | TopLevelUnitSpec\n  | TopLevelFacetSpec\n  | TopLevel<LayerSpec>\n  | TopLevel<GenericRepeatSpec<FacetedUnitSpec, LayerSpec>>\n  | TopLevel<GenericConcatSpec<FacetedUnitSpec, LayerSpec>>\n  | TopLevel<GenericVConcatSpec<FacetedUnitSpec, LayerSpec>>\n  | TopLevel<GenericHConcatSpec<FacetedUnitSpec, LayerSpec>>;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}