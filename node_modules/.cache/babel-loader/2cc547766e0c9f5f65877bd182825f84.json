{"ast":null,"code":"import { selector as parseSelector } from 'vega-event-selector';\nimport { X, Y } from '../../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from '../interval';\nimport scalesCompiler, { domain } from './scales';\nconst ANCHOR = '_translate_anchor';\nconst DELTA = '_translate_delta';\nconst translate = {\n  has: selCmpt => {\n    return selCmpt.type === 'interval' && selCmpt.translate;\n  },\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const hasScales = scalesCompiler.has(selCmpt);\n    const anchor = name + ANCHOR;\n    const {\n      x,\n      y\n    } = selCmpt.project.hasChannel;\n    let events = parseSelector(selCmpt.translate, 'scope');\n\n    if (!hasScales) {\n      events = events.map(e => (e.between[0].markname = name + INTERVAL_BRUSH, e));\n    }\n\n    signals.push({\n      name: anchor,\n      value: {},\n      on: [{\n        events: events.map(e => e.between[0]),\n        update: '{x: x(unit), y: y(unit)' + (x !== undefined ? ', extent_x: ' + (hasScales ? domain(model, X) : `slice(${x.signals.visual})`) : '') + (y !== undefined ? ', extent_y: ' + (hasScales ? domain(model, Y) : `slice(${y.signals.visual})`) : '') + '}'\n      }]\n    }, {\n      name: name + DELTA,\n      value: {},\n      on: [{\n        events: events,\n        update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`\n      }]\n    });\n\n    if (x !== undefined) {\n      onDelta(model, selCmpt, x, 'width', signals);\n    }\n\n    if (y !== undefined) {\n      onDelta(model, selCmpt, y, 'height', signals);\n    }\n\n    return signals;\n  }\n};\nexport default translate;\n\nfunction onDelta(model, selCmpt, proj, size, signals) {\n  var _a;\n\n  const name = selCmpt.name;\n  const anchor = name + ANCHOR;\n  const delta = name + DELTA;\n  const channel = proj.channel;\n  const hasScales = scalesCompiler.has(selCmpt);\n  const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];\n  const sizeSg = model.getSizeSignalRef(size).signal;\n  const scaleCmpt = model.getScaleComponent(channel);\n  const scaleType = scaleCmpt.get('type');\n  const sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\n\n  const extent = `${anchor}.extent_${channel}`;\n  const offset = `${sign}${delta}.${channel} / ` + (hasScales ? `${sizeSg}` : `span(${extent})`);\n  const panFn = !hasScales ? 'panLinear' : scaleType === 'log' ? 'panLog' : scaleType === 'pow' ? 'panPow' : 'panLinear';\n  const update = `${panFn}(${extent}, ${offset}` + (hasScales && scaleType === 'pow' ? `, ${(_a = scaleCmpt.get('exponent'), _a !== null && _a !== void 0 ? _a : 1)}` : '') + ')';\n  signal.on.push({\n    events: {\n      signal: delta\n    },\n    update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n  });\n}","map":{"version":3,"sources":["../../../../../src/compile/selection/transforms/translate.ts"],"names":[],"mappings":"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","sourcesContent":["import {NewSignal} from 'vega';\nimport {selector as parseSelector} from 'vega-event-selector';\nimport {SelectionComponent} from '..';\nimport {ScaleChannel, X, Y} from '../../../channel';\nimport {UnitModel} from '../../unit';\nimport {BRUSH as INTERVAL_BRUSH} from '../interval';\nimport {SelectionProjection} from './project';\nimport scalesCompiler, {domain} from './scales';\nimport {TransformCompiler} from './transforms';\n\nconst ANCHOR = '_translate_anchor';\nconst DELTA = '_translate_delta';\n\nconst translate: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type === 'interval' && selCmpt.translate;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const hasScales = scalesCompiler.has(selCmpt);\n    const anchor = name + ANCHOR;\n    const {x, y} = selCmpt.project.hasChannel;\n    let events = parseSelector(selCmpt.translate, 'scope');\n\n    if (!hasScales) {\n      events = events.map(e => ((e.between[0].markname = name + INTERVAL_BRUSH), e));\n    }\n\n    signals.push(\n      {\n        name: anchor,\n        value: {},\n        on: [\n          {\n            events: events.map(e => e.between[0]),\n            update:\n              '{x: x(unit), y: y(unit)' +\n              (x !== undefined ? ', extent_x: ' + (hasScales ? domain(model, X) : `slice(${x.signals.visual})`) : '') +\n              (y !== undefined ? ', extent_y: ' + (hasScales ? domain(model, Y) : `slice(${y.signals.visual})`) : '') +\n              '}'\n          }\n        ]\n      },\n      {\n        name: name + DELTA,\n        value: {},\n        on: [\n          {\n            events: events,\n            update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`\n          }\n        ]\n      }\n    );\n\n    if (x !== undefined) {\n      onDelta(model, selCmpt, x, 'width', signals);\n    }\n\n    if (y !== undefined) {\n      onDelta(model, selCmpt, y, 'height', signals);\n    }\n\n    return signals;\n  }\n};\n\nexport default translate;\n\nfunction onDelta(\n  model: UnitModel,\n  selCmpt: SelectionComponent,\n  proj: SelectionProjection,\n  size: 'width' | 'height',\n  signals: NewSignal[]\n) {\n  const name = selCmpt.name;\n  const anchor = name + ANCHOR;\n  const delta = name + DELTA;\n  const channel = proj.channel as ScaleChannel;\n  const hasScales = scalesCompiler.has(selCmpt);\n  const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];\n  const sizeSg = model.getSizeSignalRef(size).signal;\n  const scaleCmpt = model.getScaleComponent(channel);\n  const scaleType = scaleCmpt.get('type');\n  const sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\n  const extent = `${anchor}.extent_${channel}`;\n  const offset = `${sign}${delta}.${channel} / ` + (hasScales ? `${sizeSg}` : `span(${extent})`);\n  const panFn = !hasScales\n    ? 'panLinear'\n    : scaleType === 'log'\n    ? 'panLog'\n    : scaleType === 'pow'\n    ? 'panPow'\n    : 'panLinear';\n  const update =\n    `${panFn}(${extent}, ${offset}` +\n    (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') ?? 1}` : '') +\n    ')';\n\n  signal.on.push({\n    events: {signal: delta},\n    update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}