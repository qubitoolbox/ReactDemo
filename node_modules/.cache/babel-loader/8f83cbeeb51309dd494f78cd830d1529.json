{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { isNumber, isObject } from 'vega-util';\nimport { extractTransformsFromEncoding } from '../encoding';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nimport { getFirstDefined, keys } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { compositeMarkContinuousAxis, compositeMarkOrient, filterTooltipWithAggregatedField, getCompositeMarkTooltip, getTitle, makeCompositeAggregatePartFactory, partLayerMixins } from './common';\nexport const BOXPLOT = 'boxplot';\nconst BOXPLOT_PART_INDEX = {\n  box: 1,\n  median: 1,\n  outliers: 1,\n  rule: 1,\n  ticks: 1\n};\nexport const BOXPLOT_PARTS = keys(BOXPLOT_PART_INDEX);\nexport const boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);\nexport function getBoxPlotType(extent) {\n  if (isNumber(extent)) {\n    return 'tukey';\n  } // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`. However, I'm not exposing this for now.\n\n\n  return extent;\n}\nexport function normalizeBoxPlot(spec, {\n  config\n}) {\n  var _a, _b; // TODO: use selection\n\n\n  const {\n    mark,\n    encoding: _encoding,\n    selection,\n    projection: _p\n  } = spec,\n        outerSpec = __rest(spec, [\"mark\", \"encoding\", \"selection\", \"projection\"]);\n\n  const markDef = isMarkDef(mark) ? mark : {\n    type: mark\n  }; // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n\n  if (selection) {\n    log.warn(log.message.selectionNotSupported('boxplot'));\n  }\n\n  const extent = (_a = markDef.extent, _a !== null && _a !== void 0 ? _a : config.boxplot.extent);\n  const sizeValue = getFirstDefined(markDef.size, config.boxplot.size);\n  const boxPlotType = getBoxPlotType(extent);\n  const {\n    transform,\n    continuousAxisChannelDef,\n    continuousAxis,\n    groupby,\n    aggregate,\n    encodingWithoutContinuousAxis,\n    ticksOrient,\n    boxOrient,\n    customTooltipWithoutAggregatedField\n  } = boxParams(spec, extent, config);\n\n  const {\n    color,\n    size\n  } = encodingWithoutContinuousAxis,\n        encodingWithoutSizeColorAndContinuousAxis = __rest(encodingWithoutContinuousAxis, [\"color\", \"size\"]);\n\n  const makeBoxPlotPart = sharedEncoding => {\n    return makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);\n  };\n\n  const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);\n  const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);\n  const makeBoxPlotMidTick = makeBoxPlotPart(Object.assign(Object.assign({}, encodingWithoutSizeColorAndContinuousAxis), size ? {\n    size\n  } : {}));\n  const fiveSummaryTooltipEncoding = getCompositeMarkTooltip([{\n    fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_',\n    titlePrefix: 'Max'\n  }, {\n    fieldPrefix: 'upper_box_',\n    titlePrefix: 'Q3'\n  }, {\n    fieldPrefix: 'mid_box_',\n    titlePrefix: 'Median'\n  }, {\n    fieldPrefix: 'lower_box_',\n    titlePrefix: 'Q1'\n  }, {\n    fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_',\n    titlePrefix: 'Min'\n  }], continuousAxisChannelDef, encodingWithoutContinuousAxis); // ## Whisker Layers\n\n  const endTick = {\n    type: 'tick',\n    color: 'black',\n    opacity: 1,\n    orient: ticksOrient,\n    invalid: null\n  };\n  const whiskerTooltipEncoding = boxPlotType === 'min-max' ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker\n  : // for tukey / k-IQR, just show upper/lower-whisker\n  getCompositeMarkTooltip([{\n    fieldPrefix: 'upper_whisker_',\n    titlePrefix: 'Upper Whisker'\n  }, {\n    fieldPrefix: 'lower_whisker_',\n    titlePrefix: 'Lower Whisker'\n  }], continuousAxisChannelDef, encodingWithoutContinuousAxis);\n  const whiskerLayers = [...makeBoxPlotExtent({\n    partName: 'rule',\n    mark: {\n      type: 'rule',\n      invalid: null\n    },\n    positionPrefix: 'lower_whisker',\n    endPositionPrefix: 'lower_box',\n    extraEncoding: whiskerTooltipEncoding\n  }), ...makeBoxPlotExtent({\n    partName: 'rule',\n    mark: {\n      type: 'rule',\n      invalid: null\n    },\n    positionPrefix: 'upper_box',\n    endPositionPrefix: 'upper_whisker',\n    extraEncoding: whiskerTooltipEncoding\n  }), ...makeBoxPlotExtent({\n    partName: 'ticks',\n    mark: endTick,\n    positionPrefix: 'lower_whisker',\n    extraEncoding: whiskerTooltipEncoding\n  }), ...makeBoxPlotExtent({\n    partName: 'ticks',\n    mark: endTick,\n    positionPrefix: 'upper_whisker',\n    extraEncoding: whiskerTooltipEncoding\n  })]; // ## Box Layers\n  // TODO: support hiding certain mark parts\n\n  const boxLayers = [...(boxPlotType !== 'tukey' ? whiskerLayers : []), ...makeBoxPlotBox({\n    partName: 'box',\n    mark: Object.assign(Object.assign({\n      type: 'bar'\n    }, sizeValue ? {\n      size: sizeValue\n    } : {}), {\n      orient: boxOrient,\n      invalid: null\n    }),\n    positionPrefix: 'lower_box',\n    endPositionPrefix: 'upper_box',\n    extraEncoding: fiveSummaryTooltipEncoding\n  }), ...makeBoxPlotMidTick({\n    partName: 'median',\n    mark: Object.assign(Object.assign(Object.assign({\n      type: 'tick',\n      invalid: null\n    }, isObject(config.boxplot.median) && config.boxplot.median.color ? {\n      color: config.boxplot.median.color\n    } : {}), sizeValue ? {\n      size: sizeValue\n    } : {}), {\n      orient: ticksOrient\n    }),\n    positionPrefix: 'mid_box',\n    extraEncoding: fiveSummaryTooltipEncoding\n  })]; // ## Filtered Layers\n\n  let filteredLayersMixins;\n\n  if (boxPlotType !== 'min-max') {\n    const lowerBoxExpr = `datum[\"lower_box_${continuousAxisChannelDef.field}\"]`;\n    const upperBoxExpr = `datum[\"upper_box_${continuousAxisChannelDef.field}\"]`;\n    const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;\n    const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent} * ${iqrExpr}`;\n    const upperWhiskerExpr = `${upperBoxExpr} + ${extent} * ${iqrExpr}`;\n    const fieldExpr = `datum[\"${continuousAxisChannelDef.field}\"]`;\n    const joinaggregateTransform = {\n      joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),\n      groupby\n    };\n    let filteredWhiskerSpec = undefined;\n\n    if (boxPlotType === 'tukey') {\n      filteredWhiskerSpec = {\n        transform: [{\n          filter: `(${lowerWhiskerExpr} <= ${fieldExpr}) && (${fieldExpr} <= ${upperWhiskerExpr})`\n        }, {\n          aggregate: [{\n            op: 'min',\n            field: continuousAxisChannelDef.field,\n            as: 'lower_whisker_' + continuousAxisChannelDef.field\n          }, {\n            op: 'max',\n            field: continuousAxisChannelDef.field,\n            as: 'upper_whisker_' + continuousAxisChannelDef.field\n          }, // preserve lower_box / upper_box\n          {\n            op: 'min',\n            field: 'lower_box_' + continuousAxisChannelDef.field,\n            as: 'lower_box_' + continuousAxisChannelDef.field\n          }, {\n            op: 'max',\n            field: 'upper_box_' + continuousAxisChannelDef.field,\n            as: 'upper_box_' + continuousAxisChannelDef.field\n          }, ...aggregate],\n          groupby\n        }],\n        layer: whiskerLayers\n      };\n    }\n\n    const {\n      tooltip\n    } = encodingWithoutSizeColorAndContinuousAxis,\n          encodingWithoutSizeColorContinuousAxisAndTooltip = __rest(encodingWithoutSizeColorAndContinuousAxis, [\"tooltip\"]);\n\n    const {\n      scale,\n      axis\n    } = continuousAxisChannelDef;\n    const title = getTitle(continuousAxisChannelDef);\n    const outlierLayersMixins = partLayerMixins(markDef, 'outliers', config.boxplot, {\n      transform: [{\n        filter: `(${fieldExpr} < ${lowerWhiskerExpr}) || (${fieldExpr} > ${upperWhiskerExpr})`\n      }],\n      mark: 'point',\n      encoding: Object.assign(Object.assign({\n        [continuousAxis]: Object.assign(Object.assign(Object.assign({\n          field: continuousAxisChannelDef.field,\n          type: continuousAxisChannelDef.type\n        }, title !== undefined ? {\n          title\n        } : {}), scale !== undefined ? {\n          scale\n        } : {}), axis !== undefined ? {\n          axis\n        } : {})\n      }, encodingWithoutSizeColorContinuousAxisAndTooltip), customTooltipWithoutAggregatedField ? {\n        tooltip: customTooltipWithoutAggregatedField\n      } : {})\n    })[0];\n\n    if (outlierLayersMixins && filteredWhiskerSpec) {\n      filteredLayersMixins = {\n        transform: [joinaggregateTransform],\n        layer: [outlierLayersMixins, filteredWhiskerSpec]\n      };\n    } else if (outlierLayersMixins) {\n      filteredLayersMixins = outlierLayersMixins;\n      filteredLayersMixins.transform.unshift(joinaggregateTransform);\n    } else if (filteredWhiskerSpec) {\n      filteredLayersMixins = filteredWhiskerSpec;\n      filteredLayersMixins.transform.unshift(joinaggregateTransform);\n    }\n  }\n\n  if (filteredLayersMixins) {\n    // tukey box plot with outliers included\n    return Object.assign(Object.assign({}, outerSpec), {\n      layer: [filteredLayersMixins, {\n        // boxplot\n        transform,\n        layer: boxLayers\n      }]\n    });\n  }\n\n  return Object.assign(Object.assign({}, outerSpec), {\n    transform: (_b = outerSpec.transform, _b !== null && _b !== void 0 ? _b : []).concat(transform),\n    layer: boxLayers\n  });\n}\n\nfunction boxParamsQuartiles(continousAxisField) {\n  return [{\n    op: 'q1',\n    field: continousAxisField,\n    as: 'lower_box_' + continousAxisField\n  }, {\n    op: 'q3',\n    field: continousAxisField,\n    as: 'upper_box_' + continousAxisField\n  }];\n}\n\nfunction boxParams(spec, extent, config) {\n  const orient = compositeMarkOrient(spec, BOXPLOT);\n  const {\n    continuousAxisChannelDef,\n    continuousAxis\n  } = compositeMarkContinuousAxis(spec, orient, BOXPLOT);\n  const continuousFieldName = continuousAxisChannelDef.field;\n  const boxPlotType = getBoxPlotType(extent);\n  const boxplotSpecificAggregate = [...boxParamsQuartiles(continuousFieldName), {\n    op: 'median',\n    field: continuousFieldName,\n    as: 'mid_box_' + continuousFieldName\n  }, {\n    op: 'min',\n    field: continuousFieldName,\n    as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName\n  }, {\n    op: 'max',\n    field: continuousFieldName,\n    as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName\n  }];\n  const postAggregateCalculates = boxPlotType === 'min-max' || boxPlotType === 'tukey' ? [] : [// This is for the  original k-IQR, which we do not expose\n  {\n    calculate: `datum[\"upper_box_${continuousFieldName}\"] - datum[\"lower_box_${continuousFieldName}\"]`,\n    as: 'iqr_' + continuousFieldName\n  }, {\n    calculate: `min(datum[\"upper_box_${continuousFieldName}\"] + datum[\"iqr_${continuousFieldName}\"] * ${extent}, datum[\"max_${continuousFieldName}\"])`,\n    as: 'upper_whisker_' + continuousFieldName\n  }, {\n    calculate: `max(datum[\"lower_box_${continuousFieldName}\"] - datum[\"iqr_${continuousFieldName}\"] * ${extent}, datum[\"min_${continuousFieldName}\"])`,\n    as: 'lower_whisker_' + continuousFieldName\n  }];\n\n  const _a = spec.encoding,\n        _b = continuousAxis,\n        oldContinuousAxisChannelDef = _a[_b],\n        oldEncodingWithoutContinuousAxis = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n  const {\n    customTooltipWithoutAggregatedField,\n    filteredEncoding\n  } = filterTooltipWithAggregatedField(oldEncodingWithoutContinuousAxis);\n  const {\n    bins,\n    timeUnits,\n    aggregate,\n    groupby,\n    encoding: encodingWithoutContinuousAxis\n  } = extractTransformsFromEncoding(filteredEncoding, config);\n  const ticksOrient = orient === 'vertical' ? 'horizontal' : 'vertical';\n  const boxOrient = orient;\n  const transform = [...bins, ...timeUnits, {\n    aggregate: [...aggregate, ...boxplotSpecificAggregate],\n    groupby\n  }, ...postAggregateCalculates];\n  return {\n    transform,\n    groupby,\n    aggregate,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    ticksOrient,\n    boxOrient,\n    customTooltipWithoutAggregatedField\n  };\n}","map":{"version":3,"sources":["../../../src/compositemark/boxplot.ts"],"names":[],"mappings":"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","sourcesContent":["import {Orientation} from 'vega';\nimport {isNumber, isObject} from 'vega-util';\nimport {Config} from '../config';\nimport {Encoding, extractTransformsFromEncoding} from '../encoding';\nimport * as log from '../log';\nimport {isMarkDef, MarkDef} from '../mark';\nimport {NormalizerParams} from '../normalize';\nimport {GenericUnitSpec, NormalizedLayerSpec, NormalizedUnitSpec} from '../spec';\nimport {AggregatedFieldDef, CalculateTransform, JoinAggregateTransform, Transform} from '../transform';\nimport {Flag, getFirstDefined, keys} from '../util';\nimport {CompositeMarkNormalizer} from './base';\nimport {\n  compositeMarkContinuousAxis,\n  compositeMarkOrient,\n  filterTooltipWithAggregatedField,\n  GenericCompositeMarkDef,\n  getCompositeMarkTooltip,\n  getTitle,\n  makeCompositeAggregatePartFactory,\n  partLayerMixins,\n  PartsMixins\n} from './common';\n\nexport const BOXPLOT: 'boxplot' = 'boxplot';\nexport type BoxPlot = typeof BOXPLOT;\n\nexport type BoxPlotPart = 'box' | 'median' | 'outliers' | 'rule' | 'ticks';\n\nconst BOXPLOT_PART_INDEX: Flag<BoxPlotPart> = {\n  box: 1,\n  median: 1,\n  outliers: 1,\n  rule: 1,\n  ticks: 1\n};\n\nexport const BOXPLOT_PARTS = keys(BOXPLOT_PART_INDEX);\n\nexport type BoxPlotPartsMixins = PartsMixins<BoxPlotPart>;\n\nexport interface BoxPlotConfig extends BoxPlotPartsMixins {\n  /** Size of the box and median tick of a box plot */\n  size?: number;\n\n  /**\n   * The extent of the whiskers. Available options include:\n   * - `\"min-max\"`: min and max are the lower and upper whiskers respectively.\n   * - A number representing multiple of the interquartile range. This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).\n   *\n   * __Default value:__ `1.5`.\n   */\n  extent?: 'min-max' | number;\n}\n\nexport type BoxPlotDef = GenericCompositeMarkDef<BoxPlot> &\n  BoxPlotConfig & {\n    /**\n     * Type of the mark. For box plots, this should always be `\"boxplot\"`.\n     * [boxplot](https://vega.github.io/vega-lite/docs/boxplot.html)\n     */\n    type: BoxPlot;\n\n    /**\n     * Orientation of the box plot. This is normally automatically determined based on types of fields on x and y channels. However, an explicit `orient` be specified when the orientation is ambiguous.\n     *\n     * __Default value:__ `\"vertical\"`.\n     */\n    orient?: Orientation;\n  };\n\nexport interface BoxPlotConfigMixins {\n  /**\n   * Box Config\n   */\n  boxplot?: BoxPlotConfig;\n}\n\nexport const boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);\n\nexport function getBoxPlotType(extent: number | 'min-max') {\n  if (isNumber(extent)) {\n    return 'tukey';\n  }\n  // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`. However, I'm not exposing this for now.\n  return extent;\n}\n\nexport function normalizeBoxPlot(\n  spec: GenericUnitSpec<Encoding<string>, BoxPlot | BoxPlotDef>,\n  {config}: NormalizerParams\n): NormalizedLayerSpec {\n  // TODO: use selection\n  const {mark, encoding: _encoding, selection, projection: _p, ...outerSpec} = spec;\n  const markDef: BoxPlotDef = isMarkDef(mark) ? mark : {type: mark};\n\n  // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n  if (selection) {\n    log.warn(log.message.selectionNotSupported('boxplot'));\n  }\n\n  const extent = markDef.extent ?? config.boxplot.extent;\n  const sizeValue = getFirstDefined(markDef.size, config.boxplot.size);\n  const boxPlotType = getBoxPlotType(extent);\n  const {\n    transform,\n    continuousAxisChannelDef,\n    continuousAxis,\n    groupby,\n    aggregate,\n    encodingWithoutContinuousAxis,\n    ticksOrient,\n    boxOrient,\n    customTooltipWithoutAggregatedField\n  } = boxParams(spec, extent, config);\n\n  const {color, size, ...encodingWithoutSizeColorAndContinuousAxis} = encodingWithoutContinuousAxis;\n\n  const makeBoxPlotPart = (sharedEncoding: Encoding<string>) => {\n    return makeCompositeAggregatePartFactory<BoxPlotPartsMixins>(\n      markDef,\n      continuousAxis,\n      continuousAxisChannelDef,\n      sharedEncoding,\n      config.boxplot\n    );\n  };\n\n  const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);\n  const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);\n  const makeBoxPlotMidTick = makeBoxPlotPart({...encodingWithoutSizeColorAndContinuousAxis, ...(size ? {size} : {})});\n\n  const fiveSummaryTooltipEncoding: Encoding<string> = getCompositeMarkTooltip(\n    [\n      {fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_', titlePrefix: 'Max'},\n      {fieldPrefix: 'upper_box_', titlePrefix: 'Q3'},\n      {fieldPrefix: 'mid_box_', titlePrefix: 'Median'},\n      {fieldPrefix: 'lower_box_', titlePrefix: 'Q1'},\n      {fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_', titlePrefix: 'Min'}\n    ],\n    continuousAxisChannelDef,\n    encodingWithoutContinuousAxis\n  );\n\n  // ## Whisker Layers\n\n  const endTick: MarkDef = {type: 'tick', color: 'black', opacity: 1, orient: ticksOrient, invalid: null};\n  const whiskerTooltipEncoding: Encoding<string> =\n    boxPlotType === 'min-max'\n      ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker\n      : // for tukey / k-IQR, just show upper/lower-whisker\n        getCompositeMarkTooltip(\n          [\n            {fieldPrefix: 'upper_whisker_', titlePrefix: 'Upper Whisker'},\n            {fieldPrefix: 'lower_whisker_', titlePrefix: 'Lower Whisker'}\n          ],\n          continuousAxisChannelDef,\n          encodingWithoutContinuousAxis\n        );\n\n  const whiskerLayers = [\n    ...makeBoxPlotExtent({\n      partName: 'rule',\n      mark: {type: 'rule', invalid: null},\n      positionPrefix: 'lower_whisker',\n      endPositionPrefix: 'lower_box',\n      extraEncoding: whiskerTooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'rule',\n      mark: {type: 'rule', invalid: null},\n      positionPrefix: 'upper_box',\n      endPositionPrefix: 'upper_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'ticks',\n      mark: endTick,\n      positionPrefix: 'lower_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'ticks',\n      mark: endTick,\n      positionPrefix: 'upper_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    })\n  ];\n\n  // ## Box Layers\n\n  // TODO: support hiding certain mark parts\n  const boxLayers: NormalizedUnitSpec[] = [\n    ...(boxPlotType !== 'tukey' ? whiskerLayers : []),\n    ...makeBoxPlotBox({\n      partName: 'box',\n      mark: {type: 'bar', ...(sizeValue ? {size: sizeValue} : {}), orient: boxOrient, invalid: null},\n      positionPrefix: 'lower_box',\n      endPositionPrefix: 'upper_box',\n      extraEncoding: fiveSummaryTooltipEncoding\n    }),\n    ...makeBoxPlotMidTick({\n      partName: 'median',\n      mark: {\n        type: 'tick',\n        invalid: null,\n        ...(isObject(config.boxplot.median) && config.boxplot.median.color ? {color: config.boxplot.median.color} : {}),\n        ...(sizeValue ? {size: sizeValue} : {}),\n        orient: ticksOrient\n      },\n      positionPrefix: 'mid_box',\n      extraEncoding: fiveSummaryTooltipEncoding\n    })\n  ];\n\n  // ## Filtered Layers\n\n  let filteredLayersMixins: NormalizedUnitSpec | NormalizedLayerSpec;\n\n  if (boxPlotType !== 'min-max') {\n    const lowerBoxExpr = `datum[\"lower_box_${continuousAxisChannelDef.field}\"]`;\n    const upperBoxExpr = `datum[\"upper_box_${continuousAxisChannelDef.field}\"]`;\n    const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;\n    const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent} * ${iqrExpr}`;\n    const upperWhiskerExpr = `${upperBoxExpr} + ${extent} * ${iqrExpr}`;\n    const fieldExpr = `datum[\"${continuousAxisChannelDef.field}\"]`;\n\n    const joinaggregateTransform: JoinAggregateTransform = {\n      joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),\n      groupby\n    };\n\n    let filteredWhiskerSpec: NormalizedLayerSpec = undefined;\n    if (boxPlotType === 'tukey') {\n      filteredWhiskerSpec = {\n        transform: [\n          {\n            filter: `(${lowerWhiskerExpr} <= ${fieldExpr}) && (${fieldExpr} <= ${upperWhiskerExpr})`\n          },\n          {\n            aggregate: [\n              {\n                op: 'min',\n                field: continuousAxisChannelDef.field,\n                as: 'lower_whisker_' + continuousAxisChannelDef.field\n              },\n              {\n                op: 'max',\n                field: continuousAxisChannelDef.field,\n                as: 'upper_whisker_' + continuousAxisChannelDef.field\n              },\n              // preserve lower_box / upper_box\n              {\n                op: 'min',\n                field: 'lower_box_' + continuousAxisChannelDef.field,\n                as: 'lower_box_' + continuousAxisChannelDef.field\n              },\n              {\n                op: 'max',\n                field: 'upper_box_' + continuousAxisChannelDef.field,\n                as: 'upper_box_' + continuousAxisChannelDef.field\n              },\n              ...aggregate\n            ],\n            groupby\n          }\n        ],\n        layer: whiskerLayers\n      };\n    }\n\n    const {tooltip, ...encodingWithoutSizeColorContinuousAxisAndTooltip} = encodingWithoutSizeColorAndContinuousAxis;\n\n    const {scale, axis} = continuousAxisChannelDef;\n    const title = getTitle(continuousAxisChannelDef);\n\n    const outlierLayersMixins = partLayerMixins<BoxPlotPartsMixins>(markDef, 'outliers', config.boxplot, {\n      transform: [{filter: `(${fieldExpr} < ${lowerWhiskerExpr}) || (${fieldExpr} > ${upperWhiskerExpr})`}],\n      mark: 'point',\n      encoding: {\n        [continuousAxis]: {\n          field: continuousAxisChannelDef.field,\n          type: continuousAxisChannelDef.type,\n          ...(title !== undefined ? {title} : {}),\n          ...(scale !== undefined ? {scale} : {}),\n          ...(axis !== undefined ? {axis} : {})\n        },\n        ...encodingWithoutSizeColorContinuousAxisAndTooltip,\n        ...(customTooltipWithoutAggregatedField ? {tooltip: customTooltipWithoutAggregatedField} : {})\n      }\n    })[0];\n\n    if (outlierLayersMixins && filteredWhiskerSpec) {\n      filteredLayersMixins = {\n        transform: [joinaggregateTransform],\n        layer: [outlierLayersMixins, filteredWhiskerSpec]\n      };\n    } else if (outlierLayersMixins) {\n      filteredLayersMixins = outlierLayersMixins;\n      filteredLayersMixins.transform.unshift(joinaggregateTransform);\n    } else if (filteredWhiskerSpec) {\n      filteredLayersMixins = filteredWhiskerSpec;\n      filteredLayersMixins.transform.unshift(joinaggregateTransform);\n    }\n  }\n\n  if (filteredLayersMixins) {\n    // tukey box plot with outliers included\n    return {\n      ...outerSpec,\n      layer: [\n        filteredLayersMixins,\n        {\n          // boxplot\n          transform,\n          layer: boxLayers\n        }\n      ]\n    };\n  }\n  return {\n    ...outerSpec,\n    transform: (outerSpec.transform ?? []).concat(transform),\n    layer: boxLayers\n  };\n}\n\nfunction boxParamsQuartiles(continousAxisField: string): AggregatedFieldDef[] {\n  return [\n    {\n      op: 'q1',\n      field: continousAxisField,\n      as: 'lower_box_' + continousAxisField\n    },\n    {\n      op: 'q3',\n      field: continousAxisField,\n      as: 'upper_box_' + continousAxisField\n    }\n  ];\n}\n\nfunction boxParams(\n  spec: GenericUnitSpec<Encoding<string>, BoxPlot | BoxPlotDef>,\n  extent: 'min-max' | number,\n  config: Config\n) {\n  const orient = compositeMarkOrient(spec, BOXPLOT);\n  const {continuousAxisChannelDef, continuousAxis} = compositeMarkContinuousAxis(spec, orient, BOXPLOT);\n  const continuousFieldName: string = continuousAxisChannelDef.field;\n\n  const boxPlotType = getBoxPlotType(extent);\n\n  const boxplotSpecificAggregate: AggregatedFieldDef[] = [\n    ...boxParamsQuartiles(continuousFieldName),\n    {\n      op: 'median',\n      field: continuousFieldName,\n      as: 'mid_box_' + continuousFieldName\n    },\n    {\n      op: 'min',\n      field: continuousFieldName,\n      as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName\n    },\n    {\n      op: 'max',\n      field: continuousFieldName,\n      as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName\n    }\n  ];\n\n  const postAggregateCalculates: CalculateTransform[] =\n    boxPlotType === 'min-max' || boxPlotType === 'tukey'\n      ? []\n      : [\n          // This is for the  original k-IQR, which we do not expose\n          {\n            calculate: `datum[\"upper_box_${continuousFieldName}\"] - datum[\"lower_box_${continuousFieldName}\"]`,\n            as: 'iqr_' + continuousFieldName\n          },\n          {\n            calculate: `min(datum[\"upper_box_${continuousFieldName}\"] + datum[\"iqr_${continuousFieldName}\"] * ${extent}, datum[\"max_${continuousFieldName}\"])`,\n            as: 'upper_whisker_' + continuousFieldName\n          },\n          {\n            calculate: `max(datum[\"lower_box_${continuousFieldName}\"] - datum[\"iqr_${continuousFieldName}\"] * ${extent}, datum[\"min_${continuousFieldName}\"])`,\n            as: 'lower_whisker_' + continuousFieldName\n          }\n        ];\n\n  const {[continuousAxis]: oldContinuousAxisChannelDef, ...oldEncodingWithoutContinuousAxis} = spec.encoding;\n  const {customTooltipWithoutAggregatedField, filteredEncoding} = filterTooltipWithAggregatedField(\n    oldEncodingWithoutContinuousAxis\n  );\n\n  const {bins, timeUnits, aggregate, groupby, encoding: encodingWithoutContinuousAxis} = extractTransformsFromEncoding(\n    filteredEncoding,\n    config\n  );\n\n  const ticksOrient: Orientation = orient === 'vertical' ? 'horizontal' : 'vertical';\n  const boxOrient: Orientation = orient;\n\n  const transform: Transform[] = [\n    ...bins,\n    ...timeUnits,\n    {\n      aggregate: [...aggregate, ...boxplotSpecificAggregate],\n      groupby\n    },\n    ...postAggregateCalculates\n  ];\n\n  return {\n    transform,\n    groupby,\n    aggregate,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    ticksOrient,\n    boxOrient,\n    customTooltipWithoutAggregatedField\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}