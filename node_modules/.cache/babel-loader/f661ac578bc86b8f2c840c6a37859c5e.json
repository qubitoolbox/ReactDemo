{"ast":null,"code":"import parseExpression from './expression';\nimport parseUpdate from './update';\nimport { error } from 'vega-util';\nexport default function (signal, scope) {\n  var op = scope.getSignal(signal.name),\n      expr = signal.update;\n\n  if (signal.init) {\n    if (expr) {\n      error('Signals can not include both init and update expressions.');\n    } else {\n      expr = signal.init;\n      op.initonly = true;\n    }\n  }\n\n  if (expr) {\n    expr = parseExpression(expr, scope);\n    op.update = expr.$expr;\n    op.params = expr.$params;\n  }\n\n  if (signal.on) {\n    signal.on.forEach(function (_) {\n      parseUpdate(_, scope, op.id);\n    });\n  }\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-parser/src/parsers/signal-updates.js"],"names":["parseExpression","parseUpdate","error","signal","scope","op","getSignal","name","expr","update","init","initonly","$expr","params","$params","on","forEach","_","id"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,OAAOC,WAAP,MAAwB,UAAxB;AACA,SAAQC,KAAR,QAAoB,WAApB;AAEA,eAAe,UAASC,MAAT,EAAiBC,KAAjB,EAAwB;AACrC,MAAIC,EAAE,GAAGD,KAAK,CAACE,SAAN,CAAgBH,MAAM,CAACI,IAAvB,CAAT;AAAA,MACIC,IAAI,GAAGL,MAAM,CAACM,MADlB;;AAGA,MAAIN,MAAM,CAACO,IAAX,EAAiB;AACf,QAAIF,IAAJ,EAAU;AACRN,MAAAA,KAAK,CAAC,2DAAD,CAAL;AACD,KAFD,MAEO;AACLM,MAAAA,IAAI,GAAGL,MAAM,CAACO,IAAd;AACAL,MAAAA,EAAE,CAACM,QAAH,GAAc,IAAd;AACD;AACF;;AAED,MAAIH,IAAJ,EAAU;AACRA,IAAAA,IAAI,GAAGR,eAAe,CAACQ,IAAD,EAAOJ,KAAP,CAAtB;AACAC,IAAAA,EAAE,CAACI,MAAH,GAAYD,IAAI,CAACI,KAAjB;AACAP,IAAAA,EAAE,CAACQ,MAAH,GAAYL,IAAI,CAACM,OAAjB;AACD;;AAED,MAAIX,MAAM,CAACY,EAAX,EAAe;AACbZ,IAAAA,MAAM,CAACY,EAAP,CAAUC,OAAV,CAAkB,UAASC,CAAT,EAAY;AAC5BhB,MAAAA,WAAW,CAACgB,CAAD,EAAIb,KAAJ,EAAWC,EAAE,CAACa,EAAd,CAAX;AACD,KAFD;AAGD;AACF","sourcesContent":["import parseExpression from './expression';\nimport parseUpdate from './update';\nimport {error} from 'vega-util';\n\nexport default function(signal, scope) {\n  var op = scope.getSignal(signal.name),\n      expr = signal.update;\n\n  if (signal.init) {\n    if (expr) {\n      error('Signals can not include both init and update expressions.');\n    } else {\n      expr = signal.init;\n      op.initonly = true;\n    }\n  }\n\n  if (expr) {\n    expr = parseExpression(expr, scope);\n    op.update = expr.$expr;\n    op.params = expr.$params;\n  }\n\n  if (signal.on) {\n    signal.on.forEach(function(_) {\n      parseUpdate(_, scope, op.id);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}