{"ast":null,"code":"export default function (data, groupby) {\n  var groups = [],\n      get = function (f) {\n    return f(t);\n  },\n      map,\n      i,\n      n,\n      t,\n      k,\n      g; // partition data points into stack groups\n\n\n  if (groupby == null) {\n    groups.push(data);\n  } else {\n    for (map = {}, i = 0, n = data.length; i < n; ++i) {\n      t = data[i];\n      k = groupby.map(get);\n      g = map[k];\n\n      if (!g) {\n        map[k] = g = [];\n        g.dims = k;\n        groups.push(g);\n      }\n\n      g.push(t);\n    }\n  }\n\n  return groups;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-regression/src/partition.js"],"names":["data","groupby","groups","get","f","t","map","i","n","k","g","push","length","dims"],"mappings":"AAAA,eAAe,UAASA,IAAT,EAAeC,OAAf,EAAwB;AACrC,MAAIC,MAAM,GAAG,EAAb;AAAA,MACIC,GAAG,GAAG,UAASC,CAAT,EAAY;AAAE,WAAOA,CAAC,CAACC,CAAD,CAAR;AAAc,GADtC;AAAA,MAEIC,GAFJ;AAAA,MAESC,CAFT;AAAA,MAEYC,CAFZ;AAAA,MAEeH,CAFf;AAAA,MAEkBI,CAFlB;AAAA,MAEqBC,CAFrB,CADqC,CAKrC;;;AACA,MAAIT,OAAO,IAAI,IAAf,EAAqB;AACnBC,IAAAA,MAAM,CAACS,IAAP,CAAYX,IAAZ;AACD,GAFD,MAEO;AACL,SAAKM,GAAG,GAAC,EAAJ,EAAQC,CAAC,GAAC,CAAV,EAAaC,CAAC,GAACR,IAAI,CAACY,MAAzB,EAAiCL,CAAC,GAACC,CAAnC,EAAsC,EAAED,CAAxC,EAA2C;AACzCF,MAAAA,CAAC,GAAGL,IAAI,CAACO,CAAD,CAAR;AACAE,MAAAA,CAAC,GAAGR,OAAO,CAACK,GAAR,CAAYH,GAAZ,CAAJ;AACAO,MAAAA,CAAC,GAAGJ,GAAG,CAACG,CAAD,CAAP;;AACA,UAAI,CAACC,CAAL,EAAQ;AACNJ,QAAAA,GAAG,CAACG,CAAD,CAAH,GAAUC,CAAC,GAAG,EAAd;AACAA,QAAAA,CAAC,CAACG,IAAF,GAASJ,CAAT;AACAP,QAAAA,MAAM,CAACS,IAAP,CAAYD,CAAZ;AACD;;AACDA,MAAAA,CAAC,CAACC,IAAF,CAAON,CAAP;AACD;AACF;;AAED,SAAOH,MAAP;AACD","sourcesContent":["export default function(data, groupby) {\n  var groups = [],\n      get = function(f) { return f(t); },\n      map, i, n, t, k, g;\n\n  // partition data points into stack groups\n  if (groupby == null) {\n    groups.push(data);\n  } else {\n    for (map={}, i=0, n=data.length; i<n; ++i) {\n      t = data[i];\n      k = groupby.map(get);\n      g = map[k];\n      if (!g) {\n        map[k] = (g = []);\n        g.dims = k;\n        groups.push(g);\n      }\n      g.push(t);\n    }\n  }\n\n  return groups;\n}\n"]},"metadata":{},"sourceType":"module"}