{"ast":null,"code":"import { ingest, tupleid, Transform } from 'vega-dataflow';\nimport { error, inherits } from 'vega-util';\n/**\n * Generate tuples representing links between tree nodes.\n * The resulting tuples will contain 'source' and 'target' fields,\n * which point to parent and child node tuples, respectively.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\n\nexport default function TreeLinks(params) {\n  Transform.call(this, [], params);\n}\nTreeLinks.Definition = {\n  \"type\": \"TreeLinks\",\n  \"metadata\": {\n    \"tree\": true,\n    \"generates\": true,\n    \"changes\": true\n  },\n  \"params\": []\n};\nvar prototype = inherits(TreeLinks, Transform);\n\nprototype.transform = function (_, pulse) {\n  var links = this.value,\n      tree = pulse.source && pulse.source.root,\n      out = pulse.fork(pulse.NO_SOURCE),\n      lut = {};\n  if (!tree) error('TreeLinks transform requires a tree data source.');\n\n  if (pulse.changed(pulse.ADD_REM)) {\n    // remove previous links\n    out.rem = links; // build lookup table of valid tuples\n\n    pulse.visit(pulse.SOURCE, function (t) {\n      lut[tupleid(t)] = 1;\n    }); // generate links for all edges incident on valid tuples\n\n    tree.each(function (node) {\n      var t = node.data,\n          p = node.parent && node.parent.data;\n\n      if (p && lut[tupleid(t)] && lut[tupleid(p)]) {\n        out.add.push(ingest({\n          source: p,\n          target: t\n        }));\n      }\n    });\n    this.value = out.add;\n  } else if (pulse.changed(pulse.MOD)) {\n    // build lookup table of modified tuples\n    pulse.visit(pulse.MOD, function (t) {\n      lut[tupleid(t)] = 1;\n    }); // gather links incident on modified tuples\n\n    links.forEach(function (link) {\n      if (lut[tupleid(link.source)] || lut[tupleid(link.target)]) {\n        out.mod.push(link);\n      }\n    });\n  }\n\n  return out;\n};","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-hierarchy/src/TreeLinks.js"],"names":["ingest","tupleid","Transform","error","inherits","TreeLinks","params","call","Definition","prototype","transform","_","pulse","links","value","tree","source","root","out","fork","NO_SOURCE","lut","changed","ADD_REM","rem","visit","SOURCE","t","each","node","data","p","parent","add","push","target","MOD","forEach","link","mod"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,OAAhB,EAAyBC,SAAzB,QAAyC,eAAzC;AACA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,WAA9B;AAEC;;;;;;;;AAOD,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACxCJ,EAAAA,SAAS,CAACK,IAAV,CAAe,IAAf,EAAqB,EAArB,EAAyBD,MAAzB;AACD;AAEDD,SAAS,CAACG,UAAV,GAAuB;AACrB,UAAQ,WADa;AAErB,cAAY;AAAC,YAAQ,IAAT;AAAe,iBAAa,IAA5B;AAAkC,eAAW;AAA7C,GAFS;AAGrB,YAAU;AAHW,CAAvB;AAMA,IAAIC,SAAS,GAAGL,QAAQ,CAACC,SAAD,EAAYH,SAAZ,CAAxB;;AAEAO,SAAS,CAACC,SAAV,GAAsB,UAASC,CAAT,EAAYC,KAAZ,EAAmB;AACvC,MAAIC,KAAK,GAAG,KAAKC,KAAjB;AAAA,MACIC,IAAI,GAAGH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,CAAaC,IADxC;AAAA,MAEIC,GAAG,GAAGN,KAAK,CAACO,IAAN,CAAWP,KAAK,CAACQ,SAAjB,CAFV;AAAA,MAGIC,GAAG,GAAG,EAHV;AAKA,MAAI,CAACN,IAAL,EAAWZ,KAAK,CAAC,kDAAD,CAAL;;AAEX,MAAIS,KAAK,CAACU,OAAN,CAAcV,KAAK,CAACW,OAApB,CAAJ,EAAkC;AAChC;AACAL,IAAAA,GAAG,CAACM,GAAJ,GAAUX,KAAV,CAFgC,CAIhC;;AACAD,IAAAA,KAAK,CAACa,KAAN,CAAYb,KAAK,CAACc,MAAlB,EAA0B,UAASC,CAAT,EAAY;AAAEN,MAAAA,GAAG,CAACpB,OAAO,CAAC0B,CAAD,CAAR,CAAH,GAAkB,CAAlB;AAAsB,KAA9D,EALgC,CAOhC;;AACAZ,IAAAA,IAAI,CAACa,IAAL,CAAU,UAASC,IAAT,EAAe;AACvB,UAAIF,CAAC,GAAGE,IAAI,CAACC,IAAb;AAAA,UACIC,CAAC,GAAGF,IAAI,CAACG,MAAL,IAAeH,IAAI,CAACG,MAAL,CAAYF,IADnC;;AAEA,UAAIC,CAAC,IAAIV,GAAG,CAACpB,OAAO,CAAC0B,CAAD,CAAR,CAAR,IAAwBN,GAAG,CAACpB,OAAO,CAAC8B,CAAD,CAAR,CAA/B,EAA6C;AAC3Cb,QAAAA,GAAG,CAACe,GAAJ,CAAQC,IAAR,CAAalC,MAAM,CAAC;AAACgB,UAAAA,MAAM,EAAEe,CAAT;AAAYI,UAAAA,MAAM,EAAER;AAApB,SAAD,CAAnB;AACD;AACF,KAND;AAOA,SAAKb,KAAL,GAAaI,GAAG,CAACe,GAAjB;AACD,GAhBD,MAkBK,IAAIrB,KAAK,CAACU,OAAN,CAAcV,KAAK,CAACwB,GAApB,CAAJ,EAA8B;AACjC;AACAxB,IAAAA,KAAK,CAACa,KAAN,CAAYb,KAAK,CAACwB,GAAlB,EAAuB,UAAST,CAAT,EAAY;AAAEN,MAAAA,GAAG,CAACpB,OAAO,CAAC0B,CAAD,CAAR,CAAH,GAAkB,CAAlB;AAAsB,KAA3D,EAFiC,CAIjC;;AACAd,IAAAA,KAAK,CAACwB,OAAN,CAAc,UAASC,IAAT,EAAe;AAC3B,UAAIjB,GAAG,CAACpB,OAAO,CAACqC,IAAI,CAACtB,MAAN,CAAR,CAAH,IAA6BK,GAAG,CAACpB,OAAO,CAACqC,IAAI,CAACH,MAAN,CAAR,CAApC,EAA4D;AAC1DjB,QAAAA,GAAG,CAACqB,GAAJ,CAAQL,IAAR,CAAaI,IAAb;AACD;AACF,KAJD;AAKD;;AAED,SAAOpB,GAAP;AACD,CAvCD","sourcesContent":["import {ingest, tupleid, Transform} from 'vega-dataflow';\nimport {error, inherits} from 'vega-util';\n\n /**\n  * Generate tuples representing links between tree nodes.\n  * The resulting tuples will contain 'source' and 'target' fields,\n  * which point to parent and child node tuples, respectively.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  */\nexport default function TreeLinks(params) {\n  Transform.call(this, [], params);\n}\n\nTreeLinks.Definition = {\n  \"type\": \"TreeLinks\",\n  \"metadata\": {\"tree\": true, \"generates\": true, \"changes\": true},\n  \"params\": []\n};\n\nvar prototype = inherits(TreeLinks, Transform);\n\nprototype.transform = function(_, pulse) {\n  var links = this.value,\n      tree = pulse.source && pulse.source.root,\n      out = pulse.fork(pulse.NO_SOURCE),\n      lut = {};\n\n  if (!tree) error('TreeLinks transform requires a tree data source.');\n\n  if (pulse.changed(pulse.ADD_REM)) {\n    // remove previous links\n    out.rem = links;\n\n    // build lookup table of valid tuples\n    pulse.visit(pulse.SOURCE, function(t) { lut[tupleid(t)] = 1; });\n\n    // generate links for all edges incident on valid tuples\n    tree.each(function(node) {\n      var t = node.data,\n          p = node.parent && node.parent.data;\n      if (p && lut[tupleid(t)] && lut[tupleid(p)]) {\n        out.add.push(ingest({source: p, target: t}));\n      }\n    });\n    this.value = out.add;\n  }\n\n  else if (pulse.changed(pulse.MOD)) {\n    // build lookup table of modified tuples\n    pulse.visit(pulse.MOD, function(t) { lut[tupleid(t)] = 1; });\n\n    // gather links incident on modified tuples\n    links.forEach(function(link) {\n      if (lut[tupleid(link.source)] || lut[tupleid(link.target)]) {\n        out.mod.push(link);\n      }\n    });\n  }\n\n  return out;\n};\n"]},"metadata":{},"sourceType":"module"}