{"ast":null,"code":"import { discrete, continuous } from './palettes';\nimport { interpolateColors } from './interpolate';\n\nfunction colors(palette) {\n  var n = palette.length / 6 | 0,\n      c = new Array(n),\n      i = 0;\n\n  while (i < n) c[i] = '#' + palette.slice(i * 6, ++i * 6);\n\n  return c;\n}\n\nfunction apply(_, f) {\n  for (let k in _) scheme(k, f(_[k]));\n}\n\nconst schemes = {};\napply(discrete, colors);\napply(continuous, _ => interpolateColors(colors(_)));\nexport function scheme(name, scheme) {\n  name = name && name.toLowerCase();\n\n  if (arguments.length > 1) {\n    schemes[name] = scheme;\n    return this;\n  } else {\n    return schemes[name];\n  }\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-parser/node_modules/vega-scale/src/schemes.js"],"names":["discrete","continuous","interpolateColors","colors","palette","n","length","c","Array","i","slice","apply","_","f","k","scheme","schemes","name","toLowerCase","arguments"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,UAAlB,QAAmC,YAAnC;AACA,SAAQC,iBAAR,QAAgC,eAAhC;;AAEA,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;AACvB,MAAIC,CAAC,GAAGD,OAAO,CAACE,MAAR,GAAiB,CAAjB,GAAqB,CAA7B;AAAA,MAAgCC,CAAC,GAAG,IAAIC,KAAJ,CAAUH,CAAV,CAApC;AAAA,MAAkDI,CAAC,GAAG,CAAtD;;AACA,SAAOA,CAAC,GAAGJ,CAAX,EAAcE,CAAC,CAACE,CAAD,CAAD,GAAO,MAAML,OAAO,CAACM,KAAR,CAAcD,CAAC,GAAG,CAAlB,EAAqB,EAAEA,CAAF,GAAM,CAA3B,CAAb;;AACd,SAAOF,CAAP;AACD;;AAED,SAASI,KAAT,CAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AACnB,OAAK,IAAIC,CAAT,IAAcF,CAAd,EAAiBG,MAAM,CAACD,CAAD,EAAID,CAAC,CAACD,CAAC,CAACE,CAAD,CAAF,CAAL,CAAN;AAClB;;AAED,MAAME,OAAO,GAAG,EAAhB;AACAL,KAAK,CAACX,QAAD,EAAWG,MAAX,CAAL;AACAQ,KAAK,CAACV,UAAD,EAAaW,CAAC,IAAIV,iBAAiB,CAACC,MAAM,CAACS,CAAD,CAAP,CAAnC,CAAL;AAEA,OAAO,SAASG,MAAT,CAAgBE,IAAhB,EAAsBF,MAAtB,EAA8B;AACnCE,EAAAA,IAAI,GAAGA,IAAI,IAAIA,IAAI,CAACC,WAAL,EAAf;;AACA,MAAIC,SAAS,CAACb,MAAV,GAAmB,CAAvB,EAA0B;AACxBU,IAAAA,OAAO,CAACC,IAAD,CAAP,GAAgBF,MAAhB;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL,WAAOC,OAAO,CAACC,IAAD,CAAd;AACD;AACF","sourcesContent":["import {discrete, continuous} from './palettes';\nimport {interpolateColors} from './interpolate';\n\nfunction colors(palette) {\n  var n = palette.length / 6 | 0, c = new Array(n), i = 0;\n  while (i < n) c[i] = '#' + palette.slice(i * 6, ++i * 6);\n  return c;\n}\n\nfunction apply(_, f) {\n  for (let k in _) scheme(k, f(_[k]));\n}\n\nconst schemes = {};\napply(discrete, colors);\napply(continuous, _ => interpolateColors(colors(_)));\n\nexport function scheme(name, scheme) {\n  name = name && name.toLowerCase();\n  if (arguments.length > 1) {\n    schemes[name] = scheme;\n    return this;\n  } else {\n    return schemes[name];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}