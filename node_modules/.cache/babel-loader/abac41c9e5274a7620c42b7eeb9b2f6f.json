{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\FirstML\\\\AnotherMl.js\";\nimport React from \"react\"; //import * as t_f from '@tensorflow/tfjs-node'\n\nimport * as tf from '@tensorflow/tfjs';\nimport LineGraph from 'C:/NewReactResume/resm/src/Components/ChartJs/Charts.js';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport aPic from 'C:/NewReactResume/resm/src/assets/img/indicator.gif'; //import Play from '../../Components/PlayGround/PlayGround.js'\n\nimport Graphing from '../../Components/Graphs/Graphing.js'; //const model = tf.sequential();\n//this is how you export a variable lmao\n\nexport var theindata; // = {data:state.x}\n\nexport var adata = {\n  data: [0],\n  loss: [0],\n  flagtrain: false,\n  labelsdata: [],\n  labelsdata1: []\n}; //console.log(theindata)\n\nexport var thelabels; // = {labels:state.y}\n\nconst model = tf.sequential({\n  layers: [tf.layers.dense({\n    inputShape: [2],\n    units: 2,\n    activation: 'relu'\n  }), //tf.layers.dense({units:15, activation:'sigmoid'}),\n  //tf.layers.dense({units:10, activation:'sigmoid'}),\n  tf.layers.dense({\n    units: 2,\n    activation: 'relu'\n  })]\n});\nvar prediction_;\nexport var data_;\nvar labels;\nvar vlafs;\nvar dummy;\nvar dummy1;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(10)\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)'\n  },\n  avatar: {\n    backgroundColor: '#FFF'\n  }\n}));\nmodel.compile({\n  optimizer: 'sgd',\n  learningrate: 0.003,\n  dropout: 0.2,\n  loss: 'categoricalCrossentropy',\n  metrics: ['accuracy']\n});\nexport var state;\nexport default class AnotherMl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isTfReady: false,\n      trained: false,\n      isitraining: false,\n      x: null,\n      y: null,\n      loss: null,\n      measure: null,\n      measure1: null,\n      datasets: null,\n      counter: 0,\n      prediction: null\n    };\n    this.theindata = {};\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n\n    this.setState({\n      isTfReady: true\n    });\n    this.setState({\n      trained: false\n    }); //this.setState({counter:0+1})\n    //this.train()\n    //this.setState({training:true})\n    //const source = { uri: response.uri }\n\n    await this.trainTheModel();\n  }\n\n  trainTheModel() {\n    // Generate dummy data.\n    data_ = tf.randomNormal([100, 2]);\n    labels = tf.randomUniform([100, 2]);\n    this.setState({\n      x: data_.toString()\n    });\n    this.setState({\n      y: labels.toString()\n    }); // console.log(labels.toString())\n    //console.log(labels.toString())\n\n    this.setState({\n      isitraining: true\n    }); //console.log(data.print())\n    //console.log(labels.print())\n    //this.setState({x:data.array()})\n    //this.setState({y:labels})\n    //data_.array().then(array=>console.log(array))\n\n    let counter = 0; //vlafs = await data.data()//.then(array => console.log(array))\n    //console.log(vlafs)\n    //console.log(vlafs)\n    //console.log(JSON.stringify(this.state.x))\n\n    var i = 1;\n    var flag = false;\n    var index = 0;\n    arr = [0];\n\n    function onBatchEnd(batch, logs) {\n      console.log(`Accuracy: ${logs.acc}`, `loss: ${logs.loss}`, `epoch: ${counter}`);\n      flag = false;\n\n      for (i; !flag;) {\n        if (!adata.data[1] && !adata.loss) {\n          //arr[0]= parseFloat(logs.acc)\n          //adata[\"data\" == 0] = [parseFloat(logs.acc)];\n          adata.data[1] = parseFloat(logs.acc);\n          adata.loss[1] = parseFloat(logs.loss);\n          adata.labelsdata[1] = i;\n          adata.labelsdata1[1] = i; //adata.loss[1] = parseFloat(logs.loss)\n          //adata[\"data\"][i == 0] = [parseFloat(logs.acc)]\n          //console.log(arr[i], adata[i])\n        } else if (!adata.data[i] && !adata.loss[i]) {\n          //arr[i] = parseFloat(logs.acc)\n          //adata[\"data\"][i] = [parseFloat(logs.acc)]\n          adata.data[i] = parseFloat(logs.acc);\n          adata.loss[i] = parseFloat(logs.loss);\n          adata.labelsdata[i] = i;\n          adata.labelsdata1[i] = i; //console.log(arr[i], adata[i])\n        } else {\n          //arr[i+1] = parseFloat(logs.acc)\n          adata.data[i + 1] = parseFloat(logs.acc);\n          adata.loss[i + 1] = parseFloat(logs.loss);\n          adata.labelsdata1[i + 1] = i; //adata.labelsdata[i+1] = i\n          //adata[\"data\"][i + 1] = [parseFloat(logs.acc)]\n          //adata[\"data\"] = [parseFloat(logs.acc)]\n          //console.log(arr[i], adata[i])\n        }\n\n        i += 1; //console.log(arr[index])\n        //console.log(i)\n\n        index += 1;\n        flag = true;\n      } //console.log(typeof(logs.loss))\n      //this.setState({loss : logs.loss})\n      //let hi = async () => {\n      //}\n      //  hi()\n\n\n      counter += 1; //isTraining()\n      //)\n    }\n\n    function updateChart(logs) {} //console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\n    // Train for 5 epochs with batch size of 32.\n\n\n    model.fit(data_, labels, {\n      epochs: 15,\n      //add sliders to these options.\n      batchSize: 10,\n      callbacks: {\n        onBatchEnd\n      }\n    }).then(info => {\n      //this.setState({isitraining:false})\n      //console.log('Final accuracy', info.history.acc);\n      this.setState({\n        isitraining: false\n      });\n      this.setState({\n        trained: true\n      });\n      this.setState({\n        flag: true\n      });\n      this.thePrediction(); //console.log(\"the len of arr is \",arr.length)\n\n      console.log(adata); //model.summary()\n      //document.write(model.summary())\n      //document.write(model._trainableWeights.toString())\n    });\n  }\n\n  async thePrediction() {\n    if (this.state.trained) {\n      prediction_ = await model.predict(tf.randomNormal([10, 2])); //console.log(prediction_?\"yes\":\"no\")\n      //console.log(prediction_.print())\n\n      this.setState({\n        prediction: prediction_.toString(prediction_.print())\n      }); //this.setState({prediction: prediction_.print()})\n      //console.log(prediction_.print())\n    }\n\n    this.randomm(); //console.log(model.getWeights().toString())\n  }\n\n  async randomm() {\n    for (let index = 0; index < 1; index++) {\n      adata[\"flagtrain\"] = true;\n    } //dummy = await model.getWeights().values().next().value //valid call\n    //dummy1 = await model.loss.toString()\n    //dummy1 = JSON.stringify(model.summary())\n    //Document.toString(dummy1)\n    //dummy = await model.trainableWeights.toString() not iter\n    //model.g\n    //console.log(\"cokooooooo\",dummy1)\n    //this.setState({measure1: dummy1})\n    //console.log(theindata[\"data\"])\n    //console.log(this.state.measure1)\n    //document.writeln(this.state.measure1)\n\n  }\n\n  render() {\n    const {\n      isTfReady,\n      trained,\n      flagged,\n      isitraining,\n      measure,\n      x,\n      y,\n      prediction\n    } = this.state;\n    var arr1 = [];\n\n    function apprendice() {\n      //for (var i = 0; i < 1; i++){\n      //    theindata[\"data\"] = [i,i+1,i+2,i+3,i+4,i+5,i+6]\n      //}\n      for (var i = 0; i < 1; i++) {\n        //arr1[i] = arr[i]\n        console.log(\"hey im printing at least\"); //console.log(arr[i])\n        //this.theindata[\"data\"] = [this.arr[i]]\n        //console.log(this.theindata)\n      }\n    } //apprendice()\n    //apprendice()\n    //console.log(\"connn \", theindata)\n\n\n    thelabels = {\n      labels: {\n        labels: [\"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\"]\n      }\n    }; //theindata = {data:`${ arr1 ? [Math.random(),Math.random(),Math.random(),Math.random()] : [1,2,3,4,5,6]}`}\n    //console.log(theindata)\n    //there shoud be sliders accepting params\n    //there should  be popovers informational of whats going on\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Is TensorFlow Ready?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, this.state.isTfReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, \"Yes Ready\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, \"Not Ready\")))), React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Is the model Training?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, this.state.isitraining ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"Yes Training...\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"Not Training\")))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Training Data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }), this.state.x ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, this.state.x, \" \") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"Loading\", React.createElement(\"img\", {\n      src: aPic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    })))))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Target Data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }), this.state.y ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, this.state.y, \" \") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"Loading\", React.createElement(\"img\", {\n      src: aPic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    })))))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Prediction Results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }), this.state.prediction && this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, this.state.prediction, \" \") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"Loading\", React.createElement(\"img\", {\n      src: aPic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }))))))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Weights from Model\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, model.getWeights().toString()) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"Loading\", React.createElement(\"img\", {\n      src: aPic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    })))))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Visualized Metric\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, this.state.trained ? React.createElement(Graphing, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, \"Loading\", React.createElement(\"img\", {\n      src: aPic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    })))))));\n  }\n\n}\nexport var arr;","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/AnotherMl.js"],"names":["React","tf","LineGraph","Grid","makeStyles","CardHeader","Card","CardContent","aPic","Graphing","theindata","adata","data","loss","flagtrain","labelsdata","labelsdata1","thelabels","model","sequential","layers","dense","inputShape","units","activation","prediction_","data_","labels","vlafs","dummy","dummy1","useStyles","theme","root","marginTop","spacing","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","compile","optimizer","learningrate","dropout","metrics","state","AnotherMl","Component","constructor","props","isTfReady","trained","isitraining","x","y","measure","measure1","datasets","counter","prediction","componentDidMount","ready","setState","trainTheModel","randomNormal","randomUniform","toString","i","flag","index","arr","onBatchEnd","batch","logs","console","log","acc","parseFloat","updateChart","fit","epochs","batchSize","callbacks","then","info","thePrediction","predict","print","randomm","render","flagged","arr1","apprendice","getWeights"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n//import * as t_f from '@tensorflow/tfjs-node'\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport LineGraph from 'C:/NewReactResume/resm/src/Components/ChartJs/Charts.js'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport aPic from 'C:/NewReactResume/resm/src/assets/img/indicator.gif'\r\n//import Play from '../../Components/PlayGround/PlayGround.js'\r\nimport Graphing from '../../Components/Graphs/Graphing.js'\r\n//const model = tf.sequential();\r\n//this is how you export a variable lmao\r\nexport var theindata// = {data:state.x}\r\n\r\nexport var adata = {data:[0], loss: [0], flagtrain: false, labelsdata:[], labelsdata1:[]}\r\n\r\n\r\n//console.log(theindata)\r\nexport var thelabels;// = {labels:state.y}\r\n\r\nconst model = tf.sequential({\r\n    layers: [\r\n      tf.layers.dense({inputShape: [2], units: 2, activation: 'relu'}),\r\n      //tf.layers.dense({units:15, activation:'sigmoid'}),\r\n      //tf.layers.dense({units:10, activation:'sigmoid'}),\r\n      tf.layers.dense({units: 2, activation: 'relu'}),\r\n    ]\r\n   });\r\nvar prediction_;\r\nexport var data_;\r\nvar labels;\r\nvar vlafs;\r\nvar dummy;\r\nvar dummy1;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      marginTop:theme.spacing(10),\r\n    },\r\n    media: {\r\n      height: 0,\r\n      paddingTop: '56.25%', // 16:9\r\n    },\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n      backgroundColor: '#FFF',\r\n    },\r\n  }));\r\n\r\n  model.compile({\r\n    optimizer: 'sgd',\r\n    learningrate: 0.003,\r\n    dropout: 0.2,\r\n    loss: 'categoricalCrossentropy',\r\n    metrics: ['accuracy']\r\n  });\r\nexport var state;\r\n\r\nexport default class AnotherMl extends React.Component{\r\n    \r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n      }\r\n        state = {\r\n            isTfReady:false,\r\n            trained:false,\r\n            isitraining: false,\r\n            x : null, \r\n            y : null,\r\n            loss: null,\r\n            measure: null,\r\n            measure1:null,\r\n            datasets : null, \r\n            counter : 0,\r\n            prediction:null\r\n        }  \r\n\r\n        //let arr = [0]\r\n        theindata  = {}\r\n    \r\n    async componentDidMount() {\r\n        // Wait for tf to be ready.\r\n        await tf.ready();\r\n        // Signal to the app that tensorflow.js can now be used.\r\n        this.setState({isTfReady: true})\r\n        this.setState({trained: false})\r\n        //this.setState({counter:0+1})\r\n        //this.train()\r\n        //this.setState({training:true})\r\n        //const source = { uri: response.uri }\r\n        await this.trainTheModel()\r\n    }\r\n    trainTheModel(){\r\n\r\n        // Generate dummy data.\r\n        data_ = tf.randomNormal([100, 2]);\r\n        labels = tf.randomUniform([100, 2]);\r\n        \r\n        this.setState({x:data_.toString()})\r\n        this.setState({y:labels.toString()})\r\n       // console.log(labels.toString())\r\n        //console.log(labels.toString())\r\n        this.setState({isitraining:true})\r\n        //console.log(data.print())\r\n        //console.log(labels.print())\r\n        //this.setState({x:data.array()})\r\n        //this.setState({y:labels})\r\n        //data_.array().then(array=>console.log(array))\r\n        let counter = 0;\r\n        \r\n        //vlafs = await data.data()//.then(array => console.log(array))\r\n        //console.log(vlafs)\r\n        //console.log(vlafs)\r\n        //console.log(JSON.stringify(this.state.x))\r\n        \r\n        var i = 1\r\n        var flag = false\r\n        var index = 0\r\n        arr = [0]\r\n\r\n        function onBatchEnd(batch, logs) {\r\n            \r\n            console.log(`Accuracy: ${logs.acc}`,  `loss: ${logs.loss}`,  `epoch: ${counter}`);\r\n            flag = false\r\n\r\n            for (i ; !flag; )\r\n            {\r\n                if (!adata.data[1] && !adata.loss){\r\n                    //arr[0]= parseFloat(logs.acc)\r\n                    //adata[\"data\" == 0] = [parseFloat(logs.acc)];\r\n                    adata.data[1] = parseFloat(logs.acc)\r\n                    adata.loss[1] = parseFloat(logs.loss)\r\n                    adata.labelsdata[1] =  i\r\n                    adata.labelsdata1[1] = i\r\n                    //adata.loss[1] = parseFloat(logs.loss)\r\n                    //adata[\"data\"][i == 0] = [parseFloat(logs.acc)]\r\n                    \r\n                    //console.log(arr[i], adata[i])\r\n                }\r\n                else if (!adata.data[i] && !adata.loss[i]){\r\n                    //arr[i] = parseFloat(logs.acc)\r\n                    //adata[\"data\"][i] = [parseFloat(logs.acc)]\r\n                    adata.data[i] = parseFloat(logs.acc)\r\n                    adata.loss[i] = parseFloat(logs.loss)\r\n                    adata.labelsdata[i] =  i\r\n                    adata.labelsdata1[i] = i\r\n\r\n                    \r\n                    //console.log(arr[i], adata[i])\r\n                }else\r\n                {\r\n                    //arr[i+1] = parseFloat(logs.acc)\r\n                    adata.data[i+1] = parseFloat(logs.acc)\r\n                    adata.loss[i+1] = parseFloat(logs.loss)\r\n                    adata.labelsdata1[i+1] =  i\r\n                    //adata.labelsdata[i+1] = i\r\n                    //adata[\"data\"][i + 1] = [parseFloat(logs.acc)]\r\n                    \r\n                    //adata[\"data\"] = [parseFloat(logs.acc)]\r\n                    //console.log(arr[i], adata[i])\r\n                }\r\n                i += 1\r\n                \r\n                //console.log(arr[index])\r\n                //console.log(i)\r\n                index += 1\r\n                flag = true\r\n            }\r\n            \r\n            //console.log(typeof(logs.loss))\r\n            //this.setState({loss : logs.loss})\r\n            //let hi = async () => {\r\n                \r\n            //}\r\n            \r\n            //  hi()\r\n            counter += 1;\r\n            //isTraining()\r\n            //)\r\n        }\r\n        \r\n\r\n        function updateChart(logs) {\r\n            \r\n            //console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\r\n        }\r\n\r\n        // Train for 5 epochs with batch size of 32.\r\n        model.fit(data_, labels, {\r\n        epochs: 15, //add sliders to these options.\r\n        batchSize: 10,\r\n        callbacks: {onBatchEnd}\r\n        }).then(info => {\r\n            //this.setState({isitraining:false})\r\n            //console.log('Final accuracy', info.history.acc);\r\n            this.setState({isitraining:false})\r\n            this.setState({trained:true})\r\n            this.setState({flag:true})\r\n            this.thePrediction()\r\n            //console.log(\"the len of arr is \",arr.length)\r\n            console.log(adata)\r\n            //model.summary()\r\n            //document.write(model.summary())\r\n            //document.write(model._trainableWeights.toString())\r\n        \r\n        });\r\n\r\n    }\r\n    \r\n\r\n    async thePrediction(){\r\n\r\n        if(this.state.trained)\r\n            {\r\n                prediction_ = await model.predict(tf.randomNormal([10, 2]));\r\n                //console.log(prediction_?\"yes\":\"no\")\r\n                //console.log(prediction_.print())\r\n                this.setState({prediction: prediction_.toString(prediction_.print())})\r\n                \r\n\r\n                //this.setState({prediction: prediction_.print()})\r\n                //console.log(prediction_.print())\r\n            }\r\n        this.randomm()\r\n        \r\n        //console.log(model.getWeights().toString())\r\n        \r\n    }\r\n\r\n    async randomm(){\r\n        for (let index = 0; index < 1; index++){\r\n            adata[\"flagtrain\"] = true\r\n        }\r\n\r\n        //dummy = await model.getWeights().values().next().value //valid call\r\n        //dummy1 = await model.loss.toString()\r\n        //dummy1 = JSON.stringify(model.summary())\r\n        //Document.toString(dummy1)\r\n        \r\n        //dummy = await model.trainableWeights.toString() not iter\r\n        //model.g\r\n        //console.log(\"cokooooooo\",dummy1)\r\n        //this.setState({measure1: dummy1})\r\n\r\n        \r\n        //console.log(theindata[\"data\"])\r\n        \r\n        //console.log(this.state.measure1)\r\n        //document.writeln(this.state.measure1)\r\n    }\r\n    \r\n    render()\r\n        {\r\n            const { isTfReady, trained, flagged, isitraining, measure, x, y, prediction } = this.state\r\n            var arr1 = []\r\n            function apprendice(){\r\n                \r\n                //for (var i = 0; i < 1; i++){\r\n                //    theindata[\"data\"] = [i,i+1,i+2,i+3,i+4,i+5,i+6]\r\n                //}\r\n                \r\n                for (var i = 0; i < 1 ; i++){\r\n                    //arr1[i] = arr[i]\r\n                    console.log(\"hey im printing at least\")\r\n                    //console.log(arr[i])\r\n                    //this.theindata[\"data\"] = [this.arr[i]]\r\n                    //console.log(this.theindata)\r\n            \r\n            }\r\n\r\n            \r\n            \r\n                \r\n\r\n            }\r\n            //apprendice()\r\n            //apprendice()\r\n            //console.log(\"connn \", theindata)\r\n            thelabels = {labels: { labels:[\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",]\r\n            \r\n                }\r\n            }\r\n            \r\n            //theindata = {data:`${ arr1 ? [Math.random(),Math.random(),Math.random(),Math.random()] : [1,2,3,4,5,6]}`}\r\n            \r\n            //console.log(theindata)\r\n            //there shoud be sliders accepting params\r\n            //there should  be popovers informational of whats going on\r\n            return (\r\n\r\n                \r\n\r\n            <div>\r\n             <Grid container>\r\n             <Grid item xs={3}>\r\n                 <Card>\r\n                 <CardHeader\r\n        \r\n                    title=\"Is TensorFlow Ready?\"\r\n                        />\r\n                        \r\n                     <CardContent>\r\n                        {this.state.isTfReady?<p>Yes Ready</p>:<p>Not Ready</p>}\r\n                    </CardContent>\r\n                </Card>\r\n               </Grid>\r\n\r\n               <Grid item xs={3}>\r\n                   <Card>\r\n                   <CardHeader\r\n        \r\n                        title=\"Is the model Training?\"\r\n                            />\r\n                    <CardContent>\r\n                        {this.state.isitraining?<p>Yes Training...</p>:<p>Not Training</p>}\r\n                    </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n\r\n                <Grid container>\r\n                \r\n                    <Grid item md={12}>\r\n                        <Card>\r\n                            <CardContent>\r\n                            <CardHeader\r\n        \r\n                                title=\"Training Data\"\r\n                                    />\r\n                                {this.state.x? <p>{this.state.x} </p>: <p>Loading<img src={aPic}></img></p>}\r\n                            </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container>\r\n                \r\n                <Grid item md={12}>\r\n                    <Card>\r\n                        <CardContent>\r\n                        <CardHeader\r\n    \r\n                            title=\"Target Data\"\r\n                                />\r\n                            {this.state.y? <p>{this.state.y} </p>: <p>Loading<img src={aPic}></img></p>}\r\n                            \r\n                        </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                \r\n                <Grid container>\r\n                \r\n                    <Grid item md={12}>\r\n                        <Card>\r\n                            <CardContent>\r\n                            <CardHeader\r\n        \r\n                                title=\"Prediction Results\"\r\n                                    />\r\n                                {this.state.prediction && this.state.trained? <p>{this.state.prediction} </p>: <p>Loading<img src={aPic}></img></p>}\r\n                            </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container>\r\n                <Grid item md={12}>\r\n                    <Card>\r\n                    <CardHeader\r\n        \r\n                        title=\"Weights from Model\"\r\n                            />\r\n                        <CardContent>\r\n                            \r\n                            {this.state.trained?<p>{model.getWeights().toString()}</p>:<p>Loading<img src={aPic}></img></p>}\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n\r\n                </Grid>\r\n                <Grid container>\r\n                    <Grid item md={12}>\r\n                        <Card>\r\n                        <CardHeader\r\n            \r\n                            title=\"Visualized Metric\"\r\n                                />\r\n                            <CardContent>\r\n                                {this.state.trained?<Graphing/>:<p>Loading<img src={aPic}></img></p>}\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                \r\n            </div>\r\n            );\r\n        }\r\n    \r\n}\r\nexport var arr"]},"metadata":{},"sourceType":"module"}