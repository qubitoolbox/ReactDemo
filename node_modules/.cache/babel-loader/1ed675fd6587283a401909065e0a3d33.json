{"ast":null,"code":"import { getPositionScaleChannel } from '../channel';\nexport function isFitType(autoSizeType) {\n  return autoSizeType === 'fit' || autoSizeType === 'fit-x' || autoSizeType === 'fit-y';\n}\nexport function getFitType(sizeType) {\n  return sizeType ? `fit-${getPositionScaleChannel(sizeType)}` : 'fit';\n}\nconst TOP_LEVEL_PROPERTIES = ['background', 'padding' // We do not include \"autosize\" here as it is supported by only unit and layer specs and thus need to be normalized\n];\nexport function extractTopLevelProperties(t) {\n  return TOP_LEVEL_PROPERTIES.reduce((o, p) => {\n    if (t && t[p] !== undefined) {\n      o[p] = t[p];\n    }\n\n    return o;\n  }, {});\n}","map":{"version":3,"sources":["../../../src/spec/toplevel.ts"],"names":[],"mappings":"AAEA,SAAQ,uBAAR,QAAsC,YAAtC;AAiEA,OAAM,SAAU,SAAV,CAAoB,YAApB,EAA8C;AAClD,SAAO,YAAY,KAAK,KAAjB,IAA0B,YAAY,KAAK,OAA3C,IAAsD,YAAY,KAAK,OAA9E;AACD;AAED,OAAM,SAAU,UAAV,CAAqB,QAArB,EAAkD;AACtD,SAAO,QAAQ,GAAI,OAAO,uBAAuB,CAAC,QAAD,CAAU,EAA5C,GAA6D,KAA5E;AACD;AA2BD,MAAM,oBAAoB,GAAiC,CACzD,YADyD,EAEzD,SAFyD,CAGzD;AAHyD,CAA3D;AAMA,OAAM,SAAU,yBAAV,CAAkE,CAAlE,EAAsE;AAC1E,SAAO,oBAAoB,CAAC,MAArB,CAA4B,CAAC,CAAD,EAAI,CAAJ,KAAS;AAC1C,QAAI,CAAC,IAAI,CAAC,CAAC,CAAD,CAAD,KAAS,SAAlB,EAA6B;AAC3B,MAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAAC,CAAD,CAAR;AACD;;AACD,WAAO,CAAP;AACD,GALM,EAKJ,EALI,CAAP;AAMD","sourcesContent":["import {Color} from 'vega';\nimport {BaseSpec} from '.';\nimport {getPositionScaleChannel} from '../channel';\nimport {Config} from '../config';\nimport {InlineDataset} from '../data';\nimport {Dict} from '../util';\n\n/**\n * @minimum 0\n */\nexport type Padding = number | {top?: number; bottom?: number; left?: number; right?: number};\n\nexport type Datasets = Dict<InlineDataset>;\n\nexport type TopLevel<S extends BaseSpec> = S &\n  TopLevelProperties & {\n    /**\n     * URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v4.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.\n     * @format uri\n     */\n    $schema?: string;\n\n    /**\n     * Vega-Lite configuration object. This property can only be defined at the top-level of a specification.\n     */\n    config?: Config;\n\n    /**\n     * A global data store for named datasets. This is a mapping from names to inline datasets.\n     * This can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property.\n     */\n    datasets?: Datasets;\n\n    /**\n     * Optional metadata that will be passed to Vega.\n     * This object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.\n     */\n    usermeta?: object;\n  };\n\nexport interface TopLevelProperties {\n  /**\n   * CSS color property to use as the background of the entire view.\n   *\n   * __Default value:__ `\"white\"`\n   */\n  background?: Color;\n\n  /**\n   * The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle. If a number, specifies padding for all sides.\n   * If an object, the value should have the format `{\"left\": 5, \"top\": 5, \"right\": 5, \"bottom\": 5}` to specify padding for each side of the visualization.\n   *\n   * __Default value__: `5`\n   */\n  padding?: Padding;\n\n  /**\n   * How the visualization size should be determined. If a string, should be one of `\"pad\"`, `\"fit\"` or `\"none\"`.\n   * Object values can additionally specify parameters for content sizing and automatic resizing.\n   *\n   * __Default value__: `pad`\n   */\n  autosize?: AutosizeType | AutoSizeParams;\n}\n\nexport type FitType = 'fit' | 'fit-x' | 'fit-y';\n\nexport function isFitType(autoSizeType: AutosizeType): autoSizeType is FitType {\n  return autoSizeType === 'fit' || autoSizeType === 'fit-x' || autoSizeType === 'fit-y';\n}\n\nexport function getFitType(sizeType?: 'width' | 'height'): FitType {\n  return sizeType ? (`fit-${getPositionScaleChannel(sizeType)}` as FitType) : 'fit';\n}\n\nexport type AutosizeType = 'pad' | 'none' | 'fit' | 'fit-x' | 'fit-y';\n\nexport interface AutoSizeParams {\n  /**\n   * The sizing format type. One of `\"pad\"`, `\"fit\"`, `\"fit-x\"`, `\"fit-y\"`,  or `\"none\"`. See the [autosize type](https://vega.github.io/vega-lite/docs/size.html#autosize) documentation for descriptions of each.\n   *\n   * __Default value__: `\"pad\"`\n   */\n  type?: AutosizeType;\n\n  /**\n   * A boolean flag indicating if autosize layout should be re-calculated on every view update.\n   *\n   * __Default value__: `false`\n   */\n  resize?: boolean;\n\n  /**\n   * Determines how size calculation should be performed, one of `\"content\"` or `\"padding\"`. The default setting (`\"content\"`) interprets the width and height settings as the data rectangle (plotting) dimensions, to which padding is then added. In contrast, the `\"padding\"` setting includes the padding within the view size calculations, such that the width and height settings indicate the **total** intended size of the view.\n   *\n   * __Default value__: `\"content\"`\n   */\n  contains?: 'content' | 'padding';\n}\n\nconst TOP_LEVEL_PROPERTIES: (keyof TopLevelProperties)[] = [\n  'background',\n  'padding'\n  // We do not include \"autosize\" here as it is supported by only unit and layer specs and thus need to be normalized\n];\n\nexport function extractTopLevelProperties<T extends TopLevelProperties>(t: T) {\n  return TOP_LEVEL_PROPERTIES.reduce((o, p) => {\n    if (t && t[p] !== undefined) {\n      o[p] = t[p];\n    }\n    return o;\n  }, {});\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}