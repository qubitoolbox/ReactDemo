{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\FirstML\\\\Toxic.js\";\nimport React from \"react\";\nimport * as tf from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as toxicity from '@tensorflow-models/toxicity'; // The minimum prediction confidence.\n\nconst threshold = 0.9; // Load the model. Users optionally pass in a threshold and an array of\n// labels to include.\n\nclass merC extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isTfReady: false,\n      isModelReady: false,\n      prediction: null\n    };\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n\n    this.setState({\n      isTfReady: true\n    });\n    this.model = await mobilenet.load();\n    this.setState({\n      isModelReady: true\n    }); //const source = { uri: response.uri }\n  }\n\n  async Toxicity1() {\n    toxicity.load(threshold).then(model => {\n      const sentences = ['you suck'];\n      model.classify(sentences).then(predictions => {\n        // `predictions` is an array of objects, one for each prediction head,\n        // that contains the raw probabilities for each input along with the\n        // final prediction in `match` (either `true` or `false`).\n        // If neither prediction exceeds the threshold, `match` is `null`.\n        console.log(predictions);\n        this.setState({\n          prediction: prediction\n        });\n        /*\r\n        prints:\r\n        {\r\n        \"label\": \"identity_attack\",\r\n        \"results\": [{\r\n            \"probabilities\": [0.9659664034843445, 0.03403361141681671],\r\n            \"match\": false\r\n        }]\r\n        },\r\n        {\r\n        \"label\": \"insult\",\r\n        \"results\": [{\r\n            \"probabilities\": [0.08124706149101257, 0.9187529683113098],\r\n            \"match\": true\r\n        }]\r\n        },\r\n        ...\r\n        */\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, iguess.preds);\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/Toxic.js"],"names":["React","tf","mobilenet","toxicity","threshold","merC","Component","constructor","props","state","isTfReady","isModelReady","prediction","componentDidMount","ready","setState","model","load","Toxicity1","then","sentences","classify","predictions","console","log","iguess","preds"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;AACA,OAAO,KAAKC,QAAZ,MAA0B,6BAA1B,C,CACA;;AACA,MAAMC,SAAS,GAAG,GAAlB,C,CAEA;AACA;;AACA,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,YAAY,EAAE,KAFH;AAGXC,MAAAA,UAAU,EAAE;AAHD,KAAb;AAKD;;AAED,QAAMC,iBAAN,GAA0B;AACxB;AACA,UAAMZ,EAAE,CAACa,KAAH,EAAN,CAFwB,CAGxB;;AACA,SAAKC,QAAL,CAAc;AACZL,MAAAA,SAAS,EAAE;AADC,KAAd;AAGA,SAAKM,KAAL,GAAa,MAAMd,SAAS,CAACe,IAAV,EAAnB;AACA,SAAKF,QAAL,CAAc;AAAEJ,MAAAA,YAAY,EAAE;AAAhB,KAAd,EARwB,CASxB;AAED;;AAEH,QAAMO,SAAN,GAAkB;AAElBf,IAAAA,QAAQ,CAACc,IAAT,CAAcb,SAAd,EAAyBe,IAAzB,CAA8BH,KAAK,IAAI;AAEvC,YAAMI,SAAS,GAAG,CAAC,UAAD,CAAlB;AAGAJ,MAAAA,KAAK,CAACK,QAAN,CAAeD,SAAf,EAA0BD,IAA1B,CAA+BG,WAAW,IAAI;AAC1C;AACA;AACA;AACA;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACA,aAAKP,QAAL,CAAc;AAAEH,UAAAA,UAAU,EAAEA;AAAd,SAAd;AACA;;;;;;;;;;;;;;;;;;AAkBH,OA1BD;AA2BC,KAhCD;AAkCA,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKa,MAAM,CAACC,KADZ,CADA;AAMH;;AAjEiC","sourcesContent":["import React from \"react\";\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as mobilenet from '@tensorflow-models/mobilenet';\r\nimport * as toxicity from '@tensorflow-models/toxicity';\r\n// The minimum prediction confidence.\r\nconst threshold = 0.9;\r\n\r\n// Load the model. Users optionally pass in a threshold and an array of\r\n// labels to include.\r\nclass merC extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          isTfReady: false,\r\n          isModelReady: false,\r\n          prediction: null\r\n        };\r\n      }\r\n\r\n      async componentDidMount() {\r\n        // Wait for tf to be ready.\r\n        await tf.ready();\r\n        // Signal to the app that tensorflow.js can now be used.\r\n        this.setState({\r\n          isTfReady: true,\r\n        })\r\n        this.model = await mobilenet.load()\r\n        this.setState({ isModelReady: true })\r\n        //const source = { uri: response.uri }\r\n    \r\n      }\r\n\r\n    async Toxicity1() {\r\n\r\n    toxicity.load(threshold).then(model => {\r\n    \r\n    const sentences = ['you suck'];\r\n    \r\n\r\n    model.classify(sentences).then(predictions => {\r\n        // `predictions` is an array of objects, one for each prediction head,\r\n        // that contains the raw probabilities for each input along with the\r\n        // final prediction in `match` (either `true` or `false`).\r\n        // If neither prediction exceeds the threshold, `match` is `null`.\r\n\r\n        console.log(predictions);\r\n        this.setState({ prediction: prediction })\r\n        /*\r\n        prints:\r\n        {\r\n        \"label\": \"identity_attack\",\r\n        \"results\": [{\r\n            \"probabilities\": [0.9659664034843445, 0.03403361141681671],\r\n            \"match\": false\r\n        }]\r\n        },\r\n        {\r\n        \"label\": \"insult\",\r\n        \"results\": [{\r\n            \"probabilities\": [0.08124706149101257, 0.9187529683113098],\r\n            \"match\": true\r\n        }]\r\n        },\r\n        ...\r\n        */\r\n    });\r\n    })\r\n\r\n    return(\r\n    <div>\r\n        {iguess.preds}\r\n    </div>\r\n    );\r\n\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}