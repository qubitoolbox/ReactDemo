{"ast":null,"code":"import { keys } from './util';\nexport const defaultLegendConfig = {\n  gradientHorizontalMaxLength: 200,\n  gradientHorizontalMinLength: 100,\n  gradientVerticalMaxLength: 200,\n  gradientVerticalMinLength: 64,\n  unselectedOpacity: 0.35\n};\nexport const COMMON_LEGEND_PROPERTY_INDEX = {\n  clipHeight: 1,\n  columnPadding: 1,\n  columns: 1,\n  cornerRadius: 1,\n  direction: 1,\n  fillColor: 1,\n  format: 1,\n  formatType: 1,\n  gradientLength: 1,\n  gradientOpacity: 1,\n  gradientStrokeColor: 1,\n  gradientStrokeWidth: 1,\n  gradientThickness: 1,\n  gridAlign: 1,\n  labelAlign: 1,\n  labelBaseline: 1,\n  labelColor: 1,\n  labelFont: 1,\n  labelFontSize: 1,\n  labelFontStyle: 1,\n  labelFontWeight: 1,\n  labelLimit: 1,\n  labelOffset: 1,\n  labelOpacity: 1,\n  labelOverlap: 1,\n  labelPadding: 1,\n  labelSeparation: 1,\n  legendX: 1,\n  legendY: 1,\n  offset: 1,\n  orient: 1,\n  padding: 1,\n  rowPadding: 1,\n  strokeColor: 1,\n  symbolDash: 1,\n  symbolDashOffset: 1,\n  symbolFillColor: 1,\n  symbolLimit: 1,\n  symbolOffset: 1,\n  symbolOpacity: 1,\n  symbolSize: 1,\n  symbolStrokeColor: 1,\n  symbolStrokeWidth: 1,\n  symbolType: 1,\n  tickCount: 1,\n  tickMinStep: 1,\n  title: 1,\n  titleAlign: 1,\n  titleAnchor: 1,\n  titleBaseline: 1,\n  titleColor: 1,\n  titleFont: 1,\n  titleFontSize: 1,\n  titleFontStyle: 1,\n  titleFontWeight: 1,\n  titleLimit: 1,\n  titleLineHeight: 1,\n  titleOpacity: 1,\n  titleOrient: 1,\n  titlePadding: 1,\n  type: 1,\n  values: 1,\n  zindex: 1\n};\nexport const LEGEND_PROPERTIES = keys(COMMON_LEGEND_PROPERTY_INDEX);","map":{"version":3,"sources":["../../src/legend.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseLegend,\n  LabelOverlap,\n  Legend as VgLegend,\n  LegendConfig as VgLegendConfig,\n  LegendOrient,\n  Orientation\n} from 'vega';\nimport {DateTime} from './datetime';\nimport {Guide, GuideEncodingEntry, VlOnlyGuideConfig} from './guide';\nimport {Flag, keys} from './util';\nimport {ExcludeMappedValueRef} from './vega.schema';\n\ntype BaseLegendNoSignals = ExcludeMappedValueRef<BaseLegend>;\n\nexport type LegendConfig = LegendMixins &\n  VlOnlyGuideConfig &\n  ExcludeMappedValueRef<VgLegendConfig> & {\n    /**\n     * Max legend length for a vertical gradient when `config.legend.gradientLength` is undefined.\n     *\n     * __Default value:__ `200`\n     */\n    gradientVerticalMaxLength?: number;\n\n    /**\n     * Min legend length for a vertical gradient when `config.legend.gradientLength` is undefined.\n     *\n     * __Default value:__ `100`\n     */\n    gradientVerticalMinLength?: number;\n\n    /**\n     * Max legend length for a horizontal gradient when `config.legend.gradientLength` is undefined.\n     *\n     * __Default value:__ `200`\n     */\n    gradientHorizontalMaxLength?: number;\n\n    /**\n     * Min legend length for a horizontal gradient when `config.legend.gradientLength` is undefined.\n     *\n     * __Default value:__ `100`\n     */\n    gradientHorizontalMinLength?: number;\n\n    /**\n     * The length in pixels of the primary axis of a color gradient. This value corresponds to the height of a vertical gradient or the width of a horizontal gradient.\n     *\n     * __Default value:__ `undefined`. If `undefined`, the default gradient will be determined based on the following rules:\n     * - For vertical gradients, `clamp(plot_height, gradientVerticalMinLength, gradientVerticalMaxLength)`\n     * - For top-`orient`ed or bottom-`orient`ed horizontal gradients, `clamp(plot_width, gradientHorizontalMinLength, gradientHorizontalMaxLength)`\n     * - For other horizontal gradients, `gradientHorizontalMinLength`\n     *\n     * where `clamp(value, min, max)` restricts _value_ to be between the specified _min_ and _max_.\n     * @minimum 0\n     */\n    gradientLength?: number;\n\n    /**\n     * The opacity of unselected legend entries.\n     *\n     * __Default value:__ 0.35.\n     */\n    unselectedOpacity?: number;\n  };\n\n/**\n * Properties of a legend or boolean flag for determining whether to show it.\n */\nexport interface Legend extends BaseLegendNoSignals, LegendMixins, Guide {\n  /**\n   * Mark definitions for custom legend encoding.\n   *\n   * @hidden\n   */\n  encoding?: LegendEncoding;\n\n  /**\n   * [Vega expression](https://vega.github.io/vega/docs/expressions/) for customizing labels.\n   *\n   * __Note:__ The label text and value can be assessed via the `label` and `value` properties of the legend's backing `datum` object.\n   */\n  labelExpr?: string;\n\n  /**\n   * The minimum desired step between legend ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.\n   *\n   * __Default value__: `undefined`\n   */\n  tickMinStep?: number;\n\n  /**\n   * Explicitly set the visible legend values.\n   */\n  values?: (number | string | boolean | DateTime)[];\n\n  /**\n   * The type of the legend. Use `\"symbol\"` to create a discrete legend and `\"gradient\"` for a continuous color gradient.\n   *\n   * __Default value:__ `\"gradient\"` for non-binned quantitative fields and temporal fields; `\"symbol\"` otherwise.\n   */\n  type?: 'symbol' | 'gradient';\n\n  /**\n   * A non-negative integer indicating the z-index of the legend.\n   * If zindex is 0, legend should be drawn behind all chart elements.\n   * To put them in front, use zindex = 1.\n   *\n   * @TJS-type integer\n   * @minimum 0\n   */\n  zindex?: number;\n\n  /**\n   * The direction of the legend, one of `\"vertical\"` or `\"horizontal\"`.\n   *\n   * __Default value:__\n   * - For top-/bottom-`orient`ed legends, `\"horizontal\"`\n   * - For left-/right-`orient`ed legends, `\"vertical\"`\n   * - For top/bottom-left/right-`orient`ed legends, `\"horizontal\"` for gradient legends and `\"vertical\"` for symbol legends.\n   */\n  direction?: Orientation;\n\n  /**\n   * The orientation of the legend, which determines how the legend is positioned within the scene. One of `\"left\"`, `\"right\"`, `\"top\"`, `\"bottom\"`, `\"top-left\"`, `\"top-right\"`, `\"bottom-left\"`, `\"bottom-right\"`, `\"none\"`.\n   *\n   * __Default value:__ `\"right\"`\n   */\n  orient?: LegendOrient;\n}\n\n// Change comments to be Vega-Lite specific\ninterface LegendMixins {\n  /**\n   * The strategy to use for resolving overlap of labels in gradient legends. If `false`, no overlap reduction is attempted. If set to `true` or `\"parity\"`, a strategy of removing every other label is used. If set to `\"greedy\"`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).\n   *\n   * __Default value:__ `\"greedy\"` for `log scales otherwise `true`.\n   */\n  labelOverlap?: LabelOverlap;\n}\n\nexport interface LegendEncoding {\n  /**\n   * Custom encoding for the legend container.\n   * This can be useful for creating legend with custom x, y position.\n   */\n  legend?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for the legend title text mark.\n   */\n  title?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for legend label text marks.\n   */\n  labels?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for legend symbol marks.\n   */\n  symbols?: GuideEncodingEntry;\n\n  /**\n   * Custom encoding for legend gradient filled rect marks.\n   */\n  gradient?: GuideEncodingEntry;\n}\n\nexport const defaultLegendConfig: LegendConfig = {\n  gradientHorizontalMaxLength: 200,\n  gradientHorizontalMinLength: 100,\n  gradientVerticalMaxLength: 200,\n  gradientVerticalMinLength: 64, // This is Vega's minimum.\n  unselectedOpacity: 0.35\n};\n\nexport const COMMON_LEGEND_PROPERTY_INDEX: Flag<keyof (VgLegend | Legend)> = {\n  clipHeight: 1,\n  columnPadding: 1,\n  columns: 1,\n  cornerRadius: 1,\n  direction: 1,\n  fillColor: 1,\n  format: 1,\n  formatType: 1,\n  gradientLength: 1,\n  gradientOpacity: 1,\n  gradientStrokeColor: 1,\n  gradientStrokeWidth: 1,\n  gradientThickness: 1,\n  gridAlign: 1,\n  labelAlign: 1,\n  labelBaseline: 1,\n  labelColor: 1,\n  labelFont: 1,\n  labelFontSize: 1,\n  labelFontStyle: 1,\n  labelFontWeight: 1,\n  labelLimit: 1,\n  labelOffset: 1,\n  labelOpacity: 1,\n  labelOverlap: 1,\n  labelPadding: 1,\n  labelSeparation: 1,\n  legendX: 1,\n  legendY: 1,\n  offset: 1,\n  orient: 1,\n  padding: 1,\n  rowPadding: 1,\n  strokeColor: 1,\n  symbolDash: 1,\n  symbolDashOffset: 1,\n  symbolFillColor: 1,\n  symbolLimit: 1,\n  symbolOffset: 1,\n  symbolOpacity: 1,\n  symbolSize: 1,\n  symbolStrokeColor: 1,\n  symbolStrokeWidth: 1,\n  symbolType: 1,\n  tickCount: 1,\n  tickMinStep: 1,\n  title: 1,\n  titleAlign: 1,\n  titleAnchor: 1,\n  titleBaseline: 1,\n  titleColor: 1,\n  titleFont: 1,\n  titleFontSize: 1,\n  titleFontStyle: 1,\n  titleFontWeight: 1,\n  titleLimit: 1,\n  titleLineHeight: 1,\n  titleOpacity: 1,\n  titleOrient: 1,\n  titlePadding: 1,\n  type: 1,\n  values: 1,\n  zindex: 1\n};\n\nexport const LEGEND_PROPERTIES = keys(COMMON_LEGEND_PROPERTY_INDEX);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}