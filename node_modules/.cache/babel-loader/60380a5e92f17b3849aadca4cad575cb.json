{"ast":null,"code":"export function isAnyConcatSpec(spec) {\n  return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);\n}\nexport function isConcatSpec(spec) {\n  return spec['concat'] !== undefined;\n}\nexport function isVConcatSpec(spec) {\n  return spec['vconcat'] !== undefined;\n}\nexport function isHConcatSpec(spec) {\n  return spec['hconcat'] !== undefined;\n}","map":{"version":3,"sources":["../../../src/spec/concat.ts"],"names":[],"mappings":"AAmEA,OAAM,SAAU,eAAV,CAA0B,IAA1B,EAAwC;AAC5C,SAAO,aAAa,CAAC,IAAD,CAAb,IAAuB,aAAa,CAAC,IAAD,CAApC,IAA8C,YAAY,CAAC,IAAD,CAAjE;AACD;AAED,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAAqC;AACzC,SAAO,IAAI,CAAC,QAAD,CAAJ,KAAmB,SAA1B;AACD;AAED,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAAsC;AAC1C,SAAO,IAAI,CAAC,SAAD,CAAJ,KAAoB,SAA3B;AACD;AAED,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAAsC;AAC1C,SAAO,IAAI,CAAC,SAAD,CAAJ,KAAoB,SAA3B;AACD","sourcesContent":["import {BaseSpec, BoundsMixins, GenericCompositionLayoutWithColumns, ResolveMixins} from './base';\nimport {GenericSpec} from '.';\nimport {GenericLayerSpec, NormalizedLayerSpec} from './layer';\nimport {GenericUnitSpec, NormalizedUnitSpec} from './unit';\n\n/**\n * Base layout mixins for V/HConcatSpec, which should not have RowCol<T> generic fo its property.\n */\nexport interface OneDirectionalConcatLayout extends BoundsMixins, ResolveMixins {\n  /**\n   * Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n   *\n   * __Default value:__ `false`\n   */\n  center?: boolean;\n\n  /**\n   * The spacing in pixels between sub-views of the concat operator.\n   *\n   * __Default value__: `10`\n   */\n  spacing?: number;\n}\n\n/**\n * Base interface for a generalized concatenation specification.\n */\nexport interface GenericConcatSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    GenericCompositionLayoutWithColumns,\n    ResolveMixins {\n  /**\n   * A list of views to be concatenated.\n   */\n  concat: GenericSpec<U, L>[];\n}\n\n/**\n * Base interface for a vertical concatenation specification.\n */\nexport interface GenericVConcatSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    OneDirectionalConcatLayout {\n  /**\n   * A list of views to be concatenated and put into a column.\n   */\n  vconcat: GenericSpec<U, L>[];\n}\n\n/**\n * Base interface for a horizontal concatenation specification.\n */\nexport interface GenericHConcatSpec<U extends GenericUnitSpec<any, any>, L extends GenericLayerSpec<any>>\n  extends BaseSpec,\n    OneDirectionalConcatLayout {\n  /**\n   * A list of views to be concatenated and put into a row.\n   */\n  hconcat: GenericSpec<U, L>[];\n}\n\n/** A concat spec without any shortcut/expansion syntax */\nexport type NormalizedConcatSpec =\n  | GenericConcatSpec<NormalizedUnitSpec, NormalizedLayerSpec>\n  | GenericVConcatSpec<NormalizedUnitSpec, NormalizedLayerSpec>\n  | GenericHConcatSpec<NormalizedUnitSpec, NormalizedLayerSpec>;\n\nexport function isAnyConcatSpec(spec: BaseSpec): spec is GenericVConcatSpec<any, any> | GenericHConcatSpec<any, any> {\n  return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);\n}\n\nexport function isConcatSpec(spec: BaseSpec): spec is GenericConcatSpec<any, any> {\n  return spec['concat'] !== undefined;\n}\n\nexport function isVConcatSpec(spec: BaseSpec): spec is GenericVConcatSpec<any, any> {\n  return spec['vconcat'] !== undefined;\n}\n\nexport function isHConcatSpec(spec: BaseSpec): spec is GenericHConcatSpec<any, any> {\n  return spec['hconcat'] !== undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}