{"ast":null,"code":"import * as log from '../log';\nimport { isHConcatSpec, isVConcatSpec } from '../spec';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nexport class ConcatModel extends BaseConcatModel {\n  constructor(spec, parent, parentGivenName, repeater, config) {\n    var _a, _b, _c, _d;\n\n    super(spec, 'concat', parent, parentGivenName, config, repeater, spec.resolve);\n\n    if (((_b = (_a = spec.resolve) === null || _a === void 0 ? void 0 : _a.axis) === null || _b === void 0 ? void 0 : _b.x) === 'shared' || ((_d = (_c = spec.resolve) === null || _c === void 0 ? void 0 : _c.axis) === null || _d === void 0 ? void 0 : _d.y) === 'shared') {\n      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.concatType = isVConcatSpec(spec) ? 'vconcat' : isHConcatSpec(spec) ? 'hconcat' : 'concat';\n    this.children = this.getChildren(spec).map((child, i) => {\n      return buildModel(child, this, this.getName('concat_' + i), undefined, repeater, config);\n    });\n  }\n\n  getChildren(spec) {\n    if (isVConcatSpec(spec)) {\n      return spec.vconcat;\n    } else if (isHConcatSpec(spec)) {\n      return spec.hconcat;\n    }\n\n    return spec.concat;\n  }\n\n  parseLayoutSize() {\n    parseConcatLayoutSize(this);\n  }\n\n  parseAxisGroup() {\n    return null;\n  }\n\n  assembleDefaultLayout() {\n    return Object.assign(Object.assign({}, this.concatType === 'vconcat' ? {\n      columns: 1\n    } : {}), {\n      bounds: 'full',\n      // Use align each so it can work with multiple plots with different size\n      align: 'each'\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/compile/concat.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,GAAZ,MAAqB,QAArB;AACA,SAAQ,aAAR,EAAuB,aAAvB,QAAiE,SAAjE;AAGA,SAAQ,eAAR,QAA8B,cAA9B;AACA,SAAQ,UAAR,QAAyB,cAAzB;AACA,SAAQ,qBAAR,QAAoC,oBAApC;AAIA,OAAM,MAAO,WAAP,SAA2B,eAA3B,CAA0C;AAK9C,EAAA,WAAA,CACE,IADF,EAEE,MAFF,EAGE,eAHF,EAIE,QAJF,EAKE,MALF,EAKgB;;;AAEd,UAAM,IAAN,EAAY,QAAZ,EAAsB,MAAtB,EAA8B,eAA9B,EAA+C,MAA/C,EAAuD,QAAvD,EAAiE,IAAI,CAAC,OAAtE;;AAEA,QAAI,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,OAAL,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,IAAd,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,CAApB,MAA0B,QAA1B,IAAsC,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,OAAL,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,IAAd,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,CAApB,MAA0B,QAApE,EAA8E;AAC5E,MAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,wBAArB;AACD;;AAED,SAAK,UAAL,GAAkB,aAAa,CAAC,IAAD,CAAb,GAAsB,SAAtB,GAAkC,aAAa,CAAC,IAAD,CAAb,GAAsB,SAAtB,GAAkC,QAAtF;AAEA,SAAK,QAAL,GAAgB,KAAK,WAAL,CAAiB,IAAjB,EAAuB,GAAvB,CAA2B,CAAC,KAAD,EAAQ,CAAR,KAAa;AACtD,aAAO,UAAU,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAK,OAAL,CAAa,YAAY,CAAzB,CAAd,EAA2C,SAA3C,EAAsD,QAAtD,EAAgE,MAAhE,CAAjB;AACD,KAFe,CAAhB;AAGD;;AAEO,EAAA,WAAW,CAAC,IAAD,EAA2B;AAC5C,QAAI,aAAa,CAAC,IAAD,CAAjB,EAAyB;AACvB,aAAO,IAAI,CAAC,OAAZ;AACD,KAFD,MAEO,IAAI,aAAa,CAAC,IAAD,CAAjB,EAAyB;AAC9B,aAAO,IAAI,CAAC,OAAZ;AACD;;AACD,WAAO,IAAI,CAAC,MAAZ;AACD;;AAEM,EAAA,eAAe,GAAA;AACpB,IAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;;AAEM,EAAA,cAAc,GAAA;AACnB,WAAO,IAAP;AACD;;AAES,EAAA,qBAAqB,GAAA;AAC7B,WAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACM,KAAK,UAAL,KAAoB,SAApB,GAAgC;AAAC,MAAA,OAAO,EAAE;AAAV,KAAhC,GAA+C,EADrD,CAAA,EACwD;AACtD,MAAA,MAAM,EAAE,MAD8C;AAEtD;AACA,MAAA,KAAK,EAAE;AAH+C,KADxD,CAAA;AAMD;;AAjD6C","sourcesContent":["import {Config} from '../config';\nimport * as log from '../log';\nimport {isHConcatSpec, isVConcatSpec, NormalizedConcatSpec} from '../spec';\nimport {NormalizedSpec} from '../spec';\nimport {VgLayout} from '../vega.schema';\nimport {BaseConcatModel} from './baseconcat';\nimport {buildModel} from './buildmodel';\nimport {parseConcatLayoutSize} from './layoutsize/parse';\nimport {Model} from './model';\nimport {RepeaterValue} from './repeater';\n\nexport class ConcatModel extends BaseConcatModel {\n  public readonly children: Model[];\n\n  public readonly concatType: 'vconcat' | 'hconcat' | 'concat';\n\n  constructor(\n    spec: NormalizedConcatSpec,\n    parent: Model,\n    parentGivenName: string,\n    repeater: RepeaterValue,\n    config: Config\n  ) {\n    super(spec, 'concat', parent, parentGivenName, config, repeater, spec.resolve);\n\n    if (spec.resolve?.axis?.x === 'shared' || spec.resolve?.axis?.y === 'shared') {\n      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.concatType = isVConcatSpec(spec) ? 'vconcat' : isHConcatSpec(spec) ? 'hconcat' : 'concat';\n\n    this.children = this.getChildren(spec).map((child, i) => {\n      return buildModel(child, this, this.getName('concat_' + i), undefined, repeater, config);\n    });\n  }\n\n  private getChildren(spec: NormalizedConcatSpec): NormalizedSpec[] {\n    if (isVConcatSpec(spec)) {\n      return spec.vconcat;\n    } else if (isHConcatSpec(spec)) {\n      return spec.hconcat;\n    }\n    return spec.concat;\n  }\n\n  public parseLayoutSize() {\n    parseConcatLayoutSize(this);\n  }\n\n  public parseAxisGroup(): void {\n    return null;\n  }\n\n  protected assembleDefaultLayout(): VgLayout {\n    return {\n      ...(this.concatType === 'vconcat' ? {columns: 1} : {}),\n      bounds: 'full',\n      // Use align each so it can work with multiple plots with different size\n      align: 'each'\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}