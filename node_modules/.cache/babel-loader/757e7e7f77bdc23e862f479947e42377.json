{"ast":null,"code":"export default function (index, i, query) {\n  var bit = 1 << i;\n  return {\n    one: bit,\n    zero: ~bit,\n    range: query.slice(),\n    bisect: index.bisect,\n    index: index.index,\n    size: index.size,\n    onAdd: function (added, curr) {\n      var dim = this,\n          range = dim.bisect(dim.range, added.value),\n          idx = added.index,\n          lo = range[0],\n          hi = range[1],\n          n1 = idx.length,\n          i;\n\n      for (i = 0; i < lo; ++i) curr[idx[i]] |= bit;\n\n      for (i = hi; i < n1; ++i) curr[idx[i]] |= bit;\n\n      return dim;\n    }\n  };\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-crossfilter/src/Dimension.js"],"names":["index","i","query","bit","one","zero","range","slice","bisect","size","onAdd","added","curr","dim","value","idx","lo","hi","n1","length"],"mappings":"AAAA,eAAe,UAASA,KAAT,EAAgBC,CAAhB,EAAmBC,KAAnB,EAA0B;AACvC,MAAIC,GAAG,GAAI,KAAKF,CAAhB;AAEA,SAAO;AACLG,IAAAA,GAAG,EAAMD,GADJ;AAELE,IAAAA,IAAI,EAAK,CAACF,GAFL;AAGLG,IAAAA,KAAK,EAAIJ,KAAK,CAACK,KAAN,EAHJ;AAILC,IAAAA,MAAM,EAAGR,KAAK,CAACQ,MAJV;AAKLR,IAAAA,KAAK,EAAIA,KAAK,CAACA,KALV;AAMLS,IAAAA,IAAI,EAAKT,KAAK,CAACS,IANV;AAQLC,IAAAA,KAAK,EAAE,UAASC,KAAT,EAAgBC,IAAhB,EAAsB;AAC3B,UAAIC,GAAG,GAAG,IAAV;AAAA,UACIP,KAAK,GAAGO,GAAG,CAACL,MAAJ,CAAWK,GAAG,CAACP,KAAf,EAAsBK,KAAK,CAACG,KAA5B,CADZ;AAAA,UAEIC,GAAG,GAAGJ,KAAK,CAACX,KAFhB;AAAA,UAGIgB,EAAE,GAAGV,KAAK,CAAC,CAAD,CAHd;AAAA,UAIIW,EAAE,GAAGX,KAAK,CAAC,CAAD,CAJd;AAAA,UAKIY,EAAE,GAAGH,GAAG,CAACI,MALb;AAAA,UAKqBlB,CALrB;;AAOA,WAAKA,CAAC,GAAC,CAAP,EAAWA,CAAC,GAACe,EAAb,EAAiB,EAAEf,CAAnB,EAAsBW,IAAI,CAACG,GAAG,CAACd,CAAD,CAAJ,CAAJ,IAAgBE,GAAhB;;AACtB,WAAKF,CAAC,GAACgB,EAAP,EAAWhB,CAAC,GAACiB,EAAb,EAAiB,EAAEjB,CAAnB,EAAsBW,IAAI,CAACG,GAAG,CAACd,CAAD,CAAJ,CAAJ,IAAgBE,GAAhB;;AACtB,aAAOU,GAAP;AACD;AAnBI,GAAP;AAqBD","sourcesContent":["export default function(index, i, query) {\n  var bit = (1 << i);\n\n  return {\n    one:     bit,\n    zero:    ~bit,\n    range:   query.slice(),\n    bisect:  index.bisect,\n    index:   index.index,\n    size:    index.size,\n\n    onAdd: function(added, curr) {\n      var dim = this,\n          range = dim.bisect(dim.range, added.value),\n          idx = added.index,\n          lo = range[0],\n          hi = range[1],\n          n1 = idx.length, i;\n\n      for (i=0;  i<lo; ++i) curr[idx[i]] |= bit;\n      for (i=hi; i<n1; ++i) curr[idx[i]] |= bit;\n      return dim;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}