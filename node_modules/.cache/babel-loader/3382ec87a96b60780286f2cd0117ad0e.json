{"ast":null,"code":"import { error, isArray, isObject, stringValue } from 'vega-util';\nexport default function (proj, scope) {\n  var config = scope.config.projection || {},\n      params = {};\n\n  for (var name in proj) {\n    if (name === 'name') continue;\n    params[name] = parseParameter(proj[name], name, scope);\n  } // apply projection defaults from config\n\n\n  for (name in config) {\n    if (params[name] == null) {\n      params[name] = parseParameter(config[name], name, scope);\n    }\n  }\n\n  scope.addProjection(proj.name, params);\n}\n\nfunction parseParameter(_, name, scope) {\n  return isArray(_) ? _.map(function (_) {\n    return parseParameter(_, name, scope);\n  }) : !isObject(_) ? _ : _.signal ? scope.signalRef(_.signal) : name === 'fit' ? _ : error('Unsupported parameter object: ' + stringValue(_));\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-parser/src/parsers/projection.js"],"names":["error","isArray","isObject","stringValue","proj","scope","config","projection","params","name","parseParameter","addProjection","_","map","signal","signalRef"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,WAAlC,QAAoD,WAApD;AAEA,eAAe,UAASC,IAAT,EAAeC,KAAf,EAAsB;AACnC,MAAIC,MAAM,GAAGD,KAAK,CAACC,MAAN,CAAaC,UAAb,IAA2B,EAAxC;AAAA,MACIC,MAAM,GAAG,EADb;;AAGA,OAAK,IAAIC,IAAT,IAAiBL,IAAjB,EAAuB;AACrB,QAAIK,IAAI,KAAK,MAAb,EAAqB;AACrBD,IAAAA,MAAM,CAACC,IAAD,CAAN,GAAeC,cAAc,CAACN,IAAI,CAACK,IAAD,CAAL,EAAaA,IAAb,EAAmBJ,KAAnB,CAA7B;AACD,GAPkC,CASnC;;;AACA,OAAKI,IAAL,IAAaH,MAAb,EAAqB;AACnB,QAAIE,MAAM,CAACC,IAAD,CAAN,IAAgB,IAApB,EAA0B;AACxBD,MAAAA,MAAM,CAACC,IAAD,CAAN,GAAeC,cAAc,CAACJ,MAAM,CAACG,IAAD,CAAP,EAAeA,IAAf,EAAqBJ,KAArB,CAA7B;AACD;AACF;;AAEDA,EAAAA,KAAK,CAACM,aAAN,CAAoBP,IAAI,CAACK,IAAzB,EAA+BD,MAA/B;AACD;;AAED,SAASE,cAAT,CAAwBE,CAAxB,EAA2BH,IAA3B,EAAiCJ,KAAjC,EAAwC;AACtC,SAAOJ,OAAO,CAACW,CAAD,CAAP,GAAaA,CAAC,CAACC,GAAF,CAAM,UAASD,CAAT,EAAY;AAAE,WAAOF,cAAc,CAACE,CAAD,EAAIH,IAAJ,EAAUJ,KAAV,CAArB;AAAwC,GAA5D,CAAb,GACH,CAACH,QAAQ,CAACU,CAAD,CAAT,GAAeA,CAAf,GACAA,CAAC,CAACE,MAAF,GAAWT,KAAK,CAACU,SAAN,CAAgBH,CAAC,CAACE,MAAlB,CAAX,GACAL,IAAI,KAAK,KAAT,GAAiBG,CAAjB,GACAZ,KAAK,CAAC,mCAAmCG,WAAW,CAACS,CAAD,CAA/C,CAJT;AAKD","sourcesContent":["import {error, isArray, isObject, stringValue} from 'vega-util';\n\nexport default function(proj, scope) {\n  var config = scope.config.projection || {},\n      params = {};\n\n  for (var name in proj) {\n    if (name === 'name') continue;\n    params[name] = parseParameter(proj[name], name, scope);\n  }\n\n  // apply projection defaults from config\n  for (name in config) {\n    if (params[name] == null) {\n      params[name] = parseParameter(config[name], name, scope);\n    }\n  }\n\n  scope.addProjection(proj.name, params);\n}\n\nfunction parseParameter(_, name, scope) {\n  return isArray(_) ? _.map(function(_) { return parseParameter(_, name, scope); })\n    : !isObject(_) ? _\n    : _.signal ? scope.signalRef(_.signal)\n    : name === 'fit' ? _\n    : error('Unsupported parameter object: ' + stringValue(_));\n}\n"]},"metadata":{},"sourceType":"module"}