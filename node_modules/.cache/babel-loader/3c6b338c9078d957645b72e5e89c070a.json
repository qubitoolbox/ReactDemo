{"ast":null,"code":"import { Transform } from 'vega-dataflow';\nimport { inherits } from 'vega-util';\nimport { Delaunay } from 'd3-delaunay';\nexport default function Voronoi(params) {\n  Transform.call(this, null, params);\n}\nVoronoi.Definition = {\n  \"type\": \"Voronoi\",\n  \"metadata\": {\n    \"modifies\": true\n  },\n  \"params\": [{\n    \"name\": \"x\",\n    \"type\": \"field\",\n    \"required\": true\n  }, {\n    \"name\": \"y\",\n    \"type\": \"field\",\n    \"required\": true\n  }, {\n    \"name\": \"size\",\n    \"type\": \"number\",\n    \"array\": true,\n    \"length\": 2\n  }, {\n    \"name\": \"extent\",\n    \"type\": \"array\",\n    \"array\": true,\n    \"length\": 2,\n    \"default\": [[-1e5, -1e5], [1e5, 1e5]],\n    \"content\": {\n      \"type\": \"number\",\n      \"array\": true,\n      \"length\": 2\n    }\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"default\": \"path\"\n  }]\n};\nconst prototype = inherits(Voronoi, Transform);\nconst defaultExtent = [-1e5, -1e5, 1e5, 1e5];\n\nprototype.transform = function (_, pulse) {\n  const as = _.as || 'path',\n        data = pulse.source; // nothing to do if no data\n\n  if (!data || !data.length) return pulse; // configure and construct voronoi diagram\n\n  let s = _.size;\n  s = s ? [0, 0, s[0], s[1]] : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]] : defaultExtent;\n  const voronoi = this.value = Delaunay.from(data, _.x, _.y).voronoi(s); // map polygons to paths\n\n  for (let i = 0, n = data.length; i < n; ++i) {\n    const polygon = voronoi.cellPolygon(i);\n    data[i][as] = polygon ? toPathString(polygon) : null;\n  }\n\n  return pulse.reflow(_.modified()).modifies(as);\n}; // suppress duplicated end point vertices\n\n\nfunction toPathString(p) {\n  const x = p[0][0],\n        y = p[0][1];\n  let n = p.length - 1;\n\n  for (; p[n][0] === x && p[n][1] === y; --n);\n\n  return 'M' + p.slice(0, n + 1).join('L') + 'Z';\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-voronoi/src/Voronoi.js"],"names":["Transform","inherits","Delaunay","Voronoi","params","call","Definition","prototype","defaultExtent","transform","_","pulse","as","data","source","length","s","size","extent","voronoi","value","from","x","y","i","n","polygon","cellPolygon","toPathString","reflow","modified","modifies","p","slice","join"],"mappings":"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","sourcesContent":["import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\nimport {Delaunay} from 'd3-delaunay';\n\nexport default function Voronoi(params) {\n  Transform.call(this, null, params);\n}\n\nVoronoi.Definition = {\n  \"type\": \"Voronoi\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"x\", \"type\": \"field\", \"required\": true },\n    { \"name\": \"y\", \"type\": \"field\", \"required\": true },\n    { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"extent\", \"type\": \"array\", \"array\": true, \"length\": 2,\n      \"default\": [[-1e5, -1e5], [1e5, 1e5]],\n      \"content\": {\"type\": \"number\", \"array\": true, \"length\": 2} },\n    { \"name\": \"as\", \"type\": \"string\", \"default\": \"path\" }\n  ]\n};\n\nconst prototype = inherits(Voronoi, Transform);\n\nconst defaultExtent = [-1e5, -1e5, 1e5, 1e5];\n\nprototype.transform = function(_, pulse) {\n  const as = _.as || 'path',\n        data = pulse.source;\n\n  // nothing to do if no data\n  if (!data || !data.length) return pulse;\n\n  // configure and construct voronoi diagram\n  let s = _.size;\n  s = s ? [0, 0, s[0], s[1]]\n    : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]]\n    : defaultExtent;\n\n  const voronoi = this.value = Delaunay.from(data, _.x, _.y).voronoi(s);\n\n  // map polygons to paths\n  for (let i=0, n=data.length; i<n; ++i) {\n    const polygon = voronoi.cellPolygon(i);\n    data[i][as] = polygon ? toPathString(polygon) : null;\n  }\n\n  return pulse.reflow(_.modified()).modifies(as);\n};\n\n// suppress duplicated end point vertices\nfunction toPathString(p) {\n  const x = p[0][0],\n        y = p[0][1];\n\n  let n = p.length - 1;\n  for (; p[n][0] === x && p[n][1] === y; --n);\n\n  return 'M' + p.slice(0, n + 1).join('L') + 'Z';\n}\n"]},"metadata":{},"sourceType":"module"}