{"ast":null,"code":"import Operator from './Operator';\nimport { inherits } from 'vega-util';\n/**\n * Abstract class for operators that process data tuples.\n * Subclasses must provide a {@link transform} method for operator processing.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {Operator} [source] - The operator from which to receive pulses.\n */\n\nexport default function Transform(init, params) {\n  Operator.call(this, init, null, params);\n}\nvar prototype = inherits(Transform, Operator);\n/**\n * Overrides {@link Operator.evaluate} for transform operators.\n * Internally, this method calls {@link evaluate} to perform processing.\n * If {@link evaluate} returns a falsy value, the input pulse is returned.\n * This method should NOT be overridden, instead overrride {@link evaluate}.\n * @param {Pulse} pulse - the current dataflow pulse.\n * @return the output pulse for this operator (or StopPropagation)\n */\n\nprototype.run = function (pulse) {\n  if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n  var rv;\n\n  if (this.skip()) {\n    this.skip(false);\n  } else {\n    rv = this.evaluate(pulse);\n  }\n\n  rv = rv || pulse;\n\n  if (rv.then) {\n    rv = rv.then(_ => this.pulse = _);\n  } else if (rv !== pulse.StopPropagation) {\n    this.pulse = rv;\n  }\n\n  return rv;\n};\n/**\n * Overrides {@link Operator.evaluate} for transform operators.\n * Marshalls parameter values and then invokes {@link transform}.\n * @param {Pulse} pulse - the current dataflow pulse.\n * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n     value (including undefined) will let the input pulse pass through.\n */\n\n\nprototype.evaluate = function (pulse) {\n  var params = this.marshall(pulse.stamp),\n      out = this.transform(params, pulse);\n  params.clear();\n  return out;\n};\n/**\n * Process incoming pulses.\n * Subclasses should override this method to implement transforms.\n * @param {Parameters} _ - The operator parameter values.\n * @param {Pulse} pulse - The current dataflow pulse.\n * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n *   value (including undefined) will let the input pulse pass through.\n */\n\n\nprototype.transform = function () {};","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-dataflow/src/Transform.js"],"names":["Operator","inherits","Transform","init","params","call","prototype","run","pulse","stamp","StopPropagation","rv","skip","evaluate","then","_","marshall","out","transform","clear"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAAQC,QAAR,QAAuB,WAAvB;AAEA;;;;;;;;;AAQA,eAAe,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,MAAzB,EAAiC;AAC9CJ,EAAAA,QAAQ,CAACK,IAAT,CAAc,IAAd,EAAoBF,IAApB,EAA0B,IAA1B,EAAgCC,MAAhC;AACD;AAED,IAAIE,SAAS,GAAGL,QAAQ,CAACC,SAAD,EAAYF,QAAZ,CAAxB;AAEA;;;;;;;;;AAQAM,SAAS,CAACC,GAAV,GAAgB,UAASC,KAAT,EAAgB;AAC9B,MAAIA,KAAK,CAACC,KAAN,GAAc,KAAKA,KAAvB,EAA8B,OAAOD,KAAK,CAACE,eAAb;AAE9B,MAAIC,EAAJ;;AACA,MAAI,KAAKC,IAAL,EAAJ,EAAiB;AACf,SAAKA,IAAL,CAAU,KAAV;AACD,GAFD,MAEO;AACLD,IAAAA,EAAE,GAAG,KAAKE,QAAL,CAAcL,KAAd,CAAL;AACD;;AACDG,EAAAA,EAAE,GAAGA,EAAE,IAAIH,KAAX;;AAEA,MAAIG,EAAE,CAACG,IAAP,EAAa;AACXH,IAAAA,EAAE,GAAGA,EAAE,CAACG,IAAH,CAAQC,CAAC,IAAI,KAAKP,KAAL,GAAYO,CAAzB,CAAL;AACD,GAFD,MAEO,IAAIJ,EAAE,KAAKH,KAAK,CAACE,eAAjB,EAAkC;AACvC,SAAKF,KAAL,GAAaG,EAAb;AACD;;AAED,SAAOA,EAAP;AACD,CAlBD;AAoBA;;;;;;;;;AAOAL,SAAS,CAACO,QAAV,GAAqB,UAASL,KAAT,EAAgB;AACnC,MAAIJ,MAAM,GAAG,KAAKY,QAAL,CAAcR,KAAK,CAACC,KAApB,CAAb;AAAA,MACIQ,GAAG,GAAG,KAAKC,SAAL,CAAed,MAAf,EAAuBI,KAAvB,CADV;AAEAJ,EAAAA,MAAM,CAACe,KAAP;AACA,SAAOF,GAAP;AACD,CALD;AAOA;;;;;;;;;;AAQAX,SAAS,CAACY,SAAV,GAAsB,YAAW,CAAE,CAAnC","sourcesContent":["import Operator from './Operator';\nimport {inherits} from 'vega-util';\n\n/**\n * Abstract class for operators that process data tuples.\n * Subclasses must provide a {@link transform} method for operator processing.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {Operator} [source] - The operator from which to receive pulses.\n */\nexport default function Transform(init, params) {\n  Operator.call(this, init, null, params);\n}\n\nvar prototype = inherits(Transform, Operator);\n\n/**\n * Overrides {@link Operator.evaluate} for transform operators.\n * Internally, this method calls {@link evaluate} to perform processing.\n * If {@link evaluate} returns a falsy value, the input pulse is returned.\n * This method should NOT be overridden, instead overrride {@link evaluate}.\n * @param {Pulse} pulse - the current dataflow pulse.\n * @return the output pulse for this operator (or StopPropagation)\n */\nprototype.run = function(pulse) {\n  if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n\n  var rv;\n  if (this.skip()) {\n    this.skip(false);\n  } else {\n    rv = this.evaluate(pulse);\n  }\n  rv = rv || pulse;\n\n  if (rv.then) {\n    rv = rv.then(_ => this.pulse =_);\n  } else if (rv !== pulse.StopPropagation) {\n    this.pulse = rv;\n  }\n\n  return rv;\n};\n\n/**\n * Overrides {@link Operator.evaluate} for transform operators.\n * Marshalls parameter values and then invokes {@link transform}.\n * @param {Pulse} pulse - the current dataflow pulse.\n * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n     value (including undefined) will let the input pulse pass through.\n */\nprototype.evaluate = function(pulse) {\n  var params = this.marshall(pulse.stamp),\n      out = this.transform(params, pulse);\n  params.clear();\n  return out;\n};\n\n/**\n * Process incoming pulses.\n * Subclasses should override this method to implement transforms.\n * @param {Parameters} _ - The operator parameter values.\n * @param {Pulse} pulse - The current dataflow pulse.\n * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n *   value (including undefined) will let the input pulse pass through.\n */\nprototype.transform = function() {};\n"]},"metadata":{},"sourceType":"module"}