{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\p5ML\\\\P5Comp.js\";\nimport React, { Component } from \"react\";\nimport Sketch from \"react-p5\";\nimport * as ml5 from 'ml5';\nimport * as tfvis from '@tensorflow/tfjs-vis/';\nexport default class PComp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.x = 50;\n    this.y = 50;\n    this.targerLabel = 'C';\n    this.state = 'collection';\n\n    this.setup = (p5, canvasParentRef) => {\n      p5.createCanvas(500, 500).parent(canvasParentRef); // use parent to render canvas in this ref (without that p5 render this canvas outside your component)\n    };\n\n    this.options = {\n      inputs: ['x', 'y'],\n      outputs: ['label'],\n      task: 'classification',\n      debug: 'true'\n    };\n\n    this.draw = p5 => {\n      p5.background(0);\n      p5.ellipse(this.x, this.y, 70, 70); // NOTE: Do not use setState in draw function or in functions that is executed in draw function... pls use normal variables or class properties for this purposes\n\n      this.x++;\n    };\n\n    this.keyPressed = p5 => {\n      if (key == 't') {\n        state = 'training';\n        console.log('starting training');\n        model.normalizeData();\n        let options = {\n          epochs: 200\n        };\n        model.train(options, whileTraining, finishedTraining);\n      } else {\n        targetLabel = key.toUpperCase();\n      }\n    };\n\n    this.model = ml5.neuralNetwork(options);\n  }\n\n  render() {\n    //return <Sketch setup={this.setup} draw={this.draw} />;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/p5ML/P5Comp.js"],"names":["React","Component","Sketch","ml5","tfvis","PComp","x","y","targerLabel","state","setup","p5","canvasParentRef","createCanvas","parent","options","inputs","outputs","task","debug","draw","background","ellipse","keyPressed","key","console","log","model","normalizeData","epochs","train","whileTraining","finishedTraining","targetLabel","toUpperCase","neuralNetwork","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AAEA,eAAe,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC3CK,CAD2C,GACvC,EADuC;AAAA,SAE3CC,CAF2C,GAEvC,EAFuC;AAAA,SAI3CC,WAJ2C,GAI7B,GAJ6B;AAAA,SAK3CC,KAL2C,GAKnC,YALmC;;AAAA,SAO3CC,KAP2C,GAOnC,CAACC,EAAD,EAAKC,eAAL,KAAyB;AAC/BD,MAAAA,EAAE,CAACE,YAAH,CAAgB,GAAhB,EAAqB,GAArB,EAA0BC,MAA1B,CAAiCF,eAAjC,EAD+B,CACoB;AACpD,KAT0C;;AAAA,SAW3CG,OAX2C,GAWjC;AACRC,MAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN,CADA;AAERC,MAAAA,OAAO,EAAE,CAAC,OAAD,CAFD;AAGRC,MAAAA,IAAI,EAAE,gBAHE;AAIRC,MAAAA,KAAK,EAAE;AAJC,KAXiC;;AAAA,SAiB3CC,IAjB2C,GAiBpCT,EAAE,IAAI;AACXA,MAAAA,EAAE,CAACU,UAAH,CAAc,CAAd;AACAV,MAAAA,EAAE,CAACW,OAAH,CAAW,KAAKhB,CAAhB,EAAmB,KAAKC,CAAxB,EAA2B,EAA3B,EAA+B,EAA/B,EAFW,CAGX;;AACA,WAAKD,CAAL;AACD,KAtB0C;;AAAA,SAwB3CiB,UAxB2C,GAwB9BZ,EAAE,IAAI;AACjB,UAAIa,GAAG,IAAI,GAAX,EAAgB;AACZf,QAAAA,KAAK,GAAG,UAAR;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAC,QAAAA,KAAK,CAACC,aAAN;AACA,YAAIb,OAAO,GAAG;AACdc,UAAAA,MAAM,EAAE;AADM,SAAd;AAGAF,QAAAA,KAAK,CAACG,KAAN,CAAYf,OAAZ,EAAqBgB,aAArB,EAAoCC,gBAApC;AACH,OARD,MAQO;AACHC,QAAAA,WAAW,GAAGT,GAAG,CAACU,WAAJ,EAAd;AACH;AACF,KApC0C;;AAAA,SAwC3CP,KAxC2C,GAwCnCxB,GAAG,CAACgC,aAAJ,CAAkBpB,OAAlB,CAxCmC;AAAA;;AA2C3CqB,EAAAA,MAAM,GAAG;AACP;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AA9C4C","sourcesContent":["import React, { Component } from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport * as ml5 from 'ml5'\r\nimport * as tfvis from '@tensorflow/tfjs-vis/'\r\n \r\nexport default class PComp extends Component {\r\n  x = 50;\r\n  y = 50;\r\n  //model;\r\n  targerLabel = 'C'\r\n  state = 'collection'\r\n \r\n  setup = (p5, canvasParentRef) => {\r\n    p5.createCanvas(500, 500).parent(canvasParentRef); // use parent to render canvas in this ref (without that p5 render this canvas outside your component)\r\n  };\r\n\r\n  options = {\r\n    inputs: ['x', 'y'],\r\n    outputs: ['label'],\r\n    task: 'classification',\r\n    debug: 'true'\r\n  };\r\n  draw = p5 => {\r\n    p5.background(0);\r\n    p5.ellipse(this.x, this.y, 70, 70);\r\n    // NOTE: Do not use setState in draw function or in functions that is executed in draw function... pls use normal variables or class properties for this purposes\r\n    this.x++;\r\n  };\r\n\r\n  keyPressed = p5 => {\r\n    if (key == 't') {\r\n        state = 'training';\r\n        console.log('starting training');\r\n        model.normalizeData();\r\n        let options = {\r\n        epochs: 200\r\n        };\r\n        model.train(options, whileTraining, finishedTraining);\r\n    } else {\r\n        targetLabel = key.toUpperCase();\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  model = ml5.neuralNetwork(options);\r\n    \r\n \r\n  render() {\r\n    //return <Sketch setup={this.setup} draw={this.draw} />;\r\n    return <div></div>\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}