{"ast":null,"code":"import ols from './ols';\nimport { points } from './points';\nimport { median } from 'd3-array';\nconst maxiters = 2,\n      epsilon = 1e-12; // Adapted from science.js by Jason Davies\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\n\nexport default function (data, x, y, bandwidth) {\n  const [xv, yv, ux, uy] = points(data, x, y, true),\n        n = xv.length,\n        bw = Math.max(2, ~~(bandwidth * n)),\n        // # nearest neighbors\n  yhat = new Float64Array(n),\n        residuals = new Float64Array(n),\n        robustWeights = new Float64Array(n).fill(1);\n\n  for (let iter = -1; ++iter <= maxiters;) {\n    const interval = [0, bw - 1];\n\n    for (let i = 0; i < n; ++i) {\n      const dx = xv[i],\n            i0 = interval[0],\n            i1 = interval[1],\n            edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;\n      let W = 0,\n          X = 0,\n          Y = 0,\n          XY = 0,\n          X2 = 0,\n          denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n      for (let k = i0; k <= i1; ++k) {\n        const xk = xv[k],\n              yk = yv[k],\n              w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n              xkw = xk * w;\n        W += w;\n        X += xkw;\n        Y += yk * w;\n        XY += yk * xkw;\n        X2 += xk * xkw;\n      } // linear regression fit\n\n\n      const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n      yhat[i] = a + b * dx;\n      residuals[i] = Math.abs(yv[i] - yhat[i]);\n      updateInterval(xv, i + 1, interval);\n    }\n\n    if (iter === maxiters) {\n      break;\n    }\n\n    const medianResidual = median(residuals);\n    if (Math.abs(medianResidual) < epsilon) break;\n\n    for (let i = 0, arg, w; i < n; ++i) {\n      arg = residuals[i] / (6 * medianResidual); // default to epsilon (rather than zero) for large deviations\n      // keeping weights tiny but non-zero prevents singularites\n\n      robustWeights[i] = arg >= 1 ? epsilon : (w = 1 - arg * arg) * w;\n    }\n  }\n\n  return output(xv, yhat, ux, uy);\n} // weighting kernel for local regression\n\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n} // advance sliding window interval of nearest neighbors\n\n\nfunction updateInterval(xv, i, interval) {\n  let val = xv[i],\n      left = interval[0],\n      right = interval[1] + 1;\n  if (right >= xv.length) return; // step right if distance to new right edge is <= distance to old left edge\n  // step when distance is equal to ensure movement over duplicate x values\n\n  while (i > left && xv[right] - val <= val - xv[left]) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n} // generate smoothed output points\n// average points with repeated x values\n\n\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length,\n        out = [];\n  let i = 0,\n      cnt = 0,\n      prev = [],\n      v;\n\n  for (; i < n; ++i) {\n    v = xv[i] + ux;\n\n    if (prev[0] === v) {\n      // average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / ++cnt;\n    } else {\n      // add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n\n  prev[1] += uy;\n  return out;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-statistics/src/regression/loess.js"],"names":["ols","points","median","maxiters","epsilon","data","x","y","bandwidth","xv","yv","ux","uy","n","length","bw","Math","max","yhat","Float64Array","residuals","robustWeights","fill","iter","interval","i","dx","i0","i1","edge","W","X","Y","XY","X2","denom","abs","k","xk","yk","w","tricube","xkw","a","b","updateInterval","medianResidual","arg","output","val","left","right","out","cnt","prev","v","push"],"mappings":"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","sourcesContent":["import ols from './ols';\nimport {points} from './points';\nimport {median} from 'd3-array';\n\nconst maxiters = 2,\n      epsilon = 1e-12;\n\n// Adapted from science.js by Jason Davies\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\nexport default function(data, x, y, bandwidth) {\n  const [xv, yv, ux, uy] = points(data, x, y, true),\n        n = xv.length,\n        bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\n        yhat = new Float64Array(n),\n        residuals = new Float64Array(n),\n        robustWeights = new Float64Array(n).fill(1);\n\n  for (let iter = -1; ++iter <= maxiters; ) {\n    const interval = [0, bw - 1];\n\n    for (let i = 0; i < n; ++i) {\n      const dx = xv[i],\n            i0 = interval[0],\n            i1 = interval[1],\n            edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n\n      let W = 0, X = 0, Y = 0, XY = 0, X2 = 0,\n          denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n      for (let k = i0; k <= i1; ++k) {\n        const xk = xv[k],\n              yk = yv[k],\n              w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n              xkw = xk * w;\n\n        W += w;\n        X += xkw;\n        Y += yk * w;\n        XY += yk * xkw;\n        X2 += xk * xkw;\n      }\n\n      // linear regression fit\n      const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n      yhat[i] = a + b * dx;\n      residuals[i] = Math.abs(yv[i] - yhat[i]);\n\n      updateInterval(xv, i + 1, interval);\n    }\n\n    if (iter === maxiters) {\n      break;\n    }\n\n    const medianResidual = median(residuals);\n    if (Math.abs(medianResidual) < epsilon) break;\n\n    for (let i = 0, arg, w; i < n; ++i){\n      arg = residuals[i] / (6 * medianResidual);\n      // default to epsilon (rather than zero) for large deviations\n      // keeping weights tiny but non-zero prevents singularites\n      robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n    }\n  }\n\n  return output(xv, yhat, ux, uy);\n}\n\n// weighting kernel for local regression\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n}\n\n// advance sliding window interval of nearest neighbors\nfunction updateInterval(xv, i, interval) {\n  let val = xv[i],\n      left = interval[0],\n      right = interval[1] + 1;\n\n  if (right >= xv.length) return;\n\n  // step right if distance to new right edge is <= distance to old left edge\n  // step when distance is equal to ensure movement over duplicate x values\n  while (i > left && (xv[right] - val) <= (val - xv[left])) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n}\n\n// generate smoothed output points\n// average points with repeated x values\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length, out = [];\n  let i = 0, cnt = 0, prev = [], v;\n\n  for (; i<n; ++i) {\n    v = xv[i] + ux;\n    if (prev[0] === v) {\n      // average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / (++cnt);\n    } else {\n      // add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n  prev[1] += uy;\n\n  return out;\n}\n"]},"metadata":{},"sourceType":"module"}