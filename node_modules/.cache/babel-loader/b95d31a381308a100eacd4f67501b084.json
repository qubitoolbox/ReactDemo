{"ast":null,"code":"import React from \"react\";\nimport * as tf from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nexport default class NewMl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.xs = tf.randomUniform([10000, 200]);\n    this.ys = tf.randomUniform([10000, 1]);\n    this.valXs = tf.randomUniform([1000, 200]);\n    this.valYs = tf.randomUniform([1000, 1]);\n    model = tf.sequential();\n    model.add(tf.layers.dense({\n      units: 1,\n      inputShape: [200]\n    }));\n    model.compile({\n      loss: 'meanSquaredError',\n      optimizer: 'sgd',\n      metrics: ['MAE']\n    });\n  } // Generate some random fake data for demo purpose.\n\n\n  // Start model training process.\n  async train() {\n    await model.fit(xs, ys, {\n      epochs: 100,\n      validationData: [valXs, valYs] // Add the tensorBoard callback here.\n      //callbacks: tf.node.tensorBoard('/tmp/fit_logs_1')\n\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/NewML.js"],"names":["React","tf","mobilenet","NewMl","Component","constructor","props","xs","randomUniform","ys","valXs","valYs","model","sequential","add","layers","dense","units","inputShape","compile","loss","optimizer","metrics","train","fit","epochs","validationData"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;AAGA,eAAe,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAmC;AAE9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAWnBC,EAXmB,GAWdN,EAAE,CAACO,aAAH,CAAiB,CAAC,KAAD,EAAQ,GAAR,CAAjB,CAXc;AAAA,SAYnBC,EAZmB,GAYdR,EAAE,CAACO,aAAH,CAAiB,CAAC,KAAD,EAAQ,CAAR,CAAjB,CAZc;AAAA,SAanBE,KAbmB,GAaXT,EAAE,CAACO,aAAH,CAAiB,CAAC,IAAD,EAAO,GAAP,CAAjB,CAbW;AAAA,SAcnBG,KAdmB,GAcXV,EAAE,CAACO,aAAH,CAAiB,CAAC,IAAD,EAAO,CAAP,CAAjB,CAdW;AAEfI,IAAAA,KAAK,GAAGX,EAAE,CAACY,UAAH,EAAR;AACAD,IAAAA,KAAK,CAACE,GAAN,CAAUb,EAAE,CAACc,MAAH,CAAUC,KAAV,CAAgB;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,UAAU,EAAE,CAAC,GAAD;AAAxB,KAAhB,CAAV;AACAN,IAAAA,KAAK,CAACO,OAAN,CAAc;AACdC,MAAAA,IAAI,EAAE,kBADQ;AAEdC,MAAAA,SAAS,EAAE,KAFG;AAGdC,MAAAA,OAAO,EAAE,CAAC,KAAD;AAHK,KAAd;AAKD,GAX2C,CAY9C;;;AAOA;AACA,QAAMC,KAAN,GAAc;AACV,UAAMX,KAAK,CAACY,GAAN,CAAUjB,EAAV,EAAcE,EAAd,EAAkB;AACpBgB,MAAAA,MAAM,EAAE,GADY;AAEpBC,MAAAA,cAAc,EAAE,CAAChB,KAAD,EAAQC,KAAR,CAFI,CAGpB;AACA;;AAJoB,KAAlB,CAAN;AAMH;;AA3B6C","sourcesContent":["import React from \"react\";\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as mobilenet from '@tensorflow-models/mobilenet';\r\n\r\n\r\nexport default class NewMl extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        model = tf.sequential();\r\n        model.add(tf.layers.dense({ units: 1, inputShape: [200] }));\r\n        model.compile({\r\n        loss: 'meanSquaredError',\r\n        optimizer: 'sgd',\r\n        metrics: ['MAE']\r\n        });\r\n      }\r\n    // Generate some random fake data for demo purpose.\r\n    xs = tf.randomUniform([10000, 200]);\r\n    ys = tf.randomUniform([10000, 1]);\r\n    valXs = tf.randomUniform([1000, 200]);\r\n    valYs = tf.randomUniform([1000, 1]);\r\n\r\n\r\n    // Start model training process.\r\n    async train() {\r\n        await model.fit(xs, ys, {\r\n            epochs: 100,\r\n            validationData: [valXs, valYs],\r\n            // Add the tensorBoard callback here.\r\n            //callbacks: tf.node.tensorBoard('/tmp/fit_logs_1')\r\n        });\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}