{"ast":null,"code":"import { geoAlbers, geoAlbersUsa, geoAzimuthalEqualArea, geoAzimuthalEquidistant, geoConicConformal, geoConicEqualArea, geoConicEquidistant, geoEqualEarth, geoEquirectangular, geoGnomonic, geoIdentity, geoMercator, geoNaturalEarth1, geoOrthographic, geoStereographic, geoTransverseMercator, geoPath } from 'd3-geo';\nimport { geoMollweide } from 'd3-geo-projection';\nvar defaultPath = geoPath();\nexport var projectionProperties = [// standard properties in d3-geo\n'clipAngle', 'clipExtent', 'scale', 'translate', 'center', 'rotate', 'parallels', 'precision', 'reflectX', 'reflectY', // extended properties in d3-geo-projections\n'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];\n/**\n * Augment projections with their type and a copy method.\n */\n\nfunction create(type, constructor) {\n  return function projection() {\n    var p = constructor();\n    p.type = type;\n    p.path = geoPath().projection(p);\n\n    p.copy = p.copy || function () {\n      var c = projection();\n      projectionProperties.forEach(function (prop) {\n        if (p[prop]) c[prop](p[prop]());\n      });\n      c.path.pointRadius(p.path.pointRadius());\n      return c;\n    };\n\n    return p;\n  };\n}\n\nexport function projection(type, proj) {\n  if (!type || typeof type !== 'string') {\n    throw new Error('Projection type must be a name string.');\n  }\n\n  type = type.toLowerCase();\n\n  if (arguments.length > 1) {\n    projections[type] = create(type, proj);\n    return this;\n  } else {\n    return projections[type] || null;\n  }\n}\nexport function getProjectionPath(proj) {\n  return proj && proj.path || defaultPath;\n}\nvar projections = {\n  // base d3-geo projection types\n  albers: geoAlbers,\n  albersusa: geoAlbersUsa,\n  azimuthalequalarea: geoAzimuthalEqualArea,\n  azimuthalequidistant: geoAzimuthalEquidistant,\n  conicconformal: geoConicConformal,\n  conicequalarea: geoConicEqualArea,\n  conicequidistant: geoConicEquidistant,\n  equalEarth: geoEqualEarth,\n  equirectangular: geoEquirectangular,\n  gnomonic: geoGnomonic,\n  identity: geoIdentity,\n  mercator: geoMercator,\n  mollweide: geoMollweide,\n  naturalEarth1: geoNaturalEarth1,\n  orthographic: geoOrthographic,\n  stereographic: geoStereographic,\n  transversemercator: geoTransverseMercator\n};\n\nfor (var key in projections) {\n  projection(key, projections[key]);\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-projection/src/projections.js"],"names":["geoAlbers","geoAlbersUsa","geoAzimuthalEqualArea","geoAzimuthalEquidistant","geoConicConformal","geoConicEqualArea","geoConicEquidistant","geoEqualEarth","geoEquirectangular","geoGnomonic","geoIdentity","geoMercator","geoNaturalEarth1","geoOrthographic","geoStereographic","geoTransverseMercator","geoPath","geoMollweide","defaultPath","projectionProperties","create","type","constructor","projection","p","path","copy","c","forEach","prop","pointRadius","proj","Error","toLowerCase","arguments","length","projections","getProjectionPath","albers","albersusa","azimuthalequalarea","azimuthalequidistant","conicconformal","conicequalarea","conicequidistant","equalEarth","equirectangular","gnomonic","identity","mercator","mollweide","naturalEarth1","orthographic","stereographic","transversemercator","key"],"mappings":"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","sourcesContent":["import {\n  geoAlbers,\n  geoAlbersUsa,\n  geoAzimuthalEqualArea,\n  geoAzimuthalEquidistant,\n  geoConicConformal,\n  geoConicEqualArea,\n  geoConicEquidistant,\n  geoEqualEarth,\n  geoEquirectangular,\n  geoGnomonic,\n  geoIdentity,\n  geoMercator,\n  geoNaturalEarth1,\n  geoOrthographic,\n  geoStereographic,\n  geoTransverseMercator,\n  geoPath\n} from 'd3-geo';\n\nimport {\n  geoMollweide\n} from 'd3-geo-projection';\n\nvar defaultPath = geoPath();\n\nexport var projectionProperties = [\n  // standard properties in d3-geo\n  'clipAngle',\n  'clipExtent',\n  'scale',\n  'translate',\n  'center',\n  'rotate',\n  'parallels',\n  'precision',\n  'reflectX',\n  'reflectY',\n\n  // extended properties in d3-geo-projections\n  'coefficient',\n  'distance',\n  'fraction',\n  'lobes',\n  'parallel',\n  'radius',\n  'ratio',\n  'spacing',\n  'tilt'\n];\n\n/**\n * Augment projections with their type and a copy method.\n */\nfunction create(type, constructor) {\n  return function projection() {\n    var p = constructor();\n\n    p.type = type;\n\n    p.path = geoPath().projection(p);\n\n    p.copy = p.copy || function() {\n      var c = projection();\n      projectionProperties.forEach(function(prop) {\n        if (p[prop]) c[prop](p[prop]());\n      });\n      c.path.pointRadius(p.path.pointRadius());\n      return c;\n    };\n\n    return p;\n  };\n}\n\nexport function projection(type, proj) {\n  if (!type || typeof type !== 'string') {\n    throw new Error('Projection type must be a name string.');\n  }\n  type = type.toLowerCase();\n  if (arguments.length > 1) {\n    projections[type] = create(type, proj);\n    return this;\n  } else {\n    return projections[type] || null;\n  }\n}\n\nexport function getProjectionPath(proj) {\n  return (proj && proj.path) || defaultPath;\n}\n\nvar projections = {\n  // base d3-geo projection types\n  albers:               geoAlbers,\n  albersusa:            geoAlbersUsa,\n  azimuthalequalarea:   geoAzimuthalEqualArea,\n  azimuthalequidistant: geoAzimuthalEquidistant,\n  conicconformal:       geoConicConformal,\n  conicequalarea:       geoConicEqualArea,\n  conicequidistant:     geoConicEquidistant,\n  equalEarth:           geoEqualEarth,\n  equirectangular:      geoEquirectangular,\n  gnomonic:             geoGnomonic,\n  identity:             geoIdentity,\n  mercator:             geoMercator,\n  mollweide:            geoMollweide,\n  naturalEarth1:        geoNaturalEarth1,\n  orthographic:         geoOrthographic,\n  stereographic:        geoStereographic,\n  transversemercator:   geoTransverseMercator\n};\n\nfor (var key in projections) {\n  projection(key, projections[key]);\n}\n"]},"metadata":{},"sourceType":"module"}