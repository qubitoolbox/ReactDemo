{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as log from '../log';\nimport { isConcatSpec, isHConcatSpec, isVConcatSpec } from './concat';\nimport { isFacetSpec } from './facet';\nimport { isLayerSpec } from './layer';\nimport { isRepeatSpec } from './repeat';\nimport { isUnitSpec } from './unit';\nexport class SpecMapper {\n  map(spec, params) {\n    if (isFacetSpec(spec)) {\n      return this.mapFacet(spec, params);\n    } else if (isRepeatSpec(spec)) {\n      return this.mapRepeat(spec, params);\n    } else if (isHConcatSpec(spec)) {\n      return this.mapHConcat(spec, params);\n    } else if (isVConcatSpec(spec)) {\n      return this.mapVConcat(spec, params);\n    } else if (isConcatSpec(spec)) {\n      return this.mapConcat(spec, params);\n    } else {\n      return this.mapLayerOrUnit(spec, params);\n    }\n  }\n\n  mapLayerOrUnit(spec, params) {\n    if (isLayerSpec(spec)) {\n      return this.mapLayer(spec, params);\n    } else if (isUnitSpec(spec)) {\n      return this.mapUnit(spec, params);\n    }\n\n    throw new Error(log.message.invalidSpec(spec));\n  }\n\n  mapLayer(spec, params) {\n    return Object.assign(Object.assign({}, spec), {\n      layer: spec.layer.map(subspec => this.mapLayerOrUnit(subspec, params))\n    });\n  }\n\n  mapHConcat(spec, params) {\n    return Object.assign(Object.assign({}, spec), {\n      hconcat: spec.hconcat.map(subspec => this.map(subspec, params))\n    });\n  }\n\n  mapVConcat(spec, params) {\n    return Object.assign(Object.assign({}, spec), {\n      vconcat: spec.vconcat.map(subspec => this.map(subspec, params))\n    });\n  }\n\n  mapConcat(spec, params) {\n    const {\n      concat\n    } = spec,\n          rest = __rest(spec, [\"concat\"]);\n\n    return Object.assign(Object.assign({}, rest), {\n      concat: concat.map(subspec => this.map(subspec, params))\n    });\n  }\n\n  mapFacet(spec, params) {\n    return Object.assign(Object.assign({}, spec), {\n      // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n      spec: this.map(spec.spec, params)\n    });\n  }\n\n  mapRepeat(spec, params) {\n    return Object.assign(Object.assign({}, spec), {\n      spec: this.map(spec.spec, params)\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/spec/map.ts"],"names":[],"mappings":"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","sourcesContent":["import * as log from '../log';\nimport {\n  GenericConcatSpec,\n  GenericHConcatSpec,\n  GenericVConcatSpec,\n  isConcatSpec,\n  isHConcatSpec,\n  isVConcatSpec\n} from './concat';\nimport {GenericFacetSpec, isFacetSpec} from './facet';\nimport {GenericSpec} from '.';\nimport {GenericLayerSpec, isLayerSpec} from './layer';\nimport {GenericRepeatSpec, isRepeatSpec} from './repeat';\nimport {GenericUnitSpec, isUnitSpec, NormalizedUnitSpec} from './unit';\n\nexport abstract class SpecMapper<\n  P,\n  UI extends GenericUnitSpec<any, any>,\n  LI extends GenericLayerSpec<any> = GenericLayerSpec<UI>,\n  UO extends GenericUnitSpec<any, any> = NormalizedUnitSpec\n> {\n  public map(spec: GenericSpec<UI, LI>, params: P): GenericSpec<UO, GenericLayerSpec<UO>> {\n    if (isFacetSpec(spec)) {\n      return this.mapFacet(spec, params);\n    } else if (isRepeatSpec(spec)) {\n      return this.mapRepeat(spec, params);\n    } else if (isHConcatSpec(spec)) {\n      return this.mapHConcat(spec, params);\n    } else if (isVConcatSpec(spec)) {\n      return this.mapVConcat(spec, params);\n    } else if (isConcatSpec(spec)) {\n      return this.mapConcat(spec, params);\n    } else {\n      return this.mapLayerOrUnit(spec, params);\n    }\n  }\n\n  public mapLayerOrUnit(spec: UI | LI, params: P): UO | GenericLayerSpec<UO> {\n    if (isLayerSpec(spec)) {\n      return this.mapLayer(spec, params);\n    } else if (isUnitSpec(spec)) {\n      return this.mapUnit(spec, params);\n    }\n    throw new Error(log.message.invalidSpec(spec));\n  }\n\n  public abstract mapUnit(spec: UI, params: P): UO | GenericLayerSpec<UO>;\n\n  protected mapLayer(spec: LI, params: P): GenericLayerSpec<UO> {\n    return {\n      ...spec,\n      layer: spec.layer.map(subspec => this.mapLayerOrUnit(subspec, params))\n    };\n  }\n\n  protected mapHConcat(spec: GenericHConcatSpec<UI, LI>, params: P): GenericHConcatSpec<UO, GenericLayerSpec<UO>> {\n    return {\n      ...spec,\n      hconcat: spec.hconcat.map(subspec => this.map(subspec, params))\n    };\n  }\n\n  protected mapVConcat(spec: GenericVConcatSpec<UI, LI>, params: P): GenericVConcatSpec<UO, GenericLayerSpec<UO>> {\n    return {\n      ...spec,\n      vconcat: spec.vconcat.map(subspec => this.map(subspec, params))\n    };\n  }\n\n  protected mapConcat(spec: GenericConcatSpec<UI, LI>, params: P): GenericConcatSpec<UO, GenericLayerSpec<UO>> {\n    const {concat, ...rest} = spec;\n\n    return {\n      ...rest,\n      concat: concat.map(subspec => this.map(subspec, params))\n    };\n  }\n\n  protected mapFacet(spec: GenericFacetSpec<UI, LI>, params: P): GenericFacetSpec<UO, GenericLayerSpec<UO>> {\n    return {\n      ...spec,\n      // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n      spec: this.map(spec.spec, params) as any\n    };\n  }\n\n  protected mapRepeat(spec: GenericRepeatSpec<UI, LI>, params: P): GenericRepeatSpec<UO, GenericLayerSpec<UO>> {\n    return {\n      ...spec,\n      spec: this.map(spec.spec, params)\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}