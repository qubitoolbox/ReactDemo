{"ast":null,"code":"/**\n * Invoke and await a potentially async callback function. If\n * an error occurs, trap it and route to Dataflow.error.\n * @param {Dataflow} df - The dataflow instance\n * @param {function} callback - A callback function to invoke\n *   and then await. The dataflow will be passed as the single\n *   argument to the function.\n */\nexport default async function (df, callback) {\n  try {\n    await callback(df);\n  } catch (err) {\n    df.error(err);\n  }\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-dataflow/src/util/asyncCallback.js"],"names":["df","callback","err","error"],"mappings":"AAAA;;;;;;;;AAQA,eAAe,gBAAeA,EAAf,EAAmBC,QAAnB,EAA6B;AAC1C,MAAI;AAAE,UAAMA,QAAQ,CAACD,EAAD,CAAd;AAAqB,GAA3B,CAA4B,OAAOE,GAAP,EAAY;AAAEF,IAAAA,EAAE,CAACG,KAAH,CAASD,GAAT;AAAgB;AAC3D","sourcesContent":["/**\n * Invoke and await a potentially async callback function. If\n * an error occurs, trap it and route to Dataflow.error.\n * @param {Dataflow} df - The dataflow instance\n * @param {function} callback - A callback function to invoke\n *   and then await. The dataflow will be passed as the single\n *   argument to the function.\n */\nexport default async function(df, callback) {\n  try { await callback(df); } catch (err) { df.error(err); }\n}\n"]},"metadata":{},"sourceType":"module"}