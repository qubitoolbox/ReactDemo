{"ast":null,"code":"import { getSizeType, POSITION_SCALE_CHANNELS } from '../../channel';\nimport { getFieldDef, isContinuous } from '../../channeldef';\nimport * as log from '../../log';\nimport { isStep } from '../../spec/base';\nexport function initLayoutSize({\n  encoding,\n  size\n}) {\n  for (const channel of POSITION_SCALE_CHANNELS) {\n    const sizeType = getSizeType(channel);\n    const fieldDef = getFieldDef(encoding[channel]);\n\n    if (isStep(size[sizeType])) {\n      if (fieldDef) {\n        if (isContinuous(fieldDef)) {\n          delete size[sizeType];\n          log.warn(log.message.stepDropped(sizeType));\n        }\n      }\n    }\n  }\n\n  return size;\n}","map":{"version":3,"sources":["../../../../src/compile/layoutsize/init.ts"],"names":[],"mappings":"AAAA,SAAQ,WAAR,EAAqB,uBAArB,QAAmD,eAAnD;AACA,SAAQ,WAAR,EAAqB,YAArB,QAA0D,kBAA1D;AAEA,OAAO,KAAK,GAAZ,MAAqB,WAArB;AACA,SAAQ,MAAR,QAAuC,iBAAvC;AAEA,OAAM,SAAU,cAAV,CAAyB;AAAC,EAAA,QAAD;AAAW,EAAA;AAAX,CAAzB,EAA+F;AACnG,OAAK,MAAM,OAAX,IAAsB,uBAAtB,EAA+C;AAC7C,UAAM,QAAQ,GAAG,WAAW,CAAC,OAAD,CAA5B;AACA,UAAM,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,OAAD,CAAT,CAA5B;;AACA,QAAI,MAAM,CAAC,IAAI,CAAC,QAAD,CAAL,CAAV,EAA4B;AAC1B,UAAI,QAAJ,EAAc;AACZ,YAAI,YAAY,CAAC,QAAD,CAAhB,EAA4B;AAC1B,iBAAO,IAAI,CAAC,QAAD,CAAX;AACA,UAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,WAAZ,CAAwB,QAAxB,CAAT;AACD;AACF;AACF;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["import {getSizeType, POSITION_SCALE_CHANNELS} from '../../channel';\nimport {getFieldDef, isContinuous, PositionFieldDef} from '../../channeldef';\nimport {Encoding} from '../../encoding';\nimport * as log from '../../log';\nimport {isStep, LayoutSizeMixins} from '../../spec/base';\n\nexport function initLayoutSize({encoding, size}: {encoding: Encoding<string>; size: LayoutSizeMixins}) {\n  for (const channel of POSITION_SCALE_CHANNELS) {\n    const sizeType = getSizeType(channel);\n    const fieldDef = getFieldDef(encoding[channel]) as PositionFieldDef<string>;\n    if (isStep(size[sizeType])) {\n      if (fieldDef) {\n        if (isContinuous(fieldDef)) {\n          delete size[sizeType];\n          log.warn(log.message.stepDropped(sizeType));\n        }\n      }\n    }\n  }\n\n  return size;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}