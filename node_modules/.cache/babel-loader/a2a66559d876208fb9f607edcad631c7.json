{"ast":null,"code":"import { isString } from 'vega-util';\nimport { fieldFilterExpression, isSelectionPredicate } from '../predicate';\nimport { logicalExpr } from '../util';\nimport { parseSelectionPredicate } from './selection/parse';\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\n\nexport function expression(model, filterOp, node) {\n  return logicalExpr(filterOp, predicate => {\n    if (isString(predicate)) {\n      return predicate;\n    } else if (isSelectionPredicate(predicate)) {\n      return parseSelectionPredicate(model, predicate.selection, node);\n    } else {\n      // Filter Object\n      return fieldFilterExpression(predicate);\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/compile/predicate.ts"],"names":[],"mappings":"AAAA,SAAQ,QAAR,QAAuB,WAAvB;AAEA,SAAQ,qBAAR,EAA+B,oBAA/B,QAAqE,cAArE;AACA,SAAQ,WAAR,QAA0B,SAA1B;AAGA,SAAQ,uBAAR,QAAsC,mBAAtC;AAEA;;;AAGA;;AACA,OAAM,SAAU,UAAV,CAAqB,KAArB,EAAmC,QAAnC,EAAwE,IAAxE,EAA2F;AAC/F,SAAO,WAAW,CAAC,QAAD,EAAY,SAAD,IAAyB;AACpD,QAAI,QAAQ,CAAC,SAAD,CAAZ,EAAyB;AACvB,aAAO,SAAP;AACD,KAFD,MAEO,IAAI,oBAAoB,CAAC,SAAD,CAAxB,EAAqC;AAC1C,aAAO,uBAAuB,CAAC,KAAD,EAAQ,SAAS,CAAC,SAAlB,EAA6B,IAA7B,CAA9B;AACD,KAFM,MAEA;AACL;AACA,aAAO,qBAAqB,CAAC,SAAD,CAA5B;AACD;AACF,GATiB,CAAlB;AAUD","sourcesContent":["import {isString} from 'vega-util';\nimport {LogicalOperand} from '../logical';\nimport {fieldFilterExpression, isSelectionPredicate, Predicate} from '../predicate';\nimport {logicalExpr} from '../util';\nimport {DataFlowNode} from './data/dataflow';\nimport {Model} from './model';\nimport {parseSelectionPredicate} from './selection/parse';\n\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\nexport function expression(model: Model, filterOp: LogicalOperand<Predicate>, node?: DataFlowNode): string {\n  return logicalExpr(filterOp, (predicate: Predicate) => {\n    if (isString(predicate)) {\n      return predicate;\n    } else if (isSelectionPredicate(predicate)) {\n      return parseSelectionPredicate(model, predicate.selection, node);\n    } else {\n      // Filter Object\n      return fieldFilterExpression(predicate);\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}