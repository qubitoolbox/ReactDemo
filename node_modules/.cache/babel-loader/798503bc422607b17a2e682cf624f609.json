{"ast":null,"code":"export default function (compare, array0, array1, output) {\n  var n0 = array0.length,\n      n1 = array1.length;\n  if (!n1) return array0;\n  if (!n0) return array1;\n  var merged = output || new array0.constructor(n0 + n1),\n      i0 = 0,\n      i1 = 0,\n      i = 0;\n\n  for (; i0 < n0 && i1 < n1; ++i) {\n    merged[i] = compare(array0[i0], array1[i1]) > 0 ? array1[i1++] : array0[i0++];\n  }\n\n  for (; i0 < n0; ++i0, ++i) {\n    merged[i] = array0[i0];\n  }\n\n  for (; i1 < n1; ++i1, ++i) {\n    merged[i] = array1[i1];\n  }\n\n  return merged;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-util/src/merge.js"],"names":["compare","array0","array1","output","n0","length","n1","merged","constructor","i0","i1","i"],"mappings":"AAAA,eAAe,UAASA,OAAT,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,MAAlC,EAA0C;AACvD,MAAIC,EAAE,GAAGH,MAAM,CAACI,MAAhB;AAAA,MACIC,EAAE,GAAGJ,MAAM,CAACG,MADhB;AAGA,MAAI,CAACC,EAAL,EAAS,OAAOL,MAAP;AACT,MAAI,CAACG,EAAL,EAAS,OAAOF,MAAP;AAET,MAAIK,MAAM,GAAGJ,MAAM,IAAI,IAAIF,MAAM,CAACO,WAAX,CAAuBJ,EAAE,GAAGE,EAA5B,CAAvB;AAAA,MACIG,EAAE,GAAG,CADT;AAAA,MACYC,EAAE,GAAG,CADjB;AAAA,MACoBC,CAAC,GAAG,CADxB;;AAGA,SAAOF,EAAE,GAACL,EAAH,IAASM,EAAE,GAACJ,EAAnB,EAAuB,EAAEK,CAAzB,EAA4B;AAC1BJ,IAAAA,MAAM,CAACI,CAAD,CAAN,GAAYX,OAAO,CAACC,MAAM,CAACQ,EAAD,CAAP,EAAaP,MAAM,CAACQ,EAAD,CAAnB,CAAP,GAAkC,CAAlC,GACPR,MAAM,CAACQ,EAAE,EAAH,CADC,GAEPT,MAAM,CAACQ,EAAE,EAAH,CAFX;AAGD;;AAED,SAAOA,EAAE,GAACL,EAAV,EAAc,EAAEK,EAAF,EAAM,EAAEE,CAAtB,EAAyB;AACvBJ,IAAAA,MAAM,CAACI,CAAD,CAAN,GAAYV,MAAM,CAACQ,EAAD,CAAlB;AACD;;AAED,SAAOC,EAAE,GAACJ,EAAV,EAAc,EAAEI,EAAF,EAAM,EAAEC,CAAtB,EAAyB;AACvBJ,IAAAA,MAAM,CAACI,CAAD,CAAN,GAAYT,MAAM,CAACQ,EAAD,CAAlB;AACD;;AAED,SAAOH,MAAP;AACD","sourcesContent":["export default function(compare, array0, array1, output) {\n  var n0 = array0.length,\n      n1 = array1.length;\n\n  if (!n1) return array0;\n  if (!n0) return array1;\n\n  var merged = output || new array0.constructor(n0 + n1),\n      i0 = 0, i1 = 0, i = 0;\n\n  for (; i0<n0 && i1<n1; ++i) {\n    merged[i] = compare(array0[i0], array1[i1]) > 0\n       ? array1[i1++]\n       : array0[i0++];\n  }\n\n  for (; i0<n0; ++i0, ++i) {\n    merged[i] = array0[i0];\n  }\n\n  for (; i1<n1; ++i1, ++i) {\n    merged[i] = array1[i1];\n  }\n\n  return merged;\n}\n"]},"metadata":{},"sourceType":"module"}