{"ast":null,"code":"import { isString, mergeConfig } from 'vega-util';\nimport { getPositionScaleChannel } from '../channel';\nimport * as vlFieldDef from '../channeldef';\nimport { initConfig, stripAndRedirectConfig } from '../config';\nimport * as log from '../log';\nimport { normalize } from '../normalize';\nimport { extractTopLevelProperties, getFitType, isFitType } from '../spec/toplevel';\nimport { keys } from '../util';\nimport { buildModel } from './buildmodel';\nimport { assembleRootData } from './data/assemble';\nimport { optimizeDataflow } from './data/optimize';\n/**\n * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n *\n * @param inputSpec The Vega-Lite specification.\n * @param opt       Optional arguments passed to the Vega-Lite compiler.\n * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.\n */\n\nexport function compile(inputSpec, opt = {}) {\n  // 0. Augment opt with default opts\n  if (opt.logger) {\n    // set the singleton logger to the provided logger\n    log.set(opt.logger);\n  }\n\n  if (opt.fieldTitle) {\n    // set the singleton field title formatter\n    vlFieldDef.setTitleFormatter(opt.fieldTitle);\n  }\n\n  try {\n    // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n    const config = initConfig(mergeConfig({}, opt.config, inputSpec.config)); // 2. Normalize: Convert input spec -> normalized spec\n    // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n    // - Normalize autosize and width or height spec\n\n    const spec = normalize(inputSpec, config); // 3. Build Model: normalized spec -> Model (a tree structure)\n    // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n    // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, RepeatModel, ConcatModel) for different types of models.\n\n    const model = buildModel(spec, null, '', undefined, undefined, config); // 4 Parse: Model --> Model with components\n    // Note that components = intermediate representations that are equivalent to Vega specs.\n    // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n    // We will later convert these components into actual Vega specs in the assemble phase.\n    // In this phase, we do a bottom-up traversal over the whole tree to\n    // parse for each type of components once (e.g., data, layout, mark, scale).\n    // By doing bottom-up traversal, we start parsing components of unit specs and\n    // then merge child components of parent composite specs.\n    //\n    // Please see inside model.parse() for order of different components parsed.\n\n    model.parse(); // draw(model.component.data.sources);\n    // 5. Optimize the dataflow. This will modify the data component of the model.\n\n    optimizeDataflow(model.component.data, model); // 6. Assemble: convert model components --> Vega Spec.\n\n    const vgSpec = assembleTopLevelModel(model, getTopLevelProperties(inputSpec, spec.autosize, config, model), inputSpec.datasets, inputSpec.usermeta);\n    return {\n      spec: vgSpec,\n      normalized: spec\n    };\n  } finally {\n    // Reset the singleton logger if a logger is provided\n    if (opt.logger) {\n      log.reset();\n    } // Reset the singleton field title formatter if provided\n\n\n    if (opt.fieldTitle) {\n      vlFieldDef.resetTitleFormatter();\n    }\n  }\n}\n\nfunction getTopLevelProperties(inputSpec, autosize, config, model) {\n  const width = model.component.layoutSize.get('width');\n  const height = model.component.layoutSize.get('height');\n\n  if (autosize === undefined) {\n    autosize = {\n      type: 'pad'\n    };\n  } else if (isString(autosize)) {\n    autosize = {\n      type: autosize\n    };\n  }\n\n  if (width && height && isFitType(autosize.type)) {\n    if (width === 'step' && height === 'step') {\n      log.warn(log.message.droppingFit());\n      autosize.type = 'pad';\n    } else if (width === 'step' || height === 'step') {\n      // effectively XOR, because else if\n      // get step dimension\n      const sizeType = width === 'step' ? 'width' : 'height'; // log that we're dropping fit for respective channel\n\n      log.warn(log.message.droppingFit(getPositionScaleChannel(sizeType))); // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)\n\n      const inverseSizeType = sizeType === 'width' ? 'height' : 'width';\n      autosize.type = getFitType(inverseSizeType);\n    }\n  }\n\n  return Object.assign(Object.assign(Object.assign({}, keys(autosize).length === 1 && autosize.type ? autosize.type === 'pad' ? {} : {\n    autosize: autosize.type\n  } : {\n    autosize\n  }), extractTopLevelProperties(config)), extractTopLevelProperties(inputSpec));\n}\n/*\n * Assemble the top-level model to a Vega spec.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\n\n\nfunction assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {\n  // Config with Vega-Lite only config removed.\n  const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n  const data = [].concat(model.assembleSelectionData([]), // only assemble data in the root\n  assembleRootData(model.component.data, datasets));\n  const projections = model.assembleProjections();\n  const title = model.assembleTitle();\n  const style = model.assembleGroupStyle();\n  const encodeEntry = model.assembleGroupEncodeEntry(true);\n  let layoutSignals = model.assembleLayoutSignals(); // move width and height signals with values to top level\n\n  layoutSignals = layoutSignals.filter(signal => {\n    if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n      topLevelProperties[signal.name] = +signal.value;\n      return false;\n    }\n\n    return true;\n  });\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    $schema: 'https://vega.github.io/schema/vega/v5.json'\n  }, model.description ? {\n    description: model.description\n  } : {}), topLevelProperties), title ? {\n    title\n  } : {}), style ? {\n    style\n  } : {}), encodeEntry ? {\n    encode: {\n      update: encodeEntry\n    }\n  } : {}), {\n    data\n  }), projections.length > 0 ? {\n    projections: projections\n  } : {}), model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([])])), vgConfig ? {\n    config: vgConfig\n  } : {}), usermeta ? {\n    usermeta\n  } : {});\n}","map":{"version":3,"sources":["../../../src/compile/compile.ts"],"names":[],"mappings":"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","sourcesContent":["import {AutoSizeType, LoggerInterface, Spec as VgSpec} from 'vega';\nimport {isString, mergeConfig} from 'vega-util';\nimport {getPositionScaleChannel} from '../channel';\nimport * as vlFieldDef from '../channeldef';\nimport {initConfig, stripAndRedirectConfig} from '../config';\nimport * as log from '../log';\nimport {normalize} from '../normalize';\nimport {LayoutSizeMixins, TopLevel, TopLevelSpec} from '../spec';\nimport {\n  AutoSizeParams,\n  Datasets,\n  extractTopLevelProperties,\n  getFitType,\n  isFitType,\n  TopLevelProperties\n} from '../spec/toplevel';\nimport {keys} from '../util';\nimport {Config} from './../config';\nimport {buildModel} from './buildmodel';\nimport {assembleRootData} from './data/assemble';\nimport {optimizeDataflow} from './data/optimize';\nimport {Model} from './model';\n\n// import {draw} from './data/debug';\n\nexport interface CompileOptions {\n  /**\n   * Sets a Vega-Lite configuration.\n   */\n  config?: Config;\n\n  /**\n   * Sets a custom logger.\n   */\n  logger?: LoggerInterface;\n\n  /**\n   * Sets a field title formatter.\n   */\n  fieldTitle?: vlFieldDef.FieldTitleFormatter;\n}\n\n/**\n * Vega-Lite's main function, for compiling Vega-Lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n *\n * @param inputSpec The Vega-Lite specification.\n * @param opt       Optional arguments passed to the Vega-Lite compiler.\n * @returns         An object containing the compiled Vega spec and normalized Vega-Lite spec.\n */\nexport function compile(inputSpec: TopLevelSpec, opt: CompileOptions = {}) {\n  // 0. Augment opt with default opts\n  if (opt.logger) {\n    // set the singleton logger to the provided logger\n    log.set(opt.logger);\n  }\n\n  if (opt.fieldTitle) {\n    // set the singleton field title formatter\n    vlFieldDef.setTitleFormatter(opt.fieldTitle);\n  }\n\n  try {\n    // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n    const config = initConfig(mergeConfig({}, opt.config, inputSpec.config));\n\n    // 2. Normalize: Convert input spec -> normalized spec\n\n    // - Decompose all extended unit specs into composition of unit spec. For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n    // - Normalize autosize and width or height spec\n    const spec = normalize(inputSpec, config);\n\n    // 3. Build Model: normalized spec -> Model (a tree structure)\n\n    // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n    // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, RepeatModel, ConcatModel) for different types of models.\n    const model: Model = buildModel(spec, null, '', undefined, undefined, config);\n\n    // 4 Parse: Model --> Model with components\n\n    // Note that components = intermediate representations that are equivalent to Vega specs.\n    // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n    // We will later convert these components into actual Vega specs in the assemble phase.\n\n    // In this phase, we do a bottom-up traversal over the whole tree to\n    // parse for each type of components once (e.g., data, layout, mark, scale).\n    // By doing bottom-up traversal, we start parsing components of unit specs and\n    // then merge child components of parent composite specs.\n    //\n    // Please see inside model.parse() for order of different components parsed.\n    model.parse();\n\n    // draw(model.component.data.sources);\n\n    // 5. Optimize the dataflow. This will modify the data component of the model.\n    optimizeDataflow(model.component.data, model);\n\n    // 6. Assemble: convert model components --> Vega Spec.\n    const vgSpec = assembleTopLevelModel(\n      model,\n      getTopLevelProperties(inputSpec, spec.autosize, config, model),\n      inputSpec.datasets,\n      inputSpec.usermeta\n    );\n\n    return {\n      spec: vgSpec,\n      normalized: spec\n    };\n  } finally {\n    // Reset the singleton logger if a logger is provided\n    if (opt.logger) {\n      log.reset();\n    }\n    // Reset the singleton field title formatter if provided\n    if (opt.fieldTitle) {\n      vlFieldDef.resetTitleFormatter();\n    }\n  }\n}\n\nfunction getTopLevelProperties(\n  inputSpec: TopLevel<any>,\n  autosize: AutoSizeType | AutoSizeParams,\n  config: Config,\n  model: Model\n) {\n  const width = model.component.layoutSize.get('width');\n  const height = model.component.layoutSize.get('height');\n  if (autosize === undefined) {\n    autosize = {type: 'pad'};\n  } else if (isString(autosize)) {\n    autosize = {type: autosize};\n  }\n  if (width && height && isFitType(autosize.type)) {\n    if (width === 'step' && height === 'step') {\n      log.warn(log.message.droppingFit());\n      autosize.type = 'pad';\n    } else if (width === 'step' || height === 'step') {\n      // effectively XOR, because else if\n\n      // get step dimension\n      const sizeType = width === 'step' ? 'width' : 'height';\n      // log that we're dropping fit for respective channel\n      log.warn(log.message.droppingFit(getPositionScaleChannel(sizeType)));\n\n      // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)\n      const inverseSizeType = sizeType === 'width' ? 'height' : 'width';\n      autosize.type = getFitType(inverseSizeType);\n    }\n  }\n\n  return {\n    ...(keys(autosize).length === 1 && autosize.type\n      ? autosize.type === 'pad'\n        ? {}\n        : {autosize: autosize.type}\n      : {autosize}),\n    ...extractTopLevelProperties(config),\n    ...extractTopLevelProperties(inputSpec)\n  };\n}\n\n/*\n * Assemble the top-level model to a Vega spec.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\nfunction assembleTopLevelModel(\n  model: Model,\n  topLevelProperties: TopLevelProperties & LayoutSizeMixins,\n  datasets: Datasets = {},\n  usermeta: object\n): VgSpec {\n  // Config with Vega-Lite only config removed.\n  const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n\n  const data = [].concat(\n    model.assembleSelectionData([]),\n    // only assemble data in the root\n    assembleRootData(model.component.data, datasets)\n  );\n\n  const projections = model.assembleProjections();\n  const title = model.assembleTitle();\n  const style = model.assembleGroupStyle();\n  const encodeEntry = model.assembleGroupEncodeEntry(true);\n\n  let layoutSignals = model.assembleLayoutSignals();\n\n  // move width and height signals with values to top level\n  layoutSignals = layoutSignals.filter(signal => {\n    if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n      topLevelProperties[signal.name] = +signal.value;\n      return false;\n    }\n    return true;\n  });\n\n  return {\n    $schema: 'https://vega.github.io/schema/vega/v5.json',\n    ...(model.description ? {description: model.description} : {}),\n    ...topLevelProperties,\n    ...(title ? {title} : {}),\n    ...(style ? {style} : {}),\n    ...(encodeEntry ? {encode: {update: encodeEntry}} : {}),\n    data,\n    ...(projections.length > 0 ? {projections: projections} : {}),\n    ...model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([])]),\n    ...(vgConfig ? {config: vgConfig} : {}),\n    ...(usermeta ? {usermeta} : {})\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}