{"ast":null,"code":"import { isFieldDef, vgField } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport * as encode from './encode';\nexport const geoshape = {\n  vgMark: 'shape',\n  encodeEntry: model => {\n    return Object.assign({}, encode.baseEncodeEntry(model, {\n      align: 'ignore',\n      baseline: 'ignore',\n      color: 'include',\n      size: 'ignore',\n      orient: 'ignore'\n    }));\n  },\n  postEncodingTransform: model => {\n    const {\n      encoding\n    } = model;\n    const shapeDef = encoding.shape;\n    const transform = Object.assign({\n      type: 'geoshape',\n      projection: model.projectionName()\n    }, shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON ? {\n      field: vgField(shapeDef, {\n        expr: 'datum'\n      })\n    } : {});\n    return [transform];\n  }\n};","map":{"version":3,"sources":["../../../../src/compile/mark/geoshape.ts"],"names":[],"mappings":"AACA,SAAQ,UAAR,EAAoB,OAApB,QAAkC,kBAAlC;AACA,SAAQ,OAAR,QAAsB,YAAtB;AAIA,OAAO,KAAK,MAAZ,MAAwB,UAAxB;AAEA,OAAO,MAAM,QAAQ,GAAiB;AACpC,EAAA,MAAM,EAAE,OAD4B;AAEpC,EAAA,WAAW,EAAG,KAAD,IAAqB;AAChC,WAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,MAAM,CAAC,eAAP,CAAuB,KAAvB,EAA8B;AAC/B,MAAA,KAAK,EAAE,QADwB;AAE/B,MAAA,QAAQ,EAAE,QAFqB;AAG/B,MAAA,KAAK,EAAE,SAHwB;AAI/B,MAAA,IAAI,EAAE,QAJyB;AAK/B,MAAA,MAAM,EAAE;AALuB,KAA9B,CADL,CAAA;AASD,GAZmC;AAapC,EAAA,qBAAqB,EAAG,KAAD,IAAgD;AACrE,UAAM;AAAC,MAAA;AAAD,QAAa,KAAnB;AACA,UAAM,QAAQ,GAAG,QAAQ,CAAC,KAA1B;AAEA,UAAM,SAAS,GAAA,MAAA,CAAA,MAAA,CAAA;AACb,MAAA,IAAI,EAAE,UADO;AAEb,MAAA,UAAU,EAAE,KAAK,CAAC,cAAN;AAFC,KAAA,EAIT,QAAQ,IAAI,UAAU,CAAC,QAAD,CAAtB,IAAoC,QAAQ,CAAC,IAAT,KAAkB,OAAtD,GACA;AAAC,MAAA,KAAK,EAAE,OAAO,CAAC,QAAD,EAAW;AAAC,QAAA,IAAI,EAAE;AAAP,OAAX;AAAf,KADA,GAEA,EANS,CAAf;AAQA,WAAO,CAAC,SAAD,CAAP;AACD;AA1BmC,CAA/B","sourcesContent":["import {GeoShapeTransform as VgGeoShapeTransform} from 'vega';\nimport {isFieldDef, vgField} from '../../channeldef';\nimport {GEOJSON} from '../../type';\nimport {VgPostEncodingTransform} from '../../vega.schema';\nimport {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as encode from './encode';\n\nexport const geoshape: MarkCompiler = {\n  vgMark: 'shape',\n  encodeEntry: (model: UnitModel) => {\n    return {\n      ...encode.baseEncodeEntry(model, {\n        align: 'ignore',\n        baseline: 'ignore',\n        color: 'include',\n        size: 'ignore',\n        orient: 'ignore'\n      })\n    };\n  },\n  postEncodingTransform: (model: UnitModel): VgPostEncodingTransform[] => {\n    const {encoding} = model;\n    const shapeDef = encoding.shape;\n\n    const transform: VgGeoShapeTransform = {\n      type: 'geoshape',\n      projection: model.projectionName(),\n      // as: 'shape',\n      ...(shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON\n        ? {field: vgField(shapeDef, {expr: 'datum'})}\n        : {})\n    };\n    return [transform];\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}