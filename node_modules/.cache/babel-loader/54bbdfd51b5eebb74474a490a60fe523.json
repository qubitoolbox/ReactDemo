{"ast":null,"code":"/**\n * Parse an expression given the argument signature and body code.\n */\nexport default function expression(args, code, ctx) {\n  // wrap code in return statement if expression does not terminate\n  if (code[code.length - 1] !== ';') {\n    code = 'return(' + code + ');';\n  }\n\n  var fn = Function.apply(null, args.concat(code));\n  return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;\n}\n/**\n * Parse an expression used to update an operator value.\n */\n\nexport function operatorExpression(code, ctx) {\n  return expression(['_'], code, ctx);\n}\n/**\n * Parse an expression provided as an operator parameter value.\n */\n\nexport function parameterExpression(code, ctx) {\n  return expression(['datum', '_'], code, ctx);\n}\n/**\n * Parse an expression applied to an event stream.\n */\n\nexport function eventExpression(code, ctx) {\n  return expression(['event'], code, ctx);\n}\n/**\n * Parse an expression used to handle an event-driven operator update.\n */\n\nexport function handlerExpression(code, ctx) {\n  return expression(['_', 'event'], code, ctx);\n}\n/**\n * Parse an expression that performs visual encoding.\n */\n\nexport function encodeExpression(code, ctx) {\n  return expression(['item', '_'], code, ctx);\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-runtime/src/expression.js"],"names":["expression","args","code","ctx","length","fn","Function","apply","concat","functions","bind","operatorExpression","parameterExpression","eventExpression","handlerExpression","encodeExpression"],"mappings":"AAAA;;;AAGA,eAAe,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqC;AAClD;AACA,MAAID,IAAI,CAACA,IAAI,CAACE,MAAL,GAAY,CAAb,CAAJ,KAAwB,GAA5B,EAAiC;AAC/BF,IAAAA,IAAI,GAAG,YAAYA,IAAZ,GAAmB,IAA1B;AACD;;AACD,MAAIG,EAAE,GAAGC,QAAQ,CAACC,KAAT,CAAe,IAAf,EAAqBN,IAAI,CAACO,MAAL,CAAYN,IAAZ,CAArB,CAAT;AACA,SAAOC,GAAG,IAAIA,GAAG,CAACM,SAAX,GAAuBJ,EAAE,CAACK,IAAH,CAAQP,GAAG,CAACM,SAAZ,CAAvB,GAAgDJ,EAAvD;AACD;AAED;;;;AAGA,OAAO,SAASM,kBAAT,CAA4BT,IAA5B,EAAkCC,GAAlC,EAAuC;AAC5C,SAAOH,UAAU,CAAC,CAAC,GAAD,CAAD,EAAQE,IAAR,EAAcC,GAAd,CAAjB;AACD;AAED;;;;AAGA,OAAO,SAASS,mBAAT,CAA6BV,IAA7B,EAAmCC,GAAnC,EAAwC;AAC7C,SAAOH,UAAU,CAAC,CAAC,OAAD,EAAU,GAAV,CAAD,EAAiBE,IAAjB,EAAuBC,GAAvB,CAAjB;AACD;AAED;;;;AAGA,OAAO,SAASU,eAAT,CAAyBX,IAAzB,EAA+BC,GAA/B,EAAoC;AACzC,SAAOH,UAAU,CAAC,CAAC,OAAD,CAAD,EAAYE,IAAZ,EAAkBC,GAAlB,CAAjB;AACD;AAED;;;;AAGA,OAAO,SAASW,iBAAT,CAA2BZ,IAA3B,EAAiCC,GAAjC,EAAsC;AAC3C,SAAOH,UAAU,CAAC,CAAC,GAAD,EAAM,OAAN,CAAD,EAAiBE,IAAjB,EAAuBC,GAAvB,CAAjB;AACD;AAED;;;;AAGA,OAAO,SAASY,gBAAT,CAA0Bb,IAA1B,EAAgCC,GAAhC,EAAqC;AAC1C,SAAOH,UAAU,CAAC,CAAC,MAAD,EAAS,GAAT,CAAD,EAAgBE,IAAhB,EAAsBC,GAAtB,CAAjB;AACD","sourcesContent":["/**\n * Parse an expression given the argument signature and body code.\n */\nexport default function expression(args, code, ctx) {\n  // wrap code in return statement if expression does not terminate\n  if (code[code.length-1] !== ';') {\n    code = 'return(' + code + ');';\n  }\n  var fn = Function.apply(null, args.concat(code));\n  return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;\n}\n\n/**\n * Parse an expression used to update an operator value.\n */\nexport function operatorExpression(code, ctx) {\n  return expression(['_'], code, ctx);\n}\n\n/**\n * Parse an expression provided as an operator parameter value.\n */\nexport function parameterExpression(code, ctx) {\n  return expression(['datum', '_'], code, ctx);\n}\n\n/**\n * Parse an expression applied to an event stream.\n */\nexport function eventExpression(code, ctx) {\n  return expression(['event'], code, ctx);\n}\n\n/**\n * Parse an expression used to handle an event-driven operator update.\n */\nexport function handlerExpression(code, ctx) {\n  return expression(['_', 'event'], code, ctx);\n}\n\n/**\n * Parse an expression that performs visual encoding.\n */\nexport function encodeExpression(code, ctx) {\n  return expression(['item', '_'], code, ctx);\n}\n"]},"metadata":{},"sourceType":"module"}