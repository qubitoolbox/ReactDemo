{"ast":null,"code":"import color from './color';\nimport field from './field';\nimport scale from './scale';\nimport gradient from './gradient';\nimport property from './property';\nimport expression from './expression';\nimport { stringValue } from 'vega-util';\nexport default function (channel, enc, scope, params, fields) {\n  if (enc.gradient != null) {\n    return gradient(enc, scope, params, fields);\n  }\n\n  var value = enc.signal ? expression(enc.signal, scope, params, fields) : enc.color ? color(enc.color, scope, params, fields) : enc.field != null ? field(enc.field, scope, params, fields) : enc.value !== undefined ? stringValue(enc.value) : undefined;\n\n  if (enc.scale != null) {\n    value = scale(enc, value, scope, params, fields);\n  }\n\n  if (value === undefined) {\n    value = null;\n  }\n\n  if (enc.exponent != null) {\n    value = 'Math.pow(' + value + ',' + property(enc.exponent, scope, params, fields) + ')';\n  }\n\n  if (enc.mult != null) {\n    value += '*' + property(enc.mult, scope, params, fields);\n  }\n\n  if (enc.offset != null) {\n    value += '+' + property(enc.offset, scope, params, fields);\n  }\n\n  if (enc.round) {\n    value = 'Math.round(' + value + ')';\n  }\n\n  return value;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-parser/src/parsers/encode/entry.js"],"names":["color","field","scale","gradient","property","expression","stringValue","channel","enc","scope","params","fields","value","signal","undefined","exponent","mult","offset","round"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,WAAR,QAA0B,WAA1B;AAEA,eAAe,UAASC,OAAT,EAAkBC,GAAlB,EAAuBC,KAAvB,EAA8BC,MAA9B,EAAsCC,MAAtC,EAA8C;AAC3D,MAAIH,GAAG,CAACL,QAAJ,IAAgB,IAApB,EAA0B;AACxB,WAAOA,QAAQ,CAACK,GAAD,EAAMC,KAAN,EAAaC,MAAb,EAAqBC,MAArB,CAAf;AACD;;AAED,MAAIC,KAAK,GAAGJ,GAAG,CAACK,MAAJ,GAAaR,UAAU,CAACG,GAAG,CAACK,MAAL,EAAaJ,KAAb,EAAoBC,MAApB,EAA4BC,MAA5B,CAAvB,GACRH,GAAG,CAACR,KAAJ,GAAYA,KAAK,CAACQ,GAAG,CAACR,KAAL,EAAYS,KAAZ,EAAmBC,MAAnB,EAA2BC,MAA3B,CAAjB,GACAH,GAAG,CAACP,KAAJ,IAAa,IAAb,GAAoBA,KAAK,CAACO,GAAG,CAACP,KAAL,EAAYQ,KAAZ,EAAmBC,MAAnB,EAA2BC,MAA3B,CAAzB,GACAH,GAAG,CAACI,KAAJ,KAAcE,SAAd,GAA0BR,WAAW,CAACE,GAAG,CAACI,KAAL,CAArC,GACAE,SAJJ;;AAMA,MAAIN,GAAG,CAACN,KAAJ,IAAa,IAAjB,EAAuB;AACrBU,IAAAA,KAAK,GAAGV,KAAK,CAACM,GAAD,EAAMI,KAAN,EAAaH,KAAb,EAAoBC,MAApB,EAA4BC,MAA5B,CAAb;AACD;;AAED,MAAIC,KAAK,KAAKE,SAAd,EAAyB;AACvBF,IAAAA,KAAK,GAAG,IAAR;AACD;;AAED,MAAIJ,GAAG,CAACO,QAAJ,IAAgB,IAApB,EAA0B;AACxBH,IAAAA,KAAK,GAAG,cAAcA,KAAd,GAAsB,GAAtB,GACJR,QAAQ,CAACI,GAAG,CAACO,QAAL,EAAeN,KAAf,EAAsBC,MAAtB,EAA8BC,MAA9B,CADJ,GAC4C,GADpD;AAED;;AAED,MAAIH,GAAG,CAACQ,IAAJ,IAAY,IAAhB,EAAsB;AACpBJ,IAAAA,KAAK,IAAI,MAAMR,QAAQ,CAACI,GAAG,CAACQ,IAAL,EAAWP,KAAX,EAAkBC,MAAlB,EAA0BC,MAA1B,CAAvB;AACD;;AAED,MAAIH,GAAG,CAACS,MAAJ,IAAc,IAAlB,EAAwB;AACtBL,IAAAA,KAAK,IAAI,MAAMR,QAAQ,CAACI,GAAG,CAACS,MAAL,EAAaR,KAAb,EAAoBC,MAApB,EAA4BC,MAA5B,CAAvB;AACD;;AAED,MAAIH,GAAG,CAACU,KAAR,EAAe;AACbN,IAAAA,KAAK,GAAG,gBAAgBA,KAAhB,GAAwB,GAAhC;AACD;;AAED,SAAOA,KAAP;AACD","sourcesContent":["import color from './color';\nimport field from './field';\nimport scale from './scale';\nimport gradient from './gradient';\nimport property from './property';\nimport expression from './expression';\nimport {stringValue} from 'vega-util';\n\nexport default function(channel, enc, scope, params, fields) {\n  if (enc.gradient != null) {\n    return gradient(enc, scope, params, fields);\n  }\n\n  var value = enc.signal ? expression(enc.signal, scope, params, fields)\n    : enc.color ? color(enc.color, scope, params, fields)\n    : enc.field != null ? field(enc.field, scope, params, fields)\n    : enc.value !== undefined ? stringValue(enc.value)\n    : undefined;\n\n  if (enc.scale != null) {\n    value = scale(enc, value, scope, params, fields);\n  }\n\n  if (value === undefined) {\n    value = null;\n  }\n\n  if (enc.exponent != null) {\n    value = 'Math.pow(' + value + ','\n      + property(enc.exponent, scope, params, fields) + ')';\n  }\n\n  if (enc.mult != null) {\n    value += '*' + property(enc.mult, scope, params, fields);\n  }\n\n  if (enc.offset != null) {\n    value += '+' + property(enc.offset, scope, params, fields);\n  }\n\n  if (enc.round) {\n    value = 'Math.round(' + value + ')';\n  }\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}