{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { isString, isArray } from 'vega-util';\nexport function extractTitleConfig(titleConfig) {\n  const {\n    // These are non-mark title config that need to be hardcoded\n    anchor,\n    frame,\n    offset,\n    orient,\n    // color needs to be redirect to fill\n    color\n  } = titleConfig,\n        // The rest are mark config.\n  titleMarkConfig = __rest(titleConfig, [\"anchor\", \"frame\", \"offset\", \"orient\", \"color\"]);\n\n  const mark = Object.assign(Object.assign({}, titleMarkConfig), color ? {\n    fill: color\n  } : {});\n  const nonMark = Object.assign(Object.assign(Object.assign(Object.assign({}, anchor ? {\n    anchor\n  } : {}), frame ? {\n    frame\n  } : {}), offset ? {\n    offset\n  } : {}), orient ? {\n    orient\n  } : {});\n  return {\n    mark,\n    nonMark\n  };\n}\nexport function isText(v) {\n  return isString(v) || isArray(v) && isString(v[0]);\n}","map":{"version":3,"sources":["../../src/title.ts"],"names":[],"mappings":";AAEA,SAAQ,QAAR,EAAkB,OAAlB,QAAgC,WAAhC;AAsDA,OAAM,SAAU,kBAAV,CACJ,WADI,EACoB;AAKxB,QAAM;AACJ;AACA,IAAA,MAFI;AAGJ,IAAA,KAHI;AAIJ,IAAA,MAJI;AAKJ,IAAA,MALI;AAMJ;AACA,IAAA;AAPI,MAUF,WAVJ;AAAA,QAQE;AACA,EAAA,eAAA,GAAA,MAAA,CAAA,WAAA,EAAA,CAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,CAAA,CATF;;AAYA,QAAM,IAAI,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACL,eADK,CAAA,EAEJ,KAAK,GAAG;AAAC,IAAA,IAAI,EAAE;AAAP,GAAH,GAAmB,EAFpB,CAAV;AAKA,QAAM,OAAO,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACP,MAAM,GAAG;AAAC,IAAA;AAAD,GAAH,GAAc,EADb,CAAA,EAEP,KAAK,GAAG;AAAC,IAAA;AAAD,GAAH,GAAa,EAFX,CAAA,EAGP,MAAM,GAAG;AAAC,IAAA;AAAD,GAAH,GAAc,EAHb,CAAA,EAIP,MAAM,GAAG;AAAC,IAAA;AAAD,GAAH,GAAc,EAJb,CAAb;AAOA,SAAO;AAAC,IAAA,IAAD;AAAO,IAAA;AAAP,GAAP;AACD;AAED,OAAM,SAAU,MAAV,CAAiB,CAAjB,EAAuB;AAC3B,SAAO,QAAQ,CAAC,CAAD,CAAR,IAAgB,OAAO,CAAC,CAAD,CAAP,IAAc,QAAQ,CAAC,CAAC,CAAC,CAAD,CAAF,CAA7C;AACD","sourcesContent":["import {BaseTitle, TextEncodeEntry, TitleAnchor, Text} from 'vega';\nimport {BaseMarkConfig, ExcludeMappedValueRef} from './vega.schema';\nimport {isString, isArray} from 'vega-util';\n\nexport type BaseTitleNoValueRefs = ExcludeMappedValueRef<BaseTitle>;\n\nexport type TitleConfig = BaseTitleNoValueRefs;\n\nexport interface TitleBase extends BaseTitleNoValueRefs {\n  /**\n   * The anchor position for placing the title. One of `\"start\"`, `\"middle\"`, or `\"end\"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.\n   *\n   * __Default value:__ `\"middle\"` for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views.\n   * `\"start\"` for other composite views.\n   *\n   * __Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only customizable only for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views. For other composite views, `anchor` is always `\"start\"`.\n   */\n  anchor?: TitleAnchor;\n\n  /**\n   * A [mark style property](https://vega.github.io/vega-lite/docs/config.html#style) to apply to the title text mark.\n   *\n   * __Default value:__ `\"group-title\"`.\n   */\n  style?: string | string[];\n\n  /**\n   * \tThe integer z-index indicating the layering of the title group relative to other axis, mark and legend groups.\n   *\n   * __Default value:__ `0`.\n   *\n   * @TJS-type integer\n   * @minimum 0\n   */\n  zindex?: number;\n\n  /**\n   * Mark definitions for custom encoding.\n   *\n   * @hidden\n   */\n  encoding?: TextEncodeEntry;\n}\n\nexport interface TitleParams extends TitleBase {\n  /**\n   * The title text.\n   */\n  text: Text;\n\n  /**\n   * The subtitle Text.\n   */\n  subtitle?: Text;\n}\n\nexport function extractTitleConfig(\n  titleConfig: TitleConfig\n): {\n  mark: BaseMarkConfig;\n  nonMark: BaseTitleNoValueRefs;\n} {\n  const {\n    // These are non-mark title config that need to be hardcoded\n    anchor,\n    frame,\n    offset,\n    orient,\n    // color needs to be redirect to fill\n    color,\n    // The rest are mark config.\n    ...titleMarkConfig\n  } = titleConfig;\n\n  const mark: BaseMarkConfig = {\n    ...titleMarkConfig,\n    ...(color ? {fill: color} : {})\n  };\n\n  const nonMark: BaseTitleNoValueRefs = {\n    ...(anchor ? {anchor} : {}),\n    ...(frame ? {frame} : {}),\n    ...(offset ? {offset} : {}),\n    ...(orient ? {orient} : {})\n  };\n\n  return {mark, nonMark};\n}\n\nexport function isText(v: any): v is Text {\n  return isString(v) || (isArray(v) && isString(v[0]));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}