{"ast":null,"code":"import { isAggregateOp } from '../../aggregate';\nimport { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from './../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the window transform nodes\n */\n\nexport class WindowTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    super(parent);\n    this.transform = transform;\n  }\n\n  clone() {\n    return new WindowTransformNode(null, duplicate(this.transform));\n  }\n\n  addDimensions(fields) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  dependentFields() {\n    var _a, _b;\n\n    const out = new Set();\n    (_a = this.transform.groupby, _a !== null && _a !== void 0 ? _a : []).forEach(f => out.add(f));\n    (_b = this.transform.sort, _b !== null && _b !== void 0 ? _b : []).forEach(m => out.add(m.field));\n    this.transform.window.map(w => w.field).filter(f => f !== undefined).forEach(f => out.add(f));\n    return out;\n  }\n\n  producedFields() {\n    return new Set(this.transform.window.map(this.getDefaultName));\n  }\n\n  getDefaultName(windowFieldDef) {\n    var _a;\n\n    return _a = windowFieldDef.as, _a !== null && _a !== void 0 ? _a : vgField(windowFieldDef);\n  }\n\n  hash() {\n    return `WindowTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    var _a;\n\n    const fields = [];\n    const ops = [];\n    const as = [];\n    const params = [];\n\n    for (const window of this.transform.window) {\n      ops.push(window.op);\n      as.push(this.getDefaultName(window));\n      params.push(window.param === undefined ? null : window.param);\n      fields.push(window.field === undefined ? null : window.field);\n    }\n\n    const frame = this.transform.frame;\n    const groupby = this.transform.groupby;\n\n    if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {\n      // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate\n      return Object.assign({\n        type: 'joinaggregate',\n        as,\n        ops: ops,\n        fields\n      }, groupby !== undefined ? {\n        groupby\n      } : {});\n    }\n\n    const sortFields = [];\n    const sortOrder = [];\n\n    if (this.transform.sort !== undefined) {\n      for (const sortField of this.transform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push((_a = sortField.order, _a !== null && _a !== void 0 ? _a : 'ascending'));\n      }\n    }\n\n    const sort = {\n      field: sortFields,\n      order: sortOrder\n    };\n    const ignorePeers = this.transform.ignorePeers;\n    return Object.assign(Object.assign(Object.assign({\n      type: 'window',\n      params,\n      as,\n      ops,\n      fields,\n      sort\n    }, ignorePeers !== undefined ? {\n      ignorePeers\n    } : {}), groupby !== undefined ? {\n      groupby\n    } : {}), frame !== undefined ? {\n      frame\n    } : {});\n  }\n\n}","map":{"version":3,"sources":["../../../../src/compile/data/window.ts"],"names":[],"mappings":"AACA,SAAQ,aAAR,QAA4B,iBAA5B;AACA,SAAQ,OAAR,QAAsB,kBAAtB;AAGA,SAAQ,SAAR,EAAmB,IAAnB,QAA8B,YAA9B;AAEA,SAAQ,MAAR,QAAqB,cAArB;AACA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,OAAM,MAAO,mBAAP,SAAmC,YAAnC,CAA+C;AAKnD,EAAA,WAAA,CAAY,MAAZ,EAAmD,SAAnD,EAA6E;AAC3E,UAAM,MAAN;AADiD,SAAA,SAAA,GAAA,SAAA;AAElD;;AANM,EAAA,KAAK,GAAA;AACV,WAAO,IAAI,mBAAJ,CAAwB,IAAxB,EAA8B,SAAS,CAAC,KAAK,SAAN,CAAvC,CAAP;AACD;;AAMM,EAAA,aAAa,CAAC,MAAD,EAAiB;AACnC,SAAK,SAAL,CAAe,OAAf,GAAyB,MAAM,CAAC,KAAK,SAAL,CAAe,OAAf,CAAuB,MAAvB,CAA8B,MAA9B,CAAD,EAAwC,CAAC,IAAI,CAA7C,CAA/B;AACD;;AAEM,EAAA,eAAe,GAAA;;;AACpB,UAAM,GAAG,GAAG,IAAI,GAAJ,EAAZ;AAEA,KAAA,EAAA,GAAC,KAAK,SAAL,CAAe,OAAhB,EAAuB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAA3B,EAA+B,OAA/B,CAAuC,CAAC,IAAI,GAAG,CAAC,GAAJ,CAAQ,CAAR,CAA5C;AACA,KAAA,EAAA,GAAC,KAAK,SAAL,CAAe,IAAhB,EAAoB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAxB,EAA4B,OAA5B,CAAoC,CAAC,IAAI,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,KAAV,CAAzC;AAEA,SAAK,SAAL,CAAe,MAAf,CACG,GADH,CACO,CAAC,IAAI,CAAC,CAAC,KADd,EAEG,MAFH,CAEU,CAAC,IAAI,CAAC,KAAK,SAFrB,EAGG,OAHH,CAGW,CAAC,IAAI,GAAG,CAAC,GAAJ,CAAQ,CAAR,CAHhB;AAKA,WAAO,GAAP;AACD;;AAEM,EAAA,cAAc,GAAA;AACnB,WAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,MAAf,CAAsB,GAAtB,CAA0B,KAAK,cAA/B,CAAR,CAAP;AACD;;AAEO,EAAA,cAAc,CAAC,cAAD,EAA+B;;;AACnD,WAAA,EAAA,GAAO,cAAc,CAAC,EAAtB,EAAwB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,OAAO,CAAC,cAAD,CAAnC;AACD;;AAEM,EAAA,IAAI,GAAA;AACT,WAAO,mBAAmB,IAAI,CAAC,KAAK,SAAN,CAAgB,EAA9C;AACD;;AAEM,EAAA,QAAQ,GAAA;;;AACb,UAAM,MAAM,GAAa,EAAzB;AACA,UAAM,GAAG,GAAmC,EAA5C;AACA,UAAM,EAAE,GAAa,EAArB;AACA,UAAM,MAAM,GAAG,EAAf;;AAEA,SAAK,MAAM,MAAX,IAAqB,KAAK,SAAL,CAAe,MAApC,EAA4C;AAC1C,MAAA,GAAG,CAAC,IAAJ,CAAS,MAAM,CAAC,EAAhB;AACA,MAAA,EAAE,CAAC,IAAH,CAAQ,KAAK,cAAL,CAAoB,MAApB,CAAR;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,KAAP,KAAiB,SAAjB,GAA6B,IAA7B,GAAoC,MAAM,CAAC,KAAvD;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,KAAP,KAAiB,SAAjB,GAA6B,IAA7B,GAAoC,MAAM,CAAC,KAAvD;AACD;;AAED,UAAM,KAAK,GAAG,KAAK,SAAL,CAAe,KAA7B;AACA,UAAM,OAAO,GAAG,KAAK,SAAL,CAAe,OAA/B;;AAEA,QAAI,KAAK,IAAI,KAAK,CAAC,CAAD,CAAL,KAAa,IAAtB,IAA8B,KAAK,CAAC,CAAD,CAAL,KAAa,IAA3C,IAAmD,GAAG,CAAC,KAAJ,CAAU,CAAC,IAAI,aAAa,CAAC,CAAD,CAA5B,CAAvD,EAAyF;AACvF;AACA,aAAO,MAAA,CAAA,MAAA,CAAA;AACL,QAAA,IAAI,EAAE,eADD;AAEL,QAAA,EAFK;AAGL,QAAA,GAAG,EAAE,GAHA;AAIL,QAAA;AAJK,OAAA,EAKD,OAAO,KAAK,SAAZ,GAAwB;AAAC,QAAA;AAAD,OAAxB,GAAoC,EALnC,CAAP;AAOD;;AAED,UAAM,UAAU,GAAa,EAA7B;AACA,UAAM,SAAS,GAAgB,EAA/B;;AACA,QAAI,KAAK,SAAL,CAAe,IAAf,KAAwB,SAA5B,EAAuC;AACrC,WAAK,MAAM,SAAX,IAAwB,KAAK,SAAL,CAAe,IAAvC,EAA6C;AAC3C,QAAA,UAAU,CAAC,IAAX,CAAgB,SAAS,CAAC,KAA1B;AACA,QAAA,SAAS,CAAC,IAAV,EAAc,EAAA,GAAC,SAAS,CAAC,KAAX,EAAgB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,WAAlC;AACD;AACF;;AACD,UAAM,IAAI,GAAiB;AACzB,MAAA,KAAK,EAAE,UADkB;AAEzB,MAAA,KAAK,EAAE;AAFkB,KAA3B;AAIA,UAAM,WAAW,GAAG,KAAK,SAAL,CAAe,WAAnC;AAEA,WAAO,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AACL,MAAA,IAAI,EAAE,QADD;AAEL,MAAA,MAFK;AAGL,MAAA,EAHK;AAIL,MAAA,GAJK;AAKL,MAAA,MALK;AAML,MAAA;AANK,KAAA,EAOD,WAAW,KAAK,SAAhB,GAA4B;AAAC,MAAA;AAAD,KAA5B,GAA4C,EAP3C,CAAA,EAQD,OAAO,KAAK,SAAZ,GAAwB;AAAC,MAAA;AAAD,KAAxB,GAAoC,EARnC,CAAA,EASD,KAAK,KAAK,SAAV,GAAsB;AAAC,MAAA;AAAD,KAAtB,GAAgC,EAT/B,CAAP;AAWD;;AA3FkD","sourcesContent":["import {AggregateOp, WindowTransform as VgWindowTransform} from 'vega';\nimport {isAggregateOp} from '../../aggregate';\nimport {vgField} from '../../channeldef';\nimport {SortOrder} from '../../sort';\nimport {WindowFieldDef, WindowOnlyOp, WindowTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgComparator, VgJoinAggregateTransform} from '../../vega.schema';\nimport {unique} from './../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for the window transform nodes\n */\nexport class WindowTransformNode extends DataFlowNode {\n  public clone() {\n    return new WindowTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private readonly transform: WindowTransform) {\n    super(parent);\n  }\n\n  public addDimensions(fields: string[]) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  public dependentFields() {\n    const out = new Set<string>();\n\n    (this.transform.groupby ?? []).forEach(f => out.add(f));\n    (this.transform.sort ?? []).forEach(m => out.add(m.field));\n\n    this.transform.window\n      .map(w => w.field)\n      .filter(f => f !== undefined)\n      .forEach(f => out.add(f));\n\n    return out;\n  }\n\n  public producedFields() {\n    return new Set(this.transform.window.map(this.getDefaultName));\n  }\n\n  private getDefaultName(windowFieldDef: WindowFieldDef): string {\n    return windowFieldDef.as ?? vgField(windowFieldDef);\n  }\n\n  public hash() {\n    return `WindowTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgWindowTransform | VgJoinAggregateTransform {\n    const fields: string[] = [];\n    const ops: (AggregateOp | WindowOnlyOp)[] = [];\n    const as: string[] = [];\n    const params = [];\n\n    for (const window of this.transform.window) {\n      ops.push(window.op);\n      as.push(this.getDefaultName(window));\n      params.push(window.param === undefined ? null : window.param);\n      fields.push(window.field === undefined ? null : window.field);\n    }\n\n    const frame = this.transform.frame;\n    const groupby = this.transform.groupby;\n\n    if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {\n      // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate\n      return {\n        type: 'joinaggregate',\n        as,\n        ops: ops as AggregateOp[],\n        fields,\n        ...(groupby !== undefined ? {groupby} : {})\n      } as VgJoinAggregateTransform;\n    }\n\n    const sortFields: string[] = [];\n    const sortOrder: SortOrder[] = [];\n    if (this.transform.sort !== undefined) {\n      for (const sortField of this.transform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push(sortField.order ?? 'ascending');\n      }\n    }\n    const sort: VgComparator = {\n      field: sortFields,\n      order: sortOrder\n    };\n    const ignorePeers = this.transform.ignorePeers;\n\n    return {\n      type: 'window',\n      params,\n      as,\n      ops,\n      fields,\n      sort,\n      ...(ignorePeers !== undefined ? {ignorePeers} : {}),\n      ...(groupby !== undefined ? {groupby} : {}),\n      ...(frame !== undefined ? {frame} : {})\n    } as VgWindowTransform;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}