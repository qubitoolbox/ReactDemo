{"ast":null,"code":"import { stream } from '../EventStream';\nimport { array } from 'vega-util';\n/**\n * Create a new event stream from an event source.\n * @param {object} source - The event source to monitor. The input must\n *  support the addEventListener method.\n * @param {string} type - The event type.\n * @param {function(object): boolean} [filter] - Event filter function.\n * @param {function(object): *} [apply] - Event application function.\n *   If provided, this function will be invoked and the result will be\n *   used as the downstream event value.\n * @return {EventStream}\n */\n\nexport default function (source, type, filter, apply) {\n  var df = this,\n      s = stream(filter, apply),\n      send = function (e) {\n    e.dataflow = df;\n\n    try {\n      s.receive(e);\n    } catch (error) {\n      df.error(error);\n    } finally {\n      df.run();\n    }\n  },\n      sources;\n\n  if (typeof source === 'string' && typeof document !== 'undefined') {\n    sources = document.querySelectorAll(source);\n  } else {\n    sources = array(source);\n  }\n\n  for (var i = 0, n = sources.length; i < n; ++i) {\n    sources[i].addEventListener(type, send);\n  }\n\n  return s;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-dataflow/src/dataflow/events.js"],"names":["stream","array","source","type","filter","apply","df","s","send","e","dataflow","receive","error","run","sources","document","querySelectorAll","i","n","length","addEventListener"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,gBAArB;AACA,SAAQC,KAAR,QAAoB,WAApB;AAEA;;;;;;;;;;;;AAWA,eAAe,UAASC,MAAT,EAAiBC,IAAjB,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsC;AACnD,MAAIC,EAAE,GAAG,IAAT;AAAA,MACIC,CAAC,GAAGP,MAAM,CAACI,MAAD,EAASC,KAAT,CADd;AAAA,MAEIG,IAAI,GAAG,UAASC,CAAT,EAAY;AACjBA,IAAAA,CAAC,CAACC,QAAF,GAAaJ,EAAb;;AACA,QAAI;AACFC,MAAAA,CAAC,CAACI,OAAF,CAAUF,CAAV;AACD,KAFD,CAEE,OAAOG,KAAP,EAAc;AACdN,MAAAA,EAAE,CAACM,KAAH,CAASA,KAAT;AACD,KAJD,SAIU;AACRN,MAAAA,EAAE,CAACO,GAAH;AACD;AACF,GAXL;AAAA,MAYIC,OAZJ;;AAcA,MAAI,OAAOZ,MAAP,KAAkB,QAAlB,IAA8B,OAAOa,QAAP,KAAoB,WAAtD,EAAmE;AACjED,IAAAA,OAAO,GAAGC,QAAQ,CAACC,gBAAT,CAA0Bd,MAA1B,CAAV;AACD,GAFD,MAEO;AACLY,IAAAA,OAAO,GAAGb,KAAK,CAACC,MAAD,CAAf;AACD;;AAED,OAAK,IAAIe,CAAC,GAAC,CAAN,EAASC,CAAC,GAACJ,OAAO,CAACK,MAAxB,EAAgCF,CAAC,GAACC,CAAlC,EAAqC,EAAED,CAAvC,EAA0C;AACxCH,IAAAA,OAAO,CAACG,CAAD,CAAP,CAAWG,gBAAX,CAA4BjB,IAA5B,EAAkCK,IAAlC;AACD;;AAED,SAAOD,CAAP;AACD","sourcesContent":["import {stream} from '../EventStream';\nimport {array} from 'vega-util';\n\n/**\n * Create a new event stream from an event source.\n * @param {object} source - The event source to monitor. The input must\n *  support the addEventListener method.\n * @param {string} type - The event type.\n * @param {function(object): boolean} [filter] - Event filter function.\n * @param {function(object): *} [apply] - Event application function.\n *   If provided, this function will be invoked and the result will be\n *   used as the downstream event value.\n * @return {EventStream}\n */\nexport default function(source, type, filter, apply) {\n  var df = this,\n      s = stream(filter, apply),\n      send = function(e) {\n        e.dataflow = df;\n        try {\n          s.receive(e);\n        } catch (error) {\n          df.error(error);\n        } finally {\n          df.run();\n        }\n      },\n      sources;\n\n  if (typeof source === 'string' && typeof document !== 'undefined') {\n    sources = document.querySelectorAll(source);\n  } else {\n    sources = array(source);\n  }\n\n  for (var i=0, n=sources.length; i<n; ++i) {\n    sources[i].addEventListener(type, send);\n  }\n\n  return s;\n}\n"]},"metadata":{},"sourceType":"module"}