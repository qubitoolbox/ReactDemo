{"ast":null,"code":"import { bandwidthNRD } from 'vega-statistics';\nimport { array, constant, error, isFunction, one } from 'vega-util';\nimport { sum } from 'd3-array';\n\nfunction radius(bw, data, f) {\n  const v = bw >= 0 ? bw : bandwidthNRD(data, f);\n  return Math.round((Math.sqrt(4 * v * v + 1) - 1) / 2);\n}\n\nfunction number(_) {\n  return isFunction(_) ? _ : constant(+_);\n} // Implementation adapted from d3/d3-contour. Thanks!\n\n\nexport default function () {\n  var x = d => d[0],\n      y = d => d[1],\n      weight = one,\n      bandwidth = [-1, -1],\n      dx = 960,\n      dy = 500,\n      k = 2; // log2(cellSize)\n\n\n  function density(data, counts) {\n    const rx = radius(bandwidth[0], data, x) >> k,\n          // blur x-radius\n    ry = radius(bandwidth[1], data, y) >> k,\n          // blur y-radius\n    ox = rx ? rx + 2 : 0,\n          // x-offset padding for blur\n    oy = ry ? ry + 2 : 0,\n          // y-offset padding for blur\n    n = 2 * ox + (dx >> k),\n          // grid width\n    m = 2 * oy + (dy >> k),\n          // grid height\n    values0 = new Float32Array(n * m),\n          values1 = new Float32Array(n * m);\n    let values = values0;\n    data.forEach(d => {\n      const xi = ox + (+x(d) >> k),\n            yi = oy + (+y(d) >> k);\n\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        values0[xi + yi * n] += +weight(d);\n      }\n    });\n\n    if (rx > 0 && ry > 0) {\n      blurX(n, m, values0, values1, rx);\n      blurY(n, m, values1, values0, ry);\n      blurX(n, m, values0, values1, rx);\n      blurY(n, m, values1, values0, ry);\n      blurX(n, m, values0, values1, rx);\n      blurY(n, m, values1, values0, ry);\n    } else if (rx > 0) {\n      blurX(n, m, values0, values1, rx);\n      blurX(n, m, values1, values0, rx);\n      blurX(n, m, values0, values1, rx);\n      values = values1;\n    } else if (ry > 0) {\n      blurY(n, m, values0, values1, ry);\n      blurY(n, m, values1, values0, ry);\n      blurY(n, m, values0, values1, ry);\n      values = values1;\n    } // scale density estimates\n    // density in points per square pixel or probability density\n\n\n    let s = counts ? Math.pow(2, -2 * k) : 1 / sum(values);\n\n    for (let i = 0, sz = n * m; i < sz; ++i) values[i] *= s;\n\n    return {\n      values: values,\n      scale: 1 << k,\n      width: n,\n      height: m,\n      x1: ox,\n      y1: oy,\n      x2: ox + (dx >> k),\n      y2: oy + (dy >> k)\n    };\n  }\n\n  density.x = function (_) {\n    return arguments.length ? (x = number(_), density) : x;\n  };\n\n  density.y = function (_) {\n    return arguments.length ? (y = number(_), density) : y;\n  };\n\n  density.weight = function (_) {\n    return arguments.length ? (weight = number(_), density) : weight;\n  };\n\n  density.size = function (_) {\n    if (!arguments.length) return [dx, dy];\n\n    var _0 = Math.ceil(_[0]),\n        _1 = Math.ceil(_[1]);\n\n    if (!(_0 >= 0) && !(_0 >= 0)) error('invalid size');\n    return dx = _0, dy = _1, density;\n  };\n\n  density.cellSize = function (_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) error('invalid cell size');\n    k = Math.floor(Math.log(_) / Math.LN2);\n    return density;\n  };\n\n  density.bandwidth = function (_) {\n    if (!arguments.length) return bandwidth;\n    _ = array(_);\n    if (_.length === 1) _ = [+_[0], +_[0]];\n    if (_.length !== 2) error('invalid bandwidth');\n    return bandwidth = _, density;\n  };\n\n  return density;\n}\n\nfunction blurX(n, m, source, target, r) {\n  const w = (r << 1) + 1;\n\n  for (let j = 0; j < m; ++j) {\n    for (let i = 0, sr = 0; i < n + r; ++i) {\n      if (i < n) {\n        sr += source[i + j * n];\n      }\n\n      if (i >= r) {\n        if (i >= w) {\n          sr -= source[i - w + j * n];\n        }\n\n        target[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\n      }\n    }\n  }\n}\n\nfunction blurY(n, m, source, target, r) {\n  const w = (r << 1) + 1;\n\n  for (let i = 0; i < n; ++i) {\n    for (let j = 0, sr = 0; j < m + r; ++j) {\n      if (j < m) {\n        sr += source[i + j * n];\n      }\n\n      if (j >= r) {\n        if (j >= w) {\n          sr -= source[i + (j - w) * n];\n        }\n\n        target[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-geo/src/util/density2D.js"],"names":["bandwidthNRD","array","constant","error","isFunction","one","sum","radius","bw","data","f","v","Math","round","sqrt","number","_","x","d","y","weight","bandwidth","dx","dy","k","density","counts","rx","ry","ox","oy","n","m","values0","Float32Array","values1","values","forEach","xi","yi","blurX","blurY","s","pow","i","sz","scale","width","height","x1","y1","x2","y2","arguments","length","size","_0","ceil","_1","cellSize","floor","log","LN2","source","target","r","w","j","sr","min"],"mappings":"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","sourcesContent":["import {bandwidthNRD} from 'vega-statistics';\nimport {array, constant, error, isFunction, one} from 'vega-util';\nimport {sum} from 'd3-array';\n\nfunction radius(bw, data, f) {\n  const v = bw >= 0 ? bw : bandwidthNRD(data, f);\n  return Math.round((Math.sqrt(4 * v * v + 1) - 1) / 2);\n}\n\nfunction number(_) {\n  return isFunction(_) ? _ : constant(+_);\n}\n\n// Implementation adapted from d3/d3-contour. Thanks!\nexport default function() {\n  var x = d => d[0],\n      y = d => d[1],\n      weight = one,\n      bandwidth = [-1, -1],\n      dx = 960,\n      dy = 500,\n      k = 2; // log2(cellSize)\n\n  function density(data, counts) {\n    const rx = radius(bandwidth[0], data, x) >> k, // blur x-radius\n          ry = radius(bandwidth[1], data, y) >> k, // blur y-radius\n          ox = rx ? rx + 2 : 0, // x-offset padding for blur\n          oy = ry ? ry + 2 : 0, // y-offset padding for blur\n          n = 2 * ox + (dx >> k), // grid width\n          m = 2 * oy + (dy >> k), // grid height\n          values0 = new Float32Array(n * m),\n          values1 = new Float32Array(n * m);\n\n    let values = values0;\n\n    data.forEach(d => {\n      const xi = ox + (+x(d) >> k),\n            yi = oy + (+y(d) >> k);\n\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        values0[xi + yi * n] += +weight(d);\n      }\n    });\n\n    if (rx > 0 && ry > 0) {\n      blurX(n, m, values0, values1, rx);\n      blurY(n, m, values1, values0, ry);\n      blurX(n, m, values0, values1, rx);\n      blurY(n, m, values1, values0, ry);\n      blurX(n, m, values0, values1, rx);\n      blurY(n, m, values1, values0, ry);\n    } else if (rx > 0) {\n      blurX(n, m, values0, values1, rx);\n      blurX(n, m, values1, values0, rx);\n      blurX(n, m, values0, values1, rx);\n      values = values1;\n    } else if (ry > 0) {\n      blurY(n, m, values0, values1, ry);\n      blurY(n, m, values1, values0, ry);\n      blurY(n, m, values0, values1, ry);\n      values = values1;\n    }\n\n    // scale density estimates\n    // density in points per square pixel or probability density\n    let s = counts ? Math.pow(2, -2 * k) : 1 / sum(values);\n    for (let i=0, sz=n*m; i<sz; ++i) values[i] *= s;\n\n    return {\n      values: values,\n      scale: 1 << k,\n      width: n,\n      height: m,\n      x1: ox,\n      y1: oy,\n      x2: ox + (dx >> k),\n      y2: oy + (dy >> k)\n    };\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = number(_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = number(_), density) : y;\n  };\n\n  density.weight = function(_) {\n    return arguments.length ? (weight = number(_), density) : weight;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\n    if (!(_0 >= 0) && !(_0 >= 0)) error('invalid size');\n    return dx = _0, dy = _1, density;\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) error('invalid cell size');\n    k = Math.floor(Math.log(_) / Math.LN2);\n    return density;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return bandwidth;\n    _ = array(_);\n    if (_.length === 1) _ = [+_[0], +_[0]];\n    if (_.length !== 2) error('invalid bandwidth');\n    return bandwidth = _, density;\n  };\n\n  return density;\n}\n\nfunction blurX(n, m, source, target, r) {\n  const w = (r << 1) + 1;\n  for (let j = 0; j < m; ++j) {\n    for (let i = 0, sr = 0; i < n + r; ++i) {\n      if (i < n) {\n        sr += source[i + j * n];\n      }\n      if (i >= r) {\n        if (i >= w) {\n          sr -= source[i - w + j * n];\n        }\n        target[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\n      }\n    }\n  }\n}\n\nfunction blurY(n, m, source, target, r) {\n  const w = (r << 1) + 1;\n  for (let i = 0; i < n; ++i) {\n    for (let j = 0, sr = 0; j < m + r; ++j) {\n      if (j < m) {\n        sr += source[i + j * n];\n      }\n      if (j >= r) {\n        if (j >= w) {\n          sr -= source[i + (j - w) * n];\n        }\n        target[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}