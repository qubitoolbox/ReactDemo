{"ast":null,"code":"import accessor from './accessor';\nimport array from './array';\nimport splitAccessPath from './splitAccessPath';\nimport stringValue from './stringValue';\nexport default function (fields, flat) {\n  if (fields) {\n    fields = flat ? array(fields).map(function (f) {\n      return f.replace(/\\\\(.)/g, '$1');\n    }) : array(fields);\n  }\n\n  var fn = !(fields && fields.length) ? function () {\n    return '';\n  } : Function('_', 'return \\'\\'+' + fields.map(function (f) {\n    return '_[' + (flat ? stringValue(f) : splitAccessPath(f).map(stringValue).join('][')) + ']';\n  }).join('+\\'|\\'+') + ';');\n  return accessor(fn, fields, 'key');\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-lite/node_modules/vega-util/src/key.js"],"names":["accessor","array","splitAccessPath","stringValue","fields","flat","map","f","replace","fn","length","Function","join"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,UAASC,MAAT,EAAiBC,IAAjB,EAAuB;AACpC,MAAID,MAAJ,EAAY;AACVA,IAAAA,MAAM,GAAGC,IAAI,GACTJ,KAAK,CAACG,MAAD,CAAL,CAAcE,GAAd,CAAkB,UAASC,CAAT,EAAY;AAAE,aAAOA,CAAC,CAACC,OAAF,CAAU,QAAV,EAAoB,IAApB,CAAP;AAAmC,KAAnE,CADS,GAETP,KAAK,CAACG,MAAD,CAFT;AAGD;;AAED,MAAIK,EAAE,GAAG,EAAEL,MAAM,IAAIA,MAAM,CAACM,MAAnB,IACL,YAAW;AAAE,WAAO,EAAP;AAAY,GADpB,GAELC,QAAQ,CAAC,GAAD,EAAM,iBACZP,MAAM,CAACE,GAAP,CAAW,UAASC,CAAT,EAAY;AACrB,WAAO,QAAQF,IAAI,GACbF,WAAW,CAACI,CAAD,CADE,GAEbL,eAAe,CAACK,CAAD,CAAf,CAAmBD,GAAnB,CAAuBH,WAAvB,EAAoCS,IAApC,CAAyC,IAAzC,CAFC,IAGD,GAHN;AAID,GALD,EAKGA,IALH,CAKQ,SALR,CADY,GAMS,GANf,CAFZ;AAUA,SAAOZ,QAAQ,CAACS,EAAD,EAAKL,MAAL,EAAa,KAAb,CAAf;AACD","sourcesContent":["import accessor from './accessor';\nimport array from './array';\nimport splitAccessPath from './splitAccessPath';\nimport stringValue from './stringValue';\n\nexport default function(fields, flat) {\n  if (fields) {\n    fields = flat\n      ? array(fields).map(function(f) { return f.replace(/\\\\(.)/g, '$1'); })\n      : array(fields);\n  }\n\n  var fn = !(fields && fields.length)\n    ? function() { return ''; }\n    : Function('_', 'return \\'\\'+' +\n        fields.map(function(f) {\n          return '_[' + (flat\n              ? stringValue(f)\n              : splitAccessPath(f).map(stringValue).join('][')\n            ) + ']';\n        }).join('+\\'|\\'+') + ';');\n\n  return accessor(fn, fields, 'key');\n}\n"]},"metadata":{},"sourceType":"module"}