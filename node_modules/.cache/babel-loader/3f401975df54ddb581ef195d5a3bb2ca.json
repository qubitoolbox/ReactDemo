{"ast":null,"code":"import { YEAR, QUARTER, MONTH, WEEK, DATE, DAY, HOURS, MINUTES, SECONDS, MILLISECONDS, timeUnits } from './units';\nimport { timeInterval, utcInterval } from './interval';\nimport { timeFormat as d3_timeFormat, utcFormat as d3_utcFormat } from 'd3-time-format';\nimport { error, extend, isObject, isString } from 'vega-util';\nconst defaultSpecifiers = {\n  [YEAR]: '%Y ',\n  [QUARTER]: 'Q%q ',\n  [MONTH]: '%b ',\n  [DATE]: '%d ',\n  [WEEK]: 'W%U ',\n  [DAY]: '%a ',\n  [HOURS]: '%H:00',\n  [MINUTES]: '00:%M',\n  [SECONDS]: ':%S',\n  [MILLISECONDS]: '.%L',\n  [`${YEAR}-${MONTH}`]: '%Y-%m ',\n  [`${YEAR}-${MONTH}-${DATE}`]: '%Y-%m-%d ',\n  [`${HOURS}-${MINUTES}`]: '%H:%M'\n};\nexport function timeUnitSpecifier(units, specifiers) {\n  const s = extend({}, defaultSpecifiers, specifiers),\n        u = timeUnits(units),\n        n = u.length;\n  let fmt = '',\n      start = 0,\n      end,\n      key;\n\n  for (start = 0; start < n;) {\n    for (end = u.length; end > start; --end) {\n      key = u.slice(start, end).join('-');\n\n      if (s[key] != null) {\n        fmt += s[key];\n        start = end;\n        break;\n      }\n    }\n  }\n\n  return fmt.trim();\n}\nexport function timeFormat(specifier) {\n  return formatter(d3_timeFormat, timeInterval, specifier);\n}\nexport function utcFormat(specifier) {\n  return formatter(d3_utcFormat, utcInterval, specifier);\n}\n\nfunction formatter(format, interval, specifier) {\n  return isString(specifier) ? format(specifier) : multiFormat(format, interval, specifier);\n}\n\nfunction multiFormat(format, interval, spec) {\n  spec = spec || {};\n\n  if (!isObject(spec)) {\n    error(`Invalid time multi-format specifier: ${spec}`);\n  }\n\n  const second = interval(SECONDS),\n        minute = interval(MINUTES),\n        hour = interval(HOURS),\n        day = interval(DATE),\n        week = interval(WEEK),\n        month = interval(MONTH),\n        quarter = interval(QUARTER),\n        year = interval(YEAR),\n        L = format(spec[MILLISECONDS] || '.%L'),\n        S = format(spec[SECONDS] || ':%S'),\n        M = format(spec[MINUTES] || '%I:%M'),\n        H = format(spec[HOURS] || '%I %p'),\n        d = format(spec[DATE] || spec[DAY] || '%a %d'),\n        w = format(spec[WEEK] || '%b %d'),\n        m = format(spec[MONTH] || '%B'),\n        q = format(spec[QUARTER] || '%B'),\n        y = format(spec[YEAR] || '%Y');\n  return function (date) {\n    return (second(date) < date ? L : minute(date) < date ? S : hour(date) < date ? M : day(date) < date ? H : month(date) < date ? week(date) < date ? d : w : year(date) < date ? quarter(date) < date ? m : q : y)(date);\n  };\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-time/src/format.js"],"names":["YEAR","QUARTER","MONTH","WEEK","DATE","DAY","HOURS","MINUTES","SECONDS","MILLISECONDS","timeUnits","timeInterval","utcInterval","timeFormat","d3_timeFormat","utcFormat","d3_utcFormat","error","extend","isObject","isString","defaultSpecifiers","timeUnitSpecifier","units","specifiers","s","u","n","length","fmt","start","end","key","slice","join","trim","specifier","formatter","format","interval","multiFormat","spec","second","minute","hour","day","week","month","quarter","year","L","S","M","H","d","w","m","q","y","date"],"mappings":"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","sourcesContent":["import {\n  YEAR, QUARTER, MONTH, WEEK, DATE, DAY,\n  HOURS, MINUTES, SECONDS, MILLISECONDS,\n  timeUnits\n} from './units';\n\nimport {\n  timeInterval,\n  utcInterval\n} from './interval';\n\nimport {\n  timeFormat as d3_timeFormat,\n  utcFormat as d3_utcFormat\n} from 'd3-time-format';\n\nimport {error, extend, isObject, isString} from 'vega-util';\n\nconst defaultSpecifiers = {\n  [YEAR]: '%Y ',\n  [QUARTER]: 'Q%q ',\n  [MONTH]: '%b ',\n  [DATE]: '%d ',\n  [WEEK]: 'W%U ',\n  [DAY]: '%a ',\n  [HOURS]: '%H:00',\n  [MINUTES]: '00:%M',\n  [SECONDS]: ':%S',\n  [MILLISECONDS]: '.%L',\n  [`${YEAR}-${MONTH}`]: '%Y-%m ',\n  [`${YEAR}-${MONTH}-${DATE}`]: '%Y-%m-%d ',\n  [`${HOURS}-${MINUTES}`]: '%H:%M'\n}\n\nexport function timeUnitSpecifier(units, specifiers) {\n  const s = extend({}, defaultSpecifiers, specifiers),\n        u = timeUnits(units),\n        n = u.length;\n\n  let fmt = '', start = 0, end, key;\n\n  for (start=0; start<n; ) {\n    for (end=u.length; end > start; --end) {\n      key = u.slice(start, end).join('-');\n      if (s[key] != null) {\n        fmt += s[key];\n        start = end;\n        break;\n      }\n    }\n  }\n\n  return fmt.trim();\n}\n\nexport function timeFormat(specifier) {\n  return formatter(d3_timeFormat, timeInterval, specifier);\n}\n\nexport function utcFormat(specifier) {\n  return formatter(d3_utcFormat, utcInterval, specifier);\n}\n\nfunction formatter(format, interval, specifier) {\n  return isString(specifier)\n    ? format(specifier)\n    : multiFormat(format, interval, specifier);\n}\n\nfunction multiFormat(format, interval, spec) {\n  spec = spec || {};\n  if (!isObject(spec)) {\n    error(`Invalid time multi-format specifier: ${spec}`);\n  }\n\n  const second = interval(SECONDS),\n        minute = interval(MINUTES),\n        hour = interval(HOURS),\n        day = interval(DATE),\n        week = interval(WEEK),\n        month = interval(MONTH),\n        quarter = interval(QUARTER),\n        year = interval(YEAR),\n        L = format(spec[MILLISECONDS] || '.%L'),\n        S = format(spec[SECONDS] || ':%S'),\n        M = format(spec[MINUTES] || '%I:%M'),\n        H = format(spec[HOURS] || '%I %p'),\n        d = format(spec[DATE] || spec[DAY] || '%a %d'),\n        w = format(spec[WEEK] || '%b %d'),\n        m = format(spec[MONTH] || '%B'),\n        q = format(spec[QUARTER] || '%B'),\n        y = format(spec[YEAR] || '%Y');\n\n  return function(date) {\n    return (second(date) < date ? L\n      : minute(date) < date ? S\n      : hour(date) < date ? M\n      : day(date) < date ? H\n      : month(date) < date ? (week(date) < date ? d : w)\n      : year(date) < date ? (quarter(date) < date ? m : q)\n      : y)(date);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}