{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\FirstML\\\\NewML.js\";\nimport React from \"react\"; //import * as t_f from '@tensorflow/tfjs-node'\n\nimport * as tf from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nconst model = tf.sequential();\nexport default class NewMl extends React.Component {\n  constructor(props) {\n    super(props);\n    model.add(tf.layers.dense({\n      units: 1,\n      inputShape: [200]\n    }));\n    model.compile({\n      loss: 'meanSquaredError',\n      optimizer: 'sgd',\n      metrics: ['MAE']\n    });\n    this.state = {\n      isTfReady: false,\n      training: false,\n      prediction: null\n    };\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n\n    this.setState({\n      isTfReady: true\n    });\n    this.train();\n    this.setState({\n      training: true\n    }); //const source = { uri: response.uri }\n  } // Generate some random fake data for demo purpose.\n  // Start model training process.\n\n\n  async train() {\n    const xs = tf.randomUniform([10000, 200]);\n    const ys = tf.randomUniform([10000, 1]);\n    const valXs = tf.randomUniform([1000, 200]);\n    const valYs = tf.randomUniform([1000, 1]);\n    model.fit(xs, ys, {\n      epochs: 100,\n      validationData: [valXs, valYs] // Add the tensorBoard callback here.\n      //callbacks: t_f.node.tensorBoard('/tmp/fit_logs_1')\n\n    }); //this.setState({prediction:valYs})\n  }\n\n  render() {\n    const {\n      isTfReady,\n      isModelReady,\n      prediction\n    } = this.state;\n    let xPs = tf.randomUniform([10000, 200]);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, this.state.isTfReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Yes Ready\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Not Ready\"), this.state.training ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Yes Trained\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Still Training\"), JSON.stringify(model.predict(xPs)));\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/NewML.js"],"names":["React","tf","mobilenet","model","sequential","NewMl","Component","constructor","props","add","layers","dense","units","inputShape","compile","loss","optimizer","metrics","state","isTfReady","training","prediction","componentDidMount","ready","setState","train","xs","randomUniform","ys","valXs","valYs","fit","epochs","validationData","render","isModelReady","xPs","JSON","stringify","predict"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;AAGA,MAAMC,KAAK,GAAGF,EAAE,CAACG,UAAH,EAAd;AAEA,eAAe,MAAMC,KAAN,SAAoBL,KAAK,CAACM,SAA1B,CAAmC;AAE9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEAL,IAAAA,KAAK,CAACM,GAAN,CAAUR,EAAE,CAACS,MAAH,CAAUC,KAAV,CAAgB;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,UAAU,EAAE,CAAC,GAAD;AAAxB,KAAhB,CAAV;AACAV,IAAAA,KAAK,CAACW,OAAN,CAAc;AACVC,MAAAA,IAAI,EAAE,kBADI;AAEVC,MAAAA,SAAS,EAAE,KAFD;AAGVC,MAAAA,OAAO,EAAE,CAAC,KAAD;AAHC,KAAd;AAKA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAC,KADD;AAETC,MAAAA,QAAQ,EAAC,KAFA;AAGTC,MAAAA,UAAU,EAAC;AAHF,KAAb;AAMD;;AAEH,QAAMC,iBAAN,GAA0B;AACtB;AACA,UAAMrB,EAAE,CAACsB,KAAH,EAAN,CAFsB,CAGtB;;AACA,SAAKC,QAAL,CAAc;AAACL,MAAAA,SAAS,EAAE;AAAZ,KAAd;AACA,SAAKM,KAAL;AACA,SAAKD,QAAL,CAAc;AAACJ,MAAAA,QAAQ,EAAC;AAAV,KAAd,EANsB,CAOtB;AAEH,GA5B6C,CA6B9C;AAIA;;;AACA,QAAMK,KAAN,GAAc;AACV,UAAMC,EAAE,GAAGzB,EAAE,CAAC0B,aAAH,CAAiB,CAAC,KAAD,EAAQ,GAAR,CAAjB,CAAX;AACA,UAAMC,EAAE,GAAG3B,EAAE,CAAC0B,aAAH,CAAiB,CAAC,KAAD,EAAQ,CAAR,CAAjB,CAAX;AACA,UAAME,KAAK,GAAG5B,EAAE,CAAC0B,aAAH,CAAiB,CAAC,IAAD,EAAO,GAAP,CAAjB,CAAd;AACA,UAAMG,KAAK,GAAG7B,EAAE,CAAC0B,aAAH,CAAiB,CAAC,IAAD,EAAO,CAAP,CAAjB,CAAd;AACAxB,IAAAA,KAAK,CAAC4B,GAAN,CAAUL,EAAV,EAAcE,EAAd,EAAkB;AACdI,MAAAA,MAAM,EAAE,GADM;AAEdC,MAAAA,cAAc,EAAE,CAACJ,KAAD,EAAQC,KAAR,CAFF,CAGd;AACA;;AAJc,KAAlB,EALU,CAWV;AACH;;AAEDI,EAAAA,MAAM,GACF;AACI,UAAM;AAAEf,MAAAA,SAAF;AAAagB,MAAAA,YAAb;AAA2Bd,MAAAA;AAA3B,QAA0C,KAAKH,KAArD;AACA,QAAIkB,GAAG,GAAGnC,EAAE,CAAC0B,aAAH,CAAiB,CAAC,KAAD,EAAQ,GAAR,CAAjB,CAAV;AACA,WACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKT,KAAL,CAAWC,SAAX,GAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAArB,GAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAD3C,EAEK,KAAKD,KAAL,CAAWE,QAAX,GAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAApB,GAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAF5C,EAGKiB,IAAI,CAACC,SAAL,CAAenC,KAAK,CAACoC,OAAN,CAAcH,GAAd,CAAf,CAHL,CADA;AASH;;AA7DyC","sourcesContent":["import React from \"react\";\r\n//import * as t_f from '@tensorflow/tfjs-node'\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as mobilenet from '@tensorflow-models/mobilenet';\r\n\r\n\r\nconst model = tf.sequential();\r\n\r\nexport default class NewMl extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        model.add(tf.layers.dense({ units: 1, inputShape: [200] }));\r\n        model.compile({\r\n            loss: 'meanSquaredError',\r\n            optimizer: 'sgd',\r\n            metrics: ['MAE']\r\n        })\r\n        this.state = {\r\n            isTfReady:false,\r\n            training:false,\r\n            prediction:null\r\n        }\r\n        \r\n      }\r\n    \r\n    async componentDidMount() {\r\n        // Wait for tf to be ready.\r\n        await tf.ready();\r\n        // Signal to the app that tensorflow.js can now be used.\r\n        this.setState({isTfReady: true})\r\n        this.train()\r\n        this.setState({training:true})\r\n        //const source = { uri: response.uri }\r\n\r\n    }\r\n    // Generate some random fake data for demo purpose.\r\n    \r\n\r\n\r\n    // Start model training process.\r\n    async train() {\r\n        const xs = tf.randomUniform([10000, 200]);\r\n        const ys = tf.randomUniform([10000, 1]);\r\n        const valXs = tf.randomUniform([1000, 200]);\r\n        const valYs = tf.randomUniform([1000, 1]);\r\n        model.fit(xs, ys, {\r\n            epochs: 100,\r\n            validationData: [valXs, valYs],\r\n            // Add the tensorBoard callback here.\r\n            //callbacks: t_f.node.tensorBoard('/tmp/fit_logs_1')\r\n        });\r\n        //this.setState({prediction:valYs})\r\n    }\r\n\r\n    render()\r\n        {\r\n            const { isTfReady, isModelReady, prediction } = this.state\r\n            let xPs = tf.randomUniform([10000, 200]);\r\n            return (\r\n            <div>\r\n                {this.state.isTfReady?<p>Yes Ready</p>:<p>Not Ready</p>}\r\n                {this.state.training?<p>Yes Trained</p>:<p>Still Training</p>}\r\n                {JSON.stringify(model.predict(xPs))}\r\n                \r\n                \r\n            </div>\r\n            );\r\n        }\r\n    \r\n\r\n}"]},"metadata":{},"sourceType":"module"}