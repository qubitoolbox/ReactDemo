{"ast":null,"code":"import * as log from '../../../log';\nimport { contains, getFirstDefined } from '../../../util';\nimport { getMarkConfig } from '../../common';\nimport { nonPosition } from './nonposition';\nexport function color(model) {\n  const {\n    markDef,\n    encoding,\n    config\n  } = model;\n  const {\n    filled,\n    type: markType\n  } = markDef;\n  const configValue = {\n    fill: getMarkConfig('fill', markDef, config),\n    stroke: getMarkConfig('stroke', markDef, config),\n    color: getMarkConfig('color', markDef, config)\n  };\n  const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;\n  const defaultFill = getFirstDefined(markDef.fill, filled === true ? markDef.color : undefined, configValue.fill, filled === true ? configValue.color : undefined, // If there is no fill, always fill symbols, bar, geoshape\n  // with transparent fills https://github.com/vega/vega-lite/issues/1316\n  transparentIfNeeded);\n  const defaultStroke = getFirstDefined(markDef.stroke, filled === false ? markDef.color : undefined, configValue.stroke, filled === false ? configValue.color : undefined);\n  const colorVgChannel = filled ? 'fill' : 'stroke';\n  const fillStrokeMarkDefAndConfig = Object.assign(Object.assign({}, defaultFill ? {\n    fill: {\n      value: defaultFill\n    }\n  } : {}), defaultStroke ? {\n    stroke: {\n      value: defaultStroke\n    }\n  } : {});\n\n  if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {\n    log.warn(log.message.droppingColor('property', {\n      fill: 'fill' in markDef,\n      stroke: 'stroke' in markDef\n    }));\n  }\n\n  return Object.assign(Object.assign(Object.assign(Object.assign({}, fillStrokeMarkDefAndConfig), nonPosition('color', model, {\n    vgChannel: colorVgChannel,\n    defaultValue: filled ? defaultFill : defaultStroke\n  })), nonPosition('fill', model, {\n    // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding\n    defaultValue: encoding.fill ? defaultFill : undefined\n  })), nonPosition('stroke', model, {\n    // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding\n    defaultValue: encoding.stroke ? defaultStroke : undefined\n  }));\n}","map":{"version":3,"sources":["../../../../../src/compile/mark/encode/color.ts"],"names":[],"mappings":"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","sourcesContent":["import * as log from '../../../log';\nimport {contains, getFirstDefined} from '../../../util';\nimport {VgEncodeEntry} from '../../../vega.schema';\nimport {getMarkConfig} from '../../common';\nimport {UnitModel} from '../../unit';\nimport {nonPosition} from './nonposition';\n\nexport function color(model: UnitModel): VgEncodeEntry {\n  const {markDef, encoding, config} = model;\n  const {filled, type: markType} = markDef;\n\n  const configValue = {\n    fill: getMarkConfig('fill', markDef, config),\n    stroke: getMarkConfig('stroke', markDef, config),\n    color: getMarkConfig('color', markDef, config)\n  };\n\n  const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType)\n    ? 'transparent'\n    : undefined;\n\n  const defaultFill = getFirstDefined(\n    markDef.fill,\n    filled === true ? markDef.color : undefined,\n    configValue.fill,\n    filled === true ? configValue.color : undefined,\n    // If there is no fill, always fill symbols, bar, geoshape\n    // with transparent fills https://github.com/vega/vega-lite/issues/1316\n    transparentIfNeeded\n  );\n\n  const defaultStroke = getFirstDefined(\n    markDef.stroke,\n    filled === false ? markDef.color : undefined,\n    configValue.stroke,\n    filled === false ? configValue.color : undefined\n  );\n\n  const colorVgChannel = filled ? 'fill' : 'stroke';\n\n  const fillStrokeMarkDefAndConfig: VgEncodeEntry = {\n    ...(defaultFill ? {fill: {value: defaultFill}} : {}),\n    ...(defaultStroke ? {stroke: {value: defaultStroke}} : {})\n  };\n\n  if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {\n    log.warn(log.message.droppingColor('property', {fill: 'fill' in markDef, stroke: 'stroke' in markDef}));\n  }\n\n  return {\n    ...fillStrokeMarkDefAndConfig,\n    ...nonPosition('color', model, {\n      vgChannel: colorVgChannel,\n      defaultValue: filled ? defaultFill : defaultStroke\n    }),\n    ...nonPosition('fill', model, {\n      // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding\n      defaultValue: encoding.fill ? defaultFill : undefined\n    }),\n    ...nonPosition('stroke', model, {\n      // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding\n      defaultValue: encoding.stroke ? defaultStroke : undefined\n    })\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}