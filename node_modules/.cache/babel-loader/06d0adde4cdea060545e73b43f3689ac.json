{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { hasOwnProperty } from 'vega-util';\nimport { FACET_CHANNELS, getPositionScaleChannel, isChannel, isScaleChannel } from '../channel';\nimport { getFieldDef, vgField } from '../channeldef';\nimport { forEach, reduce } from '../encoding';\nimport * as log from '../log';\nimport { hasDiscreteDomain } from '../scale';\nimport { isFacetSpec, isLayerSpec, isUnitSpec } from '../spec';\nimport { extractCompositionLayout } from '../spec/base';\nimport { extractTitleConfig, isText } from '../title';\nimport { normalizeTransform } from '../transform';\nimport { contains, duplicate, keys, varName } from '../util';\nimport { isVgRangeStep } from '../vega.schema';\nimport { assembleAxes } from './axis/assemble';\nimport { assembleHeaderGroups, assembleLayoutTitleBand, assembleTitleGroup } from './header/assemble';\nimport { HEADER_CHANNELS } from './header/component';\nimport { sizeExpr } from './layoutsize/assemble';\nimport { assembleLegends } from './legend/assemble';\nimport { parseLegend } from './legend/parse';\nimport { assembleProjections } from './projection/assemble';\nimport { parseProjection } from './projection/parse';\nimport { assembleScales } from './scale/assemble';\nimport { assembleDomain, getFieldFromDomain } from './scale/domain';\nimport { parseScales } from './scale/parse';\nimport { Split } from './split';\nexport class NameMap {\n  constructor() {\n    this.nameMap = {};\n  }\n\n  rename(oldName, newName) {\n    this.nameMap[oldName] = newName;\n  }\n\n  has(name) {\n    return this.nameMap[name] !== undefined;\n  }\n\n  get(name) {\n    // If the name appears in the _nameMap, we need to read its new name.\n    // We have to loop over the dict just in case the new name also gets renamed.\n    while (this.nameMap[name] && name !== this.nameMap[name]) {\n      name = this.nameMap[name];\n    }\n\n    return name;\n  }\n\n}\n/*\n  We use type guards instead of `instanceof` as `instanceof` makes\n  different parts of the compiler depend on the actual implementation of\n  the model classes, which in turn depend on different parts of the compiler.\n  Thus, `instanceof` leads to circular dependency problems.\n\n  On the other hand, type guards only make different parts of the compiler\n  depend on the type of the model classes, but not the actual implementation.\n*/\n\nexport function isUnitModel(model) {\n  var _a;\n\n  return ((_a = model) === null || _a === void 0 ? void 0 : _a.type) === 'unit';\n}\nexport function isFacetModel(model) {\n  var _a;\n\n  return ((_a = model) === null || _a === void 0 ? void 0 : _a.type) === 'facet';\n}\nexport function isRepeatModel(model) {\n  var _a;\n\n  return ((_a = model) === null || _a === void 0 ? void 0 : _a.type) === 'repeat';\n}\nexport function isConcatModel(model) {\n  var _a;\n\n  return ((_a = model) === null || _a === void 0 ? void 0 : _a.type) === 'concat';\n}\nexport function isLayerModel(model) {\n  var _a;\n\n  return ((_a = model) === null || _a === void 0 ? void 0 : _a.type) === 'layer';\n}\nexport class Model {\n  constructor(spec, type, parent, parentGivenName, config, repeater, resolve, view) {\n    var _a, _b;\n\n    this.type = type;\n    this.parent = parent;\n    this.config = config;\n    this.repeater = repeater;\n    this.view = view;\n    this.children = [];\n    /**\n     * Corrects the data references in marks after assemble.\n     */\n\n    this.correctDataNames = mark => {\n      // TODO: make this correct\n      // for normal data references\n      if (mark.from && mark.from.data) {\n        mark.from.data = this.lookupDataSource(mark.from.data);\n      } // for access to facet data\n\n\n      if (mark.from && mark.from.facet && mark.from.facet.data) {\n        mark.from.facet.data = this.lookupDataSource(mark.from.facet.data);\n      }\n\n      return mark;\n    };\n\n    this.parent = parent;\n    this.config = config;\n    this.repeater = repeater; // If name is not provided, always use parent's givenName to avoid name conflicts.\n\n    this.name = (_a = spec.name, _a !== null && _a !== void 0 ? _a : parentGivenName);\n    this.title = isText(spec.title) ? {\n      text: spec.title\n    } : spec.title; // Shared name maps\n\n    this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();\n    this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();\n    this.signalNameMap = parent ? parent.signalNameMap : new NameMap();\n    this.data = spec.data;\n    this.description = spec.description;\n    this.transforms = normalizeTransform((_b = spec.transform, _b !== null && _b !== void 0 ? _b : []));\n    this.layout = isUnitSpec(spec) || isLayerSpec(spec) ? {} : extractCompositionLayout(spec, type, config);\n    this.component = {\n      data: {\n        sources: parent ? parent.component.data.sources : [],\n        outputNodes: parent ? parent.component.data.outputNodes : {},\n        outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},\n        // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined\n        isFaceted: isFacetSpec(spec) || parent && parent.component.data.isFaceted && spec.data === undefined\n      },\n      layoutSize: new Split(),\n      layoutHeaders: {\n        row: {},\n        column: {},\n        facet: {}\n      },\n      mark: null,\n      resolve: Object.assign({\n        scale: {},\n        axis: {},\n        legend: {}\n      }, resolve ? duplicate(resolve) : {}),\n      selection: null,\n      scales: null,\n      projection: null,\n      axes: {},\n      legends: {}\n    };\n  }\n\n  get width() {\n    return this.getSizeSignalRef('width');\n  }\n\n  get height() {\n    return this.getSizeSignalRef('height');\n  }\n\n  parse() {\n    this.parseScale();\n    this.parseLayoutSize(); // depends on scale\n\n    this.renameTopLevelLayoutSizeSignal();\n    this.parseSelections();\n    this.parseProjection();\n    this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.\n\n    this.parseAxesAndHeaders(); // depends on scale and layout size\n\n    this.parseLegends(); // depends on scale, markDef\n\n    this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.\n  }\n\n  parseScale() {\n    parseScales(this);\n  }\n\n  parseProjection() {\n    parseProjection(this);\n  }\n  /**\n   * Rename top-level spec's size to be just width / height, ignoring model name.\n   * This essentially merges the top-level spec's width/height signals with the width/height signals\n   * to help us reduce redundant signals declaration.\n   */\n\n\n  renameTopLevelLayoutSizeSignal() {\n    if (this.getName('width') !== 'width') {\n      this.renameSignal(this.getName('width'), 'width');\n    }\n\n    if (this.getName('height') !== 'height') {\n      this.renameSignal(this.getName('height'), 'height');\n    }\n  }\n\n  parseLegends() {\n    parseLegend(this);\n  }\n\n  assembleGroupStyle() {\n    var _a, _b;\n\n    if (this.type === 'unit' || this.type === 'layer') {\n      return _b = (_a = this.view) === null || _a === void 0 ? void 0 : _a.style, _b !== null && _b !== void 0 ? _b : 'cell';\n    }\n\n    return undefined;\n  }\n\n  assembleEncodeFromView(view) {\n    // Exclude \"style\"\n    const {\n      style: _\n    } = view,\n          baseView = __rest(view, [\"style\"]);\n\n    const e = {};\n\n    for (const property in baseView) {\n      if (hasOwnProperty(baseView, property)) {\n        const value = baseView[property];\n\n        if (value !== undefined) {\n          e[property] = {\n            value\n          };\n        }\n      }\n    }\n\n    return e;\n  }\n\n  assembleGroupEncodeEntry(isTopLevel) {\n    let encodeEntry = undefined;\n\n    if (this.view) {\n      encodeEntry = this.assembleEncodeFromView(this.view);\n    }\n\n    if (!isTopLevel) {\n      // For top-level spec, we can set the global width and height signal to adjust the group size.\n      // For other child specs, we have to manually set width and height in the encode entry.\n      if (this.type === 'unit' || this.type === 'layer') {\n        return Object.assign({\n          width: this.getSizeSignalRef('width'),\n          height: this.getSizeSignalRef('height')\n        }, encodeEntry !== null && encodeEntry !== void 0 ? encodeEntry : {});\n      }\n    }\n\n    return encodeEntry;\n  }\n\n  assembleLayout() {\n    if (!this.layout) {\n      return undefined;\n    }\n\n    const _a = this.layout,\n          {\n      spacing\n    } = _a,\n          layout = __rest(_a, [\"spacing\"]);\n\n    const {\n      component,\n      config\n    } = this;\n    const titleBand = assembleLayoutTitleBand(component.layoutHeaders, config);\n    return Object.assign(Object.assign(Object.assign({\n      padding: spacing\n    }, this.assembleDefaultLayout()), layout), titleBand ? {\n      titleBand\n    } : {});\n  }\n\n  assembleDefaultLayout() {\n    return {};\n  }\n\n  assembleHeaderMarks() {\n    const {\n      layoutHeaders\n    } = this.component;\n    let headerMarks = [];\n\n    for (const channel of FACET_CHANNELS) {\n      if (layoutHeaders[channel].title) {\n        headerMarks.push(assembleTitleGroup(this, channel));\n      }\n    }\n\n    for (const channel of HEADER_CHANNELS) {\n      headerMarks = headerMarks.concat(assembleHeaderGroups(this, channel));\n    }\n\n    return headerMarks;\n  }\n\n  assembleAxes() {\n    return assembleAxes(this.component.axes, this.config);\n  }\n\n  assembleLegends() {\n    return assembleLegends(this);\n  }\n\n  assembleProjections() {\n    return assembleProjections(this);\n  }\n\n  assembleTitle() {\n    var _a, _b, _c;\n\n    const _d = (_a = this.title, _a !== null && _a !== void 0 ? _a : {}),\n          {\n      encoding\n    } = _d,\n          titleNoEncoding = __rest(_d, [\"encoding\"]);\n\n    const title = Object.assign(Object.assign(Object.assign({}, extractTitleConfig(this.config.title).nonMark), titleNoEncoding), encoding ? {\n      encode: {\n        update: encoding\n      }\n    } : {});\n\n    if (title.text) {\n      if (contains(['unit', 'layer'], this.type)) {\n        // Unit/Layer\n        if (contains(['middle', undefined], title.anchor)) {\n          title.frame = (_b = title.frame, _b !== null && _b !== void 0 ? _b : 'group');\n        }\n      } else {\n        // composition with Vega layout\n        // Set title = \"start\" by default for composition as \"middle\" does not look nice\n        // https://github.com/vega/vega/issues/960#issuecomment-471360328\n        title.anchor = (_c = title.anchor, _c !== null && _c !== void 0 ? _c : 'start');\n      }\n\n      return keys(title).length > 0 ? title : undefined;\n    }\n\n    return undefined;\n  }\n  /**\n   * Assemble the mark group for this model. We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.\n   */\n\n\n  assembleGroup(signals = []) {\n    const group = {};\n    signals = signals.concat(this.assembleSignals());\n\n    if (signals.length > 0) {\n      group.signals = signals;\n    }\n\n    const layout = this.assembleLayout();\n\n    if (layout) {\n      group.layout = layout;\n    }\n\n    group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks()); // Only include scales if this spec is top-level or if parent is facet.\n    // (Otherwise, it will be merged with upper-level's scope.)\n\n    const scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];\n\n    if (scales.length > 0) {\n      group.scales = scales;\n    }\n\n    const axes = this.assembleAxes();\n\n    if (axes.length > 0) {\n      group.axes = axes;\n    }\n\n    const legends = this.assembleLegends();\n\n    if (legends.length > 0) {\n      group.legends = legends;\n    }\n\n    return group;\n  }\n\n  hasDescendantWithFieldOnChannel(channel) {\n    for (const child of this.children) {\n      if (isUnitModel(child)) {\n        if (child.channelHasField(channel)) {\n          return true;\n        }\n      } else {\n        if (child.hasDescendantWithFieldOnChannel(channel)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  getName(text) {\n    return varName((this.name ? this.name + '_' : '') + text);\n  }\n  /**\n   * Request a data source name for the given data source type and mark that data source as required.\n   * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().\n   * You can lookup the correct dataset name in assemble with `lookupDataSource`.\n   */\n\n\n  requestDataName(name) {\n    var _a;\n\n    const fullName = this.getName(name); // Increase ref count. This is critical because otherwise we won't create a data source.\n    // We also increase the ref counts on OutputNode.getSource() calls.\n\n    const refCounts = this.component.data.outputNodeRefCounts;\n    refCounts[fullName] = (_a = refCounts[fullName], _a !== null && _a !== void 0 ? _a : 0) + 1;\n    return fullName;\n  }\n\n  getSizeSignalRef(sizeType) {\n    if (isFacetModel(this.parent)) {\n      const channel = getPositionScaleChannel(sizeType);\n      const scaleComponent = this.component.scales[channel];\n\n      if (scaleComponent && !scaleComponent.merged) {\n        // independent scale\n        const type = scaleComponent.get('type');\n        const range = scaleComponent.get('range');\n\n        if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n          const scaleName = scaleComponent.get('name');\n          const domain = assembleDomain(this, channel);\n          const field = getFieldFromDomain(domain);\n\n          if (field) {\n            const fieldRef = vgField({\n              aggregate: 'distinct',\n              field\n            }, {\n              expr: 'datum'\n            });\n            return {\n              signal: sizeExpr(scaleName, scaleComponent, fieldRef)\n            };\n          } else {\n            log.warn(`Unknown field for ${channel}. Cannot calculate view size.`);\n            return null;\n          }\n        }\n      }\n    }\n\n    return {\n      signal: this.signalNameMap.get(this.getName(sizeType))\n    };\n  }\n  /**\n   * Lookup the name of the datasource for an output node. You probably want to call this in assemble.\n   */\n\n\n  lookupDataSource(name) {\n    const node = this.component.data.outputNodes[name];\n\n    if (!node) {\n      // Name not found in map so let's just return what we got.\n      // This can happen if we already have the correct name.\n      return name;\n    }\n\n    return node.getSource();\n  }\n\n  getSignalName(oldSignalName) {\n    return this.signalNameMap.get(oldSignalName);\n  }\n\n  renameSignal(oldName, newName) {\n    this.signalNameMap.rename(oldName, newName);\n  }\n\n  renameScale(oldName, newName) {\n    this.scaleNameMap.rename(oldName, newName);\n  }\n\n  renameProjection(oldName, newName) {\n    this.projectionNameMap.rename(oldName, newName);\n  }\n  /**\n   * @return scale name for a given channel after the scale has been parsed and named.\n   */\n\n\n  scaleName(originalScaleName, parse) {\n    if (parse) {\n      // During the parse phase always return a value\n      // No need to refer to rename map because a scale can't be renamed\n      // before it has the original name.\n      return this.getName(originalScaleName);\n    } // If there is a scale for the channel, it should either\n    // be in the scale component or exist in the name map\n\n\n    if ( // If there is a scale for the channel, there should be a local scale component for it\n    isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName] || // in the scale name map (the scale get merged by its parent)\n    this.scaleNameMap.has(this.getName(originalScaleName))) {\n      return this.scaleNameMap.get(this.getName(originalScaleName));\n    }\n\n    return undefined;\n  }\n  /**\n   * @return projection name after the projection has been parsed and named.\n   */\n\n\n  projectionName(parse) {\n    if (parse) {\n      // During the parse phase always return a value\n      // No need to refer to rename map because a projection can't be renamed\n      // before it has the original name.\n      return this.getName('projection');\n    }\n\n    if (this.component.projection && !this.component.projection.merged || this.projectionNameMap.has(this.getName('projection'))) {\n      return this.projectionNameMap.get(this.getName('projection'));\n    }\n\n    return undefined;\n  }\n  /**\n   * Traverse a model's hierarchy to get the scale component for a particular channel.\n   */\n\n\n  getScaleComponent(channel) {\n    /* istanbul ignore next: This is warning for debugging test */\n    if (!this.component.scales) {\n      throw new Error('getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().');\n    }\n\n    const localScaleComponent = this.component.scales[channel];\n\n    if (localScaleComponent && !localScaleComponent.merged) {\n      return localScaleComponent;\n    }\n\n    return this.parent ? this.parent.getScaleComponent(channel) : undefined;\n  }\n  /**\n   * Traverse a model's hierarchy to get a particular selection component.\n   */\n\n\n  getSelectionComponent(variableName, origName) {\n    let sel = this.component.selection[variableName];\n\n    if (!sel && this.parent) {\n      sel = this.parent.getSelectionComponent(variableName, origName);\n    }\n\n    if (!sel) {\n      throw new Error(log.message.selectionNotFound(origName));\n    }\n\n    return sel;\n  }\n\n}\n/** Abstract class for UnitModel and FacetModel. Both of which can contain fieldDefs as a part of its own specification. */\n\nexport class ModelWithField extends Model {\n  /** Get \"field\" reference for Vega */\n  vgField(channel, opt = {}) {\n    const fieldDef = this.fieldDef(channel);\n\n    if (!fieldDef) {\n      return undefined;\n    }\n\n    return vgField(fieldDef, opt);\n  }\n\n  reduceFieldDef(f, init) {\n    return reduce(this.getMapping(), (acc, cd, c) => {\n      const fieldDef = getFieldDef(cd);\n\n      if (fieldDef) {\n        return f(acc, fieldDef, c);\n      }\n\n      return acc;\n    }, init);\n  }\n\n  forEachFieldDef(f, t) {\n    forEach(this.getMapping(), (cd, c) => {\n      const fieldDef = getFieldDef(cd);\n\n      if (fieldDef) {\n        f(fieldDef, c);\n      }\n    }, t);\n  }\n\n}","map":{"version":3,"sources":["../../../src/compile/model.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AnchorValue,\n  Axis as VgAxis,\n  Legend as VgLegend,\n  NewSignal,\n  Projection as VgProjection,\n  SignalRef,\n  Title as VgTitle\n} from 'vega';\nimport {hasOwnProperty} from 'vega-util';\nimport {\n  Channel,\n  FACET_CHANNELS,\n  getPositionScaleChannel,\n  isChannel,\n  isScaleChannel,\n  ScaleChannel,\n  SingleDefChannel\n} from '../channel';\nimport {ChannelDef, FieldDef, FieldRefOption, getFieldDef, vgField} from '../channeldef';\nimport {Config} from '../config';\nimport {Data, DataSourceType} from '../data';\nimport {forEach, reduce} from '../encoding';\nimport * as log from '../log';\nimport {Resolve} from '../resolve';\nimport {hasDiscreteDomain} from '../scale';\nimport {isFacetSpec, isLayerSpec, isUnitSpec} from '../spec';\nimport {\n  extractCompositionLayout,\n  GenericCompositionLayoutWithColumns,\n  LayoutSizeMixins,\n  SpecType,\n  ViewBackground\n} from '../spec/base';\nimport {NormalizedSpec} from '../spec/index';\nimport {extractTitleConfig, isText, TitleParams} from '../title';\nimport {normalizeTransform, Transform} from '../transform';\nimport {contains, Dict, duplicate, keys, varName} from '../util';\nimport {isVgRangeStep, VgData, VgEncodeEntry, VgLayout, VgMarkGroup} from '../vega.schema';\nimport {assembleAxes} from './axis/assemble';\nimport {AxisComponentIndex} from './axis/component';\nimport {ConcatModel} from './concat';\nimport {DataComponent} from './data';\nimport {FacetModel} from './facet';\nimport {assembleHeaderGroups, assembleLayoutTitleBand, assembleTitleGroup} from './header/assemble';\nimport {HEADER_CHANNELS, LayoutHeaderComponent} from './header/component';\nimport {LayerModel} from './layer';\nimport {sizeExpr} from './layoutsize/assemble';\nimport {LayoutSizeComponent, LayoutSizeIndex} from './layoutsize/component';\nimport {assembleLegends} from './legend/assemble';\nimport {LegendComponentIndex} from './legend/component';\nimport {parseLegend} from './legend/parse';\nimport {assembleProjections} from './projection/assemble';\nimport {ProjectionComponent} from './projection/component';\nimport {parseProjection} from './projection/parse';\nimport {RepeatModel} from './repeat';\nimport {RepeaterValue} from './repeater';\nimport {assembleScales} from './scale/assemble';\nimport {ScaleComponent, ScaleComponentIndex} from './scale/component';\nimport {assembleDomain, getFieldFromDomain} from './scale/domain';\nimport {parseScales} from './scale/parse';\nimport {SelectionComponent} from './selection';\nimport {Split} from './split';\nimport {UnitModel} from './unit';\n\n/**\n * Composable Components that are intermediate results of the parsing phase of the\n * compilations. The components represents parts of the specification in a form that\n * can be easily merged (during parsing for composite specs).\n * In addition, these components are easily transformed into Vega specifications\n * during the \"assemble\" phase, which is the last phase of the compilation step.\n */\nexport interface Component {\n  data: DataComponent;\n\n  layoutSize: LayoutSizeComponent;\n\n  layoutHeaders: {\n    row?: LayoutHeaderComponent;\n    column?: LayoutHeaderComponent;\n    facet?: LayoutHeaderComponent;\n  };\n\n  mark: VgMarkGroup[];\n  scales: ScaleComponentIndex;\n  projection: ProjectionComponent;\n  selection: Dict<SelectionComponent>;\n\n  /** Dictionary mapping channel to VgAxis definition */\n  axes: AxisComponentIndex;\n\n  /** Dictionary mapping channel to VgLegend definition */\n  legends: LegendComponentIndex;\n\n  resolve: Resolve;\n}\n\nexport interface NameMapInterface {\n  rename(oldname: string, newName: string): void;\n  has(name: string): boolean;\n  get(name: string): string;\n}\n\nexport class NameMap implements NameMapInterface {\n  private nameMap: Dict<string>;\n\n  constructor() {\n    this.nameMap = {};\n  }\n\n  public rename(oldName: string, newName: string) {\n    this.nameMap[oldName] = newName;\n  }\n\n  public has(name: string): boolean {\n    return this.nameMap[name] !== undefined;\n  }\n\n  public get(name: string): string {\n    // If the name appears in the _nameMap, we need to read its new name.\n    // We have to loop over the dict just in case the new name also gets renamed.\n    while (this.nameMap[name] && name !== this.nameMap[name]) {\n      name = this.nameMap[name];\n    }\n\n    return name;\n  }\n}\n\n/*\n  We use type guards instead of `instanceof` as `instanceof` makes\n  different parts of the compiler depend on the actual implementation of\n  the model classes, which in turn depend on different parts of the compiler.\n  Thus, `instanceof` leads to circular dependency problems.\n\n  On the other hand, type guards only make different parts of the compiler\n  depend on the type of the model classes, but not the actual implementation.\n*/\n\nexport function isUnitModel(model: Model): model is UnitModel {\n  return model?.type === 'unit';\n}\n\nexport function isFacetModel(model: Model): model is FacetModel {\n  return model?.type === 'facet';\n}\n\nexport function isRepeatModel(model: Model): model is RepeatModel {\n  return model?.type === 'repeat';\n}\n\nexport function isConcatModel(model: Model): model is ConcatModel {\n  return model?.type === 'concat';\n}\n\nexport function isLayerModel(model: Model): model is LayerModel {\n  return model?.type === 'layer';\n}\n\nexport abstract class Model {\n  public readonly name: string;\n\n  public size: LayoutSizeMixins;\n\n  public readonly title: TitleParams;\n  public readonly description: string;\n\n  public readonly data: Data | null;\n  public readonly transforms: Transform[];\n  public readonly layout: GenericCompositionLayoutWithColumns;\n\n  /** Name map for scales, which can be renamed by a model's parent. */\n  protected scaleNameMap: NameMapInterface;\n\n  /** Name map for projections, which can be renamed by a model's parent. */\n  protected projectionNameMap: NameMapInterface;\n\n  /** Name map for signals, which can be renamed by a model's parent. */\n  protected signalNameMap: NameMapInterface;\n\n  public readonly component: Component;\n\n  public abstract readonly children: Model[] = [];\n\n  constructor(\n    spec: NormalizedSpec,\n    public readonly type: SpecType,\n    public readonly parent: Model,\n    parentGivenName: string,\n    public readonly config: Config,\n    public readonly repeater: RepeaterValue,\n    resolve: Resolve,\n    public readonly view?: ViewBackground\n  ) {\n    this.parent = parent;\n    this.config = config;\n    this.repeater = repeater;\n\n    // If name is not provided, always use parent's givenName to avoid name conflicts.\n    this.name = spec.name ?? parentGivenName;\n    this.title = isText(spec.title) ? {text: spec.title} : (spec.title as TitleParams);\n\n    // Shared name maps\n    this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();\n    this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();\n    this.signalNameMap = parent ? parent.signalNameMap : new NameMap();\n\n    this.data = spec.data;\n\n    this.description = spec.description;\n    this.transforms = normalizeTransform(spec.transform ?? []);\n    this.layout = isUnitSpec(spec) || isLayerSpec(spec) ? {} : extractCompositionLayout(spec, type, config);\n\n    this.component = {\n      data: {\n        sources: parent ? parent.component.data.sources : [],\n        outputNodes: parent ? parent.component.data.outputNodes : {},\n        outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},\n        // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined\n        isFaceted: isFacetSpec(spec) || (parent && parent.component.data.isFaceted && spec.data === undefined)\n      },\n      layoutSize: new Split<LayoutSizeIndex>(),\n      layoutHeaders: {row: {}, column: {}, facet: {}},\n      mark: null,\n      resolve: {\n        scale: {},\n        axis: {},\n        legend: {},\n        ...(resolve ? duplicate(resolve) : {})\n      },\n      selection: null,\n      scales: null,\n      projection: null,\n      axes: {},\n      legends: {}\n    };\n  }\n\n  public get width(): SignalRef {\n    return this.getSizeSignalRef('width');\n  }\n\n  public get height(): SignalRef {\n    return this.getSizeSignalRef('height');\n  }\n\n  public parse() {\n    this.parseScale();\n\n    this.parseLayoutSize(); // depends on scale\n    this.renameTopLevelLayoutSizeSignal();\n\n    this.parseSelections();\n    this.parseProjection();\n    this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.\n    this.parseAxesAndHeaders(); // depends on scale and layout size\n    this.parseLegends(); // depends on scale, markDef\n    this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.\n  }\n\n  public abstract parseData(): void;\n\n  public abstract parseSelections(): void;\n\n  public parseScale() {\n    parseScales(this);\n  }\n\n  public parseProjection() {\n    parseProjection(this);\n  }\n\n  public abstract parseLayoutSize(): void;\n\n  /**\n   * Rename top-level spec's size to be just width / height, ignoring model name.\n   * This essentially merges the top-level spec's width/height signals with the width/height signals\n   * to help us reduce redundant signals declaration.\n   */\n  private renameTopLevelLayoutSizeSignal() {\n    if (this.getName('width') !== 'width') {\n      this.renameSignal(this.getName('width'), 'width');\n    }\n    if (this.getName('height') !== 'height') {\n      this.renameSignal(this.getName('height'), 'height');\n    }\n  }\n\n  public abstract parseMarkGroup(): void;\n\n  public abstract parseAxesAndHeaders(): void;\n\n  public parseLegends() {\n    parseLegend(this);\n  }\n\n  public abstract assembleSelectionTopLevelSignals(signals: NewSignal[]): NewSignal[];\n  public abstract assembleSignals(): NewSignal[];\n\n  public abstract assembleSelectionData(data: readonly VgData[]): readonly VgData[];\n\n  public assembleGroupStyle(): string | string[] {\n    if (this.type === 'unit' || this.type === 'layer') {\n      return this.view?.style ?? 'cell';\n    }\n    return undefined;\n  }\n\n  private assembleEncodeFromView(view: ViewBackground): VgEncodeEntry {\n    // Exclude \"style\"\n    const {style: _, ...baseView} = view;\n\n    const e = {};\n    for (const property in baseView) {\n      if (hasOwnProperty(baseView, property)) {\n        const value = baseView[property];\n        if (value !== undefined) {\n          e[property] = {value};\n        }\n      }\n    }\n    return e;\n  }\n\n  public assembleGroupEncodeEntry(isTopLevel: boolean): VgEncodeEntry {\n    let encodeEntry: VgEncodeEntry = undefined;\n    if (this.view) {\n      encodeEntry = this.assembleEncodeFromView(this.view);\n    }\n    if (!isTopLevel) {\n      // For top-level spec, we can set the global width and height signal to adjust the group size.\n      // For other child specs, we have to manually set width and height in the encode entry.\n      if (this.type === 'unit' || this.type === 'layer') {\n        return {\n          width: this.getSizeSignalRef('width'),\n          height: this.getSizeSignalRef('height'),\n          ...(encodeEntry ?? {})\n        };\n      }\n    }\n\n    return encodeEntry;\n  }\n\n  public assembleLayout(): VgLayout {\n    if (!this.layout) {\n      return undefined;\n    }\n\n    const {spacing, ...layout} = this.layout;\n\n    const {component, config} = this;\n    const titleBand = assembleLayoutTitleBand(component.layoutHeaders, config);\n\n    return {\n      padding: spacing,\n      ...this.assembleDefaultLayout(),\n      ...layout,\n      ...(titleBand ? {titleBand} : {})\n    };\n  }\n\n  protected assembleDefaultLayout(): VgLayout {\n    return {};\n  }\n\n  public abstract assembleLayoutSignals(): NewSignal[];\n\n  public assembleHeaderMarks(): VgMarkGroup[] {\n    const {layoutHeaders} = this.component;\n    let headerMarks = [];\n\n    for (const channel of FACET_CHANNELS) {\n      if (layoutHeaders[channel].title) {\n        headerMarks.push(assembleTitleGroup(this, channel));\n      }\n    }\n\n    for (const channel of HEADER_CHANNELS) {\n      headerMarks = headerMarks.concat(assembleHeaderGroups(this, channel));\n    }\n    return headerMarks;\n  }\n\n  public abstract assembleMarks(): VgMarkGroup[];\n\n  public assembleAxes(): VgAxis[] {\n    return assembleAxes(this.component.axes, this.config);\n  }\n\n  public assembleLegends(): VgLegend[] {\n    return assembleLegends(this);\n  }\n\n  public assembleProjections(): VgProjection[] {\n    return assembleProjections(this);\n  }\n\n  public assembleTitle(): VgTitle {\n    const {encoding, ...titleNoEncoding} = this.title ?? ({} as TitleParams);\n\n    const title: VgTitle = {\n      ...extractTitleConfig(this.config.title).nonMark,\n      ...titleNoEncoding,\n      ...(encoding ? {encode: {update: encoding}} : {})\n    };\n\n    if (title.text) {\n      if (contains(['unit', 'layer'], this.type)) {\n        // Unit/Layer\n        if (contains<AnchorValue>(['middle', undefined], title.anchor)) {\n          title.frame = title.frame ?? 'group';\n        }\n      } else {\n        // composition with Vega layout\n\n        // Set title = \"start\" by default for composition as \"middle\" does not look nice\n        // https://github.com/vega/vega/issues/960#issuecomment-471360328\n        title.anchor = title.anchor ?? 'start';\n      }\n\n      return keys(title).length > 0 ? title : undefined;\n    }\n    return undefined;\n  }\n\n  /**\n   * Assemble the mark group for this model. We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.\n   */\n  public assembleGroup(signals: NewSignal[] = []) {\n    const group: VgMarkGroup = {};\n\n    signals = signals.concat(this.assembleSignals());\n\n    if (signals.length > 0) {\n      group.signals = signals;\n    }\n\n    const layout = this.assembleLayout();\n    if (layout) {\n      group.layout = layout;\n    }\n\n    group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());\n\n    // Only include scales if this spec is top-level or if parent is facet.\n    // (Otherwise, it will be merged with upper-level's scope.)\n    const scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];\n    if (scales.length > 0) {\n      group.scales = scales;\n    }\n\n    const axes = this.assembleAxes();\n    if (axes.length > 0) {\n      group.axes = axes;\n    }\n\n    const legends = this.assembleLegends();\n    if (legends.length > 0) {\n      group.legends = legends;\n    }\n\n    return group;\n  }\n\n  public hasDescendantWithFieldOnChannel(channel: Channel) {\n    for (const child of this.children) {\n      if (isUnitModel(child)) {\n        if (child.channelHasField(channel)) {\n          return true;\n        }\n      } else {\n        if (child.hasDescendantWithFieldOnChannel(channel)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  public getName(text: string) {\n    return varName((this.name ? this.name + '_' : '') + text);\n  }\n\n  /**\n   * Request a data source name for the given data source type and mark that data source as required.\n   * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().\n   * You can lookup the correct dataset name in assemble with `lookupDataSource`.\n   */\n  public requestDataName(name: DataSourceType) {\n    const fullName = this.getName(name);\n\n    // Increase ref count. This is critical because otherwise we won't create a data source.\n    // We also increase the ref counts on OutputNode.getSource() calls.\n    const refCounts = this.component.data.outputNodeRefCounts;\n    refCounts[fullName] = (refCounts[fullName] ?? 0) + 1;\n\n    return fullName;\n  }\n\n  public getSizeSignalRef(sizeType: 'width' | 'height'): SignalRef {\n    if (isFacetModel(this.parent)) {\n      const channel = getPositionScaleChannel(sizeType);\n      const scaleComponent = this.component.scales[channel];\n\n      if (scaleComponent && !scaleComponent.merged) {\n        // independent scale\n        const type = scaleComponent.get('type');\n        const range = scaleComponent.get('range');\n\n        if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n          const scaleName = scaleComponent.get('name');\n          const domain = assembleDomain(this, channel);\n          const field = getFieldFromDomain(domain);\n          if (field) {\n            const fieldRef = vgField({aggregate: 'distinct', field}, {expr: 'datum'});\n            return {\n              signal: sizeExpr(scaleName, scaleComponent, fieldRef)\n            };\n          } else {\n            log.warn(`Unknown field for ${channel}. Cannot calculate view size.`);\n            return null;\n          }\n        }\n      }\n    }\n\n    return {\n      signal: this.signalNameMap.get(this.getName(sizeType))\n    };\n  }\n\n  /**\n   * Lookup the name of the datasource for an output node. You probably want to call this in assemble.\n   */\n  public lookupDataSource(name: string) {\n    const node = this.component.data.outputNodes[name];\n\n    if (!node) {\n      // Name not found in map so let's just return what we got.\n      // This can happen if we already have the correct name.\n      return name;\n    }\n\n    return node.getSource();\n  }\n\n  public getSignalName(oldSignalName: string): string {\n    return this.signalNameMap.get(oldSignalName);\n  }\n\n  public renameSignal(oldName: string, newName: string) {\n    this.signalNameMap.rename(oldName, newName);\n  }\n\n  public renameScale(oldName: string, newName: string) {\n    this.scaleNameMap.rename(oldName, newName);\n  }\n\n  public renameProjection(oldName: string, newName: string) {\n    this.projectionNameMap.rename(oldName, newName);\n  }\n\n  /**\n   * @return scale name for a given channel after the scale has been parsed and named.\n   */\n  public scaleName(originalScaleName: ScaleChannel | string, parse?: boolean): string {\n    if (parse) {\n      // During the parse phase always return a value\n      // No need to refer to rename map because a scale can't be renamed\n      // before it has the original name.\n      return this.getName(originalScaleName);\n    }\n\n    // If there is a scale for the channel, it should either\n    // be in the scale component or exist in the name map\n    if (\n      // If there is a scale for the channel, there should be a local scale component for it\n      (isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName]) ||\n      // in the scale name map (the scale get merged by its parent)\n      this.scaleNameMap.has(this.getName(originalScaleName))\n    ) {\n      return this.scaleNameMap.get(this.getName(originalScaleName));\n    }\n    return undefined;\n  }\n\n  /**\n   * @return projection name after the projection has been parsed and named.\n   */\n  public projectionName(parse?: boolean): string {\n    if (parse) {\n      // During the parse phase always return a value\n      // No need to refer to rename map because a projection can't be renamed\n      // before it has the original name.\n      return this.getName('projection');\n    }\n\n    if (\n      (this.component.projection && !this.component.projection.merged) ||\n      this.projectionNameMap.has(this.getName('projection'))\n    ) {\n      return this.projectionNameMap.get(this.getName('projection'));\n    }\n    return undefined;\n  }\n\n  /**\n   * Corrects the data references in marks after assemble.\n   */\n  public correctDataNames = (mark: VgMarkGroup) => {\n    // TODO: make this correct\n\n    // for normal data references\n    if (mark.from && mark.from.data) {\n      mark.from.data = this.lookupDataSource(mark.from.data);\n    }\n\n    // for access to facet data\n    if (mark.from && mark.from.facet && mark.from.facet.data) {\n      mark.from.facet.data = this.lookupDataSource(mark.from.facet.data);\n    }\n\n    return mark;\n  };\n\n  /**\n   * Traverse a model's hierarchy to get the scale component for a particular channel.\n   */\n  public getScaleComponent(channel: ScaleChannel): ScaleComponent {\n    /* istanbul ignore next: This is warning for debugging test */\n    if (!this.component.scales) {\n      throw new Error(\n        'getScaleComponent cannot be called before parseScale(). Make sure you have called parseScale or use parseUnitModelWithScale().'\n      );\n    }\n\n    const localScaleComponent = this.component.scales[channel];\n    if (localScaleComponent && !localScaleComponent.merged) {\n      return localScaleComponent;\n    }\n    return this.parent ? this.parent.getScaleComponent(channel) : undefined;\n  }\n\n  /**\n   * Traverse a model's hierarchy to get a particular selection component.\n   */\n  public getSelectionComponent(variableName: string, origName: string): SelectionComponent {\n    let sel = this.component.selection[variableName];\n    if (!sel && this.parent) {\n      sel = this.parent.getSelectionComponent(variableName, origName);\n    }\n    if (!sel) {\n      throw new Error(log.message.selectionNotFound(origName));\n    }\n    return sel;\n  }\n}\n\n/** Abstract class for UnitModel and FacetModel. Both of which can contain fieldDefs as a part of its own specification. */\nexport abstract class ModelWithField extends Model {\n  public abstract fieldDef(channel: SingleDefChannel): FieldDef<any>;\n\n  /** Get \"field\" reference for Vega */\n  public vgField(channel: SingleDefChannel, opt: FieldRefOption = {}) {\n    const fieldDef = this.fieldDef(channel);\n\n    if (!fieldDef) {\n      return undefined;\n    }\n\n    return vgField(fieldDef, opt);\n  }\n\n  protected abstract getMapping(): {[key in Channel]?: any};\n\n  public reduceFieldDef<T, U>(f: (acc: U, fd: FieldDef<string>, c: Channel) => U, init: T): T {\n    return reduce(\n      this.getMapping(),\n      (acc: U, cd: ChannelDef, c: Channel) => {\n        const fieldDef = getFieldDef(cd);\n        if (fieldDef) {\n          return f(acc, fieldDef, c);\n        }\n        return acc;\n      },\n      init\n    );\n  }\n\n  public forEachFieldDef(f: (fd: FieldDef<string>, c: Channel) => void, t?: any) {\n    forEach(\n      this.getMapping(),\n      (cd: ChannelDef, c: Channel) => {\n        const fieldDef = getFieldDef(cd);\n        if (fieldDef) {\n          f(fieldDef, c);\n        }\n      },\n      t\n    );\n  }\n  public abstract channelHasField(channel: Channel): boolean;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}