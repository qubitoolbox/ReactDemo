{"ast":null,"code":"import { scale as getScale } from './scales';\nimport { constant, peek } from 'vega-util';\nimport * as $ from 'd3-interpolate';\nconst scaleProps = ['clamp', 'base', 'constant', 'exponent'];\nexport function interpolateRange(interpolator, range) {\n  var start = range[0],\n      span = peek(range) - start;\n  return function (i) {\n    return interpolator(start + i * span);\n  };\n}\nexport function interpolateColors(colors, type, gamma) {\n  return $.piecewise(interpolate(type || 'rgb', gamma), colors);\n}\nexport function quantizeInterpolator(interpolator, count) {\n  var samples = new Array(count),\n      n = count + 1;\n\n  for (var i = 0; i < count;) samples[i] = interpolator(++i / n);\n\n  return samples;\n}\nexport function scaleCopy(scale) {\n  const t = scale.type,\n        s = scale.copy();\n  s.type = t;\n  return s;\n}\nexport function scaleFraction(scale, min, max) {\n  var delta = max - min,\n      i,\n      t,\n      s;\n\n  if (!delta || !Number.isFinite(delta)) {\n    return constant(0.5);\n  } else {\n    i = (t = scale.type).indexOf('-');\n    t = i < 0 ? t : t.slice(i + 1);\n    s = getScale(t)().domain([min, max]).range([0, 1]);\n    scaleProps.forEach(m => scale[m] ? s[m](scale[m]()) : 0);\n    return s;\n  }\n}\nexport function interpolate(type, gamma) {\n  var interp = $[method(type)];\n  return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;\n}\n\nfunction method(type) {\n  return 'interpolate' + type.toLowerCase().split('-').map(function (s) {\n    return s[0].toUpperCase() + s.slice(1);\n  }).join('');\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-functions/node_modules/vega-scale/src/interpolate.js"],"names":["scale","getScale","constant","peek","$","scaleProps","interpolateRange","interpolator","range","start","span","i","interpolateColors","colors","type","gamma","piecewise","interpolate","quantizeInterpolator","count","samples","Array","n","scaleCopy","t","s","copy","scaleFraction","min","max","delta","Number","isFinite","indexOf","slice","domain","forEach","m","interp","method","toLowerCase","split","map","toUpperCase","join"],"mappings":"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","sourcesContent":["import {scale as getScale} from './scales';\nimport {constant, peek} from 'vega-util';\nimport * as $ from 'd3-interpolate';\n\nconst scaleProps = ['clamp', 'base', 'constant', 'exponent'];\n\nexport function interpolateRange(interpolator, range) {\n  var start = range[0],\n      span = peek(range) - start;\n  return function(i) { return interpolator(start + i * span); };\n}\n\nexport function interpolateColors(colors, type, gamma) {\n  return $.piecewise(interpolate(type || 'rgb', gamma), colors);\n}\n\nexport function quantizeInterpolator(interpolator, count) {\n  var samples = new Array(count),\n      n = count + 1;\n  for (var i = 0; i < count;) samples[i] = interpolator(++i / n);\n  return samples;\n}\n\nexport function scaleCopy(scale) {\n  const t = scale.type,\n        s = scale.copy();\n  s.type = t;\n  return s;\n}\n\nexport function scaleFraction(scale, min, max) {\n  var delta = max - min, i, t, s;\n\n  if (!delta || !Number.isFinite(delta)) {\n    return constant(0.5);\n  } else {\n    i = (t = scale.type).indexOf('-');\n    t = i < 0 ? t : t.slice(i + 1);\n    s = getScale(t)().domain([min, max]).range([0, 1]);\n    scaleProps.forEach(m => scale[m] ? s[m](scale[m]()) : 0);\n    return s;\n  }\n}\n\nexport function interpolate(type, gamma) {\n  var interp = $[method(type)];\n  return (gamma != null && interp && interp.gamma)\n    ? interp.gamma(gamma)\n    : interp;\n}\n\nfunction method(type) {\n  return 'interpolate' + type.toLowerCase()\n    .split('-')\n    .map(function(s) { return s[0].toUpperCase() + s.slice(1); })\n    .join('');\n}\n"]},"metadata":{},"sourceType":"module"}