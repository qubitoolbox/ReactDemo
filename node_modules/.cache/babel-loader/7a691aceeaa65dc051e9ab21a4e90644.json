{"ast":null,"code":"export function getOffset(channel, markDef) {\n  const offsetChannel = channel + 'Offset'; // Need to cast as the type can't be inferred automatically\n  // TODO: in the future read from encoding channel too\n\n  const markDefOffsetValue = markDef[offsetChannel];\n\n  if (markDefOffsetValue) {\n    return markDefOffsetValue;\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["../../../../../src/compile/mark/encode/offset.ts"],"names":[],"mappings":"AAMA,OAAM,SAAU,SAAV,CAAoB,OAApB,EAA8C,OAA9C,EAA8D;AAClE,QAAM,aAAa,GAAI,OAAO,GAAG,QAAjC,CADkE,CAC6B;AAE/F;;AACA,QAAM,kBAAkB,GAAG,OAAO,CAAC,aAAD,CAAlC;;AACA,MAAI,kBAAJ,EAAwB;AACtB,WAAO,kBAAP;AACD;;AAED,SAAO,SAAP;AACD","sourcesContent":["/**\n * Utility files for producing Vega ValueRef for marks\n */\nimport {PositionChannel} from '../../../channel';\nimport {MarkDef} from '../../../mark';\n\nexport function getOffset(channel: PositionChannel, markDef: MarkDef) {\n  const offsetChannel = (channel + 'Offset') as 'xOffset' | 'yOffset' | 'x2Offset' | 'y2Offset'; // Need to cast as the type can't be inferred automatically\n\n  // TODO: in the future read from encoding channel too\n  const markDefOffsetValue = markDef[offsetChannel];\n  if (markDefOffsetValue) {\n    return markDefOffsetValue;\n  }\n\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}