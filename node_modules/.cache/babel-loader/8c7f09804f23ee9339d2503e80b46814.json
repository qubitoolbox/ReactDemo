{"ast":null,"code":"import { POSITION_SCALE_CHANNELS } from '../channel';\nimport * as log from '../log';\nimport { contains } from '../util';\nimport { isConcatModel, isFacetModel, isLayerModel, isRepeatModel } from './model';\nexport function defaultScaleResolve(channel, model) {\n  if (isLayerModel(model) || isFacetModel(model)) {\n    return 'shared';\n  } else if (isConcatModel(model) || isRepeatModel(model)) {\n    return contains(POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';\n  }\n  /* istanbul ignore next: should never reach here. */\n\n\n  throw new Error('invalid model type for resolve');\n}\nexport function parseGuideResolve(resolve, channel) {\n  const channelScaleResolve = resolve.scale[channel];\n  const guide = contains(POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';\n\n  if (channelScaleResolve === 'independent') {\n    if (resolve[guide][channel] === 'shared') {\n      log.warn(log.message.independentScaleMeansIndependentGuide(channel));\n    }\n\n    return 'independent';\n  }\n\n  return resolve[guide][channel] || 'shared';\n}","map":{"version":3,"sources":["../../../src/compile/resolve.ts"],"names":[],"mappings":"AAAA,SAAQ,uBAAR,QAAoD,YAApD;AACA,OAAO,KAAK,GAAZ,MAAqB,QAArB;AAEA,SAAQ,QAAR,QAAuB,SAAvB;AACA,SAAQ,aAAR,EAAuB,YAAvB,EAAqC,YAArC,EAAmD,aAAnD,QAA8E,SAA9E;AAEA,OAAM,SAAU,mBAAV,CAA8B,OAA9B,EAAqD,KAArD,EAAiE;AACrE,MAAI,YAAY,CAAC,KAAD,CAAZ,IAAuB,YAAY,CAAC,KAAD,CAAvC,EAAgD;AAC9C,WAAO,QAAP;AACD,GAFD,MAEO,IAAI,aAAa,CAAC,KAAD,CAAb,IAAwB,aAAa,CAAC,KAAD,CAAzC,EAAkD;AACvD,WAAO,QAAQ,CAAC,uBAAD,EAA0B,OAA1B,CAAR,GAA6C,aAA7C,GAA6D,QAApE;AACD;AACD;;;AACA,QAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;AAED,OAAM,SAAU,iBAAV,CAA4B,OAA5B,EAA8C,OAA9C,EAAmE;AACvE,QAAM,mBAAmB,GAAG,OAAO,CAAC,KAAR,CAAc,OAAd,CAA5B;AACA,QAAM,KAAK,GAAG,QAAQ,CAAC,uBAAD,EAA0B,OAA1B,CAAR,GAA6C,MAA7C,GAAsD,QAApE;;AAEA,MAAI,mBAAmB,KAAK,aAA5B,EAA2C;AACzC,QAAI,OAAO,CAAC,KAAD,CAAP,CAAe,OAAf,MAA4B,QAAhC,EAA0C;AACxC,MAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,qCAAZ,CAAkD,OAAlD,CAAT;AACD;;AACD,WAAO,aAAP;AACD;;AAED,SAAO,OAAO,CAAC,KAAD,CAAP,CAAe,OAAf,KAA2B,QAAlC;AACD","sourcesContent":["import {POSITION_SCALE_CHANNELS, ScaleChannel} from '../channel';\nimport * as log from '../log';\nimport {Resolve, ResolveMode} from '../resolve';\nimport {contains} from '../util';\nimport {isConcatModel, isFacetModel, isLayerModel, isRepeatModel, Model} from './model';\n\nexport function defaultScaleResolve(channel: ScaleChannel, model: Model): ResolveMode {\n  if (isLayerModel(model) || isFacetModel(model)) {\n    return 'shared';\n  } else if (isConcatModel(model) || isRepeatModel(model)) {\n    return contains(POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';\n  }\n  /* istanbul ignore next: should never reach here. */\n  throw new Error('invalid model type for resolve');\n}\n\nexport function parseGuideResolve(resolve: Resolve, channel: ScaleChannel): ResolveMode {\n  const channelScaleResolve = resolve.scale[channel];\n  const guide = contains(POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';\n\n  if (channelScaleResolve === 'independent') {\n    if (resolve[guide][channel] === 'shared') {\n      log.warn(log.message.independentScaleMeansIndependentGuide(channel));\n    }\n    return 'independent';\n  }\n\n  return resolve[guide][channel] || 'shared';\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}