{"ast":null,"code":"import add from './add';\nimport connect from './connect';\nimport events from './events';\nimport { ingest, parse, preload, request } from './load';\nimport on from './on';\nimport { rank, rerank } from './rank';\nimport { evaluate, run, runAsync, runAfter, enqueue, getPulse } from './run';\nimport { pulse, touch, update } from './update';\nimport changeset from '../ChangeSet';\nimport Heap from '../util/Heap';\nimport UniqueList from '../util/UniqueList';\nimport { loader } from 'vega-loader';\nimport { id, logger, Error } from 'vega-util';\n/**\n * A dataflow graph for reactive processing of data streams.\n * @constructor\n */\n\nexport default function Dataflow() {\n  this.logger(logger());\n  this.logLevel(Error);\n  this._clock = 0;\n  this._rank = 0;\n\n  try {\n    this._loader = loader();\n  } catch (e) {// do nothing if loader module is unavailable\n  }\n\n  this._touched = UniqueList(id);\n  this._input = {};\n  this._pulse = null;\n  this._heap = Heap((a, b) => a.qrank - b.qrank);\n  this._postrun = [];\n}\nvar prototype = Dataflow.prototype;\n/**\n * The current timestamp of this dataflow. This value reflects the\n * timestamp of the previous dataflow run. The dataflow is initialized\n * with a stamp value of 0. The initial run of the dataflow will have\n * a timestap of 1, and so on. This value will match the\n * {@link Pulse.stamp} property.\n * @return {number} - The current timestamp value.\n */\n\nprototype.stamp = function () {\n  return this._clock;\n};\n/**\n * Gets or sets the loader instance to use for data file loading. A\n * loader object must provide a \"load\" method for loading files and a\n * \"sanitize\" method for checking URL/filename validity. Both methods\n * should accept a URI and options hash as arguments, and return a Promise\n * that resolves to the loaded file contents (load) or a hash containing\n * sanitized URI data with the sanitized url assigned to the \"href\" property\n * (sanitize).\n * @param {object} _ - The loader instance to use.\n * @return {object|Dataflow} - If no arguments are provided, returns\n *   the current loader instance. Otherwise returns this Dataflow instance.\n */\n\n\nprototype.loader = function (_) {\n  if (arguments.length) {\n    this._loader = _;\n    return this;\n  } else {\n    return this._loader;\n  }\n};\n/**\n * Empty entry threshold for garbage cleaning. Map data structures will\n * perform cleaning once the number of empty entries exceeds this value.\n */\n\n\nprototype.cleanThreshold = 1e4; // OPERATOR REGISTRATION\n\nprototype.add = add;\nprototype.connect = connect;\nprototype.rank = rank;\nprototype.rerank = rerank; // OPERATOR UPDATES\n\nprototype.pulse = pulse;\nprototype.touch = touch;\nprototype.update = update;\nprototype.changeset = changeset; // DATA LOADING\n\nprototype.ingest = ingest;\nprototype.parse = parse;\nprototype.preload = preload;\nprototype.request = request; // EVENT HANDLING\n\nprototype.events = events;\nprototype.on = on; // PULSE PROPAGATION\n\nprototype.evaluate = evaluate;\nprototype.run = run;\nprototype.runAsync = runAsync;\nprototype.runAfter = runAfter;\nprototype._enqueue = enqueue;\nprototype._getPulse = getPulse; // LOGGING AND ERROR HANDLING\n\nfunction logMethod(method) {\n  return function () {\n    return this._log[method].apply(this, arguments);\n  };\n}\n/**\n * Get or set the logger instance used to log messages. If no arguments are\n * provided, returns the current logger instance. Otherwise, sets the logger\n * and return this Dataflow instance. Provided loggers must support the full\n * API of logger objects generated by the vega-util logger method. Note that\n * by default the log level of the new logger will be used; use the logLevel\n * method to adjust the log level as needed.\n */\n\n\nprototype.logger = function (logger) {\n  if (arguments.length) {\n    this._log = logger;\n    return this;\n  } else {\n    return this._log;\n  }\n};\n/**\n * Logs an error message. By default, logged messages are written to console\n * output. The message will only be logged if the current log level is high\n * enough to permit error messages.\n */\n\n\nprototype.error = logMethod('error');\n/**\n * Logs a warning message. By default, logged messages are written to console\n * output. The message will only be logged if the current log level is high\n * enough to permit warning messages.\n */\n\nprototype.warn = logMethod('warn');\n/**\n * Logs a information message. By default, logged messages are written to\n * console output. The message will only be logged if the current log level is\n * high enough to permit information messages.\n */\n\nprototype.info = logMethod('info');\n/**\n * Logs a debug message. By default, logged messages are written to console\n * output. The message will only be logged if the current log level is high\n * enough to permit debug messages.\n */\n\nprototype.debug = logMethod('debug');\n/**\n * Get or set the current log level. If an argument is provided, it\n * will be used as the new log level.\n * @param {number} [level] - Should be one of None, Warn, Info\n * @return {number} - The current log level.\n */\n\nprototype.logLevel = logMethod('level');","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-dataflow/src/dataflow/Dataflow.js"],"names":["add","connect","events","ingest","parse","preload","request","on","rank","rerank","evaluate","run","runAsync","runAfter","enqueue","getPulse","pulse","touch","update","changeset","Heap","UniqueList","loader","id","logger","Error","Dataflow","logLevel","_clock","_rank","_loader","e","_touched","_input","_pulse","_heap","a","b","qrank","_postrun","prototype","stamp","_","arguments","length","cleanThreshold","_enqueue","_getPulse","logMethod","method","_log","apply","error","warn","info","debug"],"mappings":"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","sourcesContent":["import add from './add';\nimport connect from './connect';\nimport events from './events';\nimport {ingest, parse, preload, request} from './load';\nimport on from './on';\nimport {rank, rerank} from './rank';\nimport {evaluate, run, runAsync, runAfter, enqueue, getPulse} from './run';\nimport {pulse, touch, update} from './update';\nimport changeset from '../ChangeSet';\nimport Heap from '../util/Heap';\nimport UniqueList from '../util/UniqueList';\nimport {loader} from 'vega-loader';\nimport {id, logger, Error} from 'vega-util';\n\n/**\n * A dataflow graph for reactive processing of data streams.\n * @constructor\n */\nexport default function Dataflow() {\n  this.logger(logger());\n  this.logLevel(Error);\n\n  this._clock = 0;\n  this._rank = 0;\n  try {\n    this._loader = loader();\n  } catch (e) {\n    // do nothing if loader module is unavailable\n  }\n\n  this._touched = UniqueList(id);\n  this._input = {};\n  this._pulse = null;\n\n  this._heap = Heap((a, b) => a.qrank - b.qrank);\n  this._postrun = [];\n}\n\nvar prototype = Dataflow.prototype;\n\n/**\n * The current timestamp of this dataflow. This value reflects the\n * timestamp of the previous dataflow run. The dataflow is initialized\n * with a stamp value of 0. The initial run of the dataflow will have\n * a timestap of 1, and so on. This value will match the\n * {@link Pulse.stamp} property.\n * @return {number} - The current timestamp value.\n */\nprototype.stamp = function() {\n  return this._clock;\n};\n\n/**\n * Gets or sets the loader instance to use for data file loading. A\n * loader object must provide a \"load\" method for loading files and a\n * \"sanitize\" method for checking URL/filename validity. Both methods\n * should accept a URI and options hash as arguments, and return a Promise\n * that resolves to the loaded file contents (load) or a hash containing\n * sanitized URI data with the sanitized url assigned to the \"href\" property\n * (sanitize).\n * @param {object} _ - The loader instance to use.\n * @return {object|Dataflow} - If no arguments are provided, returns\n *   the current loader instance. Otherwise returns this Dataflow instance.\n */\nprototype.loader = function(_) {\n  if (arguments.length) {\n    this._loader = _;\n    return this;\n  } else {\n    return this._loader;\n  }\n};\n\n/**\n * Empty entry threshold for garbage cleaning. Map data structures will\n * perform cleaning once the number of empty entries exceeds this value.\n */\nprototype.cleanThreshold = 1e4;\n\n// OPERATOR REGISTRATION\nprototype.add = add;\nprototype.connect = connect;\nprototype.rank = rank;\nprototype.rerank = rerank;\n\n// OPERATOR UPDATES\nprototype.pulse = pulse;\nprototype.touch = touch;\nprototype.update = update;\nprototype.changeset = changeset;\n\n// DATA LOADING\nprototype.ingest = ingest;\nprototype.parse  = parse;\nprototype.preload = preload;\nprototype.request = request;\n\n// EVENT HANDLING\nprototype.events = events;\nprototype.on = on;\n\n// PULSE PROPAGATION\nprototype.evaluate = evaluate;\nprototype.run = run;\nprototype.runAsync = runAsync;\nprototype.runAfter = runAfter;\nprototype._enqueue = enqueue;\nprototype._getPulse = getPulse;\n\n// LOGGING AND ERROR HANDLING\n\nfunction logMethod(method) {\n  return function() {\n    return this._log[method].apply(this, arguments);\n  };\n}\n\n/**\n * Get or set the logger instance used to log messages. If no arguments are\n * provided, returns the current logger instance. Otherwise, sets the logger\n * and return this Dataflow instance. Provided loggers must support the full\n * API of logger objects generated by the vega-util logger method. Note that\n * by default the log level of the new logger will be used; use the logLevel\n * method to adjust the log level as needed.\n */\nprototype.logger = function(logger) {\n  if (arguments.length) {\n    this._log = logger;\n    return this;\n  } else {\n    return this._log;\n  }\n};\n\n/**\n * Logs an error message. By default, logged messages are written to console\n * output. The message will only be logged if the current log level is high\n * enough to permit error messages.\n */\nprototype.error = logMethod('error');\n\n/**\n * Logs a warning message. By default, logged messages are written to console\n * output. The message will only be logged if the current log level is high\n * enough to permit warning messages.\n */\nprototype.warn = logMethod('warn');\n\n/**\n * Logs a information message. By default, logged messages are written to\n * console output. The message will only be logged if the current log level is\n * high enough to permit information messages.\n */\nprototype.info = logMethod('info');\n\n/**\n * Logs a debug message. By default, logged messages are written to console\n * output. The message will only be logged if the current log level is high\n * enough to permit debug messages.\n */\nprototype.debug = logMethod('debug');\n\n/**\n * Get or set the current log level. If an argument is provided, it\n * will be used as the new log level.\n * @param {number} [level] - Should be one of None, Warn, Info\n * @return {number} - The current log level.\n */\nprototype.logLevel = logMethod('level');\n"]},"metadata":{},"sourceType":"module"}