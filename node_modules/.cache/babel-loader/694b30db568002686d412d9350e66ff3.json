{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\FirstML\\\\AnotherMl.js\";\nimport React from \"react\";\nimport * as tf from '@tensorflow/tfjs';\nimport LineGraph from '../../Components/ChartJs/Charts.js';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent'; //import Play from '../../Components/PlayGround/PlayGround.js'\n\nimport Graphing from '../../Components/Graphs/Graphing.js';\nimport CustomLinearProgress from '../../Components/LinearProgress/LinearProgress.js';\nexport var theindata;\nexport var adata = {\n  data: [0],\n  loss: [0],\n  flagtrain: false,\n  labelsdata: [],\n  labelsdata1: [],\n  weights: []\n};\nexport var thelabels;\nconst model = tf.sequential({\n  layers: [tf.layers.dense({\n    inputShape: [4],\n    units: 4,\n    activation: 'relu'\n  }), tf.layers.dense({\n    units: 25,\n    activation: 'relu'\n  }), //tf.layers.dense({units:10, activation:'relu'}),\n  tf.layers.dense({\n    units: 4,\n    activation: 'relu'\n  })]\n});\nvar prediction_;\nexport var data_;\nvar labels;\nvar vlafs;\nvar dummy;\nvar dummy1;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(10)\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%'\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)'\n  },\n  avatar: {\n    backgroundColor: '#FFF'\n  }\n}));\nmodel.compile({\n  optimizer: 'adam',\n  learningrate: 0.003,\n  dropout: 0.3,\n  loss: 'categoricalCrossentropy',\n  metrics: ['accuracy']\n});\nexport var state;\nexport default class AnotherMl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isTfReady: false,\n      trained: false,\n      isitraining: false,\n      x: null,\n      y: null,\n      loss: null,\n      measure: null,\n      measure1: null,\n      datasets: null,\n      counter: 0,\n      weights: [],\n      prediction: null\n    };\n    this.theindata = {};\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n\n    this.setState({\n      isTfReady: true\n    });\n    this.setState({\n      trained: false\n    });\n    await this.trainTheModel();\n  }\n\n  trainTheModel() {\n    // Generate dummy data.\n    data_ = tf.randomNormal([100, 4]);\n    labels = tf.randomUniform([100, 4]);\n    this.setState({\n      x: data_.toString()\n    });\n    this.setState({\n      y: labels.toString()\n    });\n    this.setState({\n      isitraining: true\n    });\n    let counter = 0;\n    var i = 1;\n    var flag = false;\n    var index = 0;\n    arr = [0];\n\n    function onBatchEnd(batch, logs) {\n      console.log(`Accuracy: ${logs.acc}`, `loss: ${logs.loss}`, `epoch: ${counter}`);\n      flag = false;\n\n      for (i; !flag;) {\n        if (!adata.data[1] && !adata.loss) {\n          let j = \"x\";\n          let k = \"y\";\n          adata.data[1] = parseFloat(logs.acc);\n          adata.loss[1] = parseFloat(logs.loss);\n          adata.labelsdata[1] = i;\n          adata.labelsdata1[1] = i;\n          adata.weights[i] = {\n            j: i,\n            k: parseFloat(model.getWeights(false).toString())\n          };\n          console.log(adata.weights[i]);\n        } else if (!adata.data[i] && !adata.loss[i]) {\n          let j = \"x\";\n          let k = \"y\";\n          adata.data[i] = parseFloat(logs.acc);\n          adata.loss[i] = parseFloat(logs.loss);\n          adata.labelsdata[i] = i;\n          adata.labelsdata1[i] = i;\n          adata.weights[i] = {\n            j: i,\n            k: parseFloat(model.getWeights(false).toString())\n          };\n          console.log(adata.weights[i]);\n        } else {\n          let j = \"x\";\n          let k = \"y\";\n          adata.data[i + 1] = parseFloat(logs.acc);\n          adata.loss[i + 1] = parseFloat(logs.loss);\n          adata.labelsdata1[i + 1] = i;\n          adata.weights[i] = {\n            j: i,\n            k: parseFloat(model.getWeights().toString())\n          }; //model.getWeights().values().next().value\n\n          console.log(model.getWeights().values().next().value);\n        }\n\n        i += 1;\n        index += 1;\n        flag = true;\n      }\n\n      counter += 1;\n    }\n\n    function updateChart(logs) {//console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\n    }\n\n    model.fit(data_, labels, {\n      epochs: 15,\n      batchSize: 10,\n      callbacks: {\n        onBatchEnd\n      }\n    }).then(info => {\n      this.setState({\n        isitraining: false\n      });\n      this.setState({\n        trained: true\n      });\n      this.setState({\n        flag: true\n      });\n      this.thePrediction();\n      console.log(adata);\n    });\n  }\n\n  async thePrediction() {\n    if (this.state.trained) {\n      prediction_ = await model.predict(tf.randomNormal([10, 4]));\n      this.setState({\n        prediction: prediction_.toString(prediction_.print())\n      });\n    }\n\n    this.randomm();\n    console.log(model.summary.toString());\n  }\n\n  async randomm() {\n    for (let index = 0; index < 1; index++) {\n      adata[\"flagtrain\"] = true;\n    }\n  }\n\n  render() {\n    const {\n      isTfReady,\n      trained,\n      flagged,\n      isitraining,\n      measure,\n      x,\n      y,\n      prediction\n    } = this.state;\n    var arr1 = [];\n    thelabels = {\n      labels: {\n        labels: [\"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\", \"app\"]\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Is TensorFlow Ready?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, this.state.isTfReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Yes Ready\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Not Ready\")))), React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Is the model Training?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, this.state.isitraining ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Yes Training...\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Not Training\")))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Training Data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), this.state.x ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, this.state.x, \" \") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Loading\"), React.createElement(CustomLinearProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    })))))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Target Data\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), this.state.y ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, this.state.y, \" \") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Loading\"), React.createElement(CustomLinearProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    })))))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Prediction Results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), this.state.prediction && this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, this.state.prediction, \" \") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"Loading\"), React.createElement(CustomLinearProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }))))))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Weights from Model\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, model.getWeights().toString()) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Loading\"), React.createElement(CustomLinearProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    })))))), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      title: \"Visualized Metric\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, this.state.trained ? React.createElement(Graphing, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"Loading\"), React.createElement(CustomLinearProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    })))))));\n  }\n\n}\nexport var arr;","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/AnotherMl.js"],"names":["React","tf","LineGraph","Grid","makeStyles","CardHeader","Card","CardContent","Graphing","CustomLinearProgress","theindata","adata","data","loss","flagtrain","labelsdata","labelsdata1","weights","thelabels","model","sequential","layers","dense","inputShape","units","activation","prediction_","data_","labels","vlafs","dummy","dummy1","useStyles","theme","root","marginTop","spacing","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","compile","optimizer","learningrate","dropout","metrics","state","AnotherMl","Component","constructor","props","isTfReady","trained","isitraining","x","y","measure","measure1","datasets","counter","prediction","componentDidMount","ready","setState","trainTheModel","randomNormal","randomUniform","toString","i","flag","index","arr","onBatchEnd","batch","logs","console","log","acc","j","k","parseFloat","getWeights","values","next","value","updateChart","fit","epochs","batchSize","callbacks","then","info","thePrediction","predict","print","randomm","summary","render","flagged","arr1"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport LineGraph from '../../Components/ChartJs/Charts.js'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent';\r\n//import Play from '../../Components/PlayGround/PlayGround.js'\r\nimport Graphing from '../../Components/Graphs/Graphing.js'\r\nimport CustomLinearProgress from '../../Components/LinearProgress/LinearProgress.js'\r\nexport var theindata\r\n\r\nexport var adata = {data:[0], loss: [0], flagtrain: false, labelsdata:[], labelsdata1:[],weights:[]}\r\n\r\nexport var thelabels;\r\n\r\nconst model = tf.sequential({\r\n    layers: [\r\n      tf.layers.dense({inputShape: [4], units: 4, activation: 'relu'}),\r\n      tf.layers.dense({units:25, activation:'relu'}),\r\n      //tf.layers.dense({units:10, activation:'relu'}),\r\n      tf.layers.dense({units: 4, activation: 'relu'}),\r\n    ]\r\n   });\r\nvar prediction_;\r\nexport var data_;\r\nvar labels;\r\nvar vlafs;\r\nvar dummy;\r\nvar dummy1;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      marginTop:theme.spacing(10),\r\n    },\r\n    media: {\r\n      height: 0,\r\n      paddingTop: '56.25%',\r\n    },\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n      backgroundColor: '#FFF',\r\n    },\r\n  }));\r\n\r\n  model.compile({\r\n    optimizer: 'adam',\r\n    learningrate: 0.003,\r\n    dropout: 0.3,\r\n    loss: 'categoricalCrossentropy',\r\n    metrics: ['accuracy']\r\n  });\r\nexport var state;\r\n\r\nexport default class AnotherMl extends React.Component{\r\n    \r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n      }\r\n        state = {\r\n            isTfReady:false,\r\n            trained:false,\r\n            isitraining: false,\r\n            x : null, \r\n            y : null,\r\n            loss: null,\r\n            measure: null,\r\n            measure1:null,\r\n            datasets : null, \r\n            counter : 0,\r\n            weights :[],\r\n            prediction:null\r\n        }  \r\n\r\n        theindata  = {}\r\n    \r\n    async componentDidMount() {\r\n        // Wait for tf to be ready.\r\n        await tf.ready();\r\n        // Signal to the app that tensorflow.js can now be used.\r\n        this.setState({isTfReady: true})\r\n        this.setState({trained: false})\r\n        await this.trainTheModel()\r\n    }\r\n    trainTheModel(){\r\n\r\n        // Generate dummy data.\r\n        data_ = tf.randomNormal([100, 4]);\r\n        labels = tf.randomUniform([100, 4]);\r\n        \r\n        this.setState({x:data_.toString()})\r\n        this.setState({y:labels.toString()})\r\n        this.setState({isitraining:true})\r\n        let counter = 0;\r\n\r\n        var i = 1\r\n        var flag = false\r\n        var index = 0\r\n        arr = [0]\r\n\r\n        function onBatchEnd(batch, logs) {\r\n            \r\n            console.log(`Accuracy: ${logs.acc}`,  `loss: ${logs.loss}`,  `epoch: ${counter}`);\r\n            flag = false\r\n\r\n            for (i ; !flag; )\r\n            {\r\n                if (!adata.data[1] && !adata.loss){\r\n\r\n                    let j = \"x\";\r\n                    let k = \"y\";\r\n\r\n\r\n                    adata.data[1] = parseFloat(logs.acc)\r\n                    adata.loss[1] = parseFloat(logs.loss)\r\n                    adata.labelsdata[1] =  i\r\n                    adata.labelsdata1[1] = i\r\n                    adata.weights[i] = {j:i,k:parseFloat(model.getWeights(false).toString())}\r\n                    console.log(adata.weights[i])\r\n                }\r\n                else if (!adata.data[i] && !adata.loss[i]){\r\n                    \r\n                    let j = \"x\";\r\n                    let k = \"y\";\r\n                    adata.data[i] = parseFloat(logs.acc)\r\n                    adata.loss[i] = parseFloat(logs.loss)\r\n                    adata.labelsdata[i] =  i\r\n                    adata.labelsdata1[i] = i\r\n                    adata.weights[i] = {j:i,k:parseFloat(model.getWeights(false).toString())}\r\n                    console.log(adata.weights[i])\r\n                }else\r\n                {\r\n                    let j = \"x\";\r\n                    let k = \"y\";\r\n                    adata.data[i+1] = parseFloat(logs.acc)\r\n                    adata.loss[i+1] = parseFloat(logs.loss)\r\n                    adata.labelsdata1[i+1] =  i\r\n                    adata.weights[i] = {j:i,k:parseFloat(model.getWeights().toString())};\r\n                    //model.getWeights().values().next().value\r\n                    console.log(model.getWeights().values().next().value)\r\n                }\r\n                i += 1\r\n                \r\n                index += 1\r\n                flag = true\r\n            }\r\n            counter += 1;\r\n        }\r\n        \r\n\r\n        function updateChart(logs) {\r\n            \r\n            //console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\r\n        }\r\n\r\n        \r\n        model.fit(data_, labels, {\r\n        epochs: 15, \r\n        batchSize: 10,\r\n        callbacks: {onBatchEnd}\r\n        }).then(info => {\r\n            this.setState({isitraining:false})\r\n            this.setState({trained:true})\r\n            this.setState({flag:true})\r\n            this.thePrediction()\r\n            console.log(adata)\r\n        \r\n        });\r\n\r\n    }\r\n    \r\n\r\n    async thePrediction(){\r\n\r\n        if(this.state.trained)\r\n            {\r\n                prediction_ = await model.predict(tf.randomNormal([10, 4]));\r\n                this.setState({prediction: prediction_.toString(prediction_.print())})\r\n              \r\n            }\r\n        this.randomm()\r\n        \r\n        console.log(model.summary.toString()    )\r\n        \r\n    }\r\n\r\n    async randomm(){\r\n        for (let index = 0; index < 1; index++){\r\n            adata[\"flagtrain\"] = true\r\n        }\r\n    }\r\n    \r\n    render()\r\n        {\r\n            const { isTfReady, trained, flagged, isitraining, measure, x, y, prediction } = this.state\r\n            var arr1 = []\r\n            \r\n            thelabels = {labels: { labels:[\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",\"app\",]\r\n            \r\n                }\r\n            }\r\n            return (\r\n            <div>\r\n             <Grid container>\r\n             <Grid item xs={3}>\r\n                 <Card>\r\n                 <CardHeader\r\n        \r\n                    title=\"Is TensorFlow Ready?\"\r\n                        />\r\n                        \r\n                     <CardContent>\r\n                        {this.state.isTfReady?<p>Yes Ready</p>:<p>Not Ready</p>}\r\n                    </CardContent>\r\n                </Card>\r\n               </Grid>\r\n\r\n               <Grid item xs={3}>\r\n                   <Card>\r\n                   <CardHeader\r\n        \r\n                        title=\"Is the model Training?\"\r\n                            />\r\n                    <CardContent>\r\n                        {this.state.isitraining?<p>Yes Training...</p>:<p>Not Training</p>}\r\n                    </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n\r\n                <Grid container>\r\n                \r\n                    <Grid item md={12}>\r\n                        <Card>\r\n                            <CardContent>\r\n                            <CardHeader\r\n        \r\n                                title=\"Training Data\"\r\n                                    />\r\n                                {this.state.x? <p>{this.state.x} </p>: <div><p>Loading</p><CustomLinearProgress /></div>}\r\n                            </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container>\r\n                \r\n                <Grid item md={12}>\r\n                    <Card>\r\n                        <CardContent>\r\n                        <CardHeader\r\n    \r\n                            title=\"Target Data\"\r\n                                />\r\n                            {this.state.y? <p>{this.state.y} </p>: <div><p>Loading</p><CustomLinearProgress /></div>}\r\n                            \r\n                        </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                \r\n                <Grid container>\r\n                \r\n                    <Grid item md={12}>\r\n                        <Card>\r\n                            <CardContent>\r\n                            <CardHeader\r\n        \r\n                                title=\"Prediction Results\"\r\n                                    />\r\n                                {this.state.prediction && this.state.trained? <p>{this.state.prediction} </p>: <div><p>Loading</p><CustomLinearProgress /></div>}\r\n                            </CardContent>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container>\r\n                <Grid item md={12}>\r\n                    <Card>\r\n                    <CardHeader\r\n        \r\n                        title=\"Weights from Model\"\r\n                            />\r\n                        <CardContent>\r\n                            \r\n                            {this.state.trained?<p>{model.getWeights().toString()}</p>:<div><p>Loading</p><CustomLinearProgress /></div>}\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n\r\n                </Grid>\r\n                <Grid container>\r\n                    <Grid item md={12}>\r\n                        <Card>\r\n                        <CardHeader\r\n            \r\n                            title=\"Visualized Metric\"\r\n                                />\r\n                            <CardContent>\r\n                                {this.state.trained?<Graphing/>:<div><p>Loading</p><CustomLinearProgress /></div>}\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                \r\n            </div>\r\n            );\r\n        }\r\n}\r\nexport var arr"]},"metadata":{},"sourceType":"module"}