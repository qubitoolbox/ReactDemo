{"ast":null,"code":"/**\n * Utility files for producing Vega ValueRef for marks\n */\nimport { isFunction, isString } from 'vega-util';\nimport { isCountingAggregateOp } from '../../../aggregate';\nimport { isBinned, isBinning } from '../../../bin';\nimport { getMainRangeChannel, X, X2, Y, Y2 } from '../../../channel';\nimport { binRequiresRange, getBand, isFieldDef, isPositionFieldDef, isTypedFieldDef, isValueDef, vgField } from '../../../channeldef';\nimport * as log from '../../../log';\nimport { isPathMark } from '../../../mark';\nimport { fieldValidPredicate } from '../../../predicate';\nimport { hasDiscreteDomain, isContinuousToContinuous } from '../../../scale';\nimport { QUANTITATIVE, TEMPORAL } from '../../../type';\nimport { contains, getFirstDefined } from '../../../util';\nexport function midPointRefWithPositionInvalidTest(params) {\n  const {\n    channel,\n    channelDef,\n    markDef,\n    scale\n  } = params;\n  const ref = midPoint(params); // Wrap to check if the positional value is invalid, if so, plot the point on the min value\n\n  if ( // Only this for field def without counting aggregate (as count wouldn't be null)\n  isFieldDef(channelDef) && !isCountingAggregateOp(channelDef.aggregate) && // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)\n  scale && isContinuousToContinuous(scale.get('type')) && scale.get('zero') === false) {\n    return wrapPositionInvalidTest({\n      fieldDef: channelDef,\n      channel,\n      markDef,\n      ref\n    });\n  }\n\n  return ref;\n}\nexport function wrapPositionInvalidTest({\n  fieldDef,\n  channel,\n  markDef,\n  ref\n}) {\n  if (!isPathMark(markDef.type)) {\n    // Only do this for non-path mark (as path marks will already use \"defined\" to skip points)\n    return [fieldInvalidTestValueRef(fieldDef, channel), ref];\n  }\n\n  return ref;\n}\nexport function fieldInvalidTestValueRef(fieldDef, channel) {\n  const test = fieldInvalidPredicate(fieldDef, true);\n  const mainChannel = getMainRangeChannel(channel);\n  const zeroValueRef = mainChannel === 'x' ? {\n    value: 0\n  } : {\n    field: {\n      group: 'height'\n    }\n  };\n  return Object.assign({\n    test\n  }, zeroValueRef);\n}\nexport function fieldInvalidPredicate(field, invalid = true) {\n  return fieldValidPredicate(isString(field) ? field : vgField(field, {\n    expr: 'datum'\n  }), !invalid);\n}\nexport function fieldRef(fieldDef, scaleName, opt, encode) {\n  const ref = Object.assign(Object.assign({}, scaleName ? {\n    scale: scaleName\n  } : {}), {\n    field: vgField(fieldDef, opt)\n  });\n\n  if (encode) {\n    const {\n      offset,\n      band\n    } = encode;\n    return Object.assign(Object.assign(Object.assign({}, ref), offset ? {\n      offset\n    } : {}), band ? {\n      band\n    } : {});\n  }\n\n  return ref;\n}\n/**\n * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.\n */\n\nexport function interpolatedSignalRef({\n  scaleName,\n  fieldDef,\n  fieldDef2,\n  offset,\n  startSuffix,\n  band = 0.5\n}) {\n  const expr = 0 < band && band < 1 ? 'datum' : undefined;\n  const start = vgField(fieldDef, {\n    expr,\n    suffix: startSuffix\n  });\n  const end = fieldDef2 !== undefined ? vgField(fieldDef2, {\n    expr\n  }) : vgField(fieldDef, {\n    suffix: 'end',\n    expr\n  });\n\n  if (band === 0) {\n    return Object.assign({\n      scale: scaleName,\n      field: start\n    }, offset ? {\n      offset\n    } : {});\n  } else if (band === 1) {\n    return Object.assign({\n      scale: scaleName,\n      field: end\n    }, offset ? {\n      offset\n    } : {});\n  } else {\n    const datum = `${band} * ${start} + ${1 - band} * ${end}`;\n    return Object.assign({\n      signal: `scale(\"${scaleName}\", ${datum})`\n    }, offset ? {\n      offset\n    } : {});\n  }\n}\n/**\n * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\n */\n\nexport function midPoint({\n  channel,\n  channelDef,\n  channel2Def,\n  markDef,\n  config,\n  scaleName,\n  scale,\n  stack,\n  offset,\n  defaultRef\n}) {\n  // TODO: datum support\n  if (channelDef) {\n    /* istanbul ignore else */\n    if (isFieldDef(channelDef)) {\n      if (isTypedFieldDef(channelDef)) {\n        const band = getBand(channel, channelDef, channel2Def, markDef, config, {\n          isMidPoint: true\n        });\n\n        if (isBinning(channelDef.bin) || band && channelDef.timeUnit) {\n          // Use middle only for x an y to place marks in the center between start and end of the bin range.\n          // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\n          if (contains([X, Y], channel) && contains([QUANTITATIVE, TEMPORAL], channelDef.type)) {\n            if (stack && stack.impute) {\n              // For stack, we computed bin_mid so we can impute.\n              return fieldRef(channelDef, scaleName, {\n                binSuffix: 'mid'\n              }, {\n                offset\n              });\n            } // For non-stack, we can just calculate bin mid on the fly using signal.\n\n\n            return interpolatedSignalRef({\n              scaleName,\n              fieldDef: channelDef,\n              band,\n              offset\n            });\n          }\n\n          return fieldRef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? {\n            binSuffix: 'range'\n          } : {}, {\n            offset\n          });\n        } else if (isBinned(channelDef.bin)) {\n          if (isFieldDef(channel2Def)) {\n            return interpolatedSignalRef({\n              scaleName,\n              fieldDef: channelDef,\n              fieldDef2: channel2Def,\n              band,\n              offset\n            });\n          } else {\n            const channel2 = channel === X ? X2 : Y2;\n            log.warn(log.message.channelRequiredForBinned(channel2));\n          }\n        }\n      }\n\n      if (scale) {\n        const scaleType = scale.get('type');\n\n        if (hasDiscreteDomain(scaleType)) {\n          if (scaleType === 'band') {\n            // For band, to get mid point, need to offset by half of the band\n            const band = getFirstDefined(isPositionFieldDef(channelDef) ? channelDef.band : undefined, 0.5);\n            return fieldRef(channelDef, scaleName, {\n              binSuffix: 'range'\n            }, {\n              band,\n              offset\n            });\n          }\n\n          return fieldRef(channelDef, scaleName, {\n            binSuffix: 'range'\n          }, {\n            offset\n          });\n        }\n      }\n\n      return fieldRef(channelDef, scaleName, {}, {\n        offset\n      }); // no need for bin suffix\n    } else if (isValueDef(channelDef)) {\n      const value = channelDef.value;\n      const offsetMixins = offset ? {\n        offset\n      } : {};\n      return Object.assign(Object.assign({}, widthHeightValueRef(channel, value)), offsetMixins);\n    } // If channelDef is neither field def or value def, it's a condition-only def.\n    // In such case, we will use default ref.\n\n  }\n\n  const ref = isFunction(defaultRef) ? Object.assign(Object.assign({}, defaultRef()), offset ? {\n    offset\n  } : {}) : defaultRef;\n\n  if (ref) {\n    // for non-position, ref could be undefined.\n    return Object.assign(Object.assign({}, ref), offset ? {\n      offset\n    } : {});\n  }\n\n  return ref;\n}\n/**\n * Convert special \"width\" and \"height\" values in Vega-Lite into Vega value ref.\n */\n\nexport function widthHeightValueRef(channel, value) {\n  if (contains(['x', 'x2'], channel) && value === 'width') {\n    return {\n      field: {\n        group: 'width'\n      }\n    };\n  } else if (contains(['y', 'y2'], channel) && value === 'height') {\n    return {\n      field: {\n        group: 'height'\n      }\n    };\n  }\n\n  return {\n    value\n  };\n}","map":{"version":3,"sources":["../../../../../src/compile/mark/encode/valueref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Utility files for producing Vega ValueRef for marks\n */\nimport {isFunction, isString} from 'vega-util';\nimport {isCountingAggregateOp} from '../../../aggregate';\nimport {isBinned, isBinning} from '../../../bin';\nimport {Channel, getMainRangeChannel, PositionChannel, X, X2, Y, Y2} from '../../../channel';\nimport {\n  binRequiresRange,\n  ChannelDef,\n  FieldDef,\n  FieldDefBase,\n  FieldName,\n  FieldRefOption,\n  getBand,\n  isFieldDef,\n  isPositionFieldDef,\n  isTypedFieldDef,\n  isValueDef,\n  SecondaryFieldDef,\n  TypedFieldDef,\n  ValueOrGradientOrText,\n  vgField\n} from '../../../channeldef';\nimport {Config} from '../../../config';\nimport * as log from '../../../log';\nimport {isPathMark, Mark, MarkDef} from '../../../mark';\nimport {fieldValidPredicate} from '../../../predicate';\nimport {hasDiscreteDomain, isContinuousToContinuous} from '../../../scale';\nimport {StackProperties} from '../../../stack';\nimport {QUANTITATIVE, TEMPORAL} from '../../../type';\nimport {contains, getFirstDefined} from '../../../util';\nimport {VgValueRef} from '../../../vega.schema';\nimport {ScaleComponent} from '../../scale/component';\n\nexport function midPointRefWithPositionInvalidTest(\n  params: MidPointParams & {\n    channel: PositionChannel;\n  }\n) {\n  const {channel, channelDef, markDef, scale} = params;\n  const ref = midPoint(params);\n\n  // Wrap to check if the positional value is invalid, if so, plot the point on the min value\n  if (\n    // Only this for field def without counting aggregate (as count wouldn't be null)\n    isFieldDef(channelDef) &&\n    !isCountingAggregateOp(channelDef.aggregate) &&\n    // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)\n    scale &&\n    isContinuousToContinuous(scale.get('type')) &&\n    scale.get('zero') === false\n  ) {\n    return wrapPositionInvalidTest({\n      fieldDef: channelDef,\n      channel,\n      markDef,\n      ref\n    });\n  }\n  return ref;\n}\n\nexport function wrapPositionInvalidTest({\n  fieldDef,\n  channel,\n  markDef,\n  ref\n}: {\n  fieldDef: FieldDef<string>;\n  channel: PositionChannel;\n  markDef: MarkDef<Mark>;\n  ref: VgValueRef;\n}): VgValueRef | VgValueRef[] {\n  if (!isPathMark(markDef.type)) {\n    // Only do this for non-path mark (as path marks will already use \"defined\" to skip points)\n\n    return [fieldInvalidTestValueRef(fieldDef, channel), ref];\n  }\n  return ref;\n}\n\nexport function fieldInvalidTestValueRef(fieldDef: FieldDef<string>, channel: PositionChannel) {\n  const test = fieldInvalidPredicate(fieldDef, true);\n  const mainChannel = getMainRangeChannel(channel) as 'x' | 'y';\n  const zeroValueRef = mainChannel === 'x' ? {value: 0} : {field: {group: 'height'}};\n\n  return {test, ...zeroValueRef};\n}\n\nexport function fieldInvalidPredicate(field: FieldName | FieldDef<string>, invalid = true) {\n  return fieldValidPredicate(isString(field) ? field : vgField(field, {expr: 'datum'}), !invalid);\n}\n\nexport function fieldRef(\n  fieldDef: FieldDefBase<string>,\n  scaleName: string,\n  opt: FieldRefOption,\n  encode: {offset?: number | VgValueRef; band?: number | boolean}\n): VgValueRef {\n  const ref: VgValueRef = {\n    ...(scaleName ? {scale: scaleName} : {}),\n    field: vgField(fieldDef, opt)\n  };\n\n  if (encode) {\n    const {offset, band} = encode;\n    return {\n      ...ref,\n      ...(offset ? {offset} : {}),\n      ...(band ? {band} : {})\n    };\n  }\n  return ref;\n}\n\n/**\n * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.\n */\nexport function interpolatedSignalRef({\n  scaleName,\n  fieldDef,\n  fieldDef2,\n  offset,\n  startSuffix,\n  band = 0.5\n}: {\n  scaleName: string;\n  fieldDef: TypedFieldDef<string>;\n  fieldDef2?: SecondaryFieldDef<string>;\n  startSuffix?: string;\n  offset: number;\n  band: number;\n}) {\n  const expr = 0 < band && band < 1 ? 'datum' : undefined;\n  const start = vgField(fieldDef, {expr, suffix: startSuffix});\n  const end = fieldDef2 !== undefined ? vgField(fieldDef2, {expr}) : vgField(fieldDef, {suffix: 'end', expr});\n\n  if (band === 0) {\n    return {\n      scale: scaleName,\n      field: start,\n      ...(offset ? {offset} : {})\n    };\n  } else if (band === 1) {\n    return {\n      scale: scaleName,\n      field: end,\n      ...(offset ? {offset} : {})\n    };\n  } else {\n    const datum = `${band} * ${start} + ${1 - band} * ${end}`;\n\n    return {\n      signal: `scale(\"${scaleName}\", ${datum})`,\n      ...(offset ? {offset} : {})\n    };\n  }\n}\n\nexport interface MidPointParams {\n  channel: Channel;\n  channelDef: ChannelDef;\n  channel2Def?: ChannelDef<SecondaryFieldDef<string>>;\n\n  markDef: MarkDef<Mark>;\n  config: Config;\n\n  scaleName: string;\n  scale: ScaleComponent;\n  stack?: StackProperties;\n  offset?: number;\n  defaultRef: VgValueRef | (() => VgValueRef);\n}\n\n/**\n * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\n */\nexport function midPoint({\n  channel,\n  channelDef,\n  channel2Def,\n  markDef,\n  config,\n  scaleName,\n  scale,\n  stack,\n  offset,\n  defaultRef\n}: MidPointParams): VgValueRef {\n  // TODO: datum support\n  if (channelDef) {\n    /* istanbul ignore else */\n\n    if (isFieldDef(channelDef)) {\n      if (isTypedFieldDef(channelDef)) {\n        const band = getBand(channel, channelDef, channel2Def, markDef, config, {isMidPoint: true});\n\n        if (isBinning(channelDef.bin) || (band && channelDef.timeUnit)) {\n          // Use middle only for x an y to place marks in the center between start and end of the bin range.\n          // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\n          if (contains([X, Y], channel) && contains([QUANTITATIVE, TEMPORAL], channelDef.type)) {\n            if (stack && stack.impute) {\n              // For stack, we computed bin_mid so we can impute.\n              return fieldRef(channelDef, scaleName, {binSuffix: 'mid'}, {offset});\n            }\n            // For non-stack, we can just calculate bin mid on the fly using signal.\n            return interpolatedSignalRef({scaleName, fieldDef: channelDef, band, offset});\n          }\n          return fieldRef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? {binSuffix: 'range'} : {}, {\n            offset\n          });\n        } else if (isBinned(channelDef.bin)) {\n          if (isFieldDef(channel2Def)) {\n            return interpolatedSignalRef({scaleName, fieldDef: channelDef, fieldDef2: channel2Def, band, offset});\n          } else {\n            const channel2 = channel === X ? X2 : Y2;\n            log.warn(log.message.channelRequiredForBinned(channel2));\n          }\n        }\n      }\n\n      if (scale) {\n        const scaleType = scale.get('type');\n        if (hasDiscreteDomain(scaleType)) {\n          if (scaleType === 'band') {\n            // For band, to get mid point, need to offset by half of the band\n            const band = getFirstDefined(isPositionFieldDef(channelDef) ? channelDef.band : undefined, 0.5);\n            return fieldRef(channelDef, scaleName, {binSuffix: 'range'}, {band, offset});\n          }\n          return fieldRef(channelDef, scaleName, {binSuffix: 'range'}, {offset});\n        }\n      }\n      return fieldRef(channelDef, scaleName, {}, {offset}); // no need for bin suffix\n    } else if (isValueDef(channelDef)) {\n      const value = channelDef.value;\n      const offsetMixins = offset ? {offset} : {};\n\n      return {...widthHeightValueRef(channel, value), ...offsetMixins};\n    }\n\n    // If channelDef is neither field def or value def, it's a condition-only def.\n    // In such case, we will use default ref.\n  }\n\n  const ref = isFunction(defaultRef) ? {...defaultRef(), ...(offset ? {offset} : {})} : defaultRef;\n\n  if (ref) {\n    // for non-position, ref could be undefined.\n    return {\n      ...ref,\n      // only include offset when it is non-zero (zero = no offset)\n      ...(offset ? {offset} : {})\n    };\n  }\n  return ref;\n}\n\n/**\n * Convert special \"width\" and \"height\" values in Vega-Lite into Vega value ref.\n */\nexport function widthHeightValueRef(channel: Channel, value: ValueOrGradientOrText) {\n  if (contains(['x', 'x2'], channel) && value === 'width') {\n    return {field: {group: 'width'}};\n  } else if (contains(['y', 'y2'], channel) && value === 'height') {\n    return {field: {group: 'height'}};\n  }\n  return {value};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}