{"ast":null,"code":"import { getSizeType, POSITION_SCALE_CHANNELS } from '../../channel';\nimport { getViewConfigContinuousSize, getViewConfigDiscreteSize } from '../../config';\nimport { hasDiscreteDomain } from '../../scale';\nimport { isStep } from '../../spec/base';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { mergeValuesWithExplicit } from '../split';\nexport function parseLayerLayoutSize(model) {\n  parseChildrenLayoutSize(model);\n  const layoutSizeCmpt = model.component.layoutSize;\n  layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));\n  layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));\n}\nexport const parseRepeatLayoutSize = parseLayerLayoutSize;\nconst SIZE_TYPE_TO_MERGE = {\n  vconcat: 'width',\n  hconcat: 'height'\n};\nexport function parseConcatLayoutSize(model) {\n  parseChildrenLayoutSize(model);\n  const layoutSizeCmpt = model.component.layoutSize;\n  const sizeTypeToMerge = SIZE_TYPE_TO_MERGE[model.concatType];\n\n  if (sizeTypeToMerge) {\n    layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));\n  }\n}\nexport function parseChildrenLayoutSize(model) {\n  for (const child of model.children) {\n    child.parseLayoutSize();\n  }\n}\n\nfunction parseNonUnitLayoutSizeForChannel(model, sizeType) {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const resolve = model.component.resolve;\n  let mergedSize; // Try to merge layout size\n\n  for (const child of model.children) {\n    const childSize = child.component.layoutSize.getWithExplicit(sizeType);\n    const scaleResolve = resolve.scale[channel];\n\n    if (scaleResolve === 'independent' && childSize.value === 'step') {\n      // Do not merge independent scales with range-step as their size depends\n      // on the scale domains, which can be different between scales.\n      mergedSize = undefined;\n      break;\n    }\n\n    if (mergedSize) {\n      if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n        // For independent scale, only merge if all the sizes are the same.\n        // If the values are different, abandon the merge!\n        mergedSize = undefined;\n        break;\n      }\n\n      mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');\n    } else {\n      mergedSize = childSize;\n    }\n  }\n\n  if (mergedSize) {\n    // If merged, rename size and set size of all children.\n    for (const child of model.children) {\n      model.renameSignal(child.getName(sizeType), model.getName(sizeType));\n      child.component.layoutSize.set(sizeType, 'merged', false);\n    }\n\n    return mergedSize;\n  } else {\n    // Otherwise, there is no merged size.\n    return {\n      explicit: false,\n      value: undefined\n    };\n  }\n}\n\nexport function parseUnitLayoutSize(model) {\n  const {\n    size,\n    component\n  } = model;\n\n  for (const channel of POSITION_SCALE_CHANNELS) {\n    const sizeType = getSizeType(channel);\n\n    if (size[sizeType]) {\n      const specifiedSize = size[sizeType];\n      component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);\n    } else {\n      const defaultSize = defaultUnitSize(model, sizeType);\n      component.layoutSize.set(sizeType, defaultSize, false);\n    }\n  }\n}\n\nfunction defaultUnitSize(model, sizeType) {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const config = model.config;\n  const scaleComponent = model.getScaleComponent(channel);\n\n  if (scaleComponent) {\n    const scaleType = scaleComponent.get('type');\n    const range = scaleComponent.get('range');\n\n    if (hasDiscreteDomain(scaleType)) {\n      const size = getViewConfigDiscreteSize(config.view, sizeType);\n\n      if (isVgRangeStep(range) || isStep(size)) {\n        // For discrete domain with range.step, use dynamic width/height\n        return 'step';\n      } else {\n        return size;\n      }\n    } else {\n      return getViewConfigContinuousSize(config.view, sizeType);\n    }\n  } else if (model.hasProjection) {\n    return getViewConfigContinuousSize(config.view, sizeType);\n  } else {\n    const size = getViewConfigDiscreteSize(config.view, sizeType);\n    return isStep(size) ? size.step : size;\n  }\n}","map":{"version":3,"sources":["../../../../src/compile/layoutsize/parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {getSizeType, POSITION_SCALE_CHANNELS} from '../../channel';\nimport {getViewConfigContinuousSize, getViewConfigDiscreteSize} from '../../config';\nimport {hasDiscreteDomain} from '../../scale';\nimport {isStep} from '../../spec/base';\nimport {isVgRangeStep} from '../../vega.schema';\nimport {ConcatModel} from '../concat';\nimport {Model} from '../model';\nimport {Explicit, mergeValuesWithExplicit} from '../split';\nimport {UnitModel} from '../unit';\nimport {LayoutSize, LayoutSizeIndex} from './component';\n\nexport function parseLayerLayoutSize(model: Model) {\n  parseChildrenLayoutSize(model);\n\n  const layoutSizeCmpt = model.component.layoutSize;\n  layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));\n  layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));\n}\n\nexport const parseRepeatLayoutSize = parseLayerLayoutSize;\n\nconst SIZE_TYPE_TO_MERGE = {\n  vconcat: 'width',\n  hconcat: 'height'\n};\n\nexport function parseConcatLayoutSize(model: ConcatModel) {\n  parseChildrenLayoutSize(model);\n  const layoutSizeCmpt = model.component.layoutSize;\n\n  const sizeTypeToMerge = SIZE_TYPE_TO_MERGE[model.concatType];\n  if (sizeTypeToMerge) {\n    layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));\n  }\n}\n\nexport function parseChildrenLayoutSize(model: Model) {\n  for (const child of model.children) {\n    child.parseLayoutSize();\n  }\n}\n\nfunction parseNonUnitLayoutSizeForChannel(model: Model, sizeType: 'width' | 'height'): Explicit<LayoutSize> {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const resolve = model.component.resolve;\n\n  let mergedSize: Explicit<LayoutSize>;\n  // Try to merge layout size\n  for (const child of model.children) {\n    const childSize = child.component.layoutSize.getWithExplicit(sizeType);\n    const scaleResolve = resolve.scale[channel];\n    if (scaleResolve === 'independent' && childSize.value === 'step') {\n      // Do not merge independent scales with range-step as their size depends\n      // on the scale domains, which can be different between scales.\n      mergedSize = undefined;\n      break;\n    }\n\n    if (mergedSize) {\n      if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n        // For independent scale, only merge if all the sizes are the same.\n        // If the values are different, abandon the merge!\n        mergedSize = undefined;\n        break;\n      }\n      mergedSize = mergeValuesWithExplicit<LayoutSizeIndex, LayoutSize>(mergedSize, childSize, sizeType, '');\n    } else {\n      mergedSize = childSize;\n    }\n  }\n\n  if (mergedSize) {\n    // If merged, rename size and set size of all children.\n    for (const child of model.children) {\n      model.renameSignal(child.getName(sizeType), model.getName(sizeType));\n      child.component.layoutSize.set(sizeType, 'merged', false);\n    }\n    return mergedSize;\n  } else {\n    // Otherwise, there is no merged size.\n    return {\n      explicit: false,\n      value: undefined\n    };\n  }\n}\n\nexport function parseUnitLayoutSize(model: UnitModel) {\n  const {size, component} = model;\n  for (const channel of POSITION_SCALE_CHANNELS) {\n    const sizeType = getSizeType(channel);\n\n    if (size[sizeType]) {\n      const specifiedSize = size[sizeType];\n      component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);\n    } else {\n      const defaultSize = defaultUnitSize(model, sizeType);\n      component.layoutSize.set(sizeType, defaultSize, false);\n    }\n  }\n}\n\nfunction defaultUnitSize(model: UnitModel, sizeType: 'width' | 'height'): LayoutSize {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const config = model.config;\n  const scaleComponent = model.getScaleComponent(channel);\n\n  if (scaleComponent) {\n    const scaleType = scaleComponent.get('type');\n    const range = scaleComponent.get('range');\n\n    if (hasDiscreteDomain(scaleType)) {\n      const size = getViewConfigDiscreteSize(config.view, sizeType);\n      if (isVgRangeStep(range) || isStep(size)) {\n        // For discrete domain with range.step, use dynamic width/height\n        return 'step';\n      } else {\n        return size;\n      }\n    } else {\n      return getViewConfigContinuousSize(config.view, sizeType);\n    }\n  } else if (model.hasProjection) {\n    return getViewConfigContinuousSize(config.view, sizeType);\n  } else {\n    const size = getViewConfigDiscreteSize(config.view, sizeType);\n    return isStep(size) ? size.step : size;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}