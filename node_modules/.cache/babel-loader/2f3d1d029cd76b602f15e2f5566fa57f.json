{"ast":null,"code":"import { Symbols, Discrete } from './legend-types';\nimport { tickFormat, tickValues } from './ticks';\nimport { peek } from 'vega-util';\nimport { Log, Quantile, Quantize, Threshold, tickFormat as spanFormat, Time, UTC } from 'vega-scale';\nconst symbols = {\n  [Quantile]: 'quantiles',\n  [Quantize]: 'thresholds',\n  [Threshold]: 'domain'\n};\nconst formats = {\n  [Quantile]: 'quantiles',\n  [Quantize]: 'domain'\n};\nexport function labelValues(scale, count) {\n  return scale.bins ? binValues(scale.bins) : scale.type === Log ? logValues(scale, count) : symbols[scale.type] ? thresholdValues(scale[symbols[scale.type]]()) : tickValues(scale, count);\n}\n\nfunction logValues(scale, count) {\n  var ticks = tickValues(scale, count),\n      base = scale.base(),\n      logb = Math.log(base),\n      k = Math.max(1, base * count / ticks.length); // apply d3-scale's log format filter criteria\n\n  return ticks.filter(d => {\n    var i = d / Math.pow(base, Math.round(Math.log(d) / logb));\n    if (i * base < base - 0.5) i *= base;\n    return i <= k;\n  });\n}\n\nexport function thresholdFormat(scale, specifier) {\n  var _ = scale[formats[scale.type]](),\n      n = _.length,\n      d = n > 1 ? _[1] - _[0] : _[0],\n      i;\n\n  for (i = 1; i < n; ++i) {\n    d = Math.min(d, _[i] - _[i - 1]);\n  } // 3 ticks times 10 for increased resolution\n\n\n  return spanFormat(0, d, 3 * 10, specifier);\n}\n\nfunction thresholdValues(thresholds) {\n  const values = [-Infinity].concat(thresholds);\n  values.max = +Infinity;\n  return values;\n}\n\nfunction binValues(bins) {\n  const values = bins.slice(0, -1);\n  values.max = peek(bins);\n  return values;\n}\n\nfunction isDiscreteRange(scale) {\n  return symbols[scale.type] || scale.bins;\n}\n\nexport function labelFormat(scale, count, type, specifier, formatType, noSkip) {\n  const format = formats[scale.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(scale, specifier) : tickFormat(scale, count, specifier, formatType, noSkip);\n  return type === Symbols && isDiscreteRange(scale) ? formatRange(format) : type === Discrete ? formatDiscrete(format) : formatPoint(format);\n}\n\nfunction formatRange(format) {\n  return function (value, index, array) {\n    var limit = get(array[index + 1], get(array.max, +Infinity)),\n        lo = formatValue(value, format),\n        hi = formatValue(limit, format);\n    return lo && hi ? lo + ' \\u2013 ' + hi : hi ? '< ' + hi : '\\u2265 ' + lo;\n  };\n}\n\nfunction get(value, dflt) {\n  return value != null ? value : dflt;\n}\n\nfunction formatDiscrete(format) {\n  return function (value, index) {\n    return index ? format(value) : null;\n  };\n}\n\nfunction formatPoint(format) {\n  return function (value) {\n    return format(value);\n  };\n}\n\nfunction formatValue(value, format) {\n  return Number.isFinite(value) ? format(value) : null;\n}\n\nexport function labelFraction(scale) {\n  var domain = scale.domain(),\n      count = domain.length - 1,\n      lo = +domain[0],\n      hi = +peek(domain),\n      span = hi - lo;\n\n  if (scale.type === Threshold) {\n    var adjust = count ? span / count : 0.1;\n    lo -= adjust;\n    hi += adjust;\n    span = hi - lo;\n  }\n\n  return function (value) {\n    return (value - lo) / span;\n  };\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-encode/src/labels.js"],"names":["Symbols","Discrete","tickFormat","tickValues","peek","Log","Quantile","Quantize","Threshold","spanFormat","Time","UTC","symbols","formats","labelValues","scale","count","bins","binValues","type","logValues","thresholdValues","ticks","base","logb","Math","log","k","max","length","filter","d","i","pow","round","thresholdFormat","specifier","_","n","min","thresholds","values","Infinity","concat","slice","isDiscreteRange","labelFormat","formatType","noSkip","format","formatRange","formatDiscrete","formatPoint","value","index","array","limit","get","lo","formatValue","hi","dflt","Number","isFinite","labelFraction","domain","span","adjust"],"mappings":"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","sourcesContent":["import {Symbols, Discrete} from './legend-types';\nimport {tickFormat, tickValues} from './ticks';\nimport {peek} from 'vega-util';\nimport {\n  Log,\n  Quantile,\n  Quantize,\n  Threshold,\n  tickFormat as spanFormat,\n  Time,\n  UTC\n} from 'vega-scale';\n\nconst symbols = {\n  [Quantile]:  'quantiles',\n  [Quantize]:  'thresholds',\n  [Threshold]: 'domain'\n};\n\nconst formats = {\n  [Quantile]:  'quantiles',\n  [Quantize]:  'domain'\n};\n\nexport function labelValues(scale, count) {\n  return scale.bins ? binValues(scale.bins)\n    : scale.type === Log ? logValues(scale, count)\n    : symbols[scale.type] ? thresholdValues(scale[symbols[scale.type]]())\n    : tickValues(scale, count);\n}\n\nfunction logValues(scale, count) {\n  var ticks = tickValues(scale, count),\n      base = scale.base(),\n      logb = Math.log(base),\n      k = Math.max(1, base * count / ticks.length);\n\n  // apply d3-scale's log format filter criteria\n  return ticks.filter(d => {\n    var i = d / Math.pow(base, Math.round(Math.log(d) / logb));\n    if (i * base < base - 0.5) i *= base;\n    return i <= k;\n  });\n}\n\nexport function thresholdFormat(scale, specifier) {\n  var _ = scale[formats[scale.type]](),\n      n = _.length,\n      d = n > 1 ? _[1] - _[0] : _[0], i;\n\n  for (i=1; i<n; ++i) {\n    d = Math.min(d, _[i] - _[i-1]);\n  }\n\n  // 3 ticks times 10 for increased resolution\n  return spanFormat(0, d, 3 * 10, specifier);\n}\n\nfunction thresholdValues(thresholds) {\n  const values = [-Infinity].concat(thresholds);\n  values.max = +Infinity;\n\n  return values;\n}\n\nfunction binValues(bins) {\n  const values = bins.slice(0, -1);\n  values.max = peek(bins);\n\n  return values;\n}\n\nfunction isDiscreteRange(scale) {\n  return symbols[scale.type] || scale.bins;\n}\n\nexport function labelFormat(scale, count, type, specifier, formatType, noSkip) {\n  const format = formats[scale.type] && formatType !== Time && formatType !== UTC\n    ? thresholdFormat(scale, specifier)\n    : tickFormat(scale, count, specifier, formatType, noSkip);\n\n  return type === Symbols && isDiscreteRange(scale) ? formatRange(format)\n    : type === Discrete ? formatDiscrete(format)\n    : formatPoint(format);\n}\n\nfunction formatRange(format) {\n  return function(value, index, array) {\n    var limit = get(array[index + 1], get(array.max, +Infinity)),\n        lo = formatValue(value, format),\n        hi = formatValue(limit, format);\n    return lo && hi ? lo + ' \\u2013 ' + hi : hi ? '< ' + hi : '\\u2265 ' + lo;\n  };\n}\n\nfunction get(value, dflt) {\n  return value != null ? value : dflt;\n}\n\nfunction formatDiscrete(format) {\n  return function(value, index) {\n    return index ? format(value) : null;\n  }\n}\n\nfunction formatPoint(format) {\n  return function(value) {\n    return format(value);\n  };\n}\n\nfunction formatValue(value, format) {\n  return Number.isFinite(value) ? format(value) : null;\n}\n\nexport function labelFraction(scale) {\n  var domain = scale.domain(),\n      count = domain.length - 1,\n      lo = +domain[0],\n      hi = +peek(domain),\n      span = hi - lo;\n\n  if (scale.type === Threshold) {\n    var adjust = count ? span / count : 0.1;\n    lo -= adjust;\n    hi += adjust;\n    span = hi - lo;\n  }\n\n  return function(value) {\n    return (value - lo) / span;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}