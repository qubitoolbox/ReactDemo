{"ast":null,"code":"import linear from './linear';\nimport { points } from './points';\nimport quad from './quad';\nimport rSquared from './r-squared'; // Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n// ... which was adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n\nexport default function (data, x, y, order) {\n  // use more efficient methods for lower orders\n  if (order === 1) return linear(data, x, y);\n  if (order === 2) return quad(data, x, y);\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length,\n        lhs = [],\n        rhs = [],\n        k = order + 1;\n  let i, j, l, v, c;\n\n  for (i = 0; i < k; ++i) {\n    for (l = 0, v = 0; l < n; ++l) {\n      v += Math.pow(xv[l], i) * yv[l];\n    }\n\n    lhs.push(v);\n    c = new Float64Array(k);\n\n    for (j = 0; j < k; ++j) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i + j);\n      }\n\n      c[j] = v;\n    }\n\n    rhs.push(c);\n  }\n\n  rhs.push(lhs);\n\n  const coef = gaussianElimination(rhs),\n        predict = x => {\n    x -= ux;\n    let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n\n    for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);\n\n    return y;\n  };\n\n  return {\n    coef: uncenter(k, coef, -ux, uy),\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c; // initialize to zero\n\n  for (i = 0; i < k; ++i) z[i] = 0; // polynomial expansion\n\n\n  for (i = k - 1; i >= 0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n\n    for (j = 1; j <= i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n\n      z[i - j] += v * Math.pow(x, j) * c;\n    }\n  } // bias term\n\n\n  z[0] += y;\n  return z;\n} // Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\n\n\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-statistics/src/regression/poly.js"],"names":["linear","points","quad","rSquared","data","x","y","order","xv","yv","ux","uy","n","length","lhs","rhs","k","i","j","l","v","c","Math","pow","push","Float64Array","coef","gaussianElimination","predict","uncenter","a","z","Array","matrix","r","t","abs"],"mappings":"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","sourcesContent":["import linear from './linear';\nimport {points} from './points';\nimport quad from './quad';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n// ... which was adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\nexport default function(data, x, y, order) {\n  // use more efficient methods for lower orders\n  if (order === 1) return linear(data, x, y);\n  if (order === 2) return quad(data, x, y);\n\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length,\n        lhs = [],\n        rhs = [],\n        k = order + 1;\n\n  let i, j, l, v, c;\n\n  for (i=0; i<k; ++i) {\n    for (l=0, v=0; l<n; ++l) {\n      v += Math.pow(xv[l], i) * yv[l];\n    }\n    lhs.push(v);\n\n    c = new Float64Array(k);\n    for (j=0; j<k; ++j) {\n      for (l=0, v=0; l<n; ++l) {\n        v += Math.pow(xv[l], i + j);\n      }\n      c[j] = v;\n    }\n    rhs.push(c);\n  }\n  rhs.push(lhs);\n\n  const coef = gaussianElimination(rhs),\n        predict = x => {\n          x -= ux;\n          let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n          for (i=3; i<k; ++i) y += coef[i] * Math.pow(x, i);\n          return y;\n        };\n\n  return {\n    coef: uncenter(k, coef, -ux, uy),\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c;\n\n  // initialize to zero\n  for (i=0; i<k; ++i) z[i] = 0;\n\n  // polynomial expansion\n  for (i=k-1; i>=0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n    for (j=1; j<=i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n      z[i-j] += v * Math.pow(x, j) * c;\n    }\n  }\n\n  // bias term\n  z[0] += y;\n\n  return z;\n}\n\n// Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}"]},"metadata":{},"sourceType":"module"}