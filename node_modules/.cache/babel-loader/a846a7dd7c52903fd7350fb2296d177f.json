{"ast":null,"code":"import axisConfig from './guides/axis-config';\nimport axisDomain from './guides/axis-domain';\nimport axisGrid from './guides/axis-grid';\nimport axisTicks from './guides/axis-ticks';\nimport axisLabels from './guides/axis-labels';\nimport axisTitle from './guides/axis-title';\nimport guideGroup from './guides/guide-group';\nimport { lookup, tickBand } from './guides/guide-util';\nimport { AxisRole } from './marks/roles';\nimport parseMark from './mark';\nimport { encoder, extendEncode } from './encode/encode-util';\nimport { Skip } from './guides/constants';\nimport { ref, value } from '../util';\nimport { Collect, AxisTicks } from '../transforms';\nexport default function (spec, scope) {\n  var config = axisConfig(spec, scope),\n      encode = spec.encode || {},\n      axisEncode = encode.axis || {},\n      name = axisEncode.name || undefined,\n      interactive = axisEncode.interactive,\n      style = axisEncode.style,\n      _ = lookup(spec, config),\n      band = tickBand(_),\n      datum,\n      dataRef,\n      ticksRef,\n      size,\n      group,\n      children; // single-element data source for axis group\n\n\n  datum = {\n    orient: spec.orient,\n    ticks: !!_('ticks'),\n    labels: !!_('labels'),\n    grid: !!_('grid'),\n    domain: !!_('domain'),\n    title: spec.title != null,\n    translate: _('translate')\n  };\n  dataRef = ref(scope.add(Collect({}, [datum]))); // encoding properties for axis group item\n\n  axisEncode = extendEncode({\n    update: {\n      offset: encoder(_('offset') || 0),\n      position: encoder(value(spec.position, 0)),\n      titlePadding: encoder(_('titlePadding')),\n      minExtent: encoder(_('minExtent')),\n      maxExtent: encoder(_('maxExtent')),\n      range: {\n        signal: `abs(span(range(\"${spec.scale}\")))`\n      }\n    }\n  }, encode.axis, Skip); // data source for axis ticks\n\n  ticksRef = ref(scope.add(AxisTicks({\n    scale: scope.scaleRef(spec.scale),\n    extra: scope.property(band.extra),\n    count: scope.objectProperty(spec.tickCount),\n    values: scope.objectProperty(spec.values),\n    minstep: scope.property(spec.tickMinStep),\n    formatType: scope.property(spec.formatType),\n    formatSpecifier: scope.property(spec.format)\n  }))); // generate axis marks\n\n  children = []; // include axis gridlines if requested\n\n  if (datum.grid) {\n    children.push(axisGrid(spec, config, encode.grid, ticksRef, band));\n  } // include axis ticks if requested\n\n\n  if (datum.ticks) {\n    size = _('tickSize');\n    children.push(axisTicks(spec, config, encode.ticks, ticksRef, size, band));\n  } // include axis labels if requested\n\n\n  if (datum.labels) {\n    size = datum.ticks ? size : 0;\n    children.push(axisLabels(spec, config, encode.labels, ticksRef, size, band));\n  } // include axis domain path if requested\n\n\n  if (datum.domain) {\n    children.push(axisDomain(spec, config, encode.domain, dataRef));\n  } // include axis title if defined\n\n\n  if (datum.title) {\n    children.push(axisTitle(spec, config, encode.title, dataRef));\n  } // build axis specification\n\n\n  group = guideGroup(AxisRole, style, name, dataRef, interactive, axisEncode, children);\n  if (spec.zindex) group.zindex = spec.zindex; // parse axis specification\n\n  return parseMark(group, scope);\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-parser/src/parsers/axis.js"],"names":["axisConfig","axisDomain","axisGrid","axisTicks","axisLabels","axisTitle","guideGroup","lookup","tickBand","AxisRole","parseMark","encoder","extendEncode","Skip","ref","value","Collect","AxisTicks","spec","scope","config","encode","axisEncode","axis","name","undefined","interactive","style","_","band","datum","dataRef","ticksRef","size","group","children","orient","ticks","labels","grid","domain","title","translate","add","update","offset","position","titlePadding","minExtent","maxExtent","range","signal","scale","scaleRef","extra","property","count","objectProperty","tickCount","values","minstep","tickMinStep","formatType","formatSpecifier","format","push","zindex"],"mappings":"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","sourcesContent":["import axisConfig from './guides/axis-config';\nimport axisDomain from './guides/axis-domain';\nimport axisGrid from './guides/axis-grid';\nimport axisTicks from './guides/axis-ticks';\nimport axisLabels from './guides/axis-labels';\nimport axisTitle from './guides/axis-title';\nimport guideGroup from './guides/guide-group';\nimport {lookup, tickBand} from './guides/guide-util';\nimport {AxisRole} from './marks/roles';\nimport parseMark from './mark';\nimport {encoder, extendEncode} from './encode/encode-util';\nimport {Skip} from './guides/constants';\nimport {ref, value} from '../util';\nimport {Collect, AxisTicks} from '../transforms';\n\nexport default function(spec, scope) {\n  var config = axisConfig(spec, scope),\n      encode = spec.encode || {},\n      axisEncode = encode.axis || {},\n      name = axisEncode.name || undefined,\n      interactive = axisEncode.interactive,\n      style = axisEncode.style,\n      _ = lookup(spec, config),\n      band = tickBand(_),\n      datum, dataRef, ticksRef, size, group, children;\n\n  // single-element data source for axis group\n  datum = {\n    orient: spec.orient,\n    ticks:  !!_('ticks'),\n    labels: !!_('labels'),\n    grid:   !!_('grid'),\n    domain: !!_('domain'),\n    title:  spec.title != null,\n    translate: _('translate')\n  };\n  dataRef = ref(scope.add(Collect({}, [datum])));\n\n  // encoding properties for axis group item\n  axisEncode = extendEncode({\n    update: {\n      offset:       encoder(_('offset') || 0),\n      position:     encoder(value(spec.position, 0)),\n      titlePadding: encoder(_('titlePadding')),\n      minExtent:    encoder(_('minExtent')),\n      maxExtent:    encoder(_('maxExtent')),\n      range:        {signal: `abs(span(range(\"${spec.scale}\")))`}\n    }\n  }, encode.axis, Skip);\n\n  // data source for axis ticks\n  ticksRef = ref(scope.add(AxisTicks({\n    scale:   scope.scaleRef(spec.scale),\n    extra:   scope.property(band.extra),\n    count:   scope.objectProperty(spec.tickCount),\n    values:  scope.objectProperty(spec.values),\n    minstep: scope.property(spec.tickMinStep),\n    formatType: scope.property(spec.formatType),\n    formatSpecifier: scope.property(spec.format)\n  })));\n\n  // generate axis marks\n  children = [];\n\n  // include axis gridlines if requested\n  if (datum.grid) {\n    children.push(axisGrid(spec, config, encode.grid, ticksRef, band));\n  }\n\n  // include axis ticks if requested\n  if (datum.ticks) {\n    size = _('tickSize');\n    children.push(axisTicks(spec, config, encode.ticks, ticksRef, size, band));\n  }\n\n  // include axis labels if requested\n  if (datum.labels) {\n    size = datum.ticks ? size : 0;\n    children.push(axisLabels(spec, config, encode.labels, ticksRef, size, band));\n  }\n\n  // include axis domain path if requested\n  if (datum.domain) {\n    children.push(axisDomain(spec, config, encode.domain, dataRef));\n  }\n\n  // include axis title if defined\n  if (datum.title) {\n    children.push(axisTitle(spec, config, encode.title, dataRef));\n  }\n\n  // build axis specification\n  group = guideGroup(AxisRole, style, name, dataRef, interactive, axisEncode, children);\n  if (spec.zindex) group.zindex = spec.zindex;\n\n  // parse axis specification\n  return parseMark(group, scope);\n}\n"]},"metadata":{},"sourceType":"module"}