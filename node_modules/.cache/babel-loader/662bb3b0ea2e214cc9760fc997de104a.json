{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\n\nconst expo_asset_1 = require(\"expo-asset\");\n\nconst react_native_1 = require(\"react-native\");\n\nconst platform_react_native_1 = require(\"./platform_react_native\");\n\nclass BundleResourceHandler {\n  constructor(modelJson, modelWeightsId) {\n    this.modelJson = modelJson;\n    this.modelWeightsId = modelWeightsId;\n\n    if (modelJson == null || modelWeightsId == null) {\n      throw new Error('Must pass the model json object and the model weights path.');\n    }\n\n    if (Array.isArray(modelWeightsId)) {\n      throw new Error('Bundle resource IO handler does not currently support loading ' + 'sharded weights');\n    }\n  }\n  /**\n   * Save model artifacts. This IO handler cannot support writing to the\n   * packaged bundle at runtime and is exclusively for loading a model\n   * that is already packages with the app.\n   */\n\n\n  async save() {\n    throw new Error('Bundle resource IO handler does not support saving. ' + 'Consider using asyncStorageIO instead');\n  }\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n\n\n  async load() {\n    const modelJson = this.modelJson;\n\n    if (modelJson.weightsManifest.length > 1) {\n      throw new Error('Bundle resource IO handler does not currently support loading ' + 'sharded weights and the modelJson indicates that this model has ' + 'sharded weights (more than one weights file).');\n    }\n\n    const weightsAsset = expo_asset_1.Asset.fromModule(this.modelWeightsId);\n\n    if (weightsAsset.uri.match('^http')) {\n      // In debug/dev mode RN will serve these assets over HTTP\n      return this.loadViaHttp(weightsAsset);\n    } else {\n      // In release mode the assets will be on the file system.\n      return this.loadLocalAsset(weightsAsset);\n    }\n  }\n\n  async loadViaHttp(weightsAsset) {\n    const modelJson = this.modelJson; // Load the weights\n\n    const url = weightsAsset.uri;\n    const requestInit = undefined;\n    const response = await platform_react_native_1.fetch(url, requestInit, {\n      isBinary: true\n    });\n    const weightData = await response.arrayBuffer();\n    const modelArtifacts = Object.assign({}, modelJson);\n    modelArtifacts.weightSpecs = modelJson.weightsManifest[0].weights; //@ts-ignore\n\n    delete modelArtifacts.weightManifest;\n    modelArtifacts.weightData = weightData;\n    return modelArtifacts;\n  }\n\n  async loadLocalAsset(weightsAsset) {\n    // Use a dynamic import here because react-native-fs is not compatible\n    // with managed expo workflow. However the managed expo workflow should\n    // never hit this code path.\n    // tslint:disable-next-line: no-require-imports\n    const RNFS = require('react-native-fs');\n\n    const modelJson = this.modelJson;\n    let base64Weights;\n\n    if (react_native_1.Platform.OS === 'android') {\n      // On android we get a resource id instead of a regular path. We need\n      // to load the weights from the res/raw folder using this id.\n      const fileName = `${weightsAsset.uri}.${weightsAsset.type}`;\n\n      try {\n        base64Weights = await RNFS.readFileRes(fileName, 'base64');\n      } catch (e) {\n        throw new Error(`Error reading resource ${fileName}. Make sure the file is\n            in located in the res/raw folder of the bundle`);\n      }\n    } else {\n      try {\n        base64Weights = await RNFS.readFile(weightsAsset.uri, 'base64');\n      } catch (e) {\n        throw new Error(`Error reading resource ${weightsAsset.uri}.`);\n      }\n    }\n\n    const weightData = tfjs_core_1.util.encodeString(base64Weights, 'base64').buffer;\n    const modelArtifacts = Object.assign({}, modelJson);\n    modelArtifacts.weightSpecs = modelJson.weightsManifest[0].weights; //@ts-ignore\n\n    delete modelArtifacts.weightManifest;\n    modelArtifacts.weightData = weightData;\n    return modelArtifacts;\n  }\n\n}\n/**\n * Factory function for BundleResource IOHandler.\n *\n * This `IOHandler` only supports `load`. It is designed to support\n * loading models that have been statically bundled (at compile time)\n * with an app.\n *\n * ```js\n *  const modelJson = require('../path/to/model.json');\n *  const modelWeights = require('../path/to/model_weights.bin');\n *  async function bundleResourceIOExample() {\n *    const model =\n *      await tf.loadLayersModel(bundleResourceIO(modelJson, modelWeights));\n *\n *     const res = model.predict(tf.randomNormal([1, 28, 28, 1])) as tf.Tensor;\n *  }\n * ```\n *\n * @param modelJson The JSON object for the serialized model.\n * @param modelWeightsId An identifier for the model weights file. This is\n * generally a resourceId or a path to the resource in the app package.\n * This is typically obtained with a `require` statement.\n *\n * See\n * facebook.github.io/react-native/docs/images#static-non-image-resources\n * for more details on how to include static resources into your react-native\n * app including how to configure `metro` to bundle `.bin` files.\n *\n * @returns An instance of `IOHandler`\n */\n\n/** @doc {heading: 'Models', subheading: 'IOHandlers'} */\n\n\nfunction bundleResourceIO(modelJson, modelWeightsId) {\n  if (typeof modelJson !== 'object') {\n    throw new Error('modelJson must be a JavaScript object (and not a string).\\n' + 'Have you wrapped yor asset path in a require() statment?');\n  }\n\n  if (typeof modelWeightsId !== 'number') {\n    throw new Error('modelWeightsID must be a number.\\n' + 'Have you wrapped yor asset path in a require() statment?');\n  }\n\n  return new BundleResourceHandler(modelJson, modelWeightsId);\n}\n\nexports.bundleResourceIO = bundleResourceIO;","map":{"version":3,"sources":["../src/bundle_resource_io.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\nconst expo_asset_1 = require(\"expo-asset\");\nconst react_native_1 = require(\"react-native\");\nconst platform_react_native_1 = require(\"./platform_react_native\");\nclass BundleResourceHandler {\n    constructor(modelJson, modelWeightsId) {\n        this.modelJson = modelJson;\n        this.modelWeightsId = modelWeightsId;\n        if (modelJson == null || modelWeightsId == null) {\n            throw new Error('Must pass the model json object and the model weights path.');\n        }\n        if (Array.isArray(modelWeightsId)) {\n            throw new Error('Bundle resource IO handler does not currently support loading ' +\n                'sharded weights');\n        }\n    }\n    /**\n     * Save model artifacts. This IO handler cannot support writing to the\n     * packaged bundle at runtime and is exclusively for loading a model\n     * that is already packages with the app.\n     */\n    async save() {\n        throw new Error('Bundle resource IO handler does not support saving. ' +\n            'Consider using asyncStorageIO instead');\n    }\n    /**\n     * Load a model from local storage.\n     *\n     * See the documentation to `browserLocalStorage` for details on the saved\n     * artifacts.\n     *\n     * @returns The loaded model (if loading succeeds).\n     */\n    async load() {\n        const modelJson = this.modelJson;\n        if (modelJson.weightsManifest.length > 1) {\n            throw new Error('Bundle resource IO handler does not currently support loading ' +\n                'sharded weights and the modelJson indicates that this model has ' +\n                'sharded weights (more than one weights file).');\n        }\n        const weightsAsset = expo_asset_1.Asset.fromModule(this.modelWeightsId);\n        if (weightsAsset.uri.match('^http')) {\n            // In debug/dev mode RN will serve these assets over HTTP\n            return this.loadViaHttp(weightsAsset);\n        }\n        else {\n            // In release mode the assets will be on the file system.\n            return this.loadLocalAsset(weightsAsset);\n        }\n    }\n    async loadViaHttp(weightsAsset) {\n        const modelJson = this.modelJson;\n        // Load the weights\n        const url = weightsAsset.uri;\n        const requestInit = undefined;\n        const response = await platform_react_native_1.fetch(url, requestInit, { isBinary: true });\n        const weightData = await response.arrayBuffer();\n        const modelArtifacts = Object.assign({}, modelJson);\n        modelArtifacts.weightSpecs = modelJson.weightsManifest[0].weights;\n        //@ts-ignore\n        delete modelArtifacts.weightManifest;\n        modelArtifacts.weightData = weightData;\n        return modelArtifacts;\n    }\n    async loadLocalAsset(weightsAsset) {\n        // Use a dynamic import here because react-native-fs is not compatible\n        // with managed expo workflow. However the managed expo workflow should\n        // never hit this code path.\n        // tslint:disable-next-line: no-require-imports\n        const RNFS = require('react-native-fs');\n        const modelJson = this.modelJson;\n        let base64Weights;\n        if (react_native_1.Platform.OS === 'android') {\n            // On android we get a resource id instead of a regular path. We need\n            // to load the weights from the res/raw folder using this id.\n            const fileName = `${weightsAsset.uri}.${weightsAsset.type}`;\n            try {\n                base64Weights = await RNFS.readFileRes(fileName, 'base64');\n            }\n            catch (e) {\n                throw new Error(`Error reading resource ${fileName}. Make sure the file is\n            in located in the res/raw folder of the bundle`);\n            }\n        }\n        else {\n            try {\n                base64Weights = await RNFS.readFile(weightsAsset.uri, 'base64');\n            }\n            catch (e) {\n                throw new Error(`Error reading resource ${weightsAsset.uri}.`);\n            }\n        }\n        const weightData = tfjs_core_1.util.encodeString(base64Weights, 'base64').buffer;\n        const modelArtifacts = Object.assign({}, modelJson);\n        modelArtifacts.weightSpecs = modelJson.weightsManifest[0].weights;\n        //@ts-ignore\n        delete modelArtifacts.weightManifest;\n        modelArtifacts.weightData = weightData;\n        return modelArtifacts;\n    }\n}\n/**\n * Factory function for BundleResource IOHandler.\n *\n * This `IOHandler` only supports `load`. It is designed to support\n * loading models that have been statically bundled (at compile time)\n * with an app.\n *\n * ```js\n *  const modelJson = require('../path/to/model.json');\n *  const modelWeights = require('../path/to/model_weights.bin');\n *  async function bundleResourceIOExample() {\n *    const model =\n *      await tf.loadLayersModel(bundleResourceIO(modelJson, modelWeights));\n *\n *     const res = model.predict(tf.randomNormal([1, 28, 28, 1])) as tf.Tensor;\n *  }\n * ```\n *\n * @param modelJson The JSON object for the serialized model.\n * @param modelWeightsId An identifier for the model weights file. This is\n * generally a resourceId or a path to the resource in the app package.\n * This is typically obtained with a `require` statement.\n *\n * See\n * facebook.github.io/react-native/docs/images#static-non-image-resources\n * for more details on how to include static resources into your react-native\n * app including how to configure `metro` to bundle `.bin` files.\n *\n * @returns An instance of `IOHandler`\n */\n/** @doc {heading: 'Models', subheading: 'IOHandlers'} */\nfunction bundleResourceIO(modelJson, modelWeightsId) {\n    if (typeof modelJson !== 'object') {\n        throw new Error('modelJson must be a JavaScript object (and not a string).\\n' +\n            'Have you wrapped yor asset path in a require() statment?');\n    }\n    if (typeof modelWeightsId !== 'number') {\n        throw new Error('modelWeightsID must be a number.\\n' +\n            'Have you wrapped yor asset path in a require() statment?');\n    }\n    return new BundleResourceHandler(modelJson, modelWeightsId);\n}\nexports.bundleResourceIO = bundleResourceIO;\n//# sourceMappingURL=bundle_resource_io.js.map"]},"metadata":{},"sourceType":"script"}