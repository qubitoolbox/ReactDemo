{"ast":null,"code":"import { stringValue } from 'vega-util';\nimport { TUPLE } from '..';\nimport { varName } from '../../../util';\nimport { assembleInit } from '../assemble';\nimport nearest from './nearest';\nimport { TUPLE_FIELDS } from './project';\nimport { isLegendBinding } from '../../../selection';\nconst inputBindings = {\n  has: selCmpt => {\n    return selCmpt.type === 'single' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales' && !isLegendBinding(selCmpt.bind);\n  },\n  parse: (model, selCmpt, selDef, origDef) => {\n    // Binding a selection to input widgets disables default direct manipulation interaction.\n    // A user can choose to re-enable it by explicitly specifying triggering input events.\n    if (!origDef.on) delete selCmpt.events;\n    if (!origDef.clear) delete selCmpt.clear;\n  },\n  topLevelSignals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const bind = selCmpt.bind;\n    const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n\n    const datum = nearest.has(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n    proj.items.forEach((p, i) => {\n      var _a, _b;\n\n      const sgname = varName(`${name}_${p.field}`);\n      const hasSignal = signals.filter(s => s.name === sgname);\n\n      if (!hasSignal.length) {\n        signals.unshift(Object.assign(Object.assign({\n          name: sgname\n        }, init ? {\n          init: assembleInit(init[i])\n        } : {\n          value: null\n        }), {\n          on: selCmpt.events ? [{\n            events: selCmpt.events,\n            update: `datum && item().mark.marktype !== 'group' ? ${datum}[${stringValue(p.field)}] : null`\n          }] : [],\n          bind: (_b = (_a = bind[p.field], _a !== null && _a !== void 0 ? _a : bind[p.channel]), _b !== null && _b !== void 0 ? _b : bind)\n        }));\n      }\n    });\n    return signals;\n  },\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const signal = signals.filter(s => s.name === name + TUPLE)[0];\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.map(p => varName(`${name}_${p.field}`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n\n    if (values.length) {\n      signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n    }\n\n    delete signal.value;\n    delete signal.on;\n    return signals;\n  }\n};\nexport default inputBindings;","map":{"version":3,"sources":["../../../../../src/compile/selection/transforms/inputs.ts"],"names":[],"mappings":"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","sourcesContent":["import {stringValue} from 'vega-util';\nimport {TUPLE} from '..';\nimport {varName} from '../../../util';\nimport {assembleInit} from '../assemble';\nimport nearest from './nearest';\nimport {TUPLE_FIELDS} from './project';\nimport {TransformCompiler} from './transforms';\nimport {isLegendBinding} from '../../../selection';\n\nconst inputBindings: TransformCompiler = {\n  has: selCmpt => {\n    return (\n      selCmpt.type === 'single' &&\n      selCmpt.resolve === 'global' &&\n      selCmpt.bind &&\n      selCmpt.bind !== 'scales' &&\n      !isLegendBinding(selCmpt.bind)\n    );\n  },\n\n  parse: (model, selCmpt, selDef, origDef) => {\n    // Binding a selection to input widgets disables default direct manipulation interaction.\n    // A user can choose to re-enable it by explicitly specifying triggering input events.\n    if (!origDef.on) delete selCmpt.events;\n    if (!origDef.clear) delete selCmpt.clear;\n  },\n\n  topLevelSignals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const bind = selCmpt.bind;\n    const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n    const datum = nearest.has(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n\n    proj.items.forEach((p, i) => {\n      const sgname = varName(`${name}_${p.field}`);\n      const hasSignal = signals.filter(s => s.name === sgname);\n\n      if (!hasSignal.length) {\n        signals.unshift({\n          name: sgname,\n          ...(init ? {init: assembleInit(init[i])} : {value: null}),\n          on: selCmpt.events\n            ? [\n                {\n                  events: selCmpt.events,\n                  update: `datum && item().mark.marktype !== 'group' ? ${datum}[${stringValue(p.field)}] : null`\n                }\n              ]\n            : [],\n          bind: bind[p.field] ?? bind[p.channel] ?? bind\n        });\n      }\n    });\n\n    return signals;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    const name = selCmpt.name;\n    const proj = selCmpt.project;\n    const signal = signals.filter(s => s.name === name + TUPLE)[0];\n    const fields = name + TUPLE_FIELDS;\n    const values = proj.items.map(p => varName(`${name}_${p.field}`));\n    const valid = values.map(v => `${v} !== null`).join(' && ');\n\n    if (values.length) {\n      signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n    }\n\n    delete signal.value;\n    delete signal.on;\n\n    return signals;\n  }\n};\n\nexport default inputBindings;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}