{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction vertexShaderSource(flipHorizontal) {\n  const horizontalScale = flipHorizontal ? -1 : 1;\n  return `#version 300 es\nprecision highp float;\n\nin vec2 position;\nin vec2 texCoords;\n\nout vec2 uv;\n\nvoid main() {\n  // Invert geometry to match the image orientation from the camera.\n  gl_Position = vec4(position * vec2(${horizontalScale}., -1.), 0, 1);\n  uv = texCoords;\n}`;\n}\n\nexports.vertexShaderSource = vertexShaderSource;\n\nfunction fragmentShaderSource() {\n  return `#version 300 es\nprecision highp float;\nuniform sampler2D inputTexture;\nin vec2 uv;\nout vec4 fragColor;\nvoid main() {\n  vec4 texSample = texture(inputTexture, uv);\n  fragColor = texSample;\n}`;\n}\n\nexports.fragmentShaderSource = fragmentShaderSource;\n\nfunction vertices() {\n  return new Float32Array([// clang-format off\n  -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1]);\n}\n\nexports.vertices = vertices;\n\nfunction texCoords() {\n  return new Float32Array([// clang-format off\n  0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0]);\n}\n\nexports.texCoords = texCoords;","map":{"version":3,"sources":["../../src/camera/draw_texture_program_info.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAiBA,SAAgB,kBAAhB,CAAmC,cAAnC,EAA0D;AACxD,QAAM,eAAe,GAAG,cAAc,GAAG,CAAC,CAAJ,GAAQ,CAA9C;AACA,SAAO;;;;;;;;;;uCAU8B,eAAe;;EAVpD;AAaD;;AAfD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAiBA,SAAgB,oBAAhB,GAAoC;AAClC,SAAO;;;;;;;;EAAP;AASD;;AAVD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAYA,SAAgB,QAAhB,GAAwB;AACtB,SAAO,IAAI,YAAJ,CAAiB,CACtB;AACA,GAAC,CAFqB,EAElB,CAAC,CAFiB,EAGtB,CAAC,CAHqB,EAGlB,CAHkB,EAItB,CAJsB,EAInB,CAJmB,EAKtB,CALsB,EAKnB,CALmB,EAMtB,CAAC,CANqB,EAMlB,CAAC,CANiB,EAOtB,CAPsB,EAOnB,CAAC,CAPkB,CAAjB,CAAP;AAUD;;AAXD,OAAA,CAAA,QAAA,GAAA,QAAA;;AAaA,SAAgB,SAAhB,GAAyB;AACvB,SAAO,IAAI,YAAJ,CAAiB,CACtB;AACA,GAFsB,EAEnB,CAFmB,EAGtB,CAHsB,EAGnB,CAHmB,EAItB,CAJsB,EAInB,CAJmB,EAKtB,CALsB,EAKnB,CALmB,EAMtB,CANsB,EAMnB,CANmB,EAOtB,CAPsB,EAOnB,CAPmB,CAAjB,CAAP;AAUD;;AAXD,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction vertexShaderSource(flipHorizontal) {\n    const horizontalScale = flipHorizontal ? -1 : 1;\n    return `#version 300 es\nprecision highp float;\n\nin vec2 position;\nin vec2 texCoords;\n\nout vec2 uv;\n\nvoid main() {\n  // Invert geometry to match the image orientation from the camera.\n  gl_Position = vec4(position * vec2(${horizontalScale}., -1.), 0, 1);\n  uv = texCoords;\n}`;\n}\nexports.vertexShaderSource = vertexShaderSource;\nfunction fragmentShaderSource() {\n    return `#version 300 es\nprecision highp float;\nuniform sampler2D inputTexture;\nin vec2 uv;\nout vec4 fragColor;\nvoid main() {\n  vec4 texSample = texture(inputTexture, uv);\n  fragColor = texSample;\n}`;\n}\nexports.fragmentShaderSource = fragmentShaderSource;\nfunction vertices() {\n    return new Float32Array([\n        // clang-format off\n        -1, -1,\n        -1, 1,\n        1, 1,\n        1, 1,\n        -1, -1,\n        1, -1,\n    ]);\n}\nexports.vertices = vertices;\nfunction texCoords() {\n    return new Float32Array([\n        // clang-format off\n        0, 0,\n        0, 1,\n        1, 1,\n        1, 1,\n        0, 0,\n        1, 0,\n    ]);\n}\nexports.texCoords = texCoords;\n//# sourceMappingURL=draw_texture_program_info.js.map"]},"metadata":{},"sourceType":"script"}