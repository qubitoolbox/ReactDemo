{"ast":null,"code":"import { isObject, mergeConfig } from 'vega-util';\nimport { getAllCompositeMarks } from './compositemark';\nimport { VL_ONLY_LEGEND_CONFIG } from './guide';\nimport { defaultLegendConfig } from './legend';\nimport * as mark from './mark';\nimport { PRIMITIVE_MARKS, VL_ONLY_MARK_CONFIG_PROPERTIES, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX } from './mark';\nimport { defaultScaleConfig } from './scale';\nimport { defaultConfig as defaultSelectionConfig } from './selection';\nimport { DEFAULT_SPACING, isStep } from './spec/base';\nimport { extractTitleConfig } from './title';\nimport { duplicate, getFirstDefined, keys } from './util';\nexport function getViewConfigContinuousSize(viewConfig, channel) {\n  var _a;\n\n  return _a = viewConfig[channel], _a !== null && _a !== void 0 ? _a : viewConfig[channel === 'width' ? 'continuousWidth' : 'continuousHeight']; // get width/height for backwards compatibility\n}\nexport function getViewConfigDiscreteStep(viewConfig, channel) {\n  const size = getViewConfigDiscreteSize(viewConfig, channel);\n  return isStep(size) ? size.step : DEFAULT_STEP;\n}\nexport function getViewConfigDiscreteSize(viewConfig, channel) {\n  var _a;\n\n  const size = (_a = viewConfig[channel], _a !== null && _a !== void 0 ? _a : viewConfig[channel === 'width' ? 'discreteWidth' : 'discreteHeight']); // get width/height for backwards compatibility\n\n  return getFirstDefined(size, {\n    step: viewConfig.step\n  });\n}\nexport const DEFAULT_STEP = 20;\nexport const defaultViewConfig = {\n  continuousWidth: 200,\n  continuousHeight: 200,\n  step: DEFAULT_STEP\n};\nexport function isVgScheme(rangeScheme) {\n  return rangeScheme && !!rangeScheme['scheme'];\n}\nexport const defaultConfig = {\n  background: 'white',\n  padding: 5,\n  timeFormat: '%b %d, %Y',\n  countTitle: 'Count of Records',\n  view: defaultViewConfig,\n  mark: mark.defaultMarkConfig,\n  area: {},\n  bar: mark.defaultBarConfig,\n  circle: {},\n  geoshape: {},\n  image: {},\n  line: {},\n  point: {},\n  rect: mark.defaultRectConfig,\n  rule: {\n    color: 'black'\n  },\n  square: {},\n  text: {\n    color: 'black'\n  },\n  tick: mark.defaultTickConfig,\n  trail: {},\n  boxplot: {\n    size: 14,\n    extent: 1.5,\n    box: {},\n    median: {\n      color: 'white'\n    },\n    outliers: {},\n    rule: {},\n    ticks: null\n  },\n  errorbar: {\n    center: 'mean',\n    rule: true,\n    ticks: false\n  },\n  errorband: {\n    band: {\n      opacity: 0.3\n    },\n    borders: false\n  },\n  scale: defaultScaleConfig,\n  projection: {},\n  axis: {},\n  axisX: {},\n  axisY: {},\n  axisLeft: {},\n  axisRight: {},\n  axisTop: {},\n  axisBottom: {},\n  axisBand: {},\n  legend: defaultLegendConfig,\n  header: {\n    titlePadding: 10,\n    labelPadding: 10\n  },\n  headerColumn: {},\n  headerRow: {},\n  headerFacet: {},\n  selection: defaultSelectionConfig,\n  style: {},\n  title: {},\n  facet: {\n    spacing: DEFAULT_SPACING\n  },\n  repeat: {\n    spacing: DEFAULT_SPACING\n  },\n  concat: {\n    spacing: DEFAULT_SPACING\n  }\n};\nexport function initConfig(config) {\n  return mergeConfig({}, defaultConfig, config);\n}\nconst MARK_STYLES = ['view', ...PRIMITIVE_MARKS];\nconst VL_ONLY_CONFIG_PROPERTIES = ['background', 'padding', 'facet', 'concat', 'repeat', 'numberFormat', 'timeFormat', 'countTitle', 'header', 'scale', 'selection', 'overlay' // FIXME: Redesign and unhide this\n];\nconst VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = Object.assign({\n  view: ['continuousWidth', 'continuousHeight', 'discreteWidth', 'discreteHeight', 'step']\n}, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);\nexport function stripAndRedirectConfig(config) {\n  config = duplicate(config);\n\n  for (const prop of VL_ONLY_CONFIG_PROPERTIES) {\n    delete config[prop];\n  }\n\n  if (config.legend) {\n    for (const prop of VL_ONLY_LEGEND_CONFIG) {\n      delete config.legend[prop];\n    }\n  } // Remove Vega-Lite only generic mark config\n\n\n  if (config.mark) {\n    for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n      delete config.mark[prop];\n    }\n  }\n\n  for (const markType of MARK_STYLES) {\n    // Remove Vega-Lite-only mark config\n    for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n      delete config[markType][prop];\n    } // Remove Vega-Lite only mark-specific config\n\n\n    const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];\n\n    if (vlOnlyMarkSpecificConfigs) {\n      for (const prop of vlOnlyMarkSpecificConfigs) {\n        delete config[markType][prop];\n      }\n    } // Redirect mark config to config.style so that mark config only affect its own mark type\n    // without affecting other marks that share the same underlying Vega marks.\n    // For example, config.rect should not affect bar marks.\n\n\n    redirectConfig(config, markType);\n  }\n\n  for (const m of getAllCompositeMarks()) {\n    // Clean up the composite mark config as we don't need them in the output specs anymore\n    delete config[m];\n  } // Redirect config.title -- so that title config do not\n  // affect header labels, which also uses `title` directive to implement.\n\n\n  redirectConfig(config, 'title', 'group-title'); // Remove empty config objects.\n\n  for (const prop in config) {\n    if (isObject(config[prop]) && keys(config[prop]).length === 0) {\n      delete config[prop];\n    }\n  }\n\n  return keys(config).length > 0 ? config : undefined;\n}\n\nfunction redirectConfig(config, prop, // string = composite mark\ntoProp, compositeMarkPart) {\n  const propConfig = prop === 'title' ? extractTitleConfig(config.title).mark : compositeMarkPart ? config[prop][compositeMarkPart] : config[prop];\n\n  if (prop === 'view') {\n    toProp = 'cell'; // View's default style is \"cell\"\n  }\n\n  const style = Object.assign(Object.assign({}, propConfig), config.style[prop]); // set config.style if it is not an empty object\n\n  if (keys(style).length > 0) {\n    config.style[toProp !== null && toProp !== void 0 ? toProp : prop] = style;\n  }\n\n  if (!compositeMarkPart) {\n    // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.\n    delete config[prop];\n  }\n}","map":{"version":3,"sources":["../../src/config.ts"],"names":[],"mappings":"AACA,SAAQ,QAAR,EAAkB,WAAlB,QAAoC,WAApC;AAEA,SAAmC,oBAAnC,QAA8D,iBAA9D;AACA,SAAQ,qBAAR,QAAoC,SAApC;AAEA,SAAQ,mBAAR,QAAgD,UAAhD;AACA,OAAO,KAAK,IAAZ,MAAsB,QAAtB;AACA,SAGE,eAHF,EAIE,8BAJF,EAKE,2CALF,QAMO,QANP;AAQA,SAAQ,kBAAR,QAA8C,SAA9C;AACA,SAAQ,aAAa,IAAI,sBAAzB,QAAuE,aAAvE;AACA,SAAqD,eAArD,EAAsE,MAAtE,QAAmF,aAAnF;AAEA,SAAQ,kBAAR,QAA8C,SAA9C;AACA,SAAQ,SAAR,EAAmB,eAAnB,EAAoC,IAApC,QAA+C,QAA/C;AAwDA,OAAM,SAAU,2BAAV,CAAsC,UAAtC,EAA8D,OAA9D,EAAyF;;;AAC7F,SAAA,EAAA,GAAO,UAAU,CAAC,OAAD,CAAjB,EAA0B,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,UAAU,CAAC,OAAO,KAAK,OAAZ,GAAsB,iBAAtB,GAA0C,kBAA3C,CAAxC,CAD6F,CACW;AACzG;AAED,OAAM,SAAU,yBAAV,CAAoC,UAApC,EAA4D,OAA5D,EAAuF;AAC3F,QAAM,IAAI,GAAG,yBAAyB,CAAC,UAAD,EAAa,OAAb,CAAtC;AACA,SAAO,MAAM,CAAC,IAAD,CAAN,GAAe,IAAI,CAAC,IAApB,GAA2B,YAAlC;AACD;AAED,OAAM,SAAU,yBAAV,CAAoC,UAApC,EAA4D,OAA5D,EAAuF;;;AAC3F,QAAM,IAAI,IAAA,EAAA,GAAG,UAAU,CAAC,OAAD,CAAb,EAAsB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,UAAU,CAAC,OAAO,KAAK,OAAZ,GAAsB,eAAtB,GAAwC,gBAAzC,CAApC,CAAV,CAD2F,CACe;;AAC1G,SAAO,eAAe,CAAC,IAAD,EAAO;AAAC,IAAA,IAAI,EAAE,UAAU,CAAC;AAAlB,GAAP,CAAtB;AACD;AAED,OAAO,MAAM,YAAY,GAAG,EAArB;AAEP,OAAO,MAAM,iBAAiB,GAAe;AAC3C,EAAA,eAAe,EAAE,GAD0B;AAE3C,EAAA,gBAAgB,EAAE,GAFyB;AAG3C,EAAA,IAAI,EAAE;AAHqC,CAAtC;AAMP,OAAM,SAAU,UAAV,CAAqB,WAArB,EAAwD;AAC5D,SAAO,WAAW,IAAI,CAAC,CAAC,WAAW,CAAC,QAAD,CAAnC;AACD;AAyFD,OAAO,MAAM,aAAa,GAAW;AACnC,EAAA,UAAU,EAAE,OADuB;AAGnC,EAAA,OAAO,EAAE,CAH0B;AAInC,EAAA,UAAU,EAAE,WAJuB;AAKnC,EAAA,UAAU,EAAE,kBALuB;AAOnC,EAAA,IAAI,EAAE,iBAP6B;AASnC,EAAA,IAAI,EAAE,IAAI,CAAC,iBATwB;AAUnC,EAAA,IAAI,EAAE,EAV6B;AAWnC,EAAA,GAAG,EAAE,IAAI,CAAC,gBAXyB;AAYnC,EAAA,MAAM,EAAE,EAZ2B;AAanC,EAAA,QAAQ,EAAE,EAbyB;AAcnC,EAAA,KAAK,EAAE,EAd4B;AAenC,EAAA,IAAI,EAAE,EAf6B;AAgBnC,EAAA,KAAK,EAAE,EAhB4B;AAiBnC,EAAA,IAAI,EAAE,IAAI,CAAC,iBAjBwB;AAkBnC,EAAA,IAAI,EAAE;AAAC,IAAA,KAAK,EAAE;AAAR,GAlB6B;AAmBnC,EAAA,MAAM,EAAE,EAnB2B;AAoBnC,EAAA,IAAI,EAAE;AAAC,IAAA,KAAK,EAAE;AAAR,GApB6B;AAqBnC,EAAA,IAAI,EAAE,IAAI,CAAC,iBArBwB;AAsBnC,EAAA,KAAK,EAAE,EAtB4B;AAwBnC,EAAA,OAAO,EAAE;AACP,IAAA,IAAI,EAAE,EADC;AAEP,IAAA,MAAM,EAAE,GAFD;AAGP,IAAA,GAAG,EAAE,EAHE;AAIP,IAAA,MAAM,EAAE;AAAC,MAAA,KAAK,EAAE;AAAR,KAJD;AAKP,IAAA,QAAQ,EAAE,EALH;AAMP,IAAA,IAAI,EAAE,EANC;AAOP,IAAA,KAAK,EAAE;AAPA,GAxB0B;AAkCnC,EAAA,QAAQ,EAAE;AACR,IAAA,MAAM,EAAE,MADA;AAER,IAAA,IAAI,EAAE,IAFE;AAGR,IAAA,KAAK,EAAE;AAHC,GAlCyB;AAwCnC,EAAA,SAAS,EAAE;AACT,IAAA,IAAI,EAAE;AACJ,MAAA,OAAO,EAAE;AADL,KADG;AAIT,IAAA,OAAO,EAAE;AAJA,GAxCwB;AA+CnC,EAAA,KAAK,EAAE,kBA/C4B;AAiDnC,EAAA,UAAU,EAAE,EAjDuB;AAmDnC,EAAA,IAAI,EAAE,EAnD6B;AAoDnC,EAAA,KAAK,EAAE,EApD4B;AAqDnC,EAAA,KAAK,EAAE,EArD4B;AAsDnC,EAAA,QAAQ,EAAE,EAtDyB;AAuDnC,EAAA,SAAS,EAAE,EAvDwB;AAwDnC,EAAA,OAAO,EAAE,EAxD0B;AAyDnC,EAAA,UAAU,EAAE,EAzDuB;AA0DnC,EAAA,QAAQ,EAAE,EA1DyB;AA2DnC,EAAA,MAAM,EAAE,mBA3D2B;AA4DnC,EAAA,MAAM,EAAE;AAAC,IAAA,YAAY,EAAE,EAAf;AAAmB,IAAA,YAAY,EAAE;AAAjC,GA5D2B;AA6DnC,EAAA,YAAY,EAAE,EA7DqB;AA8DnC,EAAA,SAAS,EAAE,EA9DwB;AA+DnC,EAAA,WAAW,EAAE,EA/DsB;AAiEnC,EAAA,SAAS,EAAE,sBAjEwB;AAkEnC,EAAA,KAAK,EAAE,EAlE4B;AAoEnC,EAAA,KAAK,EAAE,EApE4B;AAsEnC,EAAA,KAAK,EAAE;AAAC,IAAA,OAAO,EAAE;AAAV,GAtE4B;AAuEnC,EAAA,MAAM,EAAE;AAAC,IAAA,OAAO,EAAE;AAAV,GAvE2B;AAwEnC,EAAA,MAAM,EAAE;AAAC,IAAA,OAAO,EAAE;AAAV;AAxE2B,CAA9B;AA2EP,OAAM,SAAU,UAAV,CAAqB,MAArB,EAAmC;AACvC,SAAO,WAAW,CAAC,EAAD,EAAK,aAAL,EAAoB,MAApB,CAAlB;AACD;AAED,MAAM,WAAW,GAAG,CAAC,MAAD,EAAS,GAAG,eAAZ,CAApB;AAEA,MAAM,yBAAyB,GAAqB,CAClD,YADkD,EAElD,SAFkD,EAGlD,OAHkD,EAIlD,QAJkD,EAKlD,QALkD,EAMlD,cANkD,EAOlD,YAPkD,EAQlD,YARkD,EASlD,QATkD,EAUlD,OAVkD,EAWlD,WAXkD,EAYlD,SAZkD,CAYxB;AAZwB,CAApD;AAeA,MAAM,+CAA+C,GAAA,MAAA,CAAA,MAAA,CAAA;AACnD,EAAA,IAAI,EAAE,CAAC,iBAAD,EAAoB,kBAApB,EAAwC,eAAxC,EAAyD,gBAAzD,EAA2E,MAA3E;AAD6C,CAAA,EAEhD,2CAFgD,CAArD;AAKA,OAAM,SAAU,sBAAV,CAAiC,MAAjC,EAA+C;AACnD,EAAA,MAAM,GAAG,SAAS,CAAC,MAAD,CAAlB;;AAEA,OAAK,MAAM,IAAX,IAAmB,yBAAnB,EAA8C;AAC5C,WAAO,MAAM,CAAC,IAAD,CAAb;AACD;;AAED,MAAI,MAAM,CAAC,MAAX,EAAmB;AACjB,SAAK,MAAM,IAAX,IAAmB,qBAAnB,EAA0C;AACxC,aAAO,MAAM,CAAC,MAAP,CAAc,IAAd,CAAP;AACD;AACF,GAXkD,CAanD;;;AACA,MAAI,MAAM,CAAC,IAAX,EAAiB;AACf,SAAK,MAAM,IAAX,IAAmB,8BAAnB,EAAmD;AACjD,aAAO,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAP;AACD;AACF;;AAED,OAAK,MAAM,QAAX,IAAuB,WAAvB,EAAoC;AAClC;AACA,SAAK,MAAM,IAAX,IAAmB,8BAAnB,EAAmD;AACjD,aAAO,MAAM,CAAC,QAAD,CAAN,CAAiB,IAAjB,CAAP;AACD,KAJiC,CAMlC;;;AACA,UAAM,yBAAyB,GAAG,+CAA+C,CAAC,QAAD,CAAjF;;AACA,QAAI,yBAAJ,EAA+B;AAC7B,WAAK,MAAM,IAAX,IAAmB,yBAAnB,EAA8C;AAC5C,eAAO,MAAM,CAAC,QAAD,CAAN,CAAiB,IAAjB,CAAP;AACD;AACF,KAZiC,CAclC;AACA;AACA;;;AACA,IAAA,cAAc,CAAC,MAAD,EAAS,QAAT,CAAd;AACD;;AAED,OAAK,MAAM,CAAX,IAAgB,oBAAoB,EAApC,EAAwC;AACtC;AACA,WAAO,MAAM,CAAC,CAAD,CAAb;AACD,GA3CkD,CA6CnD;AACA;;;AACA,EAAA,cAAc,CAAC,MAAD,EAAS,OAAT,EAAkB,aAAlB,CAAd,CA/CmD,CAiDnD;;AACA,OAAK,MAAM,IAAX,IAAmB,MAAnB,EAA2B;AACzB,QAAI,QAAQ,CAAC,MAAM,CAAC,IAAD,CAAP,CAAR,IAA0B,IAAI,CAAC,MAAM,CAAC,IAAD,CAAP,CAAJ,CAAmB,MAAnB,KAA8B,CAA5D,EAA+D;AAC7D,aAAO,MAAM,CAAC,IAAD,CAAb;AACD;AACF;;AAED,SAAO,IAAI,CAAC,MAAD,CAAJ,CAAa,MAAb,GAAsB,CAAtB,GAA0B,MAA1B,GAAmC,SAA1C;AACD;;AAED,SAAS,cAAT,CACE,MADF,EAEE,IAFF,EAE0C;AACxC,MAHF,EAIE,iBAJF,EAI4B;AAE1B,QAAM,UAAU,GACd,IAAI,KAAK,OAAT,GACI,kBAAkB,CAAC,MAAM,CAAC,KAAR,CAAlB,CAAiC,IADrC,GAEI,iBAAiB,GACjB,MAAM,CAAC,IAAD,CAAN,CAAa,iBAAb,CADiB,GAEjB,MAAM,CAAC,IAAD,CALZ;;AAOA,MAAI,IAAI,KAAK,MAAb,EAAqB;AACnB,IAAA,MAAM,GAAG,MAAT,CADmB,CACF;AAClB;;AAED,QAAM,KAAK,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACN,UADM,CAAA,EAEN,MAAM,CAAC,KAAP,CAAa,IAAb,CAFM,CAAX,CAb0B,CAiB1B;;AACA,MAAI,IAAI,CAAC,KAAD,CAAJ,CAAY,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,IAAA,MAAM,CAAC,KAAP,CAAa,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAA,MAAA,GAAU,IAAvB,IAA+B,KAA/B;AACD;;AAED,MAAI,CAAC,iBAAL,EAAwB;AACtB;AACA,WAAO,MAAM,CAAC,IAAD,CAAb;AACD;AACF","sourcesContent":["import {Color, RangeScheme, RangeConfig} from 'vega';\nimport {isObject, mergeConfig} from 'vega-util';\nimport {AxisConfigMixins} from './axis';\nimport {CompositeMarkConfigMixins, getAllCompositeMarks} from './compositemark';\nimport {VL_ONLY_LEGEND_CONFIG} from './guide';\nimport {HeaderConfigMixins} from './header';\nimport {defaultLegendConfig, LegendConfig} from './legend';\nimport * as mark from './mark';\nimport {\n  Mark,\n  MarkConfigMixins,\n  PRIMITIVE_MARKS,\n  VL_ONLY_MARK_CONFIG_PROPERTIES,\n  VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX\n} from './mark';\nimport {ProjectionConfig} from './projection';\nimport {defaultScaleConfig, ScaleConfig} from './scale';\nimport {defaultConfig as defaultSelectionConfig, SelectionConfig} from './selection';\nimport {BaseViewBackground, CompositionConfigMixins, DEFAULT_SPACING, isStep} from './spec/base';\nimport {TopLevelProperties} from './spec/toplevel';\nimport {extractTitleConfig, TitleConfig} from './title';\nimport {duplicate, getFirstDefined, keys} from './util';\nimport {BaseMarkConfig} from './vega.schema';\n\nexport interface ViewConfig extends BaseViewBackground {\n  /**\n   * Default width\n   *\n   * @deprecated Since Vega-Lite 4.0. Please use continuousWidth and discreteWidth instead.\n   */\n  width?: number;\n\n  /**\n   * Default height\n   *\n   * @deprecated Since Vega-Lite 4.0. Please use continuousHeight and discreteHeight instead.\n   */\n  height?: number;\n\n  /**\n   * The default width when the plot has a continuous x-field.\n   *\n   * __Default value:__ `200`\n   */\n  continuousWidth?: number;\n\n  /**\n   * The default width when the plot has either a discrete x-field or no x-field.\n   *\n   * __Default value:__ a step size based on `config.view.step`.\n   */\n  discreteWidth?: number | {step: number};\n  /**\n   * The default height when the plot has a continuous y-field.\n   *\n   * __Default value:__ `200`\n   */\n  continuousHeight?: number;\n\n  /**\n   * The default height when the plot has either a discrete y-field or no y-field.\n   *\n   * __Default value:__ a step size based on `config.view.step`.\n   */\n  discreteHeight?: number | {step: number};\n\n  /**\n   * Default step size for x-/y- discrete fields.\n   */\n  step?: number;\n\n  /**\n   * Whether the view should be clipped.\n   */\n  clip?: boolean;\n}\n\nexport function getViewConfigContinuousSize(viewConfig: ViewConfig, channel: 'width' | 'height') {\n  return viewConfig[channel] ?? viewConfig[channel === 'width' ? 'continuousWidth' : 'continuousHeight']; // get width/height for backwards compatibility\n}\n\nexport function getViewConfigDiscreteStep(viewConfig: ViewConfig, channel: 'width' | 'height') {\n  const size = getViewConfigDiscreteSize(viewConfig, channel);\n  return isStep(size) ? size.step : DEFAULT_STEP;\n}\n\nexport function getViewConfigDiscreteSize(viewConfig: ViewConfig, channel: 'width' | 'height') {\n  const size = viewConfig[channel] ?? viewConfig[channel === 'width' ? 'discreteWidth' : 'discreteHeight']; // get width/height for backwards compatibility\n  return getFirstDefined(size, {step: viewConfig.step});\n}\n\nexport const DEFAULT_STEP = 20;\n\nexport const defaultViewConfig: ViewConfig = {\n  continuousWidth: 200,\n  continuousHeight: 200,\n  step: DEFAULT_STEP\n};\n\nexport function isVgScheme(rangeScheme: string[] | RangeScheme): rangeScheme is RangeScheme {\n  return rangeScheme && !!rangeScheme['scheme'];\n}\n\nexport interface VLOnlyConfig {\n  /**\n   * Default axis and legend title for count fields.\n   *\n   * __Default value:__ `'Count of Records`.\n   *\n   * @type {string}\n   */\n  countTitle?: string;\n\n  /**\n   * Defines how Vega-Lite generates title for fields. There are three possible styles:\n   * - `\"verbal\"` (Default) - displays function in a verbal style (e.g., \"Sum of field\", \"Year-month of date\", \"field (binned)\").\n   * - `\"function\"` - displays function using parentheses and capitalized texts (e.g., \"SUM(field)\", \"YEARMONTH(date)\", \"BIN(field)\").\n   * - `\"plain\"` - displays only the field name without functions (e.g., \"field\", \"date\", \"field\").\n   */\n  fieldTitle?: 'verbal' | 'functional' | 'plain';\n\n  /**\n   * D3 Number format for guide labels and text marks. For example \"s\" for SI units. Use [D3's number format pattern](https://github.com/d3/d3-format#locale_format).\n   */\n  numberFormat?: string;\n\n  /**\n   * Default time format for raw time values (without time units) in text marks, legend labels and header labels.\n   *\n   * __Default value:__ `\"%b %d, %Y\"`\n   * __Note:__ Axes automatically determine format each label automatically so this config would not affect axes.\n   */\n  timeFormat?: string;\n\n  /** Default properties for [single view plots](https://vega.github.io/vega-lite/docs/spec.html#single). */\n  view?: ViewConfig;\n\n  /**\n   * Scale configuration determines default properties for all [scales](https://vega.github.io/vega-lite/docs/scale.html). For a full list of scale configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config).\n   */\n  scale?: ScaleConfig;\n\n  /** An object hash for defining default properties for each type of selections. */\n  selection?: SelectionConfig;\n}\n\nexport interface StyleConfigIndex {\n  [style: string]: BaseMarkConfig;\n}\n\nexport interface Config\n  extends TopLevelProperties,\n    VLOnlyConfig,\n    MarkConfigMixins,\n    CompositeMarkConfigMixins,\n    AxisConfigMixins,\n    HeaderConfigMixins,\n    CompositionConfigMixins {\n  /**\n   * CSS color property to use as the background of the entire view.\n   *\n   * __Default value:__ `\"white\"`\n   */\n  background?: Color;\n\n  /**\n   * An object hash that defines default range arrays or schemes for using with scales.\n   * For a full list of scale range configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config).\n   */\n  range?: RangeConfig;\n\n  /**\n   * Legend configuration, which determines default properties for all [legends](https://vega.github.io/vega-lite/docs/legend.html). For a full list of legend configuration options, please see the [corresponding section of in the legend documentation](https://vega.github.io/vega-lite/docs/legend.html#config).\n   */\n  legend?: LegendConfig;\n\n  /**\n   * Title configuration, which determines default properties for all [titles](https://vega.github.io/vega-lite/docs/title.html). For a full list of title configuration options, please see the [corresponding section of the title documentation](https://vega.github.io/vega-lite/docs/title.html#config).\n   */\n  title?: TitleConfig;\n\n  /**\n   * Projection configuration, which determines default properties for all [projections](https://vega.github.io/vega-lite/docs/projection.html). For a full list of projection configuration options, please see the [corresponding section of the projection documentation](https://vega.github.io/vega-lite/docs/projection.html#config).\n   */\n  projection?: ProjectionConfig;\n\n  /** An object hash that defines key-value mappings to determine default properties for marks with a given [style](https://vega.github.io/vega-lite/docs/mark.html#mark-def). The keys represent styles names; the values have to be valid [mark configuration objects](https://vega.github.io/vega-lite/docs/mark.html#config). */\n  style?: StyleConfigIndex;\n}\n\nexport const defaultConfig: Config = {\n  background: 'white',\n\n  padding: 5,\n  timeFormat: '%b %d, %Y',\n  countTitle: 'Count of Records',\n\n  view: defaultViewConfig,\n\n  mark: mark.defaultMarkConfig,\n  area: {},\n  bar: mark.defaultBarConfig,\n  circle: {},\n  geoshape: {},\n  image: {},\n  line: {},\n  point: {},\n  rect: mark.defaultRectConfig,\n  rule: {color: 'black'}, // Need this to override default color in mark config\n  square: {},\n  text: {color: 'black'}, // Need this to override default color in mark config\n  tick: mark.defaultTickConfig,\n  trail: {},\n\n  boxplot: {\n    size: 14,\n    extent: 1.5,\n    box: {},\n    median: {color: 'white'},\n    outliers: {},\n    rule: {},\n    ticks: null\n  },\n\n  errorbar: {\n    center: 'mean',\n    rule: true,\n    ticks: false\n  },\n\n  errorband: {\n    band: {\n      opacity: 0.3\n    },\n    borders: false\n  },\n\n  scale: defaultScaleConfig,\n\n  projection: {},\n\n  axis: {},\n  axisX: {},\n  axisY: {},\n  axisLeft: {},\n  axisRight: {},\n  axisTop: {},\n  axisBottom: {},\n  axisBand: {},\n  legend: defaultLegendConfig,\n  header: {titlePadding: 10, labelPadding: 10},\n  headerColumn: {},\n  headerRow: {},\n  headerFacet: {},\n\n  selection: defaultSelectionConfig,\n  style: {},\n\n  title: {},\n\n  facet: {spacing: DEFAULT_SPACING},\n  repeat: {spacing: DEFAULT_SPACING},\n  concat: {spacing: DEFAULT_SPACING}\n};\n\nexport function initConfig(config: Config) {\n  return mergeConfig({}, defaultConfig, config);\n}\n\nconst MARK_STYLES = ['view', ...PRIMITIVE_MARKS] as ('view' | Mark)[];\n\nconst VL_ONLY_CONFIG_PROPERTIES: (keyof Config)[] = [\n  'background', // We apply background to the spec directly.\n  'padding',\n  'facet',\n  'concat',\n  'repeat',\n  'numberFormat',\n  'timeFormat',\n  'countTitle',\n  'header',\n  'scale',\n  'selection',\n  'overlay' as keyof Config // FIXME: Redesign and unhide this\n];\n\nconst VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n  view: ['continuousWidth', 'continuousHeight', 'discreteWidth', 'discreteHeight', 'step'],\n  ...VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX\n};\n\nexport function stripAndRedirectConfig(config: Config) {\n  config = duplicate(config);\n\n  for (const prop of VL_ONLY_CONFIG_PROPERTIES) {\n    delete config[prop];\n  }\n\n  if (config.legend) {\n    for (const prop of VL_ONLY_LEGEND_CONFIG) {\n      delete config.legend[prop];\n    }\n  }\n\n  // Remove Vega-Lite only generic mark config\n  if (config.mark) {\n    for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n      delete config.mark[prop];\n    }\n  }\n\n  for (const markType of MARK_STYLES) {\n    // Remove Vega-Lite-only mark config\n    for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n      delete config[markType][prop];\n    }\n\n    // Remove Vega-Lite only mark-specific config\n    const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];\n    if (vlOnlyMarkSpecificConfigs) {\n      for (const prop of vlOnlyMarkSpecificConfigs) {\n        delete config[markType][prop];\n      }\n    }\n\n    // Redirect mark config to config.style so that mark config only affect its own mark type\n    // without affecting other marks that share the same underlying Vega marks.\n    // For example, config.rect should not affect bar marks.\n    redirectConfig(config, markType);\n  }\n\n  for (const m of getAllCompositeMarks()) {\n    // Clean up the composite mark config as we don't need them in the output specs anymore\n    delete config[m];\n  }\n\n  // Redirect config.title -- so that title config do not\n  // affect header labels, which also uses `title` directive to implement.\n  redirectConfig(config, 'title', 'group-title');\n\n  // Remove empty config objects.\n  for (const prop in config) {\n    if (isObject(config[prop]) && keys(config[prop]).length === 0) {\n      delete config[prop];\n    }\n  }\n\n  return keys(config).length > 0 ? config : undefined;\n}\n\nfunction redirectConfig(\n  config: Config,\n  prop: Mark | 'title' | 'view' | string, // string = composite mark\n  toProp?: string,\n  compositeMarkPart?: string\n) {\n  const propConfig: BaseMarkConfig =\n    prop === 'title'\n      ? extractTitleConfig(config.title).mark\n      : compositeMarkPart\n      ? config[prop][compositeMarkPart]\n      : config[prop];\n\n  if (prop === 'view') {\n    toProp = 'cell'; // View's default style is \"cell\"\n  }\n\n  const style: BaseMarkConfig = {\n    ...propConfig,\n    ...config.style[prop]\n  };\n  // set config.style if it is not an empty object\n  if (keys(style).length > 0) {\n    config.style[toProp ?? prop] = style;\n  }\n\n  if (!compositeMarkPart) {\n    // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.\n    delete config[prop];\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}