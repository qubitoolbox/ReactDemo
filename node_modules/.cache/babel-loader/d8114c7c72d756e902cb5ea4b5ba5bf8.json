{"ast":null,"code":"import { Platform } from 'react-native';\nimport { coalesceExpirations, coalesceStatuses, coalesceCanAskAgain, coalesceGranted } from './CoalescedPermissions';\nimport Permissions from './ExpoPermissions';\nimport { PermissionStatus } from './Permissions.types';\nexport { PermissionStatus };\nexport const CAMERA = 'camera';\nexport const CAMERA_ROLL = 'cameraRoll';\nexport const AUDIO_RECORDING = 'audioRecording';\nexport const LOCATION = 'location';\nexport const USER_FACING_NOTIFICATIONS = 'userFacingNotifications';\nexport const NOTIFICATIONS = 'notifications';\nexport const CONTACTS = 'contacts';\nexport const CALENDAR = 'calendar';\nexport const REMINDERS = 'reminders';\nexport const SYSTEM_BRIGHTNESS = 'systemBrightness';\nexport async function getAsync(...types) {\n  if (Platform.OS === 'ios') {\n    return await _handleMultiPermissionsRequestIOSAsync(types, Permissions.getAsync);\n  }\n\n  return await _handlePermissionsRequestAsync(types, Permissions.getAsync);\n}\nexport async function askAsync(...types) {\n  if (Platform.OS === 'ios') {\n    return await _handleMultiPermissionsRequestIOSAsync(types, Permissions.askAsync);\n  }\n\n  return await _handlePermissionsRequestAsync(types, Permissions.askAsync);\n}\n\nasync function _handleSinglePermissionRequestIOSAsync(type, handlePermission) {\n  return await handlePermission(type);\n}\n\nasync function _handleMultiPermissionsRequestIOSAsync(types, handlePermission) {\n  if (!types.length) {\n    throw new Error('At least one permission type must be specified');\n  }\n\n  let permissions = {};\n\n  for (let type of types) {\n    permissions[type] = await _handleSinglePermissionRequestIOSAsync(type, handlePermission);\n  }\n\n  return {\n    status: coalesceStatuses(permissions),\n    expires: coalesceExpirations(permissions),\n    canAskAgain: coalesceCanAskAgain(permissions),\n    granted: coalesceGranted(permissions),\n    permissions\n  };\n}\n\nasync function _handlePermissionsRequestAsync(types, handlePermissions) {\n  if (!types.length) {\n    throw new Error('At least one permission type must be specified');\n  }\n\n  const permissions = await handlePermissions(types);\n  return {\n    status: coalesceStatuses(permissions),\n    expires: coalesceExpirations(permissions),\n    canAskAgain: coalesceCanAskAgain(permissions),\n    granted: coalesceGranted(permissions),\n    permissions\n  };\n}","map":{"version":3,"sources":["../src/Permissions.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,cAAzB;AACA,SACE,mBADF,EAEE,gBAFF,EAGE,mBAHF,EAIE,eAJF,QAKO,wBALP;AAMA,OAAO,WAAP,MAAwB,mBAAxB;AAEA,SAIE,gBAJF,QAOO,qBAPP;AASA,SACE,gBADF;AASA,OAAO,MAAM,MAAM,GAAG,QAAf;AACP,OAAO,MAAM,WAAW,GAAG,YAApB;AACP,OAAO,MAAM,eAAe,GAAG,gBAAxB;AACP,OAAO,MAAM,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAM,yBAAyB,GAAG,yBAAlC;AACP,OAAO,MAAM,aAAa,GAAG,eAAtB;AACP,OAAO,MAAM,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAM,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAM,SAAS,GAAG,WAAlB;AACP,OAAO,MAAM,iBAAiB,GAAG,kBAA1B;AAEP,OAAO,eAAe,QAAf,CAAwB,GAAG,KAA3B,EAAkD;AACvD,MAAI,QAAQ,CAAC,EAAT,KAAgB,KAApB,EAA2B;AACzB,WAAO,MAAM,sCAAsC,CAAC,KAAD,EAAQ,WAAW,CAAC,QAApB,CAAnD;AACD;;AACD,SAAO,MAAM,8BAA8B,CAAC,KAAD,EAAQ,WAAW,CAAC,QAApB,CAA3C;AACD;AAED,OAAO,eAAe,QAAf,CAAwB,GAAG,KAA3B,EAAkD;AACvD,MAAI,QAAQ,CAAC,EAAT,KAAgB,KAApB,EAA2B;AACzB,WAAO,MAAM,sCAAsC,CAAC,KAAD,EAAQ,WAAW,CAAC,QAApB,CAAnD;AACD;;AACD,SAAO,MAAM,8BAA8B,CAAC,KAAD,EAAQ,WAAW,CAAC,QAApB,CAA3C;AACD;;AAED,eAAe,sCAAf,CACE,IADF,EAEE,gBAFF,EAEqE;AAEnE,SAAO,MAAM,gBAAgB,CAAC,IAAD,CAA7B;AACD;;AAED,eAAe,sCAAf,CACE,KADF,EAEE,gBAFF,EAEqE;AAEnE,MAAI,CAAC,KAAK,CAAC,MAAX,EAAmB;AACjB,UAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,MAAI,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAI,IAAT,IAAiB,KAAjB,EAAwB;AACtB,IAAA,WAAW,CAAC,IAAD,CAAX,GAAoB,MAAM,sCAAsC,CAAC,IAAD,EAAO,gBAAP,CAAhE;AACD;;AAED,SAAO;AACL,IAAA,MAAM,EAAE,gBAAgB,CAAC,WAAD,CADnB;AAEL,IAAA,OAAO,EAAE,mBAAmB,CAAC,WAAD,CAFvB;AAGL,IAAA,WAAW,EAAE,mBAAmB,CAAC,WAAD,CAH3B;AAIL,IAAA,OAAO,EAAE,eAAe,CAAC,WAAD,CAJnB;AAKL,IAAA;AALK,GAAP;AAOD;;AAED,eAAe,8BAAf,CACE,KADF,EAEE,iBAFF,EAEwE;AAEtE,MAAI,CAAC,KAAK,CAAC,MAAX,EAAmB;AACjB,UAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,QAAM,WAAW,GAAG,MAAM,iBAAiB,CAAC,KAAD,CAA3C;AACA,SAAO;AACL,IAAA,MAAM,EAAE,gBAAgB,CAAC,WAAD,CADnB;AAEL,IAAA,OAAO,EAAE,mBAAmB,CAAC,WAAD,CAFvB;AAGL,IAAA,WAAW,EAAE,mBAAmB,CAAC,WAAD,CAH3B;AAIL,IAAA,OAAO,EAAE,eAAe,CAAC,WAAD,CAJnB;AAKL,IAAA;AALK,GAAP;AAOD","sourcesContent":["import { Platform } from 'react-native';\nimport {\n  coalesceExpirations,\n  coalesceStatuses,\n  coalesceCanAskAgain,\n  coalesceGranted,\n} from './CoalescedPermissions';\nimport Permissions from './ExpoPermissions';\n\nimport {\n  PermissionResponse,\n  PermissionType,\n  PermissionMap,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionInfo,\n} from './Permissions.types';\n\nexport {\n  PermissionStatus,\n  PermissionResponse,\n  PermissionExpiration,\n  PermissionMap,\n  PermissionInfo,\n  PermissionType,\n};\n\nexport const CAMERA = 'camera';\nexport const CAMERA_ROLL = 'cameraRoll';\nexport const AUDIO_RECORDING = 'audioRecording';\nexport const LOCATION = 'location';\nexport const USER_FACING_NOTIFICATIONS = 'userFacingNotifications';\nexport const NOTIFICATIONS = 'notifications';\nexport const CONTACTS = 'contacts';\nexport const CALENDAR = 'calendar';\nexport const REMINDERS = 'reminders';\nexport const SYSTEM_BRIGHTNESS = 'systemBrightness';\n\nexport async function getAsync(...types: PermissionType[]): Promise<PermissionResponse> {\n  if (Platform.OS === 'ios') {\n    return await _handleMultiPermissionsRequestIOSAsync(types, Permissions.getAsync);\n  }\n  return await _handlePermissionsRequestAsync(types, Permissions.getAsync);\n}\n\nexport async function askAsync(...types: PermissionType[]): Promise<PermissionResponse> {\n  if (Platform.OS === 'ios') {\n    return await _handleMultiPermissionsRequestIOSAsync(types, Permissions.askAsync);\n  }\n  return await _handlePermissionsRequestAsync(types, Permissions.askAsync);\n}\n\nasync function _handleSinglePermissionRequestIOSAsync(\n  type: PermissionType,\n  handlePermission: (type: PermissionType) => Promise<PermissionInfo>\n): Promise<PermissionInfo> {\n  return await handlePermission(type);\n}\n\nasync function _handleMultiPermissionsRequestIOSAsync(\n  types: PermissionType[],\n  handlePermission: (type: PermissionType) => Promise<PermissionInfo>\n): Promise<PermissionResponse> {\n  if (!types.length) {\n    throw new Error('At least one permission type must be specified');\n  }\n\n  let permissions = {};\n  for (let type of types) {\n    permissions[type] = await _handleSinglePermissionRequestIOSAsync(type, handlePermission);\n  }\n\n  return {\n    status: coalesceStatuses(permissions),\n    expires: coalesceExpirations(permissions),\n    canAskAgain: coalesceCanAskAgain(permissions),\n    granted: coalesceGranted(permissions),\n    permissions,\n  };\n}\n\nasync function _handlePermissionsRequestAsync(\n  types: PermissionType[],\n  handlePermissions: (types: PermissionType[]) => Promise<PermissionMap>\n): Promise<PermissionResponse> {\n  if (!types.length) {\n    throw new Error('At least one permission type must be specified');\n  }\n\n  const permissions = await handlePermissions(types);\n  return {\n    status: coalesceStatuses(permissions),\n    expires: coalesceExpirations(permissions),\n    canAskAgain: coalesceCanAskAgain(permissions),\n    granted: coalesceGranted(permissions),\n    permissions,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}