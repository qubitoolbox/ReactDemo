{"ast":null,"code":"import { getMarkType } from '../mark';\nimport { isUnitSpec } from '../spec/unit';\nexport class CompositeMarkNormalizer {\n  constructor(name, run) {\n    this.name = name;\n    this.run = run;\n  }\n\n  hasMatchingType(spec) {\n    if (isUnitSpec(spec)) {\n      return getMarkType(spec.mark) === this.name;\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["../../../src/compositemark/base.ts"],"names":[],"mappings":"AAAA,SAAwB,WAAxB,QAA0C,SAA1C;AAIA,SAAyB,UAAzB,QAA8D,cAA9D;AAIA,OAAM,MAAO,uBAAP,CAA8B;AAClC,EAAA,WAAA,CACS,IADT,EAES,GAFT,EAW0B;AAVjB,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,GAAA,GAAA,GAAA;AAUL;;AAEG,EAAA,eAAe,CAAC,IAAD,EAA4B;AAChD,QAAI,UAAU,CAAC,IAAD,CAAd,EAAsB;AACpB,aAAO,WAAW,CAAC,IAAI,CAAC,IAAN,CAAX,KAA2B,KAAK,IAAvC;AACD;;AACD,WAAO,KAAP;AACD;;AApBiC","sourcesContent":["import {GenericMarkDef, getMarkType} from '../mark';\nimport {NonFacetUnitNormalizer, Normalize, NormalizerParams} from '../normalize/base';\nimport {GenericSpec} from '../spec';\nimport {GenericLayerSpec, NormalizedLayerSpec} from '../spec/layer';\nimport {GenericUnitSpec, isUnitSpec, NormalizedUnitSpec} from '../spec/unit';\n\nexport type CompositeMarkUnitSpec<M extends string> = GenericUnitSpec<any, M | GenericMarkDef<M>>;\n\nexport class CompositeMarkNormalizer<M extends string> implements NonFacetUnitNormalizer<CompositeMarkUnitSpec<M>> {\n  constructor(\n    public name: string,\n    public run: (\n      spec: CompositeMarkUnitSpec<M>,\n      params: NormalizerParams,\n      normalize: Normalize<\n        // Input of the normalize method\n        GenericUnitSpec<any, any> | GenericLayerSpec<any>,\n        // Output of the normalize method\n        NormalizedLayerSpec | NormalizedUnitSpec\n      >\n    ) => NormalizedLayerSpec\n  ) {}\n\n  public hasMatchingType(spec: GenericSpec<any, any>): spec is CompositeMarkUnitSpec<M> {\n    if (isUnitSpec(spec)) {\n      return getMarkType(spec.mark) === this.name;\n    }\n    return false;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}