{"ast":null,"code":"import { TUPLE, unitName } from '..';\nexport const TOGGLE = '_toggle';\nconst toggle = {\n  has: selCmpt => {\n    return selCmpt.type === 'multi' && !!selCmpt.toggle;\n  },\n  signals: (model, selCmpt, signals) => {\n    return signals.concat({\n      name: selCmpt.name + TOGGLE,\n      value: false,\n      on: [{\n        events: selCmpt.events,\n        update: selCmpt.toggle\n      }]\n    });\n  },\n  modifyExpr: (model, selCmpt) => {\n    const tpl = selCmpt.name + TUPLE;\n    const signal = selCmpt.name + TOGGLE;\n    return `${signal} ? null : ${tpl}, ` + (selCmpt.resolve === 'global' ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${unitName(model)}}, `) + `${signal} ? ${tpl} : null`;\n  }\n};\nexport default toggle;","map":{"version":3,"sources":["../../../../../src/compile/selection/transforms/toggle.ts"],"names":[],"mappings":"AAAA,SAAQ,KAAR,EAAe,QAAf,QAA8B,IAA9B;AAGA,OAAO,MAAM,MAAM,GAAG,SAAf;AAEP,MAAM,MAAM,GAAsB;AAChC,EAAA,GAAG,EAAE,OAAO,IAAG;AACb,WAAO,OAAO,CAAC,IAAR,KAAiB,OAAjB,IAA4B,CAAC,CAAC,OAAO,CAAC,MAA7C;AACD,GAH+B;AAKhC,EAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,OAAR,EAAiB,OAAjB,KAA4B;AACnC,WAAO,OAAO,CAAC,MAAR,CAAe;AACpB,MAAA,IAAI,EAAE,OAAO,CAAC,IAAR,GAAe,MADD;AAEpB,MAAA,KAAK,EAAE,KAFa;AAGpB,MAAA,EAAE,EAAE,CAAC;AAAC,QAAA,MAAM,EAAE,OAAO,CAAC,MAAjB;AAAyB,QAAA,MAAM,EAAE,OAAO,CAAC;AAAzC,OAAD;AAHgB,KAAf,CAAP;AAKD,GAX+B;AAahC,EAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,OAAR,KAAmB;AAC7B,UAAM,GAAG,GAAG,OAAO,CAAC,IAAR,GAAe,KAA3B;AACA,UAAM,MAAM,GAAG,OAAO,CAAC,IAAR,GAAe,MAA9B;AAEA,WACE,GAAG,MAAM,aAAa,GAAG,IAAzB,IACC,OAAO,CAAC,OAAR,KAAoB,QAApB,GAA+B,GAAG,MAAM,kBAAxC,GAA6D,GAAG,MAAM,oBAAoB,QAAQ,CAAC,KAAD,CAAO,KAD1G,IAEA,GAAG,MAAM,MAAM,GAAG,SAHpB;AAKD;AAtB+B,CAAlC;AAyBA,eAAe,MAAf","sourcesContent":["import {TUPLE, unitName} from '..';\nimport {TransformCompiler} from './transforms';\n\nexport const TOGGLE = '_toggle';\n\nconst toggle: TransformCompiler = {\n  has: selCmpt => {\n    return selCmpt.type === 'multi' && !!selCmpt.toggle;\n  },\n\n  signals: (model, selCmpt, signals) => {\n    return signals.concat({\n      name: selCmpt.name + TOGGLE,\n      value: false,\n      on: [{events: selCmpt.events, update: selCmpt.toggle}]\n    });\n  },\n\n  modifyExpr: (model, selCmpt) => {\n    const tpl = selCmpt.name + TUPLE;\n    const signal = selCmpt.name + TOGGLE;\n\n    return (\n      `${signal} ? null : ${tpl}, ` +\n      (selCmpt.resolve === 'global' ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${unitName(model)}}, `) +\n      `${signal} ? ${tpl} : null`\n    );\n  }\n};\n\nexport default toggle;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}