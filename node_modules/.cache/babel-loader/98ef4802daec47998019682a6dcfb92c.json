{"ast":null,"code":"import { PermissionStatus } from './Permissions.types';\n/*\n * TODO: Bacon: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Permissions\n * Add messages to manifest like we do with iOS info.plist\n */\n// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Using_the_new_API_in_older_browsers\n// Older browsers might not implement mediaDevices at all, so we set an empty object first\n\nfunction _getUserMedia(constraints) {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  } // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n  // First get ahold of the legacy getUserMedia, if present\n\n\n  const getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || function () {\n    const error = new Error('Permission unimplemented');\n    error.code = 0;\n    error.name = 'NotAllowedError';\n    throw error;\n  };\n\n  return new Promise((resolve, reject) => {\n    getUserMedia.call(navigator, constraints, resolve, reject);\n  });\n}\n\nasync function askForMediaPermissionAsync(options) {\n  try {\n    await _getUserMedia(options);\n    return {\n      status: PermissionStatus.GRANTED,\n      expires: 'never',\n      canAskAgain: true,\n      granted: true\n    };\n  } catch ({\n    message\n  }) {\n    // name: NotAllowedError\n    // code: 0\n    if (message === 'Permission dismissed') {\n      // message: Permission dismissed\n      return {\n        status: PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false\n      };\n    } else {\n      // TODO: Bacon: [OSX] The system could deny access to chrome.\n      // TODO: Bacon: add: { status: 'unimplemented' }\n      // message: Permission denied\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false\n      };\n    }\n  }\n}\n\nasync function askForMicrophonePermissionAsync() {\n  return await askForMediaPermissionAsync({\n    audio: true\n  });\n}\n\nasync function askForCameraPermissionAsync() {\n  return await askForMediaPermissionAsync({\n    video: true\n  });\n}\n\nasync function askForLocationPermissionAsync() {\n  return new Promise(resolve => {\n    navigator.geolocation.getCurrentPosition(() => resolve({\n      status: PermissionStatus.GRANTED,\n      expires: 'never',\n      canAskAgain: true,\n      granted: true\n    }), ({\n      code\n    }) => {\n      // https://developer.mozilla.org/en-US/docs/Web/API/PositionError/code\n      if (code === 1) {\n        resolve({\n          status: PermissionStatus.DENIED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false\n        });\n      } else {\n        resolve({\n          status: PermissionStatus.UNDETERMINED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: false\n        });\n      }\n    });\n  });\n}\n\nasync function getPermissionWithQueryAsync(name) {\n  if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n  const {\n    state\n  } = await navigator.permissions.query({\n    name\n  });\n\n  if (state === 'prompt') {\n    return PermissionStatus.UNDETERMINED;\n  } else if (state === 'granted') {\n    return PermissionStatus.GRANTED;\n  } else if (state === 'denied') {\n    return PermissionStatus.DENIED;\n  }\n\n  return null;\n}\n\nasync function enumerateDevices() {\n  if (navigator && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    return await navigator.mediaDevices.enumerateDevices();\n  } // @ts-ignore: This is deprecated but we should still attempt to use it.\n\n\n  if (window.MediaStreamTrack && typeof window.MediaStreamTrack.getSources === 'function') {\n    // @ts-ignore\n    return await MediaStreamTrack.getSources();\n  }\n\n  return null;\n}\n\nasync function getMediaMaybeGrantedAsync(targetKind) {\n  const devices = await enumerateDevices();\n\n  if (!devices) {\n    return false;\n  }\n\n  const result = await devices.filter(({\n    kind\n  }) => kind === targetKind).some(({\n    label\n  }) => label !== ''); // Granted or denied or undetermined or no devices\n\n  return result;\n}\n\nasync function getPermissionAsync(permission, shouldAsk) {\n  switch (permission) {\n    case 'userFacingNotifications':\n    case 'notifications':\n      {\n        if (!shouldAsk) {\n          const status = await getPermissionWithQueryAsync('notifications');\n\n          if (status) {\n            return {\n              status,\n              expires: 'never',\n              granted: status === PermissionStatus.GRANTED,\n              canAskAgain: true\n            };\n          }\n        }\n\n        const {\n          Notification = {}\n        } = window;\n\n        if (Notification.requestPermission) {\n          let status = Notification.permission;\n\n          if (shouldAsk) {\n            status = await Notification.requestPermission();\n          }\n\n          if (!status || status === 'default') {\n            return {\n              status: PermissionStatus.UNDETERMINED,\n              expires: 'never',\n              canAskAgain: true,\n              granted: false\n            };\n          }\n\n          return {\n            status,\n            expires: 'never',\n            canAskAgain: true,\n            granted: status === PermissionStatus.GRANTED\n          };\n        }\n      }\n      break;\n\n    case 'location':\n      {\n        const maybeStatus = await getPermissionWithQueryAsync('geolocation');\n\n        if (maybeStatus) {\n          if (maybeStatus === PermissionStatus.UNDETERMINED && shouldAsk) {\n            return await askForLocationPermissionAsync();\n          }\n\n          return {\n            status: maybeStatus,\n            expires: 'never',\n            canAskAgain: true,\n            granted: maybeStatus === PermissionStatus.GRANTED\n          };\n        } else if (shouldAsk) {\n          // TODO: Bacon: should this function as ask async when not in chrome?\n          return await askForLocationPermissionAsync();\n        }\n      }\n      break;\n\n    case 'audioRecording':\n      {\n        const maybeStatus = await getPermissionWithQueryAsync('microphone');\n\n        if (maybeStatus) {\n          if (maybeStatus === PermissionStatus.UNDETERMINED && shouldAsk) {\n            return await askForMicrophonePermissionAsync();\n          }\n\n          return {\n            status: maybeStatus,\n            expires: 'never',\n            canAskAgain: true,\n            granted: maybeStatus === PermissionStatus.GRANTED\n          };\n        } else if (shouldAsk) {\n          return await askForMicrophonePermissionAsync();\n        } else {\n          const maybeGranted = await getMediaMaybeGrantedAsync('audioinput');\n\n          if (maybeGranted) {\n            return {\n              status: PermissionStatus.GRANTED,\n              expires: 'never',\n              canAskAgain: true,\n              granted: true\n            };\n          } // TODO: Bacon: Get denied or undetermined...\n\n        }\n      }\n      break;\n\n    case 'camera':\n      {\n        const maybeStatus = await getPermissionWithQueryAsync('camera');\n\n        if (maybeStatus) {\n          if (maybeStatus === PermissionStatus.UNDETERMINED && shouldAsk) {\n            return await askForCameraPermissionAsync();\n          }\n\n          return {\n            status: maybeStatus,\n            expires: 'never',\n            canAskAgain: true,\n            granted: maybeStatus === PermissionStatus.GRANTED\n          };\n        } else if (shouldAsk) {\n          return await askForCameraPermissionAsync();\n        } else {\n          const maybeGranted = await getMediaMaybeGrantedAsync('videoinput');\n\n          if (maybeGranted) {\n            return {\n              status: PermissionStatus.GRANTED,\n              expires: 'never',\n              canAskAgain: true,\n              granted: true\n            };\n          } // TODO: Bacon: Get denied or undetermined...\n\n        }\n      }\n      break;\n\n    default:\n      break;\n  }\n\n  return {\n    status: PermissionStatus.UNDETERMINED,\n    expires: 'never',\n    canAskAgain: true,\n    granted: false\n  };\n}\n\nexport default {\n  get name() {\n    return 'ExpoPermissions';\n  },\n\n  async getAsync(permissionTypes) {\n    const results = {};\n\n    for (const permissionType of new Set(permissionTypes)) {\n      results[permissionType] = await getPermissionAsync(permissionType,\n      /* shouldAsk */\n      false);\n    }\n\n    return results;\n  },\n\n  async askAsync(permissionTypes) {\n    const results = {};\n\n    for (const permissionType of new Set(permissionTypes)) {\n      results[permissionType] = await getPermissionAsync(permissionType,\n      /* shouldAsk */\n      true);\n    }\n\n    return results;\n  }\n\n};","map":{"version":3,"sources":["../src/ExpoPermissions.web.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PermissionMap,\n  PermissionType,\n  PermissionStatus,\n  PermissionInfo,\n} from './Permissions.types';\n\n/*\n * TODO: Bacon: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Permissions\n * Add messages to manifest like we do with iOS info.plist\n */\n\n// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Using_the_new_API_in_older_browsers\n// Older browsers might not implement mediaDevices at all, so we set an empty object first\nfunction _getUserMedia(constraints: MediaStreamConstraints): Promise<MediaStream> {\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return navigator.mediaDevices.getUserMedia(constraints);\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n\n  // First get ahold of the legacy getUserMedia, if present\n  const getUserMedia =\n    navigator.getUserMedia ||\n    (navigator as any).webkitGetUserMedia ||\n    (navigator as any).mozGetUserMedia ||\n    function() {\n      const error: any = new Error('Permission unimplemented');\n      error.code = 0;\n      error.name = 'NotAllowedError';\n      throw error;\n    };\n\n  return new Promise((resolve, reject) => {\n    getUserMedia.call(navigator, constraints, resolve, reject);\n  });\n}\n\nasync function askForMediaPermissionAsync(\n  options: MediaStreamConstraints\n): Promise<PermissionInfo> {\n  try {\n    await _getUserMedia(options);\n    return {\n      status: PermissionStatus.GRANTED,\n      expires: 'never',\n      canAskAgain: true,\n      granted: true,\n    };\n  } catch ({ message }) {\n    // name: NotAllowedError\n    // code: 0\n    if (message === 'Permission dismissed') {\n      // message: Permission dismissed\n      return {\n        status: PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false,\n      };\n    } else {\n      // TODO: Bacon: [OSX] The system could deny access to chrome.\n      // TODO: Bacon: add: { status: 'unimplemented' }\n      // message: Permission denied\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false,\n      };\n    }\n  }\n}\n\nasync function askForMicrophonePermissionAsync(): Promise<PermissionInfo> {\n  return await askForMediaPermissionAsync({ audio: true });\n}\n\nasync function askForCameraPermissionAsync(): Promise<PermissionInfo> {\n  return await askForMediaPermissionAsync({ video: true });\n}\n\nasync function askForLocationPermissionAsync(): Promise<PermissionInfo> {\n  return new Promise(resolve => {\n    navigator.geolocation.getCurrentPosition(\n      () =>\n        resolve({\n          status: PermissionStatus.GRANTED,\n          expires: 'never',\n          canAskAgain: true,\n          granted: true,\n        }),\n      ({ code }: PositionError) => {\n        // https://developer.mozilla.org/en-US/docs/Web/API/PositionError/code\n        if (code === 1) {\n          resolve({\n            status: PermissionStatus.DENIED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: false,\n          });\n        } else {\n          resolve({\n            status: PermissionStatus.UNDETERMINED,\n            expires: 'never',\n            canAskAgain: true,\n            granted: false,\n          });\n        }\n      }\n    );\n  });\n}\n\nasync function getPermissionWithQueryAsync(name: PermissionName): Promise<PermissionStatus | null> {\n  if (!navigator || !navigator.permissions || !navigator.permissions.query) return null;\n\n  const { state } = await navigator.permissions.query({ name });\n  if (state === 'prompt') {\n    return PermissionStatus.UNDETERMINED;\n  } else if (state === 'granted') {\n    return PermissionStatus.GRANTED;\n  } else if (state === 'denied') {\n    return PermissionStatus.DENIED;\n  }\n  return null;\n}\n\nasync function enumerateDevices(): Promise<MediaDeviceInfo[] | null> {\n  if (navigator && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n    return await navigator.mediaDevices.enumerateDevices();\n  }\n\n  // @ts-ignore: This is deprecated but we should still attempt to use it.\n  if (window.MediaStreamTrack && typeof window.MediaStreamTrack.getSources === 'function') {\n    // @ts-ignore\n    return await MediaStreamTrack.getSources();\n  }\n  return null;\n}\n\nasync function getMediaMaybeGrantedAsync(targetKind: MediaDeviceKind): Promise<boolean> {\n  const devices = await enumerateDevices();\n  if (!devices) {\n    return false;\n  }\n  const result = await devices\n    .filter(({ kind }) => kind === targetKind)\n    .some(({ label }) => label !== '');\n  // Granted or denied or undetermined or no devices\n  return result;\n}\n\nasync function getPermissionAsync(\n  permission: PermissionType,\n  shouldAsk: boolean\n): Promise<PermissionInfo> {\n  switch (permission) {\n    case 'userFacingNotifications':\n    case 'notifications':\n      {\n        if (!shouldAsk) {\n          const status = await getPermissionWithQueryAsync('notifications');\n          if (status) {\n            return {\n              status,\n              expires: 'never',\n              granted: status === PermissionStatus.GRANTED,\n              canAskAgain: true,\n            };\n          }\n        }\n\n        const { Notification = {} } = window as any;\n        if (Notification.requestPermission) {\n          let status = Notification.permission;\n          if (shouldAsk) {\n            status = await Notification.requestPermission();\n          }\n          if (!status || status === 'default') {\n            return {\n              status: PermissionStatus.UNDETERMINED,\n              expires: 'never',\n              canAskAgain: true,\n              granted: false,\n            };\n          }\n          return {\n            status,\n            expires: 'never',\n            canAskAgain: true,\n            granted: status === PermissionStatus.GRANTED,\n          };\n        }\n      }\n      break;\n    case 'location':\n      {\n        const maybeStatus = await getPermissionWithQueryAsync('geolocation');\n        if (maybeStatus) {\n          if (maybeStatus === PermissionStatus.UNDETERMINED && shouldAsk) {\n            return await askForLocationPermissionAsync();\n          }\n          return {\n            status: maybeStatus,\n            expires: 'never',\n            canAskAgain: true,\n            granted: maybeStatus === PermissionStatus.GRANTED,\n          };\n        } else if (shouldAsk) {\n          // TODO: Bacon: should this function as ask async when not in chrome?\n          return await askForLocationPermissionAsync();\n        }\n      }\n      break;\n    case 'audioRecording':\n      {\n        const maybeStatus = await getPermissionWithQueryAsync('microphone');\n        if (maybeStatus) {\n          if (maybeStatus === PermissionStatus.UNDETERMINED && shouldAsk) {\n            return await askForMicrophonePermissionAsync();\n          }\n          return {\n            status: maybeStatus,\n            expires: 'never',\n            canAskAgain: true,\n            granted: maybeStatus === PermissionStatus.GRANTED,\n          };\n        } else if (shouldAsk) {\n          return await askForMicrophonePermissionAsync();\n        } else {\n          const maybeGranted = await getMediaMaybeGrantedAsync('audioinput');\n          if (maybeGranted) {\n            return {\n              status: PermissionStatus.GRANTED,\n              expires: 'never',\n              canAskAgain: true,\n              granted: true,\n            };\n          }\n          // TODO: Bacon: Get denied or undetermined...\n        }\n      }\n      break;\n    case 'camera':\n      {\n        const maybeStatus = await getPermissionWithQueryAsync('camera');\n        if (maybeStatus) {\n          if (maybeStatus === PermissionStatus.UNDETERMINED && shouldAsk) {\n            return await askForCameraPermissionAsync();\n          }\n          return {\n            status: maybeStatus,\n            expires: 'never',\n            canAskAgain: true,\n            granted: maybeStatus === PermissionStatus.GRANTED,\n          };\n        } else if (shouldAsk) {\n          return await askForCameraPermissionAsync();\n        } else {\n          const maybeGranted = await getMediaMaybeGrantedAsync('videoinput');\n          if (maybeGranted) {\n            return {\n              status: PermissionStatus.GRANTED,\n              expires: 'never',\n              canAskAgain: true,\n              granted: true,\n            };\n          }\n          // TODO: Bacon: Get denied or undetermined...\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  return {\n    status: PermissionStatus.UNDETERMINED,\n    expires: 'never',\n    canAskAgain: true,\n    granted: false,\n  };\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoPermissions';\n  },\n\n  async getAsync(permissionTypes: PermissionType[]): Promise<PermissionMap> {\n    const results = {};\n    for (const permissionType of new Set(permissionTypes)) {\n      results[permissionType] = await getPermissionAsync(permissionType, /* shouldAsk */ false);\n    }\n    return results;\n  },\n\n  async askAsync(permissionTypes: PermissionType[]): Promise<PermissionMap> {\n    const results = {};\n    for (const permissionType of new Set(permissionTypes)) {\n      results[permissionType] = await getPermissionAsync(permissionType, /* shouldAsk */ true);\n    }\n    return results;\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}