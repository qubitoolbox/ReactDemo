{"ast":null,"code":"import { error } from 'vega-util';\n/**\n * Assigns a rank to an operator. Ranks are assigned in increasing order\n * by incrementing an internal rank counter.\n * @param {Operator} op - The operator to assign a rank.\n */\n\nexport function rank(op) {\n  op.rank = ++this._rank;\n}\n/**\n * Re-ranks an operator and all downstream target dependencies. This\n * is necessary when upstream dependencies of higher rank are added to\n * a target operator.\n * @param {Operator} op - The operator to re-rank.\n */\n\nexport function rerank(op) {\n  var queue = [op],\n      cur,\n      list,\n      i;\n\n  while (queue.length) {\n    this.rank(cur = queue.pop());\n\n    if (list = cur._targets) {\n      for (i = list.length; --i >= 0;) {\n        queue.push(cur = list[i]);\n        if (cur === op) error('Cycle detected in dataflow graph.');\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-dataflow/src/dataflow/rank.js"],"names":["error","rank","op","_rank","rerank","queue","cur","list","i","length","pop","_targets","push"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,WAApB;AAEA;;;;;;AAKA,OAAO,SAASC,IAAT,CAAcC,EAAd,EAAkB;AACvBA,EAAAA,EAAE,CAACD,IAAH,GAAU,EAAE,KAAKE,KAAjB;AACD;AAED;;;;;;;AAMA,OAAO,SAASC,MAAT,CAAgBF,EAAhB,EAAoB;AACzB,MAAIG,KAAK,GAAG,CAACH,EAAD,CAAZ;AAAA,MACII,GADJ;AAAA,MACSC,IADT;AAAA,MACeC,CADf;;AAGA,SAAOH,KAAK,CAACI,MAAb,EAAqB;AACnB,SAAKR,IAAL,CAAUK,GAAG,GAAGD,KAAK,CAACK,GAAN,EAAhB;;AACA,QAAIH,IAAI,GAAGD,GAAG,CAACK,QAAf,EAAyB;AACvB,WAAKH,CAAC,GAACD,IAAI,CAACE,MAAZ,EAAoB,EAAED,CAAF,IAAO,CAA3B,GAA+B;AAC7BH,QAAAA,KAAK,CAACO,IAAN,CAAWN,GAAG,GAAGC,IAAI,CAACC,CAAD,CAArB;AACA,YAAIF,GAAG,KAAKJ,EAAZ,EAAgBF,KAAK,CAAC,mCAAD,CAAL;AACjB;AACF;AACF;AACF","sourcesContent":["import {error} from 'vega-util';\n\n/**\n * Assigns a rank to an operator. Ranks are assigned in increasing order\n * by incrementing an internal rank counter.\n * @param {Operator} op - The operator to assign a rank.\n */\nexport function rank(op) {\n  op.rank = ++this._rank;\n}\n\n/**\n * Re-ranks an operator and all downstream target dependencies. This\n * is necessary when upstream dependencies of higher rank are added to\n * a target operator.\n * @param {Operator} op - The operator to re-rank.\n */\nexport function rerank(op) {\n  var queue = [op],\n      cur, list, i;\n\n  while (queue.length) {\n    this.rank(cur = queue.pop());\n    if (list = cur._targets) {\n      for (i=list.length; --i >= 0;) {\n        queue.push(cur = list[i]);\n        if (cur === op) error('Cycle detected in dataflow graph.');\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}