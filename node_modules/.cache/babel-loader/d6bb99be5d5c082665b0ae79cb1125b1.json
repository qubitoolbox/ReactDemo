{"ast":null,"code":"import { isArray } from 'vega-util';\nvar CACHE = '_:mod:_';\n/**\n * Hash that tracks modifications to assigned values.\n * Callers *must* use the set method to update values.\n */\n\nexport default function Parameters() {\n  Object.defineProperty(this, CACHE, {\n    writable: true,\n    value: {}\n  });\n}\nvar prototype = Parameters.prototype;\n/**\n * Set a parameter value. If the parameter value changes, the parameter\n * will be recorded as modified.\n * @param {string} name - The parameter name.\n * @param {number} index - The index into an array-value parameter. Ignored if\n *   the argument is undefined, null or less than zero.\n * @param {*} value - The parameter value to set.\n * @param {boolean} [force=false] - If true, records the parameter as modified\n *   even if the value is unchanged.\n * @return {Parameters} - This parameter object.\n */\n\nprototype.set = function (name, index, value, force) {\n  var o = this,\n      v = o[name],\n      mod = o[CACHE];\n\n  if (index != null && index >= 0) {\n    if (v[index] !== value || force) {\n      v[index] = value;\n      mod[index + ':' + name] = -1;\n      mod[name] = -1;\n    }\n  } else if (v !== value || force) {\n    o[name] = value;\n    mod[name] = isArray(value) ? 1 + value.length : -1;\n  }\n\n  return o;\n};\n/**\n * Tests if one or more parameters has been modified. If invoked with no\n * arguments, returns true if any parameter value has changed. If the first\n * argument is array, returns trues if any parameter name in the array has\n * changed. Otherwise, tests if the given name and optional array index has\n * changed.\n * @param {string} name - The parameter name to test.\n * @param {number} [index=undefined] - The parameter array index to test.\n * @return {boolean} - Returns true if a queried parameter was modified.\n */\n\n\nprototype.modified = function (name, index) {\n  var mod = this[CACHE],\n      k;\n\n  if (!arguments.length) {\n    for (k in mod) {\n      if (mod[k]) return true;\n    }\n\n    return false;\n  } else if (isArray(name)) {\n    for (k = 0; k < name.length; ++k) {\n      if (mod[name[k]]) return true;\n    }\n\n    return false;\n  }\n\n  return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ':' + name] : !!mod[name];\n};\n/**\n * Clears the modification records. After calling this method,\n * all parameters are considered unmodified.\n */\n\n\nprototype.clear = function () {\n  this[CACHE] = {};\n  return this;\n};","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-dataflow/src/Parameters.js"],"names":["isArray","CACHE","Parameters","Object","defineProperty","writable","value","prototype","set","name","index","force","o","v","mod","length","modified","k","arguments","clear"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,WAAtB;AAEA,IAAIC,KAAK,GAAG,SAAZ;AAEA;;;;;AAIA,eAAe,SAASC,UAAT,GAAsB;AACnCC,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BH,KAA5B,EAAmC;AAACI,IAAAA,QAAQ,EAAE,IAAX;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAAnC;AACD;AAED,IAAIC,SAAS,GAAGL,UAAU,CAACK,SAA3B;AAEA;;;;;;;;;;;;AAWAA,SAAS,CAACC,GAAV,GAAgB,UAASC,IAAT,EAAeC,KAAf,EAAsBJ,KAAtB,EAA6BK,KAA7B,EAAoC;AAClD,MAAIC,CAAC,GAAG,IAAR;AAAA,MACIC,CAAC,GAAGD,CAAC,CAACH,IAAD,CADT;AAAA,MAEIK,GAAG,GAAGF,CAAC,CAACX,KAAD,CAFX;;AAIA,MAAIS,KAAK,IAAI,IAAT,IAAiBA,KAAK,IAAI,CAA9B,EAAiC;AAC/B,QAAIG,CAAC,CAACH,KAAD,CAAD,KAAaJ,KAAb,IAAsBK,KAA1B,EAAiC;AAC/BE,MAAAA,CAAC,CAACH,KAAD,CAAD,GAAWJ,KAAX;AACAQ,MAAAA,GAAG,CAACJ,KAAK,GAAG,GAAR,GAAcD,IAAf,CAAH,GAA0B,CAAC,CAA3B;AACAK,MAAAA,GAAG,CAACL,IAAD,CAAH,GAAY,CAAC,CAAb;AACD;AACF,GAND,MAMO,IAAII,CAAC,KAAKP,KAAN,IAAeK,KAAnB,EAA0B;AAC/BC,IAAAA,CAAC,CAACH,IAAD,CAAD,GAAUH,KAAV;AACAQ,IAAAA,GAAG,CAACL,IAAD,CAAH,GAAYT,OAAO,CAACM,KAAD,CAAP,GAAiB,IAAIA,KAAK,CAACS,MAA3B,GAAoC,CAAC,CAAjD;AACD;;AAED,SAAOH,CAAP;AACD,CAjBD;AAmBA;;;;;;;;;;;;AAUAL,SAAS,CAACS,QAAV,GAAqB,UAASP,IAAT,EAAeC,KAAf,EAAsB;AACzC,MAAII,GAAG,GAAG,KAAKb,KAAL,CAAV;AAAA,MAAuBgB,CAAvB;;AACA,MAAI,CAACC,SAAS,CAACH,MAAf,EAAuB;AACrB,SAAKE,CAAL,IAAUH,GAAV,EAAe;AAAE,UAAIA,GAAG,CAACG,CAAD,CAAP,EAAY,OAAO,IAAP;AAAc;;AAC3C,WAAO,KAAP;AACD,GAHD,MAGO,IAAIjB,OAAO,CAACS,IAAD,CAAX,EAAmB;AACxB,SAAKQ,CAAC,GAAC,CAAP,EAAUA,CAAC,GAACR,IAAI,CAACM,MAAjB,EAAyB,EAAEE,CAA3B,EAA8B;AAC5B,UAAIH,GAAG,CAACL,IAAI,CAACQ,CAAD,CAAL,CAAP,EAAkB,OAAO,IAAP;AACnB;;AACD,WAAO,KAAP;AACD;;AACD,SAAQP,KAAK,IAAI,IAAT,IAAiBA,KAAK,IAAI,CAA3B,GACFA,KAAK,GAAG,CAAR,GAAYI,GAAG,CAACL,IAAD,CAAf,IAAyB,CAAC,CAACK,GAAG,CAACJ,KAAK,GAAG,GAAR,GAAcD,IAAf,CAD5B,GAEH,CAAC,CAACK,GAAG,CAACL,IAAD,CAFT;AAGD,CAdD;AAgBA;;;;;;AAIAF,SAAS,CAACY,KAAV,GAAkB,YAAW;AAC3B,OAAKlB,KAAL,IAAc,EAAd;AACA,SAAO,IAAP;AACD,CAHD","sourcesContent":["import {isArray} from 'vega-util';\n\nvar CACHE = '_:mod:_';\n\n/**\n * Hash that tracks modifications to assigned values.\n * Callers *must* use the set method to update values.\n */\nexport default function Parameters() {\n  Object.defineProperty(this, CACHE, {writable: true, value: {}});\n}\n\nvar prototype = Parameters.prototype;\n\n/**\n * Set a parameter value. If the parameter value changes, the parameter\n * will be recorded as modified.\n * @param {string} name - The parameter name.\n * @param {number} index - The index into an array-value parameter. Ignored if\n *   the argument is undefined, null or less than zero.\n * @param {*} value - The parameter value to set.\n * @param {boolean} [force=false] - If true, records the parameter as modified\n *   even if the value is unchanged.\n * @return {Parameters} - This parameter object.\n */\nprototype.set = function(name, index, value, force) {\n  var o = this,\n      v = o[name],\n      mod = o[CACHE];\n\n  if (index != null && index >= 0) {\n    if (v[index] !== value || force) {\n      v[index] = value;\n      mod[index + ':' + name] = -1;\n      mod[name] = -1;\n    }\n  } else if (v !== value || force) {\n    o[name] = value;\n    mod[name] = isArray(value) ? 1 + value.length : -1;\n  }\n\n  return o;\n};\n\n/**\n * Tests if one or more parameters has been modified. If invoked with no\n * arguments, returns true if any parameter value has changed. If the first\n * argument is array, returns trues if any parameter name in the array has\n * changed. Otherwise, tests if the given name and optional array index has\n * changed.\n * @param {string} name - The parameter name to test.\n * @param {number} [index=undefined] - The parameter array index to test.\n * @return {boolean} - Returns true if a queried parameter was modified.\n */\nprototype.modified = function(name, index) {\n  var mod = this[CACHE], k;\n  if (!arguments.length) {\n    for (k in mod) { if (mod[k]) return true; }\n    return false;\n  } else if (isArray(name)) {\n    for (k=0; k<name.length; ++k) {\n      if (mod[name[k]]) return true;\n    }\n    return false;\n  }\n  return (index != null && index >= 0)\n    ? (index + 1 < mod[name] || !!mod[index + ':' + name])\n    : !!mod[name];\n};\n\n/**\n * Clears the modification records. After calling this method,\n * all parameters are considered unmodified.\n */\nprototype.clear = function() {\n  this[CACHE] = {};\n  return this;\n};\n"]},"metadata":{},"sourceType":"module"}