{"ast":null,"code":"import { YEAR, MONTH, WEEK, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS } from './units';\nimport { span } from 'vega-util';\nimport { bisector, tickStep } from 'd3-array';\nconst durationSecond = 1000,\n      durationMinute = durationSecond * 60,\n      durationHour = durationMinute * 60,\n      durationDay = durationHour * 24,\n      durationWeek = durationDay * 7,\n      durationMonth = durationDay * 30,\n      durationYear = durationDay * 365;\nconst Milli = [YEAR, MONTH, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS],\n      Seconds = Milli.slice(0, -1),\n      Minutes = Seconds.slice(0, -1),\n      Hours = Minutes.slice(0, -1),\n      Day = Hours.slice(0, -1),\n      Week = [YEAR, WEEK],\n      Month = [YEAR, MONTH],\n      Year = [YEAR];\nconst intervals = [[Seconds, 1, durationSecond], [Seconds, 5, 5 * durationSecond], [Seconds, 15, 15 * durationSecond], [Seconds, 30, 30 * durationSecond], [Minutes, 1, durationMinute], [Minutes, 5, 5 * durationMinute], [Minutes, 15, 15 * durationMinute], [Minutes, 30, 30 * durationMinute], [Hours, 1, durationHour], [Hours, 3, 3 * durationHour], [Hours, 6, 6 * durationHour], [Hours, 12, 12 * durationHour], [Day, 1, durationDay], [Week, 1, durationWeek], [Month, 1, durationMonth], [Month, 3, 3 * durationMonth], [Year, 1, durationYear]];\nexport default function (opt) {\n  const ext = opt.extent,\n        max = opt.maxbins || 40,\n        target = Math.abs(span(ext)) / max;\n  let i = bisector(i => i[2]).right(intervals, target),\n      units,\n      step;\n\n  if (i === intervals.length) {\n    units = Year, step = tickStep(ext[0] / durationYear, ext[1] / durationYear, max);\n  } else if (i) {\n    i = intervals[target / intervals[i - 1][2] < intervals[i][2] / target ? i - 1 : i];\n    units = i[0];\n    step = i[1];\n  } else {\n    units = Milli;\n    step = Math.max(tickStep(ext[0], ext[1], max), 1);\n  }\n\n  return {\n    units,\n    step\n  };\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-time/src/bin.js"],"names":["YEAR","MONTH","WEEK","DATE","HOURS","MINUTES","SECONDS","MILLISECONDS","span","bisector","tickStep","durationSecond","durationMinute","durationHour","durationDay","durationWeek","durationMonth","durationYear","Milli","Seconds","slice","Minutes","Hours","Day","Week","Month","Year","intervals","opt","ext","extent","max","maxbins","target","Math","abs","i","right","units","step","length"],"mappings":"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","sourcesContent":["import {YEAR, MONTH, WEEK, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS} from './units';\nimport {span} from 'vega-util';\nimport {bisector, tickStep} from 'd3-array';\n\nconst durationSecond = 1000,\n      durationMinute = durationSecond * 60,\n      durationHour = durationMinute * 60,\n      durationDay = durationHour * 24,\n      durationWeek = durationDay * 7,\n      durationMonth = durationDay * 30,\n      durationYear = durationDay * 365;\n\nconst Milli   = [YEAR, MONTH, DATE, HOURS, MINUTES, SECONDS, MILLISECONDS],\n      Seconds = Milli.slice(0, -1),\n      Minutes = Seconds.slice(0, -1),\n      Hours   = Minutes.slice(0, -1),\n      Day     = Hours.slice(0, -1),\n      Week    = [YEAR, WEEK],\n      Month   = [YEAR, MONTH],\n      Year    = [YEAR];\n\nconst intervals = [\n  [Seconds,  1,      durationSecond],\n  [Seconds,  5,  5 * durationSecond],\n  [Seconds, 15, 15 * durationSecond],\n  [Seconds, 30, 30 * durationSecond],\n  [Minutes,  1,      durationMinute],\n  [Minutes,  5,  5 * durationMinute],\n  [Minutes, 15, 15 * durationMinute],\n  [Minutes, 30, 30 * durationMinute],\n  [  Hours,  1,      durationHour  ],\n  [  Hours,  3,  3 * durationHour  ],\n  [  Hours,  6,  6 * durationHour  ],\n  [  Hours, 12, 12 * durationHour  ],\n  [    Day,  1,      durationDay   ],\n  [   Week,  1,      durationWeek  ],\n  [  Month,  1,      durationMonth ],\n  [  Month,  3,  3 * durationMonth ],\n  [   Year,  1,      durationYear  ]\n];\n\nexport default function(opt) {\n  const ext = opt.extent,\n        max = opt.maxbins || 40,\n        target = Math.abs(span(ext)) / max;\n\n  let i = bisector(i => i[2]).right(intervals, target),\n      units, step;\n\n  if (i === intervals.length) {\n    units = Year,\n    step = tickStep(ext[0] / durationYear, ext[1] / durationYear, max);\n  } else if (i) {\n    i = intervals[target / intervals[i - 1][2] < intervals[i][2] / target ? i - 1 : i];\n    units = i[0];\n    step = i[1];\n  } else {\n    units = Milli;\n    step = Math.max(tickStep(ext[0], ext[1], max), 1);\n  }\n\n  return {units, step};\n}\n"]},"metadata":{},"sourceType":"module"}