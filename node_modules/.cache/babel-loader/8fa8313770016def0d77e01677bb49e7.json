{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\FirstML\\\\AnotherMl.js\";\nimport React from \"react\"; //import * as t_f from '@tensorflow/tfjs-node'\n\nimport * as tf from '@tensorflow/tfjs';\nimport LineGraph from 'C:/NewReactResume/resm/src/Components/ChartJs/Charts.js'; //const model = tf.sequential();\n//this is how you export a variable lmao\n\nexport var theindata; // = {data:state.x}\n\nexport var thelabels; // = {labels:state.y}\n\nconst model = tf.sequential({\n  layers: [tf.layers.dense({\n    inputShape: [5],\n    units: 5,\n    activation: 'sigmoid'\n  }), tf.layers.dense({\n    units: 5,\n    activation: 'softmax'\n  })]\n});\nvar prediction_;\nvar data;\nvar labels;\nvar vlafs;\nexport default class AnotherMl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isTfReady: false,\n      trained: false,\n      isitraining: false,\n      x: null,\n      y: null,\n      loss: null,\n      datasets: null,\n      counter: 0,\n      prediction: null\n    };\n    model.compile({\n      optimizer: 'sgd',\n      loss: 'categoricalCrossentropy',\n      metrics: ['accuracy']\n    });\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n\n    this.setState({\n      isTfReady: true\n    });\n    this.setState({\n      trained: false\n    }); //this.setState({counter:0+1})\n    //this.train()\n    //this.setState({training:true})\n    //const source = { uri: response.uri }\n\n    await this.trainTheModel();\n  }\n\n  async trainTheModel() {\n    // Generate dummy data.\n    data = tf.randomNormal([100, 5]);\n    labels = tf.randomUniform([100, 5]);\n    this.setState({\n      isitraining: true\n    }); //console.log(data.print())\n    //console.log(labels.print())\n\n    this.setState({\n      x: data.array()\n    });\n    this.setState({\n      y: labels\n    });\n    data.array().then(array => console.log(array));\n    let counter = 0; //vlafs = await data.data()//.then(array => console.log(array))\n    //console.log(vlafs)\n    //console.log(vlafs)\n    //console.log(JSON.stringify(this.state.x))\n\n    function onBatchEnd(batch, logs) {\n      console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\n      console.log(typeof logs.loss); //this.setState({loss : logs.loss})\n\n      let hi = async () => {}; //  hi()\n      //counter += 1;\n      //isTraining()\n      //)\n\n    }\n\n    function updateChart(logs) {} //console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\n    // Train for 5 epochs with batch size of 32.\n\n\n    model.fit(data, labels, {\n      epochs: 1,\n      batchSize: 10,\n      callbacks: {\n        onBatchEnd\n      }\n    }).then(info => {\n      //this.setState({isitraining:false})\n      console.log('Final accuracy', info.history.acc);\n      this.setState({\n        isitraining: false\n      });\n      this.setState({\n        trained: true\n      });\n      this.thePrediction();\n      model.summary();\n    }); //this.thePrediction()\n  }\n\n  async thePrediction() {\n    if (this.state.trained) {\n      prediction_ = await model.predict(tf.randomNormal([3, 5])); //console.log(prediction_?\"yes\":\"no\")\n      //console.log(prediction_.print())\n\n      this.setState({\n        prediction: prediction_.toString(prediction_.print())\n      }); //this.setState({prediction: prediction_.print()})\n      //console.log(prediction_.print())\n    }\n  }\n\n  render() {\n    const {\n      isTfReady,\n      trained,\n      isitraining,\n      x,\n      y,\n      prediction\n    } = this.state;\n    theindata = {\n      data: this.state.x\n    };\n    console.log(\"connn \", theindata);\n    thelabels = {\n      labels: {\n        labels: [\"app\", \"ape\", \"ssa\", \"as\", \"art\"]\n      }\n    }; //console.log(theindata)\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, this.state.isTfReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Yes Ready\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Not Ready\"), this.state.isitraining ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Yes Training\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Not Training\"), this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Yes Trained\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Not Trained\"), this.state.prediction && this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, JSON.stringify(this.state.prediction), \" \") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Not\"), JSON.stringify(theindata), React.createElement(LineGraph, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/AnotherMl.js"],"names":["React","tf","LineGraph","theindata","thelabels","model","sequential","layers","dense","inputShape","units","activation","prediction_","data","labels","vlafs","AnotherMl","Component","constructor","props","state","isTfReady","trained","isitraining","x","y","loss","datasets","counter","prediction","compile","optimizer","metrics","componentDidMount","ready","setState","trainTheModel","randomNormal","randomUniform","array","then","console","log","onBatchEnd","batch","logs","acc","hi","updateChart","fit","epochs","batchSize","callbacks","info","history","thePrediction","summary","predict","toString","print","render","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n//import * as t_f from '@tensorflow/tfjs-node'\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport LineGraph from 'C:/NewReactResume/resm/src/Components/ChartJs/Charts.js'\r\n\r\n//const model = tf.sequential();\r\n//this is how you export a variable lmao\r\nexport var theindata;// = {data:state.x}\r\nexport var thelabels;// = {labels:state.y}\r\n\r\nconst model = tf.sequential({\r\n    layers: [\r\n      tf.layers.dense({inputShape: [5], units: 5, activation: 'sigmoid'}),\r\n      tf.layers.dense({units: 5, activation: 'softmax'}),\r\n    ]\r\n   });\r\nvar prediction_;\r\nvar data;\r\nvar labels;\r\nvar vlafs;\r\n\r\nexport default class AnotherMl extends React.Component{\r\n    \r\n    constructor(props) {\r\n\r\n        super(props);\r\n        model.compile({\r\n            optimizer: 'sgd',\r\n            loss: 'categoricalCrossentropy',\r\n            metrics: ['accuracy']\r\n          });\r\n\r\n      }\r\n\r\n\r\n        state = {\r\n            isTfReady:false,\r\n            trained:false,\r\n            isitraining: false,\r\n            x : null, \r\n            y : null,\r\n            loss: null,\r\n            datasets : null, \r\n            counter : 0,\r\n            prediction:null\r\n        }  \r\n\r\n    \r\n    async componentDidMount() {\r\n        // Wait for tf to be ready.\r\n        await tf.ready();\r\n        // Signal to the app that tensorflow.js can now be used.\r\n        this.setState({isTfReady: true})\r\n        this.setState({trained: false})\r\n        //this.setState({counter:0+1})\r\n        //this.train()\r\n        //this.setState({training:true})\r\n        //const source = { uri: response.uri }\r\n        await this.trainTheModel()\r\n\r\n    }\r\n    \r\n    \r\n\r\n    async trainTheModel(){\r\n\r\n\r\n        // Generate dummy data.\r\n        data = tf.randomNormal([100, 5]);\r\n        labels = tf.randomUniform([100, 5]);\r\n        this.setState({isitraining:true})\r\n        //console.log(data.print())\r\n        //console.log(labels.print())\r\n        this.setState({x:data.array()})\r\n        this.setState({y:labels})\r\n        data.array().then(array=>console.log(array))\r\n        let counter = 0;\r\n        //vlafs = await data.data()//.then(array => console.log(array))\r\n        //console.log(vlafs)\r\n        //console.log(vlafs)\r\n        //console.log(JSON.stringify(this.state.x))\r\n\r\n        function onBatchEnd(batch, logs) {\r\n            \r\n            console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\r\n            console.log(typeof(logs.loss))\r\n            //this.setState({loss : logs.loss})\r\n            let hi = async () => {\r\n                \r\n                \r\n            }\r\n            \r\n            //  hi()\r\n            //counter += 1;\r\n            //isTraining()\r\n            //)\r\n        }\r\n\r\n        function updateChart(logs) {\r\n            \r\n            //console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\r\n        }\r\n\r\n        // Train for 5 epochs with batch size of 32.\r\n        model.fit(data, labels, {\r\n        epochs: 1,\r\n        batchSize: 10,\r\n        callbacks: {onBatchEnd}\r\n        }).then(info => {\r\n            //this.setState({isitraining:false})\r\n            console.log('Final accuracy', info.history.acc);\r\n            this.setState({isitraining:false})\r\n            this.setState({trained:true})\r\n            this.thePrediction()\r\n            model.summary()\r\n        });\r\n\r\n            //this.thePrediction()\r\n        \r\n    }\r\n\r\n    async thePrediction(){\r\n\r\n        if(this.state.trained)\r\n            {\r\n                prediction_ = await model.predict(tf.randomNormal([3, 5]));\r\n                //console.log(prediction_?\"yes\":\"no\")\r\n                //console.log(prediction_.print())\r\n                this.setState({prediction: prediction_.toString(prediction_.print())})\r\n                \r\n\r\n                //this.setState({prediction: prediction_.print()})\r\n                //console.log(prediction_.print())\r\n            }\r\n    }\r\n\r\n    \r\n    render()\r\n        {\r\n            const { isTfReady, trained, isitraining, x, y, prediction} = this.state\r\n            theindata = {data:this.state.x}\r\n            console.log(\"connn \",theindata)\r\n            thelabels = {labels: { labels:[\"app\",\"ape\",\"ssa\",\"as\",\"art\"]\r\n            }\r\n        }\r\n            //console.log(theindata)\r\n\r\n            return (\r\n\r\n            <div>\r\n                \r\n                {this.state.isTfReady?<p>Yes Ready</p>:<p>Not Ready</p>}\r\n                {this.state.isitraining?<p>Yes Training</p>:<p>Not Training</p>}\r\n                {this.state.trained?<p>Yes Trained</p>:<p>Not Trained</p>}\r\n                {this.state.prediction && this.state.trained? <p>{JSON.stringify(this.state.prediction)} </p>: <p>Not</p>}\r\n                \r\n                {JSON.stringify(theindata)}\r\n                <LineGraph\r\n                    />\r\n            </div>\r\n            );\r\n        }\r\n    \r\n\r\n}"]},"metadata":{},"sourceType":"module"}