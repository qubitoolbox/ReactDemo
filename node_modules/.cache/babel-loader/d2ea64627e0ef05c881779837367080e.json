{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst histogram_1 = require(\"../render/histogram\");\n\nconst render_utils_1 = require(\"../render/render_utils\");\n\nconst table_1 = require(\"../render/table\");\n\nconst dom_1 = require(\"../util/dom\");\n\nconst math_1 = require(\"../util/math\");\n/**\n * Renders a summary of a tf.Model. Displays a table with layer information.\n *\n * ```js\n * const model = tf.sequential({\n *  layers: [\n *    tf.layers.dense({inputShape: [784], units: 32, activation: 'relu'}),\n *    tf.layers.dense({units: 10, activation: 'softmax'}),\n *  ]\n * });\n *\n * const surface = { name: 'Model Summary', tab: 'Model Inspection'};\n * tfvis.show.modelSummary(surface, model);\n * ```\n *\n */\n\n/**\n * @doc {\n *  heading: 'Models & Tensors',\n *  subheading: 'Model Inspection',\n *  namespace: 'show'\n * }\n */\n\n\nfunction modelSummary(container, model) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const drawArea = render_utils_1.getDrawArea(container);\n    const summary = getModelSummary(model);\n    const headers = ['Layer Name', 'Output Shape', '# Of Params', 'Trainable'];\n    const values = summary.layers.map(l => [l.name, l.outputShape, l.parameters, l.trainable]);\n    table_1.table(drawArea, {\n      headers,\n      values\n    });\n  });\n}\n\nexports.modelSummary = modelSummary;\n/**\n * Renders summary information about a layer and a histogram of parameters in\n * that layer.\n *\n * ```js\n * const model = tf.sequential({\n *  layers: [\n *    tf.layers.dense({inputShape: [784], units: 32, activation: 'relu'}),\n *    tf.layers.dense({units: 10, activation: 'softmax'}),\n *  ]\n * });\n *\n * const surface = { name: 'Layer Summary', tab: 'Model Inspection'};\n * tfvis.show.layer(surface, model.getLayer(undefined, 1));\n * ```\n *\n */\n\n/**\n * @doc {\n *  heading: 'Models & Tensors',\n *  subheading: 'Model Inspection',\n *  namespace: 'show'\n * }\n */\n\nfunction layer(container, layer) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const drawArea = render_utils_1.getDrawArea(container);\n    const details = yield getLayerDetails(layer);\n    const headers = ['Weight Name', 'Shape', 'Min', 'Max', '# Params', '# Zeros', '# NaNs', '# Infinity']; // Show layer summary\n\n    const weightsInfoSurface = dom_1.subSurface(drawArea, 'layer-weights-info');\n    const detailValues = details.map(l => [l.name, l.shape, l.stats.min, l.stats.max, l.weight.size, l.stats.numZeros, l.stats.numNans, l.stats.numInfs]);\n    table_1.table(weightsInfoSurface, {\n      headers,\n      values: detailValues\n    });\n    const histogramSelectorSurface = dom_1.subSurface(drawArea, 'select-layer');\n    const layerValuesHistogram = dom_1.subSurface(drawArea, 'param-distribution');\n\n    const handleSelection = layerName => __awaiter(this, void 0, void 0, function* () {\n      const layer = details.filter(d => d.name === layerName)[0];\n      const weights = yield layer.weight.data();\n      histogram_1.histogram(layerValuesHistogram, weights, {\n        height: 150,\n        width: 460,\n        stats: false\n      });\n    });\n\n    addHistogramSelector(details.map(d => d.name), histogramSelectorSurface, handleSelection);\n  });\n}\n\nexports.layer = layer; //\n// Helper functions\n//\n\nfunction getModelSummary(model) {\n  return {\n    layers: model.layers.map(getLayerSummary)\n  };\n}\n/*\n * Gets summary information/metadata about a layer.\n */\n\n\nfunction getLayerSummary(layer) {\n  let outputShape;\n\n  if (Array.isArray(layer.outputShape[0])) {\n    const shapes = layer.outputShape.map(s => formatShape(s));\n    outputShape = `[${shapes.join(', ')}]`;\n  } else {\n    outputShape = formatShape(layer.outputShape);\n  }\n\n  return {\n    name: layer.name,\n    trainable: layer.trainable,\n    parameters: layer.countParams(),\n    outputShape\n  };\n}\n/*\n * Gets summary stats and shape for all weights in a layer.\n */\n\n\nfunction getLayerDetails(layer) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const weights = layer.getWeights();\n    const layerVariables = layer.weights;\n    const statsPromises = weights.map(math_1.tensorStats);\n    const stats = yield Promise.all(statsPromises);\n    const shapes = weights.map(w => w.shape);\n    return weights.map((weight, i) => ({\n      name: layerVariables[i].name,\n      stats: stats[i],\n      shape: formatShape(shapes[i]),\n      weight\n    }));\n  });\n}\n\nfunction formatShape(shape) {\n  const oShape = shape.slice();\n\n  if (oShape.length === 0) {\n    return 'Scalar';\n  }\n\n  if (oShape[0] === null) {\n    oShape[0] = 'batch';\n  }\n\n  return `[${oShape.join(',')}]`;\n}\n\nfunction addHistogramSelector(items, parent, // tslint:disable-next-line:no-any\nselectionHandler) {\n  const select = `\n    <select>\n      ${items.map(i => `<option value=${i}>${i}</option>`)}\n    </select>\n  `;\n  const button = `<button>Show Values Distribution for:</button>`;\n  const content = `<div>${button}${select}</div>`;\n  parent.innerHTML = content; // Add listeners\n\n  const buttonEl = parent.querySelector('button');\n  const selectEl = parent.querySelector('select');\n  buttonEl.addEventListener('click', () => {\n    selectionHandler(selectEl.selectedOptions[0].label);\n  });\n}","map":{"version":3,"sources":["../../src/show/model.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs';\n// tslint:disable-next-line: no-imports-from-dist\nimport {Layer} from '@tensorflow/tfjs-layers/dist/engine/topology';\n\nimport {histogram} from '../render/histogram';\nimport {getDrawArea} from '../render/render_utils';\nimport {table} from '../render/table';\nimport {Drawable, HistogramStats} from '../types';\nimport {subSurface} from '../util/dom';\nimport {tensorStats} from '../util/math';\n\n/**\n * Renders a summary of a tf.Model. Displays a table with layer information.\n *\n * ```js\n * const model = tf.sequential({\n *  layers: [\n *    tf.layers.dense({inputShape: [784], units: 32, activation: 'relu'}),\n *    tf.layers.dense({units: 10, activation: 'softmax'}),\n *  ]\n * });\n *\n * const surface = { name: 'Model Summary', tab: 'Model Inspection'};\n * tfvis.show.modelSummary(surface, model);\n * ```\n *\n */\n/**\n * @doc {\n *  heading: 'Models & Tensors',\n *  subheading: 'Model Inspection',\n *  namespace: 'show'\n * }\n */\nexport async function modelSummary(container: Drawable, model: tf.LayersModel) {\n  const drawArea = getDrawArea(container);\n  const summary = getModelSummary(model);\n\n  const headers = [\n    'Layer Name',\n    'Output Shape',\n    '# Of Params',\n    'Trainable',\n  ];\n\n  const values = summary.layers.map(\n      l =>\n          [l.name,\n           l.outputShape,\n           l.parameters,\n           l.trainable,\n  ]);\n\n  table(drawArea, {headers, values});\n}\n\n/**\n * Renders summary information about a layer and a histogram of parameters in\n * that layer.\n *\n * ```js\n * const model = tf.sequential({\n *  layers: [\n *    tf.layers.dense({inputShape: [784], units: 32, activation: 'relu'}),\n *    tf.layers.dense({units: 10, activation: 'softmax'}),\n *  ]\n * });\n *\n * const surface = { name: 'Layer Summary', tab: 'Model Inspection'};\n * tfvis.show.layer(surface, model.getLayer(undefined, 1));\n * ```\n *\n */\n/**\n * @doc {\n *  heading: 'Models & Tensors',\n *  subheading: 'Model Inspection',\n *  namespace: 'show'\n * }\n */\nexport async function layer(container: Drawable, layer: Layer) {\n  const drawArea = getDrawArea(container);\n  const details = await getLayerDetails(layer);\n\n  const headers = [\n    'Weight Name',\n    'Shape',\n    'Min',\n    'Max',\n    '# Params',\n    '# Zeros',\n    '# NaNs',\n    '# Infinity',\n  ];\n\n  // Show layer summary\n  const weightsInfoSurface = subSurface(drawArea, 'layer-weights-info');\n  const detailValues = details.map(\n      l =>\n          [l.name, l.shape, l.stats.min, l.stats.max, l.weight.size,\n           l.stats.numZeros, l.stats.numNans, l.stats.numInfs]);\n\n  table(weightsInfoSurface, {headers, values: detailValues});\n\n  const histogramSelectorSurface = subSurface(drawArea, 'select-layer');\n  const layerValuesHistogram = subSurface(drawArea, 'param-distribution');\n\n  const handleSelection = async (layerName: string) => {\n    const layer = details.filter(d => d.name === layerName)[0];\n    const weights = await layer.weight.data();\n\n    histogram(\n        layerValuesHistogram, weights, {height: 150, width: 460, stats: false});\n  };\n\n  addHistogramSelector(\n      details.map(d => d.name), histogramSelectorSurface, handleSelection);\n}\n\n//\n// Helper functions\n//\n\nfunction getModelSummary(model: tf.LayersModel) {\n  return {\n    layers: model.layers.map(getLayerSummary),\n  };\n}\n\n/*\n * Gets summary information/metadata about a layer.\n */\nfunction getLayerSummary(layer: Layer): LayerSummary {\n  let outputShape: string;\n  if (Array.isArray(layer.outputShape[0])) {\n    const shapes = (layer.outputShape as number[][]).map(s => formatShape(s));\n    outputShape = `[${shapes.join(', ')}]`;\n  } else {\n    outputShape = formatShape(layer.outputShape as number[]);\n  }\n\n  return {\n    name: layer.name,\n    trainable: layer.trainable,\n    parameters: layer.countParams(),\n    outputShape,\n  };\n}\n\ninterface LayerSummary {\n  name: string;\n  trainable: boolean;\n  parameters: number;\n  outputShape: string;\n}\n\n/*\n * Gets summary stats and shape for all weights in a layer.\n */\nasync function getLayerDetails(layer: Layer): Promise<Array<\n    {name: string, stats: HistogramStats, shape: string, weight: tf.Tensor}>> {\n  const weights = layer.getWeights();\n  const layerVariables = layer.weights;\n  const statsPromises = weights.map(tensorStats);\n  const stats = await Promise.all(statsPromises);\n  const shapes = weights.map(w => w.shape);\n  return weights.map((weight, i) => ({\n                       name: layerVariables[i].name,\n                       stats: stats[i],\n                       shape: formatShape(shapes[i]),\n                       weight,\n                     }));\n}\n\nfunction formatShape(shape: number[]): string {\n  const oShape: Array<number|string> = shape.slice();\n  if (oShape.length === 0) {\n    return 'Scalar';\n  }\n  if (oShape[0] === null) {\n    oShape[0] = 'batch';\n  }\n  return `[${oShape.join(',')}]`;\n}\n\nfunction addHistogramSelector(\n    items: string[], parent: HTMLElement,\n    // tslint:disable-next-line:no-any\n    selectionHandler: (item: string) => any) {\n  const select = `\n    <select>\n      ${items.map((i) => `<option value=${i}>${i}</option>`)}\n    </select>\n  `;\n\n  const button = `<button>Show Values Distribution for:</button>`;\n  const content = `<div>${button}${select}</div>`;\n\n  parent.innerHTML = content;\n\n  // Add listeners\n  const buttonEl = parent.querySelector('button');\n  const selectEl = parent.querySelector('select');\n\n  buttonEl.addEventListener('click', () => {\n    selectionHandler(selectEl.selectedOptions[0].label);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}