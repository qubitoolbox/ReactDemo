{"ast":null,"code":"import parseSignalUpdates from './signal-updates';\nimport { initScale, parseScale } from './scale';\nimport parseProjection from './projection';\nimport parseLegend from './legend';\nimport parseSignal from './signal';\nimport parseTitle from './title';\nimport parseData from './data';\nimport parseMark from './mark';\nimport parseAxis from './axis';\nimport { array } from 'vega-util';\nexport default function (spec, scope, preprocessed) {\n  var signals = array(spec.signals),\n      scales = array(spec.scales); // parse signal definitions, if not already preprocessed\n\n  if (!preprocessed) signals.forEach(_ => parseSignal(_, scope)); // parse cartographic projection definitions\n\n  array(spec.projections).forEach(_ => parseProjection(_, scope)); // initialize scale references\n\n  scales.forEach(_ => initScale(_, scope)); // parse data sources\n\n  array(spec.data).forEach(_ => parseData(_, scope)); // parse scale definitions\n\n  scales.forEach(_ => parseScale(_, scope)); // parse signal updates\n\n  (preprocessed || signals).forEach(_ => parseSignalUpdates(_, scope)); // parse axis definitions\n\n  array(spec.axes).forEach(_ => parseAxis(_, scope)); // parse mark definitions\n\n  array(spec.marks).forEach(_ => parseMark(_, scope)); // parse legend definitions\n\n  array(spec.legends).forEach(_ => parseLegend(_, scope)); // parse title, if defined\n\n  if (spec.title) parseTitle(spec.title, scope); // parse collected lambda (anonymous) expressions\n\n  scope.parseLambdas();\n  return scope;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-parser/src/parsers/spec.js"],"names":["parseSignalUpdates","initScale","parseScale","parseProjection","parseLegend","parseSignal","parseTitle","parseData","parseMark","parseAxis","array","spec","scope","preprocessed","signals","scales","forEach","_","projections","data","axes","marks","legends","title","parseLambdas"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,kBAA/B;AACA,SAAQC,SAAR,EAAmBC,UAAnB,QAAoC,SAApC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,OAAOC,WAAP,MAAwB,UAAxB;AACA,OAAOC,WAAP,MAAwB,UAAxB;AACA,OAAOC,UAAP,MAAuB,SAAvB;AACA,OAAOC,SAAP,MAAsB,QAAtB;AACA,OAAOC,SAAP,MAAsB,QAAtB;AACA,OAAOC,SAAP,MAAsB,QAAtB;AACA,SAAQC,KAAR,QAAoB,WAApB;AAEA,eAAe,UAASC,IAAT,EAAeC,KAAf,EAAsBC,YAAtB,EAAoC;AACjD,MAAIC,OAAO,GAAGJ,KAAK,CAACC,IAAI,CAACG,OAAN,CAAnB;AAAA,MACIC,MAAM,GAAGL,KAAK,CAACC,IAAI,CAACI,MAAN,CADlB,CADiD,CAIjD;;AACA,MAAI,CAACF,YAAL,EAAmBC,OAAO,CAACE,OAAR,CAAgBC,CAAC,IAAIZ,WAAW,CAACY,CAAD,EAAIL,KAAJ,CAAhC,EAL8B,CAOjD;;AACAF,EAAAA,KAAK,CAACC,IAAI,CAACO,WAAN,CAAL,CAAwBF,OAAxB,CAAgCC,CAAC,IAAId,eAAe,CAACc,CAAD,EAAIL,KAAJ,CAApD,EARiD,CAUjD;;AACAG,EAAAA,MAAM,CAACC,OAAP,CAAeC,CAAC,IAAIhB,SAAS,CAACgB,CAAD,EAAIL,KAAJ,CAA7B,EAXiD,CAajD;;AACAF,EAAAA,KAAK,CAACC,IAAI,CAACQ,IAAN,CAAL,CAAiBH,OAAjB,CAAyBC,CAAC,IAAIV,SAAS,CAACU,CAAD,EAAIL,KAAJ,CAAvC,EAdiD,CAgBjD;;AACAG,EAAAA,MAAM,CAACC,OAAP,CAAeC,CAAC,IAAIf,UAAU,CAACe,CAAD,EAAIL,KAAJ,CAA9B,EAjBiD,CAmBjD;;AACA,GAACC,YAAY,IAAIC,OAAjB,EAA0BE,OAA1B,CAAkCC,CAAC,IAAIjB,kBAAkB,CAACiB,CAAD,EAAIL,KAAJ,CAAzD,EApBiD,CAsBjD;;AACAF,EAAAA,KAAK,CAACC,IAAI,CAACS,IAAN,CAAL,CAAiBJ,OAAjB,CAAyBC,CAAC,IAAIR,SAAS,CAACQ,CAAD,EAAIL,KAAJ,CAAvC,EAvBiD,CAyBjD;;AACAF,EAAAA,KAAK,CAACC,IAAI,CAACU,KAAN,CAAL,CAAkBL,OAAlB,CAA0BC,CAAC,IAAIT,SAAS,CAACS,CAAD,EAAIL,KAAJ,CAAxC,EA1BiD,CA4BjD;;AACAF,EAAAA,KAAK,CAACC,IAAI,CAACW,OAAN,CAAL,CAAoBN,OAApB,CAA4BC,CAAC,IAAIb,WAAW,CAACa,CAAD,EAAIL,KAAJ,CAA5C,EA7BiD,CA+BjD;;AACA,MAAID,IAAI,CAACY,KAAT,EAAgBjB,UAAU,CAACK,IAAI,CAACY,KAAN,EAAaX,KAAb,CAAV,CAhCiC,CAkCjD;;AACAA,EAAAA,KAAK,CAACY,YAAN;AAEA,SAAOZ,KAAP;AACD","sourcesContent":["import parseSignalUpdates from './signal-updates';\nimport {initScale, parseScale} from './scale';\nimport parseProjection from './projection';\nimport parseLegend from './legend';\nimport parseSignal from './signal';\nimport parseTitle from './title';\nimport parseData from './data';\nimport parseMark from './mark';\nimport parseAxis from './axis';\nimport {array} from 'vega-util';\n\nexport default function(spec, scope, preprocessed) {\n  var signals = array(spec.signals),\n      scales = array(spec.scales);\n\n  // parse signal definitions, if not already preprocessed\n  if (!preprocessed) signals.forEach(_ => parseSignal(_, scope));\n\n  // parse cartographic projection definitions\n  array(spec.projections).forEach(_ => parseProjection(_, scope));\n\n  // initialize scale references\n  scales.forEach(_ => initScale(_, scope));\n\n  // parse data sources\n  array(spec.data).forEach(_ => parseData(_, scope));\n\n  // parse scale definitions\n  scales.forEach(_ => parseScale(_, scope));\n\n  // parse signal updates\n  (preprocessed || signals).forEach(_ => parseSignalUpdates(_, scope));\n\n  // parse axis definitions\n  array(spec.axes).forEach(_ => parseAxis(_, scope));\n\n  // parse mark definitions\n  array(spec.marks).forEach(_ => parseMark(_, scope));\n\n  // parse legend definitions\n  array(spec.legends).forEach(_ => parseLegend(_, scope));\n\n  // parse title, if defined\n  if (spec.title) parseTitle(spec.title, scope);\n\n  // parse collected lambda (anonymous) expressions\n  scope.parseLambdas();\n\n  return scope;\n}\n"]},"metadata":{},"sourceType":"module"}