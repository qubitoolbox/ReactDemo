{"ast":null,"code":"import expression from './expression';\nimport { error, isString, isObject, splitAccessPath, stringValue } from 'vega-util';\nexport default function (ref, scope, params, fields) {\n  return resolve(isObject(ref) ? ref : {\n    datum: ref\n  }, scope, params, fields);\n}\n\nfunction resolve(ref, scope, params, fields) {\n  var object, level, field;\n\n  if (ref.signal) {\n    object = 'datum';\n    field = expression(ref.signal, scope, params, fields);\n  } else if (ref.group || ref.parent) {\n    level = Math.max(1, ref.level || 1);\n    object = 'item';\n\n    while (level-- > 0) {\n      object += '.mark.group';\n    }\n\n    if (ref.parent) {\n      field = ref.parent;\n      object += '.datum';\n    } else {\n      field = ref.group;\n    }\n  } else if (ref.datum) {\n    object = 'datum';\n    field = ref.datum;\n  } else {\n    error('Invalid field reference: ' + stringValue(ref));\n  }\n\n  if (!ref.signal) {\n    if (isString(field)) {\n      fields[field] = 1; // TODO review field tracking?\n\n      field = splitAccessPath(field).map(stringValue).join('][');\n    } else {\n      field = resolve(field, scope, params, fields);\n    }\n  }\n\n  return object + '[' + field + ']';\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-parser/src/parsers/encode/field.js"],"names":["expression","error","isString","isObject","splitAccessPath","stringValue","ref","scope","params","fields","resolve","datum","object","level","field","signal","group","parent","Math","max","map","join"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,SAAQC,KAAR,EAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,eAAnC,EAAoDC,WAApD,QAAsE,WAAtE;AAEA,eAAe,UAASC,GAAT,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqC;AAClD,SAAOC,OAAO,CAACP,QAAQ,CAACG,GAAD,CAAR,GAAgBA,GAAhB,GAAsB;AAACK,IAAAA,KAAK,EAAEL;AAAR,GAAvB,EAAqCC,KAArC,EAA4CC,MAA5C,EAAoDC,MAApD,CAAd;AACD;;AAED,SAASC,OAAT,CAAiBJ,GAAjB,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCC,MAArC,EAA6C;AAC3C,MAAIG,MAAJ,EAAYC,KAAZ,EAAmBC,KAAnB;;AAEA,MAAIR,GAAG,CAACS,MAAR,EAAgB;AACdH,IAAAA,MAAM,GAAG,OAAT;AACAE,IAAAA,KAAK,GAAGd,UAAU,CAACM,GAAG,CAACS,MAAL,EAAaR,KAAb,EAAoBC,MAApB,EAA4BC,MAA5B,CAAlB;AACD,GAHD,MAGO,IAAIH,GAAG,CAACU,KAAJ,IAAaV,GAAG,CAACW,MAArB,EAA6B;AAClCJ,IAAAA,KAAK,GAAGK,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYb,GAAG,CAACO,KAAJ,IAAa,CAAzB,CAAR;AACAD,IAAAA,MAAM,GAAG,MAAT;;AAEA,WAAOC,KAAK,KAAK,CAAjB,EAAoB;AAClBD,MAAAA,MAAM,IAAI,aAAV;AACD;;AAED,QAAIN,GAAG,CAACW,MAAR,EAAgB;AACdH,MAAAA,KAAK,GAAGR,GAAG,CAACW,MAAZ;AACAL,MAAAA,MAAM,IAAI,QAAV;AACD,KAHD,MAGO;AACLE,MAAAA,KAAK,GAAGR,GAAG,CAACU,KAAZ;AACD;AACF,GAdM,MAcA,IAAIV,GAAG,CAACK,KAAR,EAAe;AACpBC,IAAAA,MAAM,GAAG,OAAT;AACAE,IAAAA,KAAK,GAAGR,GAAG,CAACK,KAAZ;AACD,GAHM,MAGA;AACLV,IAAAA,KAAK,CAAC,8BAA8BI,WAAW,CAACC,GAAD,CAA1C,CAAL;AACD;;AAED,MAAI,CAACA,GAAG,CAACS,MAAT,EAAiB;AACf,QAAIb,QAAQ,CAACY,KAAD,CAAZ,EAAqB;AACnBL,MAAAA,MAAM,CAACK,KAAD,CAAN,GAAgB,CAAhB,CADmB,CACA;;AACnBA,MAAAA,KAAK,GAAGV,eAAe,CAACU,KAAD,CAAf,CAAuBM,GAAvB,CAA2Bf,WAA3B,EAAwCgB,IAAxC,CAA6C,IAA7C,CAAR;AACD,KAHD,MAGO;AACLP,MAAAA,KAAK,GAAGJ,OAAO,CAACI,KAAD,EAAQP,KAAR,EAAeC,MAAf,EAAuBC,MAAvB,CAAf;AACD;AACF;;AAED,SAAOG,MAAM,GAAG,GAAT,GAAeE,KAAf,GAAuB,GAA9B;AACD","sourcesContent":["import expression from './expression';\nimport {error, isString, isObject, splitAccessPath, stringValue} from 'vega-util';\n\nexport default function(ref, scope, params, fields) {\n  return resolve(isObject(ref) ? ref : {datum: ref}, scope, params, fields);\n}\n\nfunction resolve(ref, scope, params, fields) {\n  var object, level, field;\n\n  if (ref.signal) {\n    object = 'datum';\n    field = expression(ref.signal, scope, params, fields);\n  } else if (ref.group || ref.parent) {\n    level = Math.max(1, ref.level || 1);\n    object = 'item';\n\n    while (level-- > 0) {\n      object += '.mark.group';\n    }\n\n    if (ref.parent) {\n      field = ref.parent;\n      object += '.datum';\n    } else {\n      field = ref.group;\n    }\n  } else if (ref.datum) {\n    object = 'datum';\n    field = ref.datum;\n  } else {\n    error('Invalid field reference: ' + stringValue(ref));\n  }\n\n  if (!ref.signal) {\n    if (isString(field)) {\n      fields[field] = 1; // TODO review field tracking?\n      field = splitAccessPath(field).map(stringValue).join('][');\n    } else {\n      field = resolve(field, scope, params, fields);\n    }\n  }\n\n  return object + '[' + field + ']';\n}\n"]},"metadata":{},"sourceType":"module"}