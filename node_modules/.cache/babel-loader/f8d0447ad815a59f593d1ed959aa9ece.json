{"ast":null,"code":"import { Transform } from 'vega-dataflow';\nimport { accessorFields, array, error, hasOwnProperty, inherits, isFunction } from 'vega-util';\nimport { forceSimulation, forceCenter, forceCollide, forceManyBody, forceLink, forceX, forceY } from 'd3-force';\nvar ForceMap = {\n  center: forceCenter,\n  collide: forceCollide,\n  nbody: forceManyBody,\n  link: forceLink,\n  x: forceX,\n  y: forceY\n};\nvar Forces = 'forces',\n    ForceParams = ['alpha', 'alphaMin', 'alphaTarget', 'velocityDecay', 'forces'],\n    ForceConfig = ['static', 'iterations'],\n    ForceOutput = ['x', 'y', 'vx', 'vy'];\n/**\n * Force simulation layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<object>} params.forces - The forces to apply.\n */\n\nexport default function Force(params) {\n  Transform.call(this, null, params);\n}\nForce.Definition = {\n  \"type\": \"Force\",\n  \"metadata\": {\n    \"modifies\": true\n  },\n  \"params\": [{\n    \"name\": \"static\",\n    \"type\": \"boolean\",\n    \"default\": false\n  }, {\n    \"name\": \"restart\",\n    \"type\": \"boolean\",\n    \"default\": false\n  }, {\n    \"name\": \"iterations\",\n    \"type\": \"number\",\n    \"default\": 300\n  }, {\n    \"name\": \"alpha\",\n    \"type\": \"number\",\n    \"default\": 1\n  }, {\n    \"name\": \"alphaMin\",\n    \"type\": \"number\",\n    \"default\": 0.001\n  }, {\n    \"name\": \"alphaTarget\",\n    \"type\": \"number\",\n    \"default\": 0\n  }, {\n    \"name\": \"velocityDecay\",\n    \"type\": \"number\",\n    \"default\": 0.4\n  }, {\n    \"name\": \"forces\",\n    \"type\": \"param\",\n    \"array\": true,\n    \"params\": [{\n      \"key\": {\n        \"force\": \"center\"\n      },\n      \"params\": [{\n        \"name\": \"x\",\n        \"type\": \"number\",\n        \"default\": 0\n      }, {\n        \"name\": \"y\",\n        \"type\": \"number\",\n        \"default\": 0\n      }]\n    }, {\n      \"key\": {\n        \"force\": \"collide\"\n      },\n      \"params\": [{\n        \"name\": \"radius\",\n        \"type\": \"number\",\n        \"expr\": true\n      }, {\n        \"name\": \"strength\",\n        \"type\": \"number\",\n        \"default\": 0.7\n      }, {\n        \"name\": \"iterations\",\n        \"type\": \"number\",\n        \"default\": 1\n      }]\n    }, {\n      \"key\": {\n        \"force\": \"nbody\"\n      },\n      \"params\": [{\n        \"name\": \"strength\",\n        \"type\": \"number\",\n        \"default\": -30\n      }, {\n        \"name\": \"theta\",\n        \"type\": \"number\",\n        \"default\": 0.9\n      }, {\n        \"name\": \"distanceMin\",\n        \"type\": \"number\",\n        \"default\": 1\n      }, {\n        \"name\": \"distanceMax\",\n        \"type\": \"number\"\n      }]\n    }, {\n      \"key\": {\n        \"force\": \"link\"\n      },\n      \"params\": [{\n        \"name\": \"links\",\n        \"type\": \"data\"\n      }, {\n        \"name\": \"id\",\n        \"type\": \"field\"\n      }, {\n        \"name\": \"distance\",\n        \"type\": \"number\",\n        \"default\": 30,\n        \"expr\": true\n      }, {\n        \"name\": \"strength\",\n        \"type\": \"number\",\n        \"expr\": true\n      }, {\n        \"name\": \"iterations\",\n        \"type\": \"number\",\n        \"default\": 1\n      }]\n    }, {\n      \"key\": {\n        \"force\": \"x\"\n      },\n      \"params\": [{\n        \"name\": \"strength\",\n        \"type\": \"number\",\n        \"default\": 0.1\n      }, {\n        \"name\": \"x\",\n        \"type\": \"field\"\n      }]\n    }, {\n      \"key\": {\n        \"force\": \"y\"\n      },\n      \"params\": [{\n        \"name\": \"strength\",\n        \"type\": \"number\",\n        \"default\": 0.1\n      }, {\n        \"name\": \"y\",\n        \"type\": \"field\"\n      }]\n    }]\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"array\": true,\n    \"modify\": false,\n    \"default\": ForceOutput\n  }]\n};\nvar prototype = inherits(Force, Transform);\n\nprototype.transform = function (_, pulse) {\n  var sim = this.value,\n      change = pulse.changed(pulse.ADD_REM),\n      params = _.modified(ForceParams),\n      iters = _.iterations || 300; // configure simulation\n\n\n  if (!sim) {\n    this.value = sim = simulation(pulse.source, _);\n    sim.on('tick', rerun(pulse.dataflow, this));\n\n    if (!_.static) {\n      change = true;\n      sim.tick(); // ensure we run on init\n    }\n\n    pulse.modifies('index');\n  } else {\n    if (change) {\n      pulse.modifies('index');\n      sim.nodes(pulse.source);\n    }\n\n    if (params || pulse.changed(pulse.MOD)) {\n      setup(sim, _, 0, pulse);\n    }\n  } // run simulation\n\n\n  if (params || change || _.modified(ForceConfig) || pulse.changed() && _.restart) {\n    sim.alpha(Math.max(sim.alpha(), _.alpha || 1)).alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));\n\n    if (_.static) {\n      for (sim.stop(); --iters >= 0;) sim.tick();\n    } else {\n      if (sim.stopped()) sim.restart();\n      if (!change) return pulse.StopPropagation; // defer to sim ticks\n    }\n  }\n\n  return this.finish(_, pulse);\n};\n\nprototype.finish = function (_, pulse) {\n  var dataflow = pulse.dataflow; // inspect dependencies, touch link source data\n\n  for (var args = this._argops, j = 0, m = args.length, arg; j < m; ++j) {\n    arg = args[j];\n\n    if (arg.name !== Forces || arg.op._argval.force !== 'link') {\n      continue;\n    }\n\n    for (var ops = arg.op._argops, i = 0, n = ops.length, op; i < n; ++i) {\n      if (ops[i].name === 'links' && (op = ops[i].op.source)) {\n        dataflow.pulse(op, dataflow.changeset().reflow());\n        break;\n      }\n    }\n  } // reflow all nodes\n\n\n  return pulse.reflow(_.modified()).modifies(ForceOutput);\n};\n\nfunction rerun(df, op) {\n  return function () {\n    df.touch(op).run();\n  };\n}\n\nfunction simulation(nodes, _) {\n  var sim = forceSimulation(nodes),\n      stopped = false,\n      stop = sim.stop,\n      restart = sim.restart;\n\n  sim.stopped = function () {\n    return stopped;\n  };\n\n  sim.restart = function () {\n    stopped = false;\n    return restart();\n  };\n\n  sim.stop = function () {\n    stopped = true;\n    return stop();\n  };\n\n  return setup(sim, _, true).on('end', function () {\n    stopped = true;\n  });\n}\n\nfunction setup(sim, _, init, pulse) {\n  var f = array(_.forces),\n      i,\n      n,\n      p,\n      name;\n\n  for (i = 0, n = ForceParams.length; i < n; ++i) {\n    p = ForceParams[i];\n    if (p !== Forces && _.modified(p)) sim[p](_[p]);\n  }\n\n  for (i = 0, n = f.length; i < n; ++i) {\n    name = Forces + i;\n    p = init || _.modified(Forces, i) ? getForce(f[i]) : pulse && modified(f[i], pulse) ? sim.force(name) : null;\n    if (p) sim.force(name, p);\n  }\n\n  for (n = sim.numForces || 0; i < n; ++i) {\n    sim.force(Forces + i, null); // remove\n  }\n\n  sim.numForces = f.length;\n  return sim;\n}\n\nfunction modified(f, pulse) {\n  var k, v;\n\n  for (k in f) {\n    if (isFunction(v = f[k]) && pulse.modified(accessorFields(v))) return 1;\n  }\n\n  return 0;\n}\n\nfunction getForce(_) {\n  var f, p;\n\n  if (!hasOwnProperty(ForceMap, _.force)) {\n    error('Unrecognized force: ' + _.force);\n  }\n\n  f = ForceMap[_.force]();\n\n  for (p in _) {\n    if (isFunction(f[p])) setForceParam(f[p], _[p], _);\n  }\n\n  return f;\n}\n\nfunction setForceParam(f, v, _) {\n  f(isFunction(v) ? function (d) {\n    return v(d, _);\n  } : v);\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-force/src/Force.js"],"names":["Transform","accessorFields","array","error","hasOwnProperty","inherits","isFunction","forceSimulation","forceCenter","forceCollide","forceManyBody","forceLink","forceX","forceY","ForceMap","center","collide","nbody","link","x","y","Forces","ForceParams","ForceConfig","ForceOutput","Force","params","call","Definition","prototype","transform","_","pulse","sim","value","change","changed","ADD_REM","modified","iters","iterations","simulation","source","on","rerun","dataflow","static","tick","modifies","nodes","MOD","setup","restart","alpha","Math","max","alphaDecay","pow","alphaMin","stop","stopped","StopPropagation","finish","args","_argops","j","m","length","arg","name","op","_argval","force","ops","i","n","changeset","reflow","df","touch","run","init","f","forces","p","getForce","numForces","k","v","setForceParam","d"],"mappings":"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","sourcesContent":["import {Transform} from 'vega-dataflow';\nimport {\n  accessorFields, array, error, hasOwnProperty,\n  inherits, isFunction\n} from 'vega-util';\nimport {\n  forceSimulation, forceCenter, forceCollide,\n  forceManyBody, forceLink, forceX, forceY\n} from 'd3-force';\n\nvar ForceMap = {\n  center: forceCenter,\n  collide: forceCollide,\n  nbody: forceManyBody,\n  link: forceLink,\n  x: forceX,\n  y: forceY\n};\n\nvar Forces = 'forces',\n    ForceParams = [\n      'alpha', 'alphaMin', 'alphaTarget',\n      'velocityDecay', 'forces'\n    ],\n    ForceConfig = ['static', 'iterations'],\n    ForceOutput = ['x', 'y', 'vx', 'vy'];\n\n/**\n * Force simulation layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<object>} params.forces - The forces to apply.\n */\nexport default function Force(params) {\n  Transform.call(this, null, params);\n}\n\nForce.Definition = {\n  \"type\": \"Force\",\n  \"metadata\": {\"modifies\": true},\n  \"params\": [\n    { \"name\": \"static\", \"type\": \"boolean\", \"default\": false },\n    { \"name\": \"restart\", \"type\": \"boolean\", \"default\": false },\n    { \"name\": \"iterations\", \"type\": \"number\", \"default\": 300 },\n    { \"name\": \"alpha\", \"type\": \"number\", \"default\": 1 },\n    { \"name\": \"alphaMin\", \"type\": \"number\", \"default\": 0.001 },\n    { \"name\": \"alphaTarget\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"velocityDecay\", \"type\": \"number\", \"default\": 0.4 },\n    { \"name\": \"forces\", \"type\": \"param\", \"array\": true,\n      \"params\": [\n        {\n          \"key\": {\"force\": \"center\"},\n          \"params\": [\n            { \"name\": \"x\", \"type\": \"number\", \"default\": 0 },\n            { \"name\": \"y\", \"type\": \"number\", \"default\": 0 }\n          ]\n        },\n        {\n          \"key\": {\"force\": \"collide\"},\n          \"params\": [\n            { \"name\": \"radius\", \"type\": \"number\", \"expr\": true },\n            { \"name\": \"strength\", \"type\": \"number\", \"default\": 0.7 },\n            { \"name\": \"iterations\", \"type\": \"number\", \"default\": 1 }\n          ]\n        },\n        {\n          \"key\": {\"force\": \"nbody\"},\n          \"params\": [\n            { \"name\": \"strength\", \"type\": \"number\", \"default\": -30 },\n            { \"name\": \"theta\", \"type\": \"number\", \"default\": 0.9 },\n            { \"name\": \"distanceMin\", \"type\": \"number\", \"default\": 1 },\n            { \"name\": \"distanceMax\", \"type\": \"number\" }\n          ]\n        },\n        {\n          \"key\": {\"force\": \"link\"},\n          \"params\": [\n            { \"name\": \"links\", \"type\": \"data\" },\n            { \"name\": \"id\", \"type\": \"field\" },\n            { \"name\": \"distance\", \"type\": \"number\", \"default\": 30, \"expr\": true },\n            { \"name\": \"strength\", \"type\": \"number\", \"expr\": true },\n            { \"name\": \"iterations\", \"type\": \"number\", \"default\": 1 }\n          ]\n        },\n        {\n          \"key\": {\"force\": \"x\"},\n          \"params\": [\n            { \"name\": \"strength\", \"type\": \"number\", \"default\": 0.1 },\n            { \"name\": \"x\", \"type\": \"field\" }\n          ]\n        },\n        {\n          \"key\": {\"force\": \"y\"},\n          \"params\": [\n            { \"name\": \"strength\", \"type\": \"number\", \"default\": 0.1 },\n            { \"name\": \"y\", \"type\": \"field\" }\n          ]\n        }\n      ] },\n    {\n      \"name\": \"as\", \"type\": \"string\", \"array\": true, \"modify\": false,\n      \"default\": ForceOutput\n    }\n  ]\n};\n\nvar prototype = inherits(Force, Transform);\n\nprototype.transform = function(_, pulse) {\n  var sim = this.value,\n      change = pulse.changed(pulse.ADD_REM),\n      params = _.modified(ForceParams),\n      iters = _.iterations || 300;\n\n  // configure simulation\n  if (!sim) {\n    this.value = sim = simulation(pulse.source, _);\n    sim.on('tick', rerun(pulse.dataflow, this));\n    if (!_.static) {\n      change = true;\n      sim.tick(); // ensure we run on init\n    }\n    pulse.modifies('index');\n  } else {\n    if (change) {\n      pulse.modifies('index');\n      sim.nodes(pulse.source);\n    }\n    if (params || pulse.changed(pulse.MOD)) {\n      setup(sim, _, 0, pulse);\n    }\n  }\n\n  // run simulation\n  if (params || change || _.modified(ForceConfig)\n      || (pulse.changed() && _.restart))\n  {\n    sim.alpha(Math.max(sim.alpha(), _.alpha || 1))\n       .alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));\n\n    if (_.static) {\n      for (sim.stop(); --iters >= 0;) sim.tick();\n    } else {\n      if (sim.stopped()) sim.restart();\n      if (!change) return pulse.StopPropagation; // defer to sim ticks\n    }\n  }\n\n  return this.finish(_, pulse);\n};\n\nprototype.finish = function(_, pulse) {\n  var dataflow = pulse.dataflow;\n\n  // inspect dependencies, touch link source data\n  for (var args=this._argops, j=0, m=args.length, arg; j<m; ++j) {\n    arg = args[j];\n    if (arg.name !== Forces || arg.op._argval.force !== 'link') {\n      continue;\n    }\n    for (var ops=arg.op._argops, i=0, n=ops.length, op; i<n; ++i) {\n      if (ops[i].name === 'links' && (op = ops[i].op.source)) {\n        dataflow.pulse(op, dataflow.changeset().reflow());\n        break;\n      }\n    }\n  }\n\n  // reflow all nodes\n  return pulse.reflow(_.modified()).modifies(ForceOutput);\n};\n\nfunction rerun(df, op) {\n  return function() { df.touch(op).run(); }\n}\n\nfunction simulation(nodes, _) {\n  var sim = forceSimulation(nodes),\n      stopped = false,\n      stop = sim.stop,\n      restart = sim.restart;\n\n  sim.stopped = function() {\n    return stopped;\n  };\n  sim.restart = function() {\n    stopped = false;\n    return restart();\n  };\n  sim.stop = function() {\n    stopped = true;\n    return stop();\n  };\n\n  return setup(sim, _, true).on('end', function() { stopped = true; });\n}\n\nfunction setup(sim, _, init, pulse) {\n  var f = array(_.forces), i, n, p, name;\n\n  for (i=0, n=ForceParams.length; i<n; ++i) {\n    p = ForceParams[i];\n    if (p !== Forces && _.modified(p)) sim[p](_[p]);\n  }\n\n  for (i=0, n=f.length; i<n; ++i) {\n    name = Forces + i;\n    p = init || _.modified(Forces, i) ? getForce(f[i])\n      : pulse && modified(f[i], pulse) ? sim.force(name)\n      : null;\n    if (p) sim.force(name, p);\n  }\n\n  for (n=(sim.numForces || 0); i<n; ++i) {\n    sim.force(Forces + i, null); // remove\n  }\n\n  sim.numForces = f.length;\n  return sim;\n}\n\nfunction modified(f, pulse) {\n  var k, v;\n  for (k in f) {\n    if (isFunction(v = f[k]) && pulse.modified(accessorFields(v)))\n      return 1;\n  }\n  return 0;\n}\n\nfunction getForce(_) {\n  var f, p;\n\n  if (!hasOwnProperty(ForceMap, _.force)) {\n    error('Unrecognized force: ' + _.force);\n  }\n  f = ForceMap[_.force]();\n\n  for (p in _) {\n    if (isFunction(f[p])) setForceParam(f[p], _[p], _);\n  }\n\n  return f;\n}\n\nfunction setForceParam(f, v, _) {\n  f(isFunction(v) ? function(d) { return v(d, _); } : v);\n}\n"]},"metadata":{},"sourceType":"module"}