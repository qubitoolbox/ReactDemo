{"ast":null,"code":"import { hasOwnProperty } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { MAIN } from '../../data';\nimport { PROJECTION_PROPERTIES } from '../../projection';\nimport { GEOJSON } from '../../type';\nimport { duplicate, every, stringify } from '../../util';\nimport { isUnitModel } from '../model';\nimport { ProjectionComponent } from './component';\nexport function parseProjection(model) {\n  model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);\n}\n\nfunction parseUnitProjection(model) {\n  var _a;\n\n  if (model.hasProjection) {\n    const proj = model.specifiedProjection;\n    const fit = !(proj && (proj.scale != null || proj.translate != null));\n    const size = fit ? [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')] : undefined;\n    const data = fit ? gatherFitData(model) : undefined;\n    return new ProjectionComponent(model.projectionName(true), Object.assign(Object.assign({}, (_a = model.config.projection, _a !== null && _a !== void 0 ? _a : {})), proj !== null && proj !== void 0 ? proj : {}), size, data);\n  }\n\n  return undefined;\n}\n\nfunction gatherFitData(model) {\n  const data = [];\n\n  for (const posssiblePair of [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]]) {\n    if (model.channelHasField(posssiblePair[0]) || model.channelHasField(posssiblePair[1])) {\n      data.push({\n        signal: model.getName(`geojson_${data.length}`)\n      });\n    }\n  }\n\n  if (model.channelHasField(SHAPE) && model.fieldDef(SHAPE).type === GEOJSON) {\n    data.push({\n      signal: model.getName(`geojson_${data.length}`)\n    });\n  }\n\n  if (data.length === 0) {\n    // main source is geojson, so we can just use that\n    data.push(model.requestDataName(MAIN));\n  }\n\n  return data;\n}\n\nfunction mergeIfNoConflict(first, second) {\n  const allPropertiesShared = every(PROJECTION_PROPERTIES, prop => {\n    // neither has the property\n    if (!hasOwnProperty(first.explicit, prop) && !hasOwnProperty(second.explicit, prop)) {\n      return true;\n    } // both have property and an equal value for property\n\n\n    if (hasOwnProperty(first.explicit, prop) && hasOwnProperty(second.explicit, prop) && // some properties might be signals or objects and require hashing for comparison\n    stringify(first.get(prop)) === stringify(second.get(prop))) {\n      return true;\n    }\n\n    return false;\n  });\n  const size = stringify(first.size) === stringify(second.size);\n\n  if (size) {\n    if (allPropertiesShared) {\n      return first;\n    } else if (stringify(first.explicit) === stringify({})) {\n      return second;\n    } else if (stringify(second.explicit) === stringify({})) {\n      return first;\n    }\n  } // if all properties don't match, let each unit spec have its own projection\n\n\n  return null;\n}\n\nfunction parseNonUnitProjections(model) {\n  if (model.children.length === 0) {\n    return undefined;\n  }\n\n  let nonUnitProjection; // parse all children first\n\n  model.children.forEach(child => parseProjection(child)); // analyze parsed projections, attempt to merge\n\n  const mergable = every(model.children, child => {\n    const projection = child.component.projection;\n\n    if (!projection) {\n      // child layer does not use a projection\n      return true;\n    } else if (!nonUnitProjection) {\n      // cached 'projection' is null, cache this one\n      nonUnitProjection = projection;\n      return true;\n    } else {\n      const merge = mergeIfNoConflict(nonUnitProjection, projection);\n\n      if (merge) {\n        nonUnitProjection = merge;\n      }\n\n      return !!merge;\n    }\n  }); // if cached one and all other children share the same projection,\n\n  if (nonUnitProjection && mergable) {\n    // so we can elevate it to the layer level\n    const name = model.projectionName(true);\n    const modelProjection = new ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data)); // rename and assign all others as merged\n\n    model.children.forEach(child => {\n      const projection = child.component.projection;\n\n      if (projection) {\n        if (projection.isFit) {\n          modelProjection.data.push(...child.component.projection.data);\n        }\n\n        child.renameProjection(projection.get('name'), name);\n        projection.merged = true;\n      }\n    });\n    return modelProjection;\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["../../../../src/compile/projection/parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {SignalRef} from 'vega';\nimport {hasOwnProperty} from 'vega-util';\nimport {LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE} from '../../channel';\nimport {MAIN} from '../../data';\nimport {PROJECTION_PROPERTIES} from '../../projection';\nimport {GEOJSON} from '../../type';\nimport {duplicate, every, stringify} from '../../util';\nimport {isUnitModel, Model} from '../model';\nimport {UnitModel} from '../unit';\nimport {ProjectionComponent} from './component';\n\nexport function parseProjection(model: Model) {\n  model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);\n}\n\nfunction parseUnitProjection(model: UnitModel): ProjectionComponent {\n  if (model.hasProjection) {\n    const proj = model.specifiedProjection;\n    const fit = !(proj && (proj.scale != null || proj.translate != null));\n    const size = fit ? [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')] : undefined;\n    const data = fit ? gatherFitData(model) : undefined;\n\n    return new ProjectionComponent(\n      model.projectionName(true),\n      {\n        ...(model.config.projection ?? {}),\n        ...(proj ?? {})\n      },\n      size,\n      data\n    );\n  }\n\n  return undefined;\n}\n\nfunction gatherFitData(model: UnitModel) {\n  const data: (SignalRef | string)[] = [];\n\n  for (const posssiblePair of [\n    [LONGITUDE, LATITUDE],\n    [LONGITUDE2, LATITUDE2]\n  ]) {\n    if (model.channelHasField(posssiblePair[0]) || model.channelHasField(posssiblePair[1])) {\n      data.push({\n        signal: model.getName(`geojson_${data.length}`)\n      });\n    }\n  }\n\n  if (model.channelHasField(SHAPE) && model.fieldDef(SHAPE).type === GEOJSON) {\n    data.push({\n      signal: model.getName(`geojson_${data.length}`)\n    });\n  }\n\n  if (data.length === 0) {\n    // main source is geojson, so we can just use that\n    data.push(model.requestDataName(MAIN));\n  }\n\n  return data;\n}\n\nfunction mergeIfNoConflict(first: ProjectionComponent, second: ProjectionComponent): ProjectionComponent {\n  const allPropertiesShared = every(PROJECTION_PROPERTIES, prop => {\n    // neither has the property\n    if (!hasOwnProperty(first.explicit, prop) && !hasOwnProperty(second.explicit, prop)) {\n      return true;\n    }\n    // both have property and an equal value for property\n    if (\n      hasOwnProperty(first.explicit, prop) &&\n      hasOwnProperty(second.explicit, prop) &&\n      // some properties might be signals or objects and require hashing for comparison\n      stringify(first.get(prop)) === stringify(second.get(prop))\n    ) {\n      return true;\n    }\n    return false;\n  });\n\n  const size = stringify(first.size) === stringify(second.size);\n  if (size) {\n    if (allPropertiesShared) {\n      return first;\n    } else if (stringify(first.explicit) === stringify({})) {\n      return second;\n    } else if (stringify(second.explicit) === stringify({})) {\n      return first;\n    }\n  }\n\n  // if all properties don't match, let each unit spec have its own projection\n  return null;\n}\n\nfunction parseNonUnitProjections(model: Model): ProjectionComponent {\n  if (model.children.length === 0) {\n    return undefined;\n  }\n\n  let nonUnitProjection: ProjectionComponent;\n\n  // parse all children first\n  model.children.forEach(child => parseProjection(child));\n\n  // analyze parsed projections, attempt to merge\n  const mergable = every(model.children, child => {\n    const projection = child.component.projection;\n    if (!projection) {\n      // child layer does not use a projection\n      return true;\n    } else if (!nonUnitProjection) {\n      // cached 'projection' is null, cache this one\n      nonUnitProjection = projection;\n      return true;\n    } else {\n      const merge = mergeIfNoConflict(nonUnitProjection, projection);\n      if (merge) {\n        nonUnitProjection = merge;\n      }\n      return !!merge;\n    }\n  });\n\n  // if cached one and all other children share the same projection,\n  if (nonUnitProjection && mergable) {\n    // so we can elevate it to the layer level\n    const name = model.projectionName(true);\n    const modelProjection = new ProjectionComponent(\n      name,\n      nonUnitProjection.specifiedProjection,\n      nonUnitProjection.size,\n      duplicate(nonUnitProjection.data)\n    );\n\n    // rename and assign all others as merged\n    model.children.forEach(child => {\n      const projection = child.component.projection;\n      if (projection) {\n        if (projection.isFit) {\n          modelProjection.data.push(...child.component.projection.data);\n        }\n        child.renameProjection(projection.get('name'), name);\n        projection.merged = true;\n      }\n    });\n\n    return modelProjection;\n  }\n\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}