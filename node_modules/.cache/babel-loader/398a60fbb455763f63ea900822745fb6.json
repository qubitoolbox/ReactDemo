{"ast":null,"code":"import Operator from '../Operator';\nimport { isFunction } from 'vega-util';\n/**\n * Add an operator to the dataflow graph. This function accepts a\n * variety of input argument types. The basic signature supports an\n * initial value, update function and parameters. If the first parameter\n * is an Operator instance, it will be added directly. If it is a\n * constructor for an Operator subclass, a new instance will be instantiated.\n * Otherwise, if the first parameter is a function instance, it will be used\n * as the update function and a null initial value is assumed.\n * @param {*} init - One of: the operator to add, the initial value of\n *   the operator, an operator class to instantiate, or an update function.\n * @param {function} [update] - The operator update function.\n * @param {object} [params] - The operator parameters.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @return {Operator} - The added operator.\n */\n\nexport default function (init, update, params, react) {\n  var shift = 1,\n      op;\n\n  if (init instanceof Operator) {\n    op = init;\n  } else if (init && init.prototype instanceof Operator) {\n    op = new init();\n  } else if (isFunction(init)) {\n    op = new Operator(null, init);\n  } else {\n    shift = 0;\n    op = new Operator(init, update);\n  }\n\n  this.rank(op);\n\n  if (shift) {\n    react = params;\n    params = update;\n  }\n\n  if (params) this.connect(op, op.parameters(params, react));\n  this.touch(op);\n  return op;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-dataflow/src/dataflow/add.js"],"names":["Operator","isFunction","init","update","params","react","shift","op","prototype","rank","connect","parameters","touch"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,SAAQC,UAAR,QAAyB,WAAzB;AAEA;;;;;;;;;;;;;;;;;AAgBA,eAAe,UAASC,IAAT,EAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsC;AACnD,MAAIC,KAAK,GAAG,CAAZ;AAAA,MACEC,EADF;;AAGA,MAAIL,IAAI,YAAYF,QAApB,EAA8B;AAC5BO,IAAAA,EAAE,GAAGL,IAAL;AACD,GAFD,MAEO,IAAIA,IAAI,IAAIA,IAAI,CAACM,SAAL,YAA0BR,QAAtC,EAAgD;AACrDO,IAAAA,EAAE,GAAG,IAAIL,IAAJ,EAAL;AACD,GAFM,MAEA,IAAID,UAAU,CAACC,IAAD,CAAd,EAAsB;AAC3BK,IAAAA,EAAE,GAAG,IAAIP,QAAJ,CAAa,IAAb,EAAmBE,IAAnB,CAAL;AACD,GAFM,MAEA;AACLI,IAAAA,KAAK,GAAG,CAAR;AACAC,IAAAA,EAAE,GAAG,IAAIP,QAAJ,CAAaE,IAAb,EAAmBC,MAAnB,CAAL;AACD;;AAED,OAAKM,IAAL,CAAUF,EAAV;;AACA,MAAID,KAAJ,EAAW;AACTD,IAAAA,KAAK,GAAGD,MAAR;AACAA,IAAAA,MAAM,GAAGD,MAAT;AACD;;AACD,MAAIC,MAAJ,EAAY,KAAKM,OAAL,CAAaH,EAAb,EAAiBA,EAAE,CAACI,UAAH,CAAcP,MAAd,EAAsBC,KAAtB,CAAjB;AACZ,OAAKO,KAAL,CAAWL,EAAX;AAEA,SAAOA,EAAP;AACD","sourcesContent":["import Operator from '../Operator';\nimport {isFunction} from 'vega-util';\n\n/**\n * Add an operator to the dataflow graph. This function accepts a\n * variety of input argument types. The basic signature supports an\n * initial value, update function and parameters. If the first parameter\n * is an Operator instance, it will be added directly. If it is a\n * constructor for an Operator subclass, a new instance will be instantiated.\n * Otherwise, if the first parameter is a function instance, it will be used\n * as the update function and a null initial value is assumed.\n * @param {*} init - One of: the operator to add, the initial value of\n *   the operator, an operator class to instantiate, or an update function.\n * @param {function} [update] - The operator update function.\n * @param {object} [params] - The operator parameters.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @return {Operator} - The added operator.\n */\nexport default function(init, update, params, react) {\n  var shift = 1,\n    op;\n\n  if (init instanceof Operator) {\n    op = init;\n  } else if (init && init.prototype instanceof Operator) {\n    op = new init();\n  } else if (isFunction(init)) {\n    op = new Operator(null, init);\n  } else {\n    shift = 0;\n    op = new Operator(init, update);\n  }\n\n  this.rank(op);\n  if (shift) {\n    react = params;\n    params = update;\n  }\n  if (params) this.connect(op, op.parameters(params, react));\n  this.touch(op);\n\n  return op;\n}\n"]},"metadata":{},"sourceType":"module"}