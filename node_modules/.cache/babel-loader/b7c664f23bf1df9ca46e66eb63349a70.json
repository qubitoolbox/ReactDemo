{"ast":null,"code":"import { isTuple } from 'vega-dataflow';\nimport { isArray, isObject, truthy } from 'vega-util';\n\nfunction equal(a, b) {\n  return a === b || a !== a && b !== b ? true : isArray(a) ? isArray(b) && a.length === b.length ? equalArray(a, b) : false : isObject(a) && isObject(b) ? equalObject(a, b) : false;\n}\n\nfunction equalArray(a, b) {\n  for (let i = 0, n = a.length; i < n; ++i) {\n    if (!equal(a[i], b[i])) return false;\n  }\n\n  return true;\n}\n\nfunction equalObject(a, b) {\n  for (let key in a) {\n    if (!equal(a[key], b[key])) return false;\n  }\n\n  return true;\n}\n\nfunction removePredicate(props) {\n  return _ => equalObject(props, _);\n}\n\nexport default function (name, insert, remove, toggle, modify, values) {\n  let df = this.context.dataflow,\n      data = this.context.data[name],\n      input = data.input,\n      changes = data.changes,\n      stamp = df.stamp(),\n      predicate,\n      key;\n\n  if (df._trigger === false || !(input.value.length || insert || toggle)) {\n    // nothing to do!\n    return 0;\n  }\n\n  if (!changes || changes.stamp < stamp) {\n    data.changes = changes = df.changeset();\n    changes.stamp = stamp;\n    df.runAfter(function () {\n      data.modified = true;\n      df.pulse(input, changes).run();\n    }, true, 1);\n  }\n\n  if (remove) {\n    predicate = remove === true ? truthy : isArray(remove) || isTuple(remove) ? remove : removePredicate(remove);\n    changes.remove(predicate);\n  }\n\n  if (insert) {\n    changes.insert(insert);\n  }\n\n  if (toggle) {\n    predicate = removePredicate(toggle);\n\n    if (input.value.some(predicate)) {\n      changes.remove(predicate);\n    } else {\n      changes.insert(toggle);\n    }\n  }\n\n  if (modify) {\n    for (key in values) {\n      changes.modify(modify, key, values[key]);\n    }\n  }\n\n  return 1;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-functions/src/modify.js"],"names":["isTuple","isArray","isObject","truthy","equal","a","b","length","equalArray","equalObject","i","n","key","removePredicate","props","_","name","insert","remove","toggle","modify","values","df","context","dataflow","data","input","changes","stamp","predicate","_trigger","value","changeset","runAfter","modified","pulse","run","some"],"mappings":"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","sourcesContent":["import {isTuple} from 'vega-dataflow';\nimport {isArray, isObject, truthy} from 'vega-util';\n\nfunction equal(a, b) {\n  return a === b || a !== a && b !== b ? true\n    : isArray(a) ? (\n        isArray(b) && a.length === b.length ? equalArray(a, b) : false\n      )\n    : isObject(a) && isObject(b) ? equalObject(a, b)\n    : false;\n}\n\nfunction equalArray(a, b) {\n  for (let i=0, n=a.length; i<n; ++i) {\n    if (!equal(a[i], b[i])) return false;\n  }\n  return true;\n}\n\nfunction equalObject(a, b) {\n  for (let key in a) {\n    if (!equal(a[key], b[key])) return false;\n  }\n  return true;\n}\n\nfunction removePredicate(props) {\n  return _ => equalObject(props, _);\n}\n\nexport default function(name, insert, remove, toggle, modify, values) {\n  let df = this.context.dataflow,\n      data = this.context.data[name],\n      input = data.input,\n      changes = data.changes,\n      stamp = df.stamp(),\n      predicate, key;\n\n  if (df._trigger === false || !(input.value.length || insert || toggle)) {\n    // nothing to do!\n    return 0;\n  }\n\n  if (!changes || changes.stamp < stamp) {\n    data.changes = (changes = df.changeset());\n    changes.stamp = stamp;\n    df.runAfter(function() {\n      data.modified = true;\n      df.pulse(input, changes).run();\n    }, true, 1);\n  }\n\n  if (remove) {\n    predicate = remove === true ? truthy\n      : (isArray(remove) || isTuple(remove)) ? remove\n      : removePredicate(remove);\n    changes.remove(predicate);\n  }\n\n  if (insert) {\n    changes.insert(insert);\n  }\n\n  if (toggle) {\n    predicate = removePredicate(toggle);\n    if (input.value.some(predicate)) {\n      changes.remove(predicate);\n    } else {\n      changes.insert(toggle);\n    }\n  }\n\n  if (modify) {\n    for (key in values) {\n      changes.modify(modify, key, values[key]);\n    }\n  }\n\n  return 1;\n}\n"]},"metadata":{},"sourceType":"module"}