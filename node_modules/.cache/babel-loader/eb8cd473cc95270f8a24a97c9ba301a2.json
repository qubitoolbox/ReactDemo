{"ast":null,"code":"import React from \"react\";\nimport * as tf from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nexport default class NewMl extends React.Component {\n  constructor(props) {\n    super(props);\n    var model = tf.sequential();\n    model.add(tf.layers.dense({\n      units: 1,\n      inputShape: [200]\n    }));\n    model.compile({\n      loss: 'meanSquaredError',\n      optimizer: 'sgd',\n      metrics: ['MAE']\n    });\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n\n    this.train(); //const source = { uri: response.uri }\n  } // Generate some random fake data for demo purpose.\n  // Start model training process.\n\n\n  async train() {\n    const xs = tf.randomUniform([10000, 200]);\n    const ys = tf.randomUniform([10000, 1]);\n    const valXs = tf.randomUniform([1000, 200]);\n    const valYs = tf.randomUniform([1000, 1]);\n    await this.model.fit(xs, ys, {\n      epochs: 100,\n      validationData: [valXs, valYs] // Add the tensorBoard callback here.\n      //callbacks: tf.node.tensorBoard('/tmp/fit_logs_1')\n\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/NewML.js"],"names":["React","tf","mobilenet","NewMl","Component","constructor","props","model","sequential","add","layers","dense","units","inputShape","compile","loss","optimizer","metrics","componentDidMount","ready","train","xs","randomUniform","ys","valXs","valYs","fit","epochs","validationData"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;AAIA,eAAe,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAmC;AAE9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,KAAK,GAAGN,EAAE,CAACO,UAAH,EAAZ;AACAD,IAAAA,KAAK,CAACE,GAAN,CAAUR,EAAE,CAACS,MAAH,CAAUC,KAAV,CAAgB;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,UAAU,EAAE,CAAC,GAAD;AAAxB,KAAhB,CAAV;AACAN,IAAAA,KAAK,CAACO,OAAN,CAAc;AACVC,MAAAA,IAAI,EAAE,kBADI;AAEVC,MAAAA,SAAS,EAAE,KAFD;AAGVC,MAAAA,OAAO,EAAE,CAAC,KAAD;AAHC,KAAd;AAMD;;AAEH,QAAMC,iBAAN,GAA0B;AACtB;AACA,UAAMjB,EAAE,CAACkB,KAAH,EAAN,CAFsB,CAGtB;;AAEA,SAAKC,KAAL,GALsB,CAMtB;AAEH,GAtB6C,CAuB9C;AAIA;;;AACA,QAAMA,KAAN,GAAc;AACV,UAAMC,EAAE,GAAGpB,EAAE,CAACqB,aAAH,CAAiB,CAAC,KAAD,EAAQ,GAAR,CAAjB,CAAX;AACA,UAAMC,EAAE,GAAGtB,EAAE,CAACqB,aAAH,CAAiB,CAAC,KAAD,EAAQ,CAAR,CAAjB,CAAX;AACA,UAAME,KAAK,GAAGvB,EAAE,CAACqB,aAAH,CAAiB,CAAC,IAAD,EAAO,GAAP,CAAjB,CAAd;AACA,UAAMG,KAAK,GAAGxB,EAAE,CAACqB,aAAH,CAAiB,CAAC,IAAD,EAAO,CAAP,CAAjB,CAAd;AACA,UAAM,KAAKf,KAAL,CAAWmB,GAAX,CAAeL,EAAf,EAAmBE,EAAnB,EAAuB;AACzBI,MAAAA,MAAM,EAAE,GADiB;AAEzBC,MAAAA,cAAc,EAAE,CAACJ,KAAD,EAAQC,KAAR,CAFS,CAGzB;AACA;;AAJyB,KAAvB,CAAN;AAMH;;AAvC6C","sourcesContent":["import React from \"react\";\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as mobilenet from '@tensorflow-models/mobilenet';\r\n\r\n\r\n\r\nexport default class NewMl extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var model = tf.sequential();\r\n        model.add(tf.layers.dense({ units: 1, inputShape: [200] }));\r\n        model.compile({\r\n            loss: 'meanSquaredError',\r\n            optimizer: 'sgd',\r\n            metrics: ['MAE']\r\n        })\r\n        \r\n      }\r\n    \r\n    async componentDidMount() {\r\n        // Wait for tf to be ready.\r\n        await tf.ready();\r\n        // Signal to the app that tensorflow.js can now be used.\r\n\r\n        this.train()\r\n        //const source = { uri: response.uri }\r\n\r\n    }\r\n    // Generate some random fake data for demo purpose.\r\n    \r\n\r\n\r\n    // Start model training process.\r\n    async train() {\r\n        const xs = tf.randomUniform([10000, 200]);\r\n        const ys = tf.randomUniform([10000, 1]);\r\n        const valXs = tf.randomUniform([1000, 200]);\r\n        const valYs = tf.randomUniform([1000, 1]);\r\n        await this.model.fit(xs, ys, {\r\n            epochs: 100,\r\n            validationData: [valXs, valYs],\r\n            // Add the tensorBoard callback here.\r\n            //callbacks: tf.node.tensorBoard('/tmp/fit_logs_1')\r\n        });\r\n    }\r\n    \r\n\r\n}"]},"metadata":{},"sourceType":"module"}