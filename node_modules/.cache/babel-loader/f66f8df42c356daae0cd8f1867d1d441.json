{"ast":null,"code":"import { identity } from './accessors';\nimport peek from './peek';\nimport toNumber from './toNumber';\n\nfunction exp(sign) {\n  return function (x) {\n    return sign * Math.exp(x);\n  };\n}\n\nfunction log(sign) {\n  return function (x) {\n    return Math.log(sign * x);\n  };\n}\n\nfunction symlog(c) {\n  return function (x) {\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\n  };\n}\n\nfunction symexp(c) {\n  return function (x) {\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n  };\n}\n\nfunction pow(exponent) {\n  return function (x) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  };\n}\n\nfunction pan(domain, delta, lift, ground) {\n  var d0 = lift(domain[0]),\n      d1 = lift(peek(domain)),\n      dd = (d1 - d0) * delta;\n  return [ground(d0 - dd), ground(d1 - dd)];\n}\n\nexport function panLinear(domain, delta) {\n  return pan(domain, delta, toNumber, identity);\n}\nexport function panLog(domain, delta) {\n  var sign = Math.sign(domain[0]);\n  return pan(domain, delta, log(sign), exp(sign));\n}\nexport function panPow(domain, delta, exponent) {\n  return pan(domain, delta, pow(exponent), pow(1 / exponent));\n}\nexport function panSymlog(domain, delta, constant) {\n  return pan(domain, delta, symlog(constant), symexp(constant));\n}\n\nfunction zoom(domain, anchor, scale, lift, ground) {\n  var d0 = lift(domain[0]),\n      d1 = lift(peek(domain)),\n      da = anchor != null ? lift(anchor) : (d0 + d1) / 2;\n  return [ground(da + (d0 - da) * scale), ground(da + (d1 - da) * scale)];\n}\n\nexport function zoomLinear(domain, anchor, scale) {\n  return zoom(domain, anchor, scale, toNumber, identity);\n}\nexport function zoomLog(domain, anchor, scale) {\n  var sign = Math.sign(domain[0]);\n  return zoom(domain, anchor, scale, log(sign), exp(sign));\n}\nexport function zoomPow(domain, anchor, scale, exponent) {\n  return zoom(domain, anchor, scale, pow(exponent), pow(1 / exponent));\n}\nexport function zoomSymlog(domain, anchor, scale, constant) {\n  return zoom(domain, anchor, scale, symlog(constant), symexp(constant));\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-lite/node_modules/vega-util/src/transform.js"],"names":["identity","peek","toNumber","exp","sign","x","Math","log","symlog","c","log1p","abs","symexp","expm1","pow","exponent","pan","domain","delta","lift","ground","d0","d1","dd","panLinear","panLog","panPow","panSymlog","constant","zoom","anchor","scale","da","zoomLinear","zoomLog","zoomPow","zoomSymlog"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,aAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,GAAT,CAAaC,IAAb,EAAmB;AACjB,SAAO,UAASC,CAAT,EAAY;AAAE,WAAOD,IAAI,GAAGE,IAAI,CAACH,GAAL,CAASE,CAAT,CAAd;AAA4B,GAAjD;AACD;;AAED,SAASE,GAAT,CAAaH,IAAb,EAAmB;AACjB,SAAO,UAASC,CAAT,EAAY;AAAE,WAAOC,IAAI,CAACC,GAAL,CAASH,IAAI,GAAGC,CAAhB,CAAP;AAA4B,GAAjD;AACD;;AAED,SAASG,MAAT,CAAgBC,CAAhB,EAAmB;AACjB,SAAO,UAASJ,CAAT,EAAY;AAAE,WAAOC,IAAI,CAACF,IAAL,CAAUC,CAAV,IAAeC,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,GAAL,CAASN,CAAC,GAAGI,CAAb,CAAX,CAAtB;AAAoD,GAAzE;AACD;;AAED,SAASG,MAAT,CAAgBH,CAAhB,EAAmB;AACjB,SAAO,UAASJ,CAAT,EAAY;AAAE,WAAOC,IAAI,CAACF,IAAL,CAAUC,CAAV,IAAeC,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACK,GAAL,CAASN,CAAT,CAAX,CAAf,GAAyCI,CAAhD;AAAoD,GAAzE;AACD;;AAED,SAASK,GAAT,CAAaC,QAAb,EAAuB;AACrB,SAAO,UAASV,CAAT,EAAY;AACjB,WAAOA,CAAC,GAAG,CAAJ,GAAQ,CAACC,IAAI,CAACQ,GAAL,CAAS,CAACT,CAAV,EAAaU,QAAb,CAAT,GAAkCT,IAAI,CAACQ,GAAL,CAAST,CAAT,EAAYU,QAAZ,CAAzC;AACD,GAFD;AAGD;;AAED,SAASC,GAAT,CAAaC,MAAb,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkCC,MAAlC,EAA0C;AACxC,MAAIC,EAAE,GAAGF,IAAI,CAACF,MAAM,CAAC,CAAD,CAAP,CAAb;AAAA,MACIK,EAAE,GAAGH,IAAI,CAAClB,IAAI,CAACgB,MAAD,CAAL,CADb;AAAA,MAEIM,EAAE,GAAG,CAACD,EAAE,GAAGD,EAAN,IAAYH,KAFrB;AAIA,SAAO,CACLE,MAAM,CAACC,EAAE,GAAGE,EAAN,CADD,EAELH,MAAM,CAACE,EAAE,GAAGC,EAAN,CAFD,CAAP;AAID;;AAED,OAAO,SAASC,SAAT,CAAmBP,MAAnB,EAA2BC,KAA3B,EAAkC;AACvC,SAAOF,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgBhB,QAAhB,EAA0BF,QAA1B,CAAV;AACD;AAED,OAAO,SAASyB,MAAT,CAAgBR,MAAhB,EAAwBC,KAAxB,EAA+B;AACpC,MAAId,IAAI,GAAGE,IAAI,CAACF,IAAL,CAAUa,MAAM,CAAC,CAAD,CAAhB,CAAX;AACA,SAAOD,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgBX,GAAG,CAACH,IAAD,CAAnB,EAA2BD,GAAG,CAACC,IAAD,CAA9B,CAAV;AACD;AAED,OAAO,SAASsB,MAAT,CAAgBT,MAAhB,EAAwBC,KAAxB,EAA+BH,QAA/B,EAAyC;AAC9C,SAAOC,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgBJ,GAAG,CAACC,QAAD,CAAnB,EAA+BD,GAAG,CAAC,IAAEC,QAAH,CAAlC,CAAV;AACD;AAED,OAAO,SAASY,SAAT,CAAmBV,MAAnB,EAA2BC,KAA3B,EAAkCU,QAAlC,EAA4C;AACjD,SAAOZ,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgBV,MAAM,CAACoB,QAAD,CAAtB,EAAkChB,MAAM,CAACgB,QAAD,CAAxC,CAAV;AACD;;AAED,SAASC,IAAT,CAAcZ,MAAd,EAAsBa,MAAtB,EAA8BC,KAA9B,EAAqCZ,IAArC,EAA2CC,MAA3C,EAAmD;AACjD,MAAIC,EAAE,GAAGF,IAAI,CAACF,MAAM,CAAC,CAAD,CAAP,CAAb;AAAA,MACIK,EAAE,GAAGH,IAAI,CAAClB,IAAI,CAACgB,MAAD,CAAL,CADb;AAAA,MAEIe,EAAE,GAAGF,MAAM,IAAI,IAAV,GAAiBX,IAAI,CAACW,MAAD,CAArB,GAAgC,CAACT,EAAE,GAAGC,EAAN,IAAY,CAFrD;AAIA,SAAO,CACLF,MAAM,CAACY,EAAE,GAAG,CAACX,EAAE,GAAGW,EAAN,IAAYD,KAAlB,CADD,EAELX,MAAM,CAACY,EAAE,GAAG,CAACV,EAAE,GAAGU,EAAN,IAAYD,KAAlB,CAFD,CAAP;AAID;;AAED,OAAO,SAASE,UAAT,CAAoBhB,MAApB,EAA4Ba,MAA5B,EAAoCC,KAApC,EAA2C;AAChD,SAAOF,IAAI,CAACZ,MAAD,EAASa,MAAT,EAAiBC,KAAjB,EAAwB7B,QAAxB,EAAkCF,QAAlC,CAAX;AACD;AAED,OAAO,SAASkC,OAAT,CAAiBjB,MAAjB,EAAyBa,MAAzB,EAAiCC,KAAjC,EAAwC;AAC7C,MAAI3B,IAAI,GAAGE,IAAI,CAACF,IAAL,CAAUa,MAAM,CAAC,CAAD,CAAhB,CAAX;AACA,SAAOY,IAAI,CAACZ,MAAD,EAASa,MAAT,EAAiBC,KAAjB,EAAwBxB,GAAG,CAACH,IAAD,CAA3B,EAAmCD,GAAG,CAACC,IAAD,CAAtC,CAAX;AACD;AAED,OAAO,SAAS+B,OAAT,CAAiBlB,MAAjB,EAAyBa,MAAzB,EAAiCC,KAAjC,EAAwChB,QAAxC,EAAkD;AACvD,SAAOc,IAAI,CAACZ,MAAD,EAASa,MAAT,EAAiBC,KAAjB,EAAwBjB,GAAG,CAACC,QAAD,CAA3B,EAAuCD,GAAG,CAAC,IAAEC,QAAH,CAA1C,CAAX;AACD;AAED,OAAO,SAASqB,UAAT,CAAoBnB,MAApB,EAA4Ba,MAA5B,EAAoCC,KAApC,EAA2CH,QAA3C,EAAqD;AAC1D,SAAOC,IAAI,CAACZ,MAAD,EAASa,MAAT,EAAiBC,KAAjB,EAAwBvB,MAAM,CAACoB,QAAD,CAA9B,EAA0ChB,MAAM,CAACgB,QAAD,CAAhD,CAAX;AACD","sourcesContent":["import {identity} from './accessors';\nimport peek from './peek';\nimport toNumber from './toNumber';\n\nfunction exp(sign) {\n  return function(x) { return sign * Math.exp(x); };\n}\n\nfunction log(sign) {\n  return function(x) { return Math.log(sign * x); };\n}\n\nfunction symlog(c) {\n  return function(x) { return Math.sign(x) * Math.log1p(Math.abs(x / c)); };\n}\n\nfunction symexp(c) {\n  return function(x) { return Math.sign(x) * Math.expm1(Math.abs(x)) * c; };\n}\n\nfunction pow(exponent) {\n  return function(x) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  };\n}\n\nfunction pan(domain, delta, lift, ground) {\n  var d0 = lift(domain[0]),\n      d1 = lift(peek(domain)),\n      dd = (d1 - d0) * delta;\n\n  return [\n    ground(d0 - dd),\n    ground(d1 - dd)\n  ];\n}\n\nexport function panLinear(domain, delta) {\n  return pan(domain, delta, toNumber, identity);\n}\n\nexport function panLog(domain, delta) {\n  var sign = Math.sign(domain[0]);\n  return pan(domain, delta, log(sign), exp(sign));\n}\n\nexport function panPow(domain, delta, exponent) {\n  return pan(domain, delta, pow(exponent), pow(1/exponent));\n}\n\nexport function panSymlog(domain, delta, constant) {\n  return pan(domain, delta, symlog(constant), symexp(constant));\n}\n\nfunction zoom(domain, anchor, scale, lift, ground) {\n  var d0 = lift(domain[0]),\n      d1 = lift(peek(domain)),\n      da = anchor != null ? lift(anchor) : (d0 + d1) / 2;\n\n  return [\n    ground(da + (d0 - da) * scale),\n    ground(da + (d1 - da) * scale)\n  ];\n}\n\nexport function zoomLinear(domain, anchor, scale) {\n  return zoom(domain, anchor, scale, toNumber, identity);\n}\n\nexport function zoomLog(domain, anchor, scale) {\n  var sign = Math.sign(domain[0]);\n  return zoom(domain, anchor, scale, log(sign), exp(sign));\n}\n\nexport function zoomPow(domain, anchor, scale, exponent) {\n  return zoom(domain, anchor, scale, pow(exponent), pow(1/exponent));\n}\n\nexport function zoomSymlog(domain, anchor, scale, constant) {\n  return zoom(domain, anchor, scale, symlog(constant), symexp(constant));\n}\n"]},"metadata":{},"sourceType":"module"}