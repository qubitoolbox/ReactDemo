{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst vega_embed_1 = __importDefault(require(\"vega-embed\"));\n\nconst dom_1 = require(\"../util/dom\");\n\nconst utils_1 = require(\"../util/utils\");\n\nconst render_utils_1 = require(\"./render_utils\");\n/**\n * Renders a scatter plot\n *\n * ```js\n * const series1 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 - (Math.random() * 50))\n *   .map((y, x) => ({ x, y, }));\n *\n * const series2 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 - (Math.random() * 150))\n *   .map((y, x) => ({ x, y, }));\n *\n * const series = ['First', 'Second'];\n * const data = { values: [series1, series2], series }\n *\n * const surface = { name: 'Scatterplot', tab: 'Charts' };\n * tfvis.render.scatterplot(surface, data);\n * ```\n *\n */\n\n/** @doc {heading: 'Charts', namespace: 'render'} */\n\n\nfunction scatterplot(container, data, opts = {}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let _values = data.values;\n\n    const _series = data.series == null ? [] : data.series; // Nest data if necessary before further processing\n\n\n    _values = Array.isArray(_values[0]) ? _values : [_values];\n    const values = [];\n\n    _values.forEach((seriesData, i) => {\n      const seriesName = _series[i] != null ? _series[i] : `Series ${i + 1}`;\n      const seriesVals = seriesData.map(v => Object.assign({}, v, {\n        series: seriesName\n      }));\n      values.push(...seriesVals);\n    });\n\n    if (opts.seriesColors != null) {\n      utils_1.assert(opts.seriesColors.length === _values.length, 'Must have an equal number of series colors as there are data series');\n    }\n\n    const drawArea = render_utils_1.getDrawArea(container);\n    const options = Object.assign({}, defaultOpts, opts);\n    const embedOpts = {\n      actions: false,\n      mode: 'vega-lite',\n      defaultStyle: false\n    };\n\n    const xDomain = () => {\n      if (options.zoomToFit) {\n        return {\n          'zero': false\n        };\n      } else if (options.xAxisDomain != null) {\n        return {\n          'domain': options.xAxisDomain\n        };\n      }\n\n      return undefined;\n    };\n\n    const yDomain = () => {\n      if (options.zoomToFit) {\n        return {\n          'zero': false\n        };\n      } else if (options.yAxisDomain != null) {\n        return {\n          'domain': options.yAxisDomain\n        };\n      }\n\n      return undefined;\n    };\n\n    const spec = {\n      'width': options.width || dom_1.getDefaultWidth(drawArea),\n      'height': options.height || dom_1.getDefaultHeight(drawArea),\n      'padding': 0,\n      'autosize': {\n        'type': 'fit',\n        'contains': 'padding',\n        'resize': true\n      },\n      'config': {\n        'axis': {\n          'labelFontSize': options.fontSize,\n          'titleFontSize': options.fontSize\n        },\n        'text': {\n          'fontSize': options.fontSize\n        },\n        'legend': {\n          'labelFontSize': options.fontSize,\n          'titleFontSize': options.fontSize\n        }\n      },\n      'data': {\n        'values': values\n      },\n      'mark': {\n        'type': 'point',\n        'clip': true,\n        'tooltip': {\n          'content': 'data'\n        }\n      },\n      'encoding': {\n        'x': {\n          'field': 'x',\n          'type': options.xType,\n          'title': options.xLabel,\n          'scale': xDomain()\n        },\n        'y': {\n          'field': 'y',\n          'type': options.yType,\n          'title': options.yLabel,\n          'scale': yDomain()\n        },\n        'color': {\n          'field': 'series',\n          'type': 'nominal',\n          'scale': {\n            'range': options.seriesColors\n          }\n        },\n        'shape': {\n          'field': 'series',\n          'type': 'nominal'\n        }\n      }\n    };\n    yield vega_embed_1.default(drawArea, spec, embedOpts);\n    return Promise.resolve();\n  });\n}\n\nexports.scatterplot = scatterplot;\nconst defaultOpts = {\n  xLabel: 'x',\n  yLabel: 'y',\n  xType: 'quantitative',\n  yType: 'quantitative',\n  zoomToFit: false,\n  fontSize: 11\n};","map":{"version":3,"sources":["../../src/render/scatterplot.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,MAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AAGA,MAAA,KAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA;;;AACA,SAAsB,WAAtB,CACI,SADJ,EACyB,IADzB,EAEI,IAAA,GAAsB,EAF1B,EAE4B;;AAC1B,QAAI,OAAO,GAAG,IAAI,CAAC,MAAnB;;AACA,UAAM,OAAO,GAAG,IAAI,CAAC,MAAL,IAAe,IAAf,GAAsB,EAAtB,GAA2B,IAAI,CAAC,MAAhD,C,CAEA;;;AACA,IAAA,OAAO,GAAG,KAAK,CAAC,OAAN,CAAc,OAAO,CAAC,CAAD,CAArB,IAA4B,OAA5B,GAC4B,CAAC,OAAD,CADtC;AAGA,UAAM,MAAM,GAAc,EAA1B;;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,CAAC,UAAD,EAAa,CAAb,KAAkB;AAChC,YAAM,UAAU,GACZ,OAAO,CAAC,CAAD,CAAP,IAAc,IAAd,GAAqB,OAAO,CAAC,CAAD,CAA5B,GAAkC,UAAU,CAAC,GAAG,CAAC,EADrD;AAEA,YAAM,UAAU,GACZ,UAAU,CAAC,GAAX,CAAe,CAAC,IAAI,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,CAAlB,EAAqB;AAAC,QAAA,MAAM,EAAE;AAAT,OAArB,CAApB,CADJ;AAEA,MAAA,MAAM,CAAC,IAAP,CAAY,GAAG,UAAf;AACD,KAND;;AAQA,QAAI,IAAI,CAAC,YAAL,IAAqB,IAAzB,EAA+B;AAC7B,MAAA,OAAA,CAAA,MAAA,CACI,IAAI,CAAC,YAAL,CAAkB,MAAlB,KAA6B,OAAO,CAAC,MADzC,EAEI,qEAFJ;AAGD;;AAED,UAAM,QAAQ,GAAG,cAAA,CAAA,WAAA,CAAY,SAAZ,CAAjB;AACA,UAAM,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,WAAlB,EAA+B,IAA/B,CAAhB;AAEA,UAAM,SAAS,GAAG;AAChB,MAAA,OAAO,EAAE,KADO;AAEhB,MAAA,IAAI,EAAE,WAFU;AAGhB,MAAA,YAAY,EAAE;AAHE,KAAlB;;AAMA,UAAM,OAAO,GAAG,MAAmB;AACjC,UAAI,OAAO,CAAC,SAAZ,EAAuB;AACrB,eAAO;AAAC,kBAAQ;AAAT,SAAP;AACD,OAFD,MAEO,IAAI,OAAO,CAAC,WAAR,IAAuB,IAA3B,EAAiC;AACtC,eAAO;AAAC,oBAAU,OAAO,CAAC;AAAnB,SAAP;AACD;;AACD,aAAO,SAAP;AACD,KAPD;;AASA,UAAM,OAAO,GAAG,MAAmB;AACjC,UAAI,OAAO,CAAC,SAAZ,EAAuB;AACrB,eAAO;AAAC,kBAAQ;AAAT,SAAP;AACD,OAFD,MAEO,IAAI,OAAO,CAAC,WAAR,IAAuB,IAA3B,EAAiC;AACtC,eAAO;AAAC,oBAAU,OAAO,CAAC;AAAnB,SAAP;AACD;;AACD,aAAO,SAAP;AACD,KAPD;;AASA,UAAM,IAAI,GAAsB;AAC9B,eAAS,OAAO,CAAC,KAAR,IAAiB,KAAA,CAAA,eAAA,CAAgB,QAAhB,CADI;AAE9B,gBAAU,OAAO,CAAC,MAAR,IAAkB,KAAA,CAAA,gBAAA,CAAiB,QAAjB,CAFE;AAG9B,iBAAW,CAHmB;AAI9B,kBAAY;AACV,gBAAQ,KADE;AAEV,oBAAY,SAFF;AAGV,kBAAU;AAHA,OAJkB;AAS9B,gBAAU;AACR,gBAAQ;AACN,2BAAiB,OAAO,CAAC,QADnB;AAEN,2BAAiB,OAAO,CAAC;AAFnB,SADA;AAKR,gBAAQ;AAAC,sBAAY,OAAO,CAAC;AAArB,SALA;AAMR,kBAAU;AACR,2BAAiB,OAAO,CAAC,QADjB;AAER,2BAAiB,OAAO,CAAC;AAFjB;AANF,OAToB;AAoB9B,cAAQ;AACN,kBAAU;AADJ,OApBsB;AAuB9B,cAAQ;AACN,gBAAQ,OADF;AAEN,gBAAQ,IAFF;AAGN,mBAAW;AAAC,qBAAW;AAAZ;AAHL,OAvBsB;AA4B9B,kBAAY;AACV,aAAK;AACH,mBAAS,GADN;AAEH,kBAAQ,OAAO,CAAC,KAFb;AAGH,mBAAS,OAAO,CAAC,MAHd;AAIH,mBAAS,OAAO;AAJb,SADK;AAOV,aAAK;AACH,mBAAS,GADN;AAEH,kBAAQ,OAAO,CAAC,KAFb;AAGH,mBAAS,OAAO,CAAC,MAHd;AAIH,mBAAS,OAAO;AAJb,SAPK;AAaV,iBAAS;AACP,mBAAS,QADF;AAEP,kBAAQ,SAFD;AAGP,mBAAS;AACP,qBAAS,OAAO,CAAC;AADV;AAHF,SAbC;AAoBV,iBAAS;AACP,mBAAS,QADF;AAEP,kBAAQ;AAFD;AApBC;AA5BkB,KAAhC;AAuDA,UAAM,YAAA,CAAA,OAAA,CAAM,QAAN,EAAgB,IAAhB,EAAsB,SAAtB,CAAN;AACA,WAAO,OAAO,CAAC,OAAR,EAAP;AACD,G;AAAA;;AA7GD,OAAA,CAAA,WAAA,GAAA,WAAA;AA+GA,MAAM,WAAW,GAAG;AAClB,EAAA,MAAM,EAAE,GADU;AAElB,EAAA,MAAM,EAAE,GAFU;AAGlB,EAAA,KAAK,EAAE,cAHW;AAIlB,EAAA,KAAK,EAAE,cAJW;AAKlB,EAAA,SAAS,EAAE,KALO;AAMlB,EAAA,QAAQ,EAAE;AANQ,CAApB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport embed, {Mode, VisualizationSpec} from 'vega-embed';\n\nimport {Drawable, Point2D, XYPlotData, XYPlotOptions} from '../types';\nimport {getDefaultHeight, getDefaultWidth} from '../util/dom';\nimport {assert} from '../util/utils';\nimport {getDrawArea} from './render_utils';\n\n/**\n * Renders a scatter plot\n *\n * ```js\n * const series1 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 - (Math.random() * 50))\n *   .map((y, x) => ({ x, y, }));\n *\n * const series2 = Array(100).fill(0)\n *   .map(y => Math.random() * 100 - (Math.random() * 150))\n *   .map((y, x) => ({ x, y, }));\n *\n * const series = ['First', 'Second'];\n * const data = { values: [series1, series2], series }\n *\n * const surface = { name: 'Scatterplot', tab: 'Charts' };\n * tfvis.render.scatterplot(surface, data);\n * ```\n *\n */\n/** @doc {heading: 'Charts', namespace: 'render'} */\nexport async function scatterplot(\n    container: Drawable, data: XYPlotData,\n    opts: XYPlotOptions = {}): Promise<void> {\n  let _values = data.values;\n  const _series = data.series == null ? [] : data.series;\n\n  // Nest data if necessary before further processing\n  _values = Array.isArray(_values[0]) ? _values as Point2D[][] :\n                                        [_values] as Point2D[][];\n\n  const values: Point2D[] = [];\n  _values.forEach((seriesData, i) => {\n    const seriesName: string =\n        _series[i] != null ? _series[i] : `Series ${i + 1}`;\n    const seriesVals =\n        seriesData.map(v => Object.assign({}, v, {series: seriesName}));\n    values.push(...seriesVals);\n  });\n\n  if (opts.seriesColors != null) {\n    assert(\n        opts.seriesColors.length === _values.length,\n        'Must have an equal number of series colors as there are data series');\n  }\n\n  const drawArea = getDrawArea(container);\n  const options = Object.assign({}, defaultOpts, opts);\n\n  const embedOpts = {\n    actions: false,\n    mode: 'vega-lite' as Mode,\n    defaultStyle: false,\n  };\n\n  const xDomain = (): {}|undefined => {\n    if (options.zoomToFit) {\n      return {'zero': false};\n    } else if (options.xAxisDomain != null) {\n      return {'domain': options.xAxisDomain};\n    }\n    return undefined;\n  };\n\n  const yDomain = (): {}|undefined => {\n    if (options.zoomToFit) {\n      return {'zero': false};\n    } else if (options.yAxisDomain != null) {\n      return {'domain': options.yAxisDomain};\n    }\n    return undefined;\n  };\n\n  const spec: VisualizationSpec = {\n    'width': options.width || getDefaultWidth(drawArea),\n    'height': options.height || getDefaultHeight(drawArea),\n    'padding': 0,\n    'autosize': {\n      'type': 'fit',\n      'contains': 'padding',\n      'resize': true,\n    },\n    'config': {\n      'axis': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      },\n      'text': {'fontSize': options.fontSize},\n      'legend': {\n        'labelFontSize': options.fontSize,\n        'titleFontSize': options.fontSize,\n      }\n    },\n    'data': {\n      'values': values,\n    },\n    'mark': {\n      'type': 'point',\n      'clip': true,\n      'tooltip': {'content': 'data'},\n    },\n    'encoding': {\n      'x': {\n        'field': 'x',\n        'type': options.xType,\n        'title': options.xLabel,\n        'scale': xDomain(),\n      },\n      'y': {\n        'field': 'y',\n        'type': options.yType,\n        'title': options.yLabel,\n        'scale': yDomain(),\n      },\n      'color': {\n        'field': 'series',\n        'type': 'nominal',\n        'scale': {\n          'range': options.seriesColors,\n        }\n      },\n      'shape': {\n        'field': 'series',\n        'type': 'nominal',\n      }\n    },\n  };\n\n  await embed(drawArea, spec, embedOpts);\n  return Promise.resolve();\n}\n\nconst defaultOpts = {\n  xLabel: 'x',\n  yLabel: 'y',\n  xType: 'quantitative',\n  yType: 'quantitative',\n  zoomToFit: false,\n  fontSize: 11,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}