{"ast":null,"code":"import { AXIS_PARTS, isAxisProperty } from '../../axis';\nimport { isBinned } from '../../bin';\nimport { POSITION_SCALE_CHANNELS, X, Y } from '../../channel';\nimport { isTimeFormatFieldDef, toFieldDefBase } from '../../channeldef';\nimport { contains, getFirstDefined, keys, normalizeAngle } from '../../util';\nimport { mergeTitle, mergeTitleComponent, mergeTitleFieldDefs, numberFormat } from '../common';\nimport { guideEncodeEntry } from '../guide';\nimport { parseGuideResolve } from '../resolve';\nimport { defaultTieBreaker, mergeValuesWithExplicit } from '../split';\nimport { AxisComponent, AXIS_COMPONENT_PROPERTIES } from './component';\nimport { getAxisConfig } from './config';\nimport * as encode from './encode';\nimport * as properties from './properties';\nexport function parseUnitAxes(model) {\n  return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {\n    if (model.component.scales[channel] && model.axis(channel)) {\n      axis[channel] = [parseAxis(channel, model)];\n    }\n\n    return axis;\n  }, {});\n}\nconst OPPOSITE_ORIENT = {\n  bottom: 'top',\n  top: 'bottom',\n  left: 'right',\n  right: 'left'\n};\nexport function parseLayerAxes(model) {\n  var _a;\n\n  const {\n    axes,\n    resolve\n  } = model.component;\n  const axisCount = {\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0\n  };\n\n  for (const child of model.children) {\n    child.parseAxesAndHeaders();\n\n    for (const channel of keys(child.component.axes)) {\n      resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\n\n      if (resolve.axis[channel] === 'shared') {\n        // If the resolve says shared (and has not been overridden)\n        // We will try to merge and see if there is a conflict\n        axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\n\n        if (!axes[channel]) {\n          // If merge returns nothing, there is a conflict so we cannot make the axis shared.\n          // Thus, mark axis as independent and remove the axis component.\n          resolve.axis[channel] = 'independent';\n          delete axes[channel];\n        }\n      }\n    }\n  } // Move axes to layer's axis component and merge shared axes\n\n\n  for (const channel of [X, Y]) {\n    for (const child of model.children) {\n      if (!child.component.axes[channel]) {\n        // skip if the child does not have a particular axis\n        continue;\n      }\n\n      if (resolve.axis[channel] === 'independent') {\n        // If axes are independent, concat the axisComponent array.\n        axes[channel] = (_a = axes[channel], _a !== null && _a !== void 0 ? _a : []).concat(child.component.axes[channel]); // Automatically adjust orient\n\n        for (const axisComponent of child.component.axes[channel]) {\n          const {\n            value: orient,\n            explicit\n          } = axisComponent.getWithExplicit('orient');\n\n          if (axisCount[orient] > 0 && !explicit) {\n            // Change axis orient if the number do not match\n            const oppositeOrient = OPPOSITE_ORIENT[orient];\n\n            if (axisCount[orient] > axisCount[oppositeOrient]) {\n              axisComponent.set('orient', oppositeOrient, false);\n            }\n          }\n\n          axisCount[orient]++; // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?\n        }\n      } // After merging, make sure to remove axes from child\n\n\n      delete child.component.axes[channel];\n    } // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)\n\n\n    if (resolve.axis[channel] === 'independent' && axes[channel] && axes[channel].length > 1) {\n      for (const axisCmpt of axes[channel]) {\n        if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {\n          axisCmpt.implicit.grid = false;\n        }\n      }\n    }\n  }\n}\n\nfunction mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {\n  if (mergedAxisCmpts) {\n    // FIXME: this is a bit wrong once we support multiple axes\n    if (mergedAxisCmpts.length !== childAxisCmpts.length) {\n      return undefined; // Cannot merge axis component with different number of axes.\n    }\n\n    const length = mergedAxisCmpts.length;\n\n    for (let i = 0; i < length; i++) {\n      const merged = mergedAxisCmpts[i];\n      const child = childAxisCmpts[i];\n\n      if (!!merged !== !!child) {\n        return undefined;\n      } else if (merged && child) {\n        const mergedOrient = merged.getWithExplicit('orient');\n        const childOrient = child.getWithExplicit('orient');\n\n        if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n          // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n          // Cannot merge due to inconsistent orient\n          return undefined;\n        } else {\n          mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\n        }\n      }\n    }\n  } else {\n    // For first one, return a copy of the child\n    return childAxisCmpts.map(axisComponent => axisComponent.clone());\n  }\n\n  return mergedAxisCmpts;\n}\n\nfunction mergeAxisComponent(merged, child) {\n  for (const prop of AXIS_COMPONENT_PROPERTIES) {\n    const mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', // Tie breaker function\n    (v1, v2) => {\n      switch (prop) {\n        case 'title':\n          return mergeTitleComponent(v1, v2);\n\n        case 'gridScale':\n          return {\n            explicit: v1.explicit,\n            value: getFirstDefined(v1.value, v2.value)\n          };\n      }\n\n      return defaultTieBreaker(v1, v2, prop, 'axis');\n    });\n    merged.setWithExplicit(prop, mergedValueWithExplicit);\n  }\n\n  return merged;\n}\n\nfunction getFieldDefTitle(model, channel) {\n  const channel2 = channel === 'x' ? 'x2' : 'y2';\n  const fieldDef = model.fieldDef(channel);\n  const fieldDef2 = model.fieldDef(channel2);\n  const title1 = fieldDef ? fieldDef.title : undefined;\n  const title2 = fieldDef2 ? fieldDef2.title : undefined;\n\n  if (title1 && title2) {\n    return mergeTitle(title1, title2);\n  } else if (title1) {\n    return title1;\n  } else if (title2) {\n    return title2;\n  } else if (title1 !== undefined) {\n    // falsy value to disable config\n    return title1;\n  } else if (title2 !== undefined) {\n    // falsy value to disable config\n    return title2;\n  }\n\n  return undefined;\n}\n\nfunction isExplicit(value, property, axis, model, channel) {\n  switch (property) {\n    case 'titleAngle':\n    case 'labelAngle':\n      return value === normalizeAngle(axis[property]);\n\n    case 'values':\n      return !!axis.values;\n    // specified axis.values is already respected, but may get transformed.\n\n    case 'encode':\n      // both VL axis.encoding and axis.labelAngle affect VG axis.encode\n      return !!axis.encoding || !!axis.labelAngle;\n\n    case 'title':\n      // title can be explicit if fieldDef.title is set\n      if (value === getFieldDefTitle(model, channel)) {\n        return true;\n      }\n\n  } // Otherwise, things are explicit if the returned value matches the specified property\n\n\n  return value === axis[property];\n}\n\nfunction parseAxis(channel, model) {\n  var _a;\n\n  const axis = model.axis(channel);\n  const axisComponent = new AxisComponent(); // 1.2. Add properties\n\n  AXIS_COMPONENT_PROPERTIES.forEach(property => {\n    const value = getProperty(property, axis, channel, model);\n\n    if (value !== undefined) {\n      const explicit = isExplicit(value, property, axis, model, channel);\n      const configValue = getAxisConfig(property, model.config, channel, axisComponent.get('orient'), model.getScaleComponent(channel).get('type')); // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\n\n      if (explicit || configValue === undefined) {\n        // Do not apply implicit rule if there is a config value\n        axisComponent.set(property, value, explicit);\n      } else if (contains(['grid', 'orient'], property) && configValue) {\n        // - Grid is an exception because we need to set grid = true to generate another grid axis\n        // - Orient is not an axis config in Vega, so we need to set too.\n        axisComponent.set(property, configValue, false);\n      }\n    }\n  }); // 2) Add guide encode definition groups\n\n  const axisEncoding = (_a = axis.encoding, _a !== null && _a !== void 0 ? _a : {});\n  const axisEncode = AXIS_PARTS.reduce((e, part) => {\n    var _a;\n\n    if (!axisComponent.hasAxisPart(part)) {\n      // No need to create encode for a disabled part.\n      return e;\n    }\n\n    const axisEncodingPart = guideEncodeEntry((_a = axisEncoding[part], _a !== null && _a !== void 0 ? _a : {}), model);\n    const value = part === 'labels' ? encode.labels(model, channel, axisEncodingPart) : axisEncodingPart;\n\n    if (value !== undefined && keys(value).length > 0) {\n      e[part] = {\n        update: value\n      };\n    }\n\n    return e;\n  }, {}); // FIXME: By having encode as one property, we won't have fine grained encode merging.\n\n  if (keys(axisEncode).length > 0) {\n    axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\n  }\n\n  return axisComponent;\n}\n\nfunction getProperty(property, specifiedAxis, channel, model) {\n  const fieldDef = model.fieldDef(channel); // Some properties depend on labelAngle so we have to declare it here.\n  // Also, we don't use `getFirstDefined` for labelAngle\n  // as we want to normalize specified value to be within [0,360)\n\n  const labelAngle = properties.labelAngle(model, specifiedAxis, channel, fieldDef);\n  const orient = getFirstDefined(specifiedAxis.orient, properties.orient(channel));\n  const {\n    mark,\n    config\n  } = model;\n\n  switch (property) {\n    case 'scale':\n      return model.scaleName(channel);\n\n    case 'gridScale':\n      return properties.gridScale(model, channel);\n\n    case 'format':\n      // We don't include temporal field here as we apply format in encode block\n      if (isTimeFormatFieldDef(fieldDef)) {\n        return undefined;\n      }\n\n      return numberFormat(fieldDef, specifiedAxis.format, config);\n\n    case 'formatType':\n      // As with format, we don't include temporal field here as we apply format in encode block\n      if (isTimeFormatFieldDef(fieldDef)) {\n        return undefined;\n      }\n\n      return specifiedAxis.formatType;\n\n    case 'grid':\n      {\n        if (isBinned(model.fieldDef(channel).bin)) {\n          return false;\n        } else {\n          const scaleType = model.getScaleComponent(channel).get('type');\n          return getFirstDefined(specifiedAxis.grid, properties.defaultGrid(scaleType, fieldDef));\n        }\n      }\n\n    case 'labelAlign':\n      return getFirstDefined(specifiedAxis.labelAlign, properties.defaultLabelAlign(labelAngle, orient));\n\n    case 'labelAngle':\n      return labelAngle;\n\n    case 'labelBaseline':\n      return getFirstDefined(specifiedAxis.labelBaseline, properties.defaultLabelBaseline(labelAngle, orient));\n\n    case 'labelFlush':\n      return getFirstDefined(specifiedAxis.labelFlush, properties.defaultLabelFlush(fieldDef, channel));\n\n    case 'labelOverlap':\n      {\n        const scaleType = model.getScaleComponent(channel).get('type');\n        return getFirstDefined(specifiedAxis.labelOverlap, properties.defaultLabelOverlap(fieldDef, scaleType));\n      }\n\n    case 'orient':\n      return orient;\n\n    case 'tickCount':\n      {\n        const scaleType = model.getScaleComponent(channel).get('type');\n        const sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n        const size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;\n        return getFirstDefined(specifiedAxis.tickCount, properties.defaultTickCount({\n          fieldDef,\n          scaleType,\n          size\n        }));\n      }\n\n    case 'title':\n      {\n        const channel2 = channel === 'x' ? 'x2' : 'y2';\n        const fieldDef2 = model.fieldDef(channel2); // Keep undefined so we use default if title is unspecified.\n        // For other falsy value, keep them so we will hide the title.\n\n        return getFirstDefined(specifiedAxis.title, getFieldDefTitle(model, channel), // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)\n        mergeTitleFieldDefs([toFieldDefBase(fieldDef)], fieldDef2 ? [toFieldDefBase(fieldDef2)] : []));\n      }\n\n    case 'values':\n      return properties.values(specifiedAxis, model, fieldDef);\n\n    case 'zindex':\n      return getFirstDefined(specifiedAxis.zindex, properties.defaultZindex(mark, fieldDef));\n  } // Otherwise, return specified property.\n\n\n  return isAxisProperty(property) ? specifiedAxis[property] : undefined;\n}","map":{"version":3,"sources":["../../../../src/compile/axis/parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {AxisEncode as VgAxisEncode, AxisOrient, SignalRef, Text} from 'vega';\nimport {Axis, AXIS_PARTS, isAxisProperty} from '../../axis';\nimport {isBinned} from '../../bin';\nimport {PositionScaleChannel, POSITION_SCALE_CHANNELS, X, Y} from '../../channel';\nimport {FieldDefBase, isTimeFormatFieldDef, toFieldDefBase} from '../../channeldef';\nimport {contains, getFirstDefined, keys, normalizeAngle} from '../../util';\nimport {mergeTitle, mergeTitleComponent, mergeTitleFieldDefs, numberFormat} from '../common';\nimport {guideEncodeEntry} from '../guide';\nimport {LayerModel} from '../layer';\nimport {parseGuideResolve} from '../resolve';\nimport {defaultTieBreaker, Explicit, mergeValuesWithExplicit} from '../split';\nimport {UnitModel} from '../unit';\nimport {AxisComponent, AxisComponentIndex, AxisComponentProps, AXIS_COMPONENT_PROPERTIES} from './component';\nimport {getAxisConfig} from './config';\nimport * as encode from './encode';\nimport * as properties from './properties';\n\nexport function parseUnitAxes(model: UnitModel): AxisComponentIndex {\n  return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {\n    if (model.component.scales[channel] && model.axis(channel)) {\n      axis[channel] = [parseAxis(channel, model)];\n    }\n    return axis;\n  }, {} as AxisComponentIndex);\n}\n\nconst OPPOSITE_ORIENT: {[K in AxisOrient]: AxisOrient} = {\n  bottom: 'top',\n  top: 'bottom',\n  left: 'right',\n  right: 'left'\n};\n\nexport function parseLayerAxes(model: LayerModel) {\n  const {axes, resolve} = model.component;\n  const axisCount: {\n    // Using Mapped Type to declare type (https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)\n    [k in AxisOrient]: number;\n  } = {top: 0, bottom: 0, right: 0, left: 0};\n\n  for (const child of model.children) {\n    child.parseAxesAndHeaders();\n\n    for (const channel of keys(child.component.axes)) {\n      resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\n      if (resolve.axis[channel] === 'shared') {\n        // If the resolve says shared (and has not been overridden)\n        // We will try to merge and see if there is a conflict\n\n        axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\n\n        if (!axes[channel]) {\n          // If merge returns nothing, there is a conflict so we cannot make the axis shared.\n          // Thus, mark axis as independent and remove the axis component.\n          resolve.axis[channel] = 'independent';\n          delete axes[channel];\n        }\n      }\n    }\n  }\n\n  // Move axes to layer's axis component and merge shared axes\n  for (const channel of [X, Y]) {\n    for (const child of model.children) {\n      if (!child.component.axes[channel]) {\n        // skip if the child does not have a particular axis\n        continue;\n      }\n\n      if (resolve.axis[channel] === 'independent') {\n        // If axes are independent, concat the axisComponent array.\n        axes[channel] = (axes[channel] ?? []).concat(child.component.axes[channel]);\n\n        // Automatically adjust orient\n        for (const axisComponent of child.component.axes[channel]) {\n          const {value: orient, explicit} = axisComponent.getWithExplicit('orient');\n          if (axisCount[orient] > 0 && !explicit) {\n            // Change axis orient if the number do not match\n            const oppositeOrient = OPPOSITE_ORIENT[orient];\n            if (axisCount[orient] > axisCount[oppositeOrient]) {\n              axisComponent.set('orient', oppositeOrient, false);\n            }\n          }\n          axisCount[orient]++;\n\n          // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?\n        }\n      }\n\n      // After merging, make sure to remove axes from child\n      delete child.component.axes[channel];\n    }\n\n    // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)\n    if (resolve.axis[channel] === 'independent' && axes[channel] && axes[channel].length > 1) {\n      for (const axisCmpt of axes[channel]) {\n        if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {\n          axisCmpt.implicit.grid = false;\n        }\n      }\n    }\n  }\n}\n\nfunction mergeAxisComponents(\n  mergedAxisCmpts: AxisComponent[],\n  childAxisCmpts: readonly AxisComponent[]\n): AxisComponent[] {\n  if (mergedAxisCmpts) {\n    // FIXME: this is a bit wrong once we support multiple axes\n    if (mergedAxisCmpts.length !== childAxisCmpts.length) {\n      return undefined; // Cannot merge axis component with different number of axes.\n    }\n    const length = mergedAxisCmpts.length;\n    for (let i = 0; i < length; i++) {\n      const merged = mergedAxisCmpts[i];\n      const child = childAxisCmpts[i];\n\n      if (!!merged !== !!child) {\n        return undefined;\n      } else if (merged && child) {\n        const mergedOrient = merged.getWithExplicit('orient');\n        const childOrient = child.getWithExplicit('orient');\n\n        if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n          // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n\n          // Cannot merge due to inconsistent orient\n          return undefined;\n        } else {\n          mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\n        }\n      }\n    }\n  } else {\n    // For first one, return a copy of the child\n    return childAxisCmpts.map(axisComponent => axisComponent.clone());\n  }\n  return mergedAxisCmpts;\n}\n\nfunction mergeAxisComponent(merged: AxisComponent, child: AxisComponent): AxisComponent {\n  for (const prop of AXIS_COMPONENT_PROPERTIES) {\n    const mergedValueWithExplicit = mergeValuesWithExplicit<AxisComponentProps, any>(\n      merged.getWithExplicit(prop),\n      child.getWithExplicit(prop),\n      prop,\n      'axis',\n\n      // Tie breaker function\n      (v1: Explicit<any>, v2: Explicit<any>) => {\n        switch (prop) {\n          case 'title':\n            return mergeTitleComponent(v1, v2);\n          case 'gridScale':\n            return {\n              explicit: v1.explicit, // keep the old explicit\n              value: getFirstDefined(v1.value, v2.value)\n            };\n        }\n        return defaultTieBreaker<AxisComponentProps, any>(v1, v2, prop, 'axis');\n      }\n    );\n    merged.setWithExplicit(prop, mergedValueWithExplicit);\n  }\n  return merged;\n}\n\nfunction getFieldDefTitle(model: UnitModel, channel: 'x' | 'y') {\n  const channel2 = channel === 'x' ? 'x2' : 'y2';\n  const fieldDef = model.fieldDef(channel);\n  const fieldDef2 = model.fieldDef(channel2);\n\n  const title1 = fieldDef ? fieldDef.title : undefined;\n  const title2 = fieldDef2 ? fieldDef2.title : undefined;\n\n  if (title1 && title2) {\n    return mergeTitle(title1, title2);\n  } else if (title1) {\n    return title1;\n  } else if (title2) {\n    return title2;\n  } else if (title1 !== undefined) {\n    // falsy value to disable config\n    return title1;\n  } else if (title2 !== undefined) {\n    // falsy value to disable config\n    return title2;\n  }\n\n  return undefined;\n}\n\nfunction isExplicit<T extends string | number | boolean | object>(\n  value: T,\n  property: keyof AxisComponentProps,\n  axis: Axis,\n  model: UnitModel,\n  channel: PositionScaleChannel\n) {\n  switch (property) {\n    case 'titleAngle':\n    case 'labelAngle':\n      return value === normalizeAngle(axis[property]);\n    case 'values':\n      return !!axis.values;\n    // specified axis.values is already respected, but may get transformed.\n    case 'encode':\n      // both VL axis.encoding and axis.labelAngle affect VG axis.encode\n      return !!axis.encoding || !!axis.labelAngle;\n    case 'title':\n      // title can be explicit if fieldDef.title is set\n      if (value === getFieldDefTitle(model, channel)) {\n        return true;\n      }\n  }\n  // Otherwise, things are explicit if the returned value matches the specified property\n  return value === axis[property];\n}\n\nfunction parseAxis(channel: PositionScaleChannel, model: UnitModel): AxisComponent {\n  const axis = model.axis(channel);\n\n  const axisComponent = new AxisComponent();\n\n  // 1.2. Add properties\n  AXIS_COMPONENT_PROPERTIES.forEach(property => {\n    const value = getProperty(property, axis, channel, model);\n    if (value !== undefined) {\n      const explicit = isExplicit(value, property, axis, model, channel);\n\n      const configValue = getAxisConfig(\n        property,\n        model.config,\n        channel,\n        axisComponent.get('orient'),\n        model.getScaleComponent(channel).get('type')\n      );\n\n      // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\n      if (explicit || configValue === undefined) {\n        // Do not apply implicit rule if there is a config value\n        axisComponent.set(property, value, explicit);\n      } else if (contains(['grid', 'orient'], property) && configValue) {\n        // - Grid is an exception because we need to set grid = true to generate another grid axis\n        // - Orient is not an axis config in Vega, so we need to set too.\n        axisComponent.set(property, configValue, false);\n      }\n    }\n  });\n\n  // 2) Add guide encode definition groups\n  const axisEncoding = axis.encoding ?? {};\n  const axisEncode = AXIS_PARTS.reduce((e: VgAxisEncode, part) => {\n    if (!axisComponent.hasAxisPart(part)) {\n      // No need to create encode for a disabled part.\n      return e;\n    }\n\n    const axisEncodingPart = guideEncodeEntry(axisEncoding[part] ?? {}, model);\n\n    const value = part === 'labels' ? encode.labels(model, channel, axisEncodingPart) : axisEncodingPart;\n\n    if (value !== undefined && keys(value).length > 0) {\n      e[part] = {update: value};\n    }\n    return e;\n  }, {} as VgAxisEncode);\n\n  // FIXME: By having encode as one property, we won't have fine grained encode merging.\n  if (keys(axisEncode).length > 0) {\n    axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\n  }\n\n  return axisComponent;\n}\n\nfunction getProperty<K extends keyof AxisComponentProps>(\n  property: K,\n  specifiedAxis: Axis,\n  channel: PositionScaleChannel,\n  model: UnitModel\n): AxisComponentProps[K] {\n  const fieldDef = model.fieldDef(channel);\n\n  // Some properties depend on labelAngle so we have to declare it here.\n  // Also, we don't use `getFirstDefined` for labelAngle\n  // as we want to normalize specified value to be within [0,360)\n  const labelAngle = properties.labelAngle(model, specifiedAxis, channel, fieldDef);\n  const orient = getFirstDefined(specifiedAxis.orient, properties.orient(channel));\n\n  const {mark, config} = model;\n\n  switch (property) {\n    case 'scale':\n      return model.scaleName(channel) as AxisComponentProps[K];\n    case 'gridScale':\n      return properties.gridScale(model, channel) as AxisComponentProps[K];\n    case 'format':\n      // We don't include temporal field here as we apply format in encode block\n      if (isTimeFormatFieldDef(fieldDef)) {\n        return undefined;\n      }\n      return numberFormat(fieldDef, specifiedAxis.format, config) as AxisComponentProps[K];\n    case 'formatType':\n      // As with format, we don't include temporal field here as we apply format in encode block\n      if (isTimeFormatFieldDef(fieldDef)) {\n        return undefined;\n      }\n      return specifiedAxis.formatType as AxisComponentProps[K];\n    case 'grid': {\n      if (isBinned(model.fieldDef(channel).bin)) {\n        return false as AxisComponentProps[K];\n      } else {\n        const scaleType = model.getScaleComponent(channel).get('type');\n        return getFirstDefined(\n          specifiedAxis.grid,\n          properties.defaultGrid(scaleType, fieldDef)\n        ) as AxisComponentProps[K];\n      }\n    }\n    case 'labelAlign':\n      return getFirstDefined(\n        specifiedAxis.labelAlign,\n        properties.defaultLabelAlign(labelAngle, orient)\n      ) as AxisComponentProps[K];\n    case 'labelAngle':\n      return labelAngle as AxisComponentProps[K];\n    case 'labelBaseline':\n      return getFirstDefined(\n        specifiedAxis.labelBaseline,\n        properties.defaultLabelBaseline(labelAngle, orient)\n      ) as AxisComponentProps[K];\n    case 'labelFlush':\n      return getFirstDefined(\n        specifiedAxis.labelFlush,\n        properties.defaultLabelFlush(fieldDef, channel)\n      ) as AxisComponentProps[K];\n    case 'labelOverlap': {\n      const scaleType = model.getScaleComponent(channel).get('type');\n      return getFirstDefined(\n        specifiedAxis.labelOverlap,\n        properties.defaultLabelOverlap(fieldDef, scaleType)\n      ) as AxisComponentProps[K];\n    }\n    case 'orient':\n      return orient as AxisComponentProps[K];\n    case 'tickCount': {\n      const scaleType = model.getScaleComponent(channel).get('type');\n      const sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n      const size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;\n      return getFirstDefined<number | SignalRef>(\n        specifiedAxis.tickCount,\n        properties.defaultTickCount({fieldDef, scaleType, size})\n      ) as AxisComponentProps[K];\n    }\n    case 'title': {\n      const channel2 = channel === 'x' ? 'x2' : 'y2';\n      const fieldDef2 = model.fieldDef(channel2);\n      // Keep undefined so we use default if title is unspecified.\n      // For other falsy value, keep them so we will hide the title.\n      return getFirstDefined<Text | FieldDefBase<string>[]>(\n        specifiedAxis.title,\n        getFieldDefTitle(model, channel), // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)\n        mergeTitleFieldDefs([toFieldDefBase(fieldDef)], fieldDef2 ? [toFieldDefBase(fieldDef2)] : [])\n      ) as AxisComponentProps[K];\n    }\n    case 'values':\n      return properties.values(specifiedAxis, model, fieldDef) as AxisComponentProps[K];\n    case 'zindex':\n      return getFirstDefined(specifiedAxis.zindex, properties.defaultZindex(mark, fieldDef)) as AxisComponentProps[K];\n  }\n  // Otherwise, return specified property.\n  return isAxisProperty(property) ? (specifiedAxis[property] as AxisComponentProps[K]) : undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}