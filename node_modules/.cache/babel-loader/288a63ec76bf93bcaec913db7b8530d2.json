{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as d3 from 'd3-selection';\nimport deepmerge from 'deepmerge';\nimport stringify from 'json-stringify-pretty-compact';\nimport { satisfies } from 'semver';\nimport * as vegaImport from 'vega';\nimport { isBoolean } from 'vega';\nimport * as vegaLiteImport from 'vega-lite';\nimport schemaParser from 'vega-schema-url-parser';\nimport * as themes from 'vega-themes';\nimport { Handler } from 'vega-tooltip';\nimport post from './post';\nimport embedStyle from './style';\nexport const vega = vegaImport;\nexport let vegaLite = vegaLiteImport; // For backwards compatibility with Vega-Lite before v4.\n\nconst w = window;\n\nif (vegaLite === undefined && w['vl'] && w['vl'].compile) {\n  vegaLite = w['vl'];\n}\n\nconst I18N = {\n  CLICK_TO_VIEW_ACTIONS: 'Click to view actions',\n  COMPILED_ACTION: 'View Compiled Vega',\n  EDITOR_ACTION: 'Open in Vega Editor',\n  PNG_ACTION: 'Save as PNG',\n  SOURCE_ACTION: 'View Source',\n  SVG_ACTION: 'Save as SVG'\n};\nconst NAMES = {\n  vega: 'Vega',\n  'vega-lite': 'Vega-Lite'\n};\nconst VERSION = {\n  vega: vega.version,\n  'vega-lite': vegaLite ? vegaLite.version : 'not available'\n};\nconst PREPROCESSOR = {\n  vega: vgSpec => vgSpec,\n  'vega-lite': (vlSpec, config) => vegaLite.compile(vlSpec, {\n    config: config\n  }).spec\n};\nconst SVG_CIRCLES = `\n<svg viewBox=\"0 0 16 16\" fill=\"currentColor\" stroke=\"none\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n  <circle r=\"2\" cy=\"8\" cx=\"2\"></circle>\n  <circle r=\"2\" cy=\"8\" cx=\"8\"></circle>\n  <circle r=\"2\" cy=\"8\" cx=\"14\"></circle>\n</svg>`;\n\nfunction isTooltipHandler(h) {\n  return typeof h === 'function';\n}\n\nfunction viewSource(source, sourceHeader, sourceFooter, mode) {\n  const header = `<html><head>${sourceHeader}</head><body><pre><code class=\"json\">`;\n  const footer = `</code></pre>${sourceFooter}</body></html>`;\n  const win = window.open('');\n  win.document.write(header + source + footer);\n  win.document.title = `${NAMES[mode]} JSON Source`;\n}\n/**\n * Try to guess the type of spec.\n *\n * @param spec Vega or Vega-Lite spec.\n */\n\n\nexport function guessMode(spec, providedMode) {\n  // Decide mode\n  if (spec.$schema) {\n    const parsed = schemaParser(spec.$schema);\n\n    if (providedMode && providedMode !== parsed.library) {\n      console.warn(`The given visualization spec is written in ${NAMES[parsed.library]}, but mode argument sets ${NAMES[providedMode] || providedMode}.`);\n    }\n\n    const mode = parsed.library;\n\n    if (!satisfies(VERSION[mode], `^${parsed.version.slice(1)}`)) {\n      console.warn(`The input spec uses ${NAMES[mode]} ${parsed.version}, but the current version of ${NAMES[mode]} is v${VERSION[mode]}.`);\n    }\n\n    return mode;\n  } // try to guess from the provided spec\n\n\n  if ('mark' in spec || 'encoding' in spec || 'layer' in spec || 'hconcat' in spec || 'vconcat' in spec || 'facet' in spec || 'repeat' in spec) {\n    return 'vega-lite';\n  }\n\n  if ('marks' in spec || 'signals' in spec || 'scales' in spec || 'axes' in spec) {\n    return 'vega';\n  }\n\n  return providedMode || 'vega';\n}\n\nfunction isLoader(o) {\n  return !!(o && 'load' in o);\n}\n/**\n * Embed a Vega visualization component in a web page. This function returns a promise.\n *\n * @param el        DOM element in which to place component (DOM node or CSS selector).\n * @param spec      String : A URL string from which to load the Vega specification.\n *                  Object : The Vega/Vega-Lite specification as a parsed JSON object.\n * @param opt       A JavaScript object containing options for embedding.\n */\n\n\nexport default function embed(el, spec, opt = {}) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const loader = isLoader(opt.loader) ? opt.loader : vega.loader(opt.loader); // Load the visualization specification.\n\n    if (vega.isString(spec)) {\n      const data = yield loader.load(spec);\n      return embed(el, JSON.parse(data), opt);\n    }\n\n    opt = deepmerge(opt, spec.usermeta && spec.usermeta['embedOptions'] || {}); // Load Vega theme/configuration.\n\n    let config = opt.config || {};\n\n    if (vega.isString(config)) {\n      const data = yield loader.load(config);\n      return embed(el, spec, Object.assign(Object.assign({}, opt), {\n        config: JSON.parse(data)\n      }));\n    }\n\n    const actions = isBoolean(opt.actions) ? opt.actions : deepmerge({\n      export: {\n        svg: true,\n        png: true\n      },\n      source: true,\n      compiled: true,\n      editor: true\n    }, opt.actions || {});\n    const i18n = Object.assign(Object.assign({}, I18N), opt.i18n);\n    const renderer = opt.renderer || 'canvas';\n    const logLevel = opt.logLevel || vega.Warn;\n    const downloadFileName = opt.downloadFileName || 'visualization';\n\n    if (opt.defaultStyle !== false) {\n      // Add a default stylesheet to the head of the document.\n      const ID = 'vega-embed-style';\n\n      if (!document.getElementById(ID)) {\n        const style = document.createElement('style');\n        style.id = ID;\n        style.innerText = opt.defaultStyle === undefined || opt.defaultStyle === true ? (embedStyle || '').toString() : opt.defaultStyle;\n        document.head.appendChild(style);\n      }\n    }\n\n    if (opt.theme) {\n      config = deepmerge(themes[opt.theme], config);\n    }\n\n    const mode = guessMode(spec, opt.mode);\n    let vgSpec = PREPROCESSOR[mode](spec, config);\n\n    if (mode === 'vega-lite') {\n      if (vgSpec.$schema) {\n        const parsed = schemaParser(vgSpec.$schema);\n\n        if (!satisfies(VERSION.vega, `^${parsed.version.slice(1)}`)) {\n          console.warn(`The compiled spec uses Vega ${parsed.version}, but current version is v${VERSION.vega}.`);\n        }\n      }\n    } // ensure container div has class 'vega-embed'\n\n\n    const div = d3.select(el) // d3.select supports elements and strings\n    .classed('vega-embed', true).html(''); // clear container\n\n    const patch = opt.patch;\n\n    if (patch) {\n      if (patch instanceof Function) {\n        vgSpec = patch(vgSpec);\n      } else if (vega.isString(patch)) {\n        const patchString = yield loader.load(patch); // eslint-disable-next-line require-atomic-updates\n\n        vgSpec = deepmerge(vgSpec, JSON.parse(patchString));\n      } else {\n        vgSpec = deepmerge(vgSpec, patch);\n      }\n    } // Do not apply the config to Vega when we have already applied it to Vega-Lite.\n    // This call may throw an Error if parsing fails.\n\n\n    const runtime = vega.parse(vgSpec, mode === 'vega-lite' ? {} : config);\n    const view = new vega.View(runtime, {\n      loader,\n      logLevel,\n      renderer\n    });\n\n    if (opt.tooltip !== false) {\n      let handler;\n\n      if (isTooltipHandler(opt.tooltip)) {\n        handler = opt.tooltip;\n      } else {\n        // user provided boolean true or tooltip options\n        handler = new Handler(opt.tooltip === true ? {} : opt.tooltip).call;\n      }\n\n      view.tooltip(handler);\n    }\n\n    let {\n      hover\n    } = opt;\n\n    if (hover === undefined) {\n      hover = mode === 'vega';\n    }\n\n    if (hover) {\n      const {\n        hoverSet,\n        updateSet\n      } = typeof hover === 'boolean' ? {} : hover;\n      view.hover(hoverSet, updateSet);\n    }\n\n    if (opt) {\n      if (opt.width) {\n        view.width(opt.width);\n      }\n\n      if (opt.height) {\n        view.height(opt.height);\n      }\n\n      if (opt.padding) {\n        view.padding(opt.padding);\n      }\n    }\n\n    yield view.initialize(el).runAsync();\n\n    if (actions !== false) {\n      let wrapper = div;\n\n      if (opt.defaultStyle !== false) {\n        const details = div.append('details').attr('title', i18n.CLICK_TO_VIEW_ACTIONS);\n        wrapper = details;\n        const summary = details.insert('summary');\n        summary.html(SVG_CIRCLES);\n        const dn = details.node();\n        document.addEventListener('click', evt => {\n          if (!dn.contains(evt.target)) {\n            dn.removeAttribute('open');\n          }\n        });\n      }\n\n      const ctrl = wrapper.insert('div').attr('class', 'vega-actions'); // add 'Export' action\n\n      if (actions === true || actions.export !== false) {\n        for (const ext of ['svg', 'png']) {\n          if (actions === true || actions.export === true || actions.export[ext]) {\n            const i18nExportAction = i18n[`${ext.toUpperCase()}_ACTION`];\n            ctrl.append('a').text(i18nExportAction).attr('href', '#').attr('target', '_blank').attr('download', `${downloadFileName}.${ext}`) // eslint-disable-next-line func-names\n            .on('mousedown', function () {\n              view.toImageURL(ext, opt.scaleFactor).then(url => {\n                this.href = url;\n              }).catch(error => {\n                throw error;\n              });\n              d3.event.preventDefault();\n            });\n          }\n        }\n      } // add 'View Source' action\n\n\n      if (actions === true || actions.source !== false) {\n        ctrl.append('a').text(i18n.SOURCE_ACTION).attr('href', '#').on('mousedown', () => {\n          viewSource(stringify(spec), opt.sourceHeader || '', opt.sourceFooter || '', mode);\n          d3.event.preventDefault();\n        });\n      } // add 'View Compiled' action\n\n\n      if (mode === 'vega-lite' && (actions === true || actions.compiled !== false)) {\n        ctrl.append('a').text(i18n.COMPILED_ACTION).attr('href', '#').on('mousedown', () => {\n          viewSource(stringify(vgSpec), opt.sourceHeader || '', opt.sourceFooter || '', 'vega');\n          d3.event.preventDefault();\n        });\n      } // add 'Open in Vega Editor' action\n\n\n      if (actions === true || actions.editor !== false) {\n        const editorUrl = opt.editorUrl || 'https://vega.github.io/editor/';\n        ctrl.append('a').text(i18n.EDITOR_ACTION).attr('href', '#').on('mousedown', () => {\n          post(window, editorUrl, {\n            config: config,\n            mode,\n            renderer,\n            spec: stringify(spec)\n          });\n          d3.event.preventDefault();\n        });\n      }\n    }\n\n    return {\n      view,\n      spec,\n      vgSpec\n    };\n  });\n}","map":{"version":3,"sources":["../../src/embed.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport * as d3 from 'd3-selection';\nimport deepmerge from 'deepmerge';\nimport stringify from 'json-stringify-pretty-compact';\nimport { satisfies } from 'semver';\nimport * as vegaImport from 'vega';\nimport { isBoolean } from 'vega';\nimport * as vegaLiteImport from 'vega-lite';\nimport schemaParser from 'vega-schema-url-parser';\nimport * as themes from 'vega-themes';\nimport { Handler } from 'vega-tooltip';\nimport post from './post';\nimport embedStyle from './style';\nexport const vega = vegaImport;\nexport let vegaLite = vegaLiteImport;\n// For backwards compatibility with Vega-Lite before v4.\nconst w = window;\nif (vegaLite === undefined && w['vl'] && w['vl'].compile) {\n    vegaLite = w['vl'];\n}\nconst I18N = {\n    CLICK_TO_VIEW_ACTIONS: 'Click to view actions',\n    COMPILED_ACTION: 'View Compiled Vega',\n    EDITOR_ACTION: 'Open in Vega Editor',\n    PNG_ACTION: 'Save as PNG',\n    SOURCE_ACTION: 'View Source',\n    SVG_ACTION: 'Save as SVG'\n};\nconst NAMES = {\n    vega: 'Vega',\n    'vega-lite': 'Vega-Lite'\n};\nconst VERSION = {\n    vega: vega.version,\n    'vega-lite': vegaLite ? vegaLite.version : 'not available'\n};\nconst PREPROCESSOR = {\n    vega: vgSpec => vgSpec,\n    'vega-lite': (vlSpec, config) => vegaLite.compile(vlSpec, { config: config }).spec\n};\nconst SVG_CIRCLES = `\n<svg viewBox=\"0 0 16 16\" fill=\"currentColor\" stroke=\"none\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n  <circle r=\"2\" cy=\"8\" cx=\"2\"></circle>\n  <circle r=\"2\" cy=\"8\" cx=\"8\"></circle>\n  <circle r=\"2\" cy=\"8\" cx=\"14\"></circle>\n</svg>`;\nfunction isTooltipHandler(h) {\n    return typeof h === 'function';\n}\nfunction viewSource(source, sourceHeader, sourceFooter, mode) {\n    const header = `<html><head>${sourceHeader}</head><body><pre><code class=\"json\">`;\n    const footer = `</code></pre>${sourceFooter}</body></html>`;\n    const win = window.open('');\n    win.document.write(header + source + footer);\n    win.document.title = `${NAMES[mode]} JSON Source`;\n}\n/**\n * Try to guess the type of spec.\n *\n * @param spec Vega or Vega-Lite spec.\n */\nexport function guessMode(spec, providedMode) {\n    // Decide mode\n    if (spec.$schema) {\n        const parsed = schemaParser(spec.$schema);\n        if (providedMode && providedMode !== parsed.library) {\n            console.warn(`The given visualization spec is written in ${NAMES[parsed.library]}, but mode argument sets ${NAMES[providedMode] || providedMode}.`);\n        }\n        const mode = parsed.library;\n        if (!satisfies(VERSION[mode], `^${parsed.version.slice(1)}`)) {\n            console.warn(`The input spec uses ${NAMES[mode]} ${parsed.version}, but the current version of ${NAMES[mode]} is v${VERSION[mode]}.`);\n        }\n        return mode;\n    }\n    // try to guess from the provided spec\n    if ('mark' in spec ||\n        'encoding' in spec ||\n        'layer' in spec ||\n        'hconcat' in spec ||\n        'vconcat' in spec ||\n        'facet' in spec ||\n        'repeat' in spec) {\n        return 'vega-lite';\n    }\n    if ('marks' in spec || 'signals' in spec || 'scales' in spec || 'axes' in spec) {\n        return 'vega';\n    }\n    return providedMode || 'vega';\n}\nfunction isLoader(o) {\n    return !!(o && 'load' in o);\n}\n/**\n * Embed a Vega visualization component in a web page. This function returns a promise.\n *\n * @param el        DOM element in which to place component (DOM node or CSS selector).\n * @param spec      String : A URL string from which to load the Vega specification.\n *                  Object : The Vega/Vega-Lite specification as a parsed JSON object.\n * @param opt       A JavaScript object containing options for embedding.\n */\nexport default function embed(el, spec, opt = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const loader = isLoader(opt.loader) ? opt.loader : vega.loader(opt.loader);\n        // Load the visualization specification.\n        if (vega.isString(spec)) {\n            const data = yield loader.load(spec);\n            return embed(el, JSON.parse(data), opt);\n        }\n        opt = deepmerge(opt, (spec.usermeta && spec.usermeta['embedOptions']) || {});\n        // Load Vega theme/configuration.\n        let config = opt.config || {};\n        if (vega.isString(config)) {\n            const data = yield loader.load(config);\n            return embed(el, spec, Object.assign(Object.assign({}, opt), { config: JSON.parse(data) }));\n        }\n        const actions = isBoolean(opt.actions)\n            ? opt.actions\n            : deepmerge({ export: { svg: true, png: true }, source: true, compiled: true, editor: true }, opt.actions || {});\n        const i18n = Object.assign(Object.assign({}, I18N), opt.i18n);\n        const renderer = opt.renderer || 'canvas';\n        const logLevel = opt.logLevel || vega.Warn;\n        const downloadFileName = opt.downloadFileName || 'visualization';\n        if (opt.defaultStyle !== false) {\n            // Add a default stylesheet to the head of the document.\n            const ID = 'vega-embed-style';\n            if (!document.getElementById(ID)) {\n                const style = document.createElement('style');\n                style.id = ID;\n                style.innerText =\n                    opt.defaultStyle === undefined || opt.defaultStyle === true ? (embedStyle || '').toString() : opt.defaultStyle;\n                document.head.appendChild(style);\n            }\n        }\n        if (opt.theme) {\n            config = deepmerge(themes[opt.theme], config);\n        }\n        const mode = guessMode(spec, opt.mode);\n        let vgSpec = PREPROCESSOR[mode](spec, config);\n        if (mode === 'vega-lite') {\n            if (vgSpec.$schema) {\n                const parsed = schemaParser(vgSpec.$schema);\n                if (!satisfies(VERSION.vega, `^${parsed.version.slice(1)}`)) {\n                    console.warn(`The compiled spec uses Vega ${parsed.version}, but current version is v${VERSION.vega}.`);\n                }\n            }\n        }\n        // ensure container div has class 'vega-embed'\n        const div = d3\n            .select(el) // d3.select supports elements and strings\n            .classed('vega-embed', true)\n            .html(''); // clear container\n        const patch = opt.patch;\n        if (patch) {\n            if (patch instanceof Function) {\n                vgSpec = patch(vgSpec);\n            }\n            else if (vega.isString(patch)) {\n                const patchString = yield loader.load(patch);\n                // eslint-disable-next-line require-atomic-updates\n                vgSpec = deepmerge(vgSpec, JSON.parse(patchString));\n            }\n            else {\n                vgSpec = deepmerge(vgSpec, patch);\n            }\n        }\n        // Do not apply the config to Vega when we have already applied it to Vega-Lite.\n        // This call may throw an Error if parsing fails.\n        const runtime = vega.parse(vgSpec, mode === 'vega-lite' ? {} : config);\n        const view = new vega.View(runtime, {\n            loader,\n            logLevel,\n            renderer\n        });\n        if (opt.tooltip !== false) {\n            let handler;\n            if (isTooltipHandler(opt.tooltip)) {\n                handler = opt.tooltip;\n            }\n            else {\n                // user provided boolean true or tooltip options\n                handler = new Handler(opt.tooltip === true ? {} : opt.tooltip).call;\n            }\n            view.tooltip(handler);\n        }\n        let { hover } = opt;\n        if (hover === undefined) {\n            hover = mode === 'vega';\n        }\n        if (hover) {\n            const { hoverSet, updateSet } = (typeof hover === 'boolean' ? {} : hover);\n            view.hover(hoverSet, updateSet);\n        }\n        if (opt) {\n            if (opt.width) {\n                view.width(opt.width);\n            }\n            if (opt.height) {\n                view.height(opt.height);\n            }\n            if (opt.padding) {\n                view.padding(opt.padding);\n            }\n        }\n        yield view.initialize(el).runAsync();\n        if (actions !== false) {\n            let wrapper = div;\n            if (opt.defaultStyle !== false) {\n                const details = div.append('details').attr('title', i18n.CLICK_TO_VIEW_ACTIONS);\n                wrapper = details;\n                const summary = details.insert('summary');\n                summary.html(SVG_CIRCLES);\n                const dn = details.node();\n                document.addEventListener('click', evt => {\n                    if (!dn.contains(evt.target)) {\n                        dn.removeAttribute('open');\n                    }\n                });\n            }\n            const ctrl = wrapper.insert('div').attr('class', 'vega-actions');\n            // add 'Export' action\n            if (actions === true || actions.export !== false) {\n                for (const ext of ['svg', 'png']) {\n                    if (actions === true || actions.export === true || actions.export[ext]) {\n                        const i18nExportAction = i18n[`${ext.toUpperCase()}_ACTION`];\n                        ctrl\n                            .append('a')\n                            .text(i18nExportAction)\n                            .attr('href', '#')\n                            .attr('target', '_blank')\n                            .attr('download', `${downloadFileName}.${ext}`)\n                            // eslint-disable-next-line func-names\n                            .on('mousedown', function () {\n                            view\n                                .toImageURL(ext, opt.scaleFactor)\n                                .then(url => {\n                                this.href = url;\n                            })\n                                .catch(error => {\n                                throw error;\n                            });\n                            d3.event.preventDefault();\n                        });\n                    }\n                }\n            }\n            // add 'View Source' action\n            if (actions === true || actions.source !== false) {\n                ctrl\n                    .append('a')\n                    .text(i18n.SOURCE_ACTION)\n                    .attr('href', '#')\n                    .on('mousedown', () => {\n                    viewSource(stringify(spec), opt.sourceHeader || '', opt.sourceFooter || '', mode);\n                    d3.event.preventDefault();\n                });\n            }\n            // add 'View Compiled' action\n            if (mode === 'vega-lite' && (actions === true || actions.compiled !== false)) {\n                ctrl\n                    .append('a')\n                    .text(i18n.COMPILED_ACTION)\n                    .attr('href', '#')\n                    .on('mousedown', () => {\n                    viewSource(stringify(vgSpec), opt.sourceHeader || '', opt.sourceFooter || '', 'vega');\n                    d3.event.preventDefault();\n                });\n            }\n            // add 'Open in Vega Editor' action\n            if (actions === true || actions.editor !== false) {\n                const editorUrl = opt.editorUrl || 'https://vega.github.io/editor/';\n                ctrl\n                    .append('a')\n                    .text(i18n.EDITOR_ACTION)\n                    .attr('href', '#')\n                    .on('mousedown', () => {\n                    post(window, editorUrl, {\n                        config: config,\n                        mode,\n                        renderer,\n                        spec: stringify(spec)\n                    });\n                    d3.event.preventDefault();\n                });\n            }\n        }\n        return { view, spec, vgSpec };\n    });\n}\n//# sourceMappingURL=embed.js.map"]},"metadata":{},"sourceType":"module"}