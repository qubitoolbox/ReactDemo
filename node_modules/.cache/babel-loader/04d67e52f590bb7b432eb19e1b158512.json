{"ast":null,"code":"import { extractTransformsFromEncoding } from './encoding';\nimport { SpecMapper } from './spec/map';\n\nclass TransformExtractMapper extends SpecMapper {\n  mapUnit(spec, {\n    config\n  }) {\n    if (spec.encoding) {\n      const {\n        encoding: oldEncoding,\n        transform: oldTransforms\n      } = spec;\n      const {\n        bins,\n        timeUnits,\n        aggregate,\n        groupby,\n        encoding\n      } = extractTransformsFromEncoding(oldEncoding, config);\n      const transform = [...(oldTransforms ? oldTransforms : []), ...bins, ...timeUnits, ...(aggregate.length === 0 ? [] : [{\n        aggregate,\n        groupby\n      }])];\n      return Object.assign(Object.assign(Object.assign({}, spec), transform.length > 0 ? {\n        transform\n      } : {}), {\n        encoding\n      });\n    } else {\n      return spec;\n    }\n  }\n\n}\n\nconst extractor = new TransformExtractMapper();\n/**\n * Modifies spec extracting transformations from encoding and moving them to the transforms array\n */\n\nexport function extractTransforms(spec, config) {\n  return extractor.map(spec, {\n    config\n  });\n}","map":{"version":3,"sources":["../../src/transformextract.ts"],"names":[],"mappings":"AACA,SAAQ,6BAAR,QAA4C,YAA5C;AAEA,SAAQ,UAAR,QAAyB,YAAzB;;AAGA,MAAM,sBAAN,SAAqC,UAArC,CAA4F;AACnF,EAAA,OAAO,CAAC,IAAD,EAAkC;AAAC,IAAA;AAAD,GAAlC,EAA4D;AACxE,QAAI,IAAI,CAAC,QAAT,EAAmB;AACjB,YAAM;AAAC,QAAA,QAAQ,EAAE,WAAX;AAAwB,QAAA,SAAS,EAAE;AAAnC,UAAoD,IAA1D;AACA,YAAM;AAAC,QAAA,IAAD;AAAO,QAAA,SAAP;AAAkB,QAAA,SAAlB;AAA6B,QAAA,OAA7B;AAAsC,QAAA;AAAtC,UAAkD,6BAA6B,CAAC,WAAD,EAAc,MAAd,CAArF;AAEA,YAAM,SAAS,GAAG,CAChB,IAAI,aAAa,GAAG,aAAH,GAAmB,EAApC,CADgB,EAEhB,GAAG,IAFa,EAGhB,GAAG,SAHa,EAIhB,IAAI,SAAS,CAAC,MAAV,KAAqB,CAArB,GAAyB,EAAzB,GAA8B,CAAC;AAAC,QAAA,SAAD;AAAY,QAAA;AAAZ,OAAD,CAAlC,CAJgB,CAAlB;AAOA,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IADL,CAAA,EAEM,SAAS,CAAC,MAAV,GAAmB,CAAnB,GAAuB;AAAC,QAAA;AAAD,OAAvB,GAAqC,EAF3C,CAAA,EAE8C;AAC5C,QAAA;AAD4C,OAF9C,CAAA;AAKD,KAhBD,MAgBO;AACL,aAAO,IAAP;AACD;AACF;;AArByF;;AAwB5F,MAAM,SAAS,GAAG,IAAI,sBAAJ,EAAlB;AAEA;;;;AAGA,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAkD,MAAlD,EAAgE;AACpE,SAAO,SAAS,CAAC,GAAV,CAAc,IAAd,EAAoB;AAAC,IAAA;AAAD,GAApB,CAAP;AACD","sourcesContent":["import {Config} from './config';\nimport {extractTransformsFromEncoding} from './encoding';\nimport {NormalizedSpec} from './spec';\nimport {SpecMapper} from './spec/map';\nimport {GenericUnitSpec} from './spec/unit';\n\nclass TransformExtractMapper extends SpecMapper<{config: Config}, GenericUnitSpec<any, any>> {\n  public mapUnit(spec: GenericUnitSpec<any, any>, {config}: {config: Config}) {\n    if (spec.encoding) {\n      const {encoding: oldEncoding, transform: oldTransforms} = spec;\n      const {bins, timeUnits, aggregate, groupby, encoding} = extractTransformsFromEncoding(oldEncoding, config);\n\n      const transform = [\n        ...(oldTransforms ? oldTransforms : []),\n        ...bins,\n        ...timeUnits,\n        ...(aggregate.length === 0 ? [] : [{aggregate, groupby}])\n      ];\n\n      return {\n        ...spec,\n        ...(transform.length > 0 ? {transform} : {}),\n        encoding\n      };\n    } else {\n      return spec;\n    }\n  }\n}\n\nconst extractor = new TransformExtractMapper();\n\n/**\n * Modifies spec extracting transformations from encoding and moving them to the transforms array\n */\nexport function extractTransforms(spec: NormalizedSpec, config: Config): NormalizedSpec {\n  return extractor.map(spec, {config});\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}