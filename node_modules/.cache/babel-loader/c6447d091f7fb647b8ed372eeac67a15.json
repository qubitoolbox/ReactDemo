{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\nconst parser = new UAParser();\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\nconst _sessionId = uuidv4();\n\nexport default {\n  get name() {\n    return 'ExponentConstants';\n  },\n\n  get appOwnership() {\n    return 'expo';\n  },\n\n  get installationId() {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n\n  get sessionId() {\n    return _sessionId;\n  },\n\n  get platform() {\n    return {\n      web: canUseDOM ? UAParser(navigator.userAgent) : undefined\n    };\n  },\n\n  get isHeadless() {\n    return false;\n  },\n\n  get isDevice() {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n\n  get isDetached() {\n    return false;\n  },\n\n  get expoVersion() {\n    return this.manifest.sdkVersion || null;\n  },\n\n  get linkingUri() {\n    if (canUseDOM) {\n      // On native this is `exp://`\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n\n  get expoRuntimeVersion() {\n    return this.expoVersion;\n  },\n\n  get deviceName() {\n    const {\n      browser,\n      engine,\n      os: OS\n    } = parser.getResult();\n    return browser.name || engine.name || OS.name || undefined;\n  },\n\n  get nativeAppVersion() {\n    return null;\n  },\n\n  get nativeBuildVersion() {\n    return null;\n  },\n\n  get systemFonts() {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n\n  get statusBarHeight() {\n    return 0;\n  },\n\n  get deviceYearClass() {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n\n  get manifest() {\n    // This is defined by @expo/webpack-config.\n    // If your site is bundled with a different config then you may not have access to the app.json automatically.\n    return process.env.APP_MANIFEST || {};\n  },\n\n  get experienceUrl() {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n\n  get debugMode() {\n    return __DEV__;\n  },\n\n  async getWebViewUserAgentAsync() {\n    if (canUseDOM) {\n      return navigator.userAgent;\n    } else {\n      return null;\n    }\n  }\n\n};","map":{"version":3,"sources":["../src/ExponentConstants.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\n\nimport { PlatformManifest, WebManifest, NativeConstants } from './Constants.types';\n\nconst parser = new UAParser();\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\ndeclare var __DEV__: boolean;\ndeclare var process: { env: any };\ndeclare var navigator: Navigator;\ndeclare var location: Location;\ndeclare var localStorage: Storage;\n\nconst _sessionId = uuidv4();\n\nexport default {\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get appOwnership(): 'expo' {\n    return 'expo';\n  },\n  get installationId(): string {\n    let installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId as string);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId(): string {\n    return _sessionId;\n  },\n  get platform(): PlatformManifest {\n    return { web: canUseDOM ? UAParser(navigator.userAgent) : undefined };\n  },\n  get isHeadless(): false {\n    return false;\n  },\n  get isDevice(): true {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get isDetached(): false {\n    return false;\n  },\n  get expoVersion(): string | null {\n    return this.manifest.sdkVersion || null;\n  },\n  get linkingUri(): string {\n    if (canUseDOM) {\n      // On native this is `exp://`\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get expoRuntimeVersion(): string | null {\n    return this.expoVersion;\n  },\n  get deviceName(): string | undefined {\n    const { browser, engine, os: OS } = parser.getResult();\n\n    return browser.name || engine.name || OS.name || undefined;\n  },\n  get nativeAppVersion(): null {\n    return null;\n  },\n  get nativeBuildVersion(): null {\n    return null;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): number | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n  get manifest(): WebManifest {\n    // This is defined by @expo/webpack-config.\n    // If your site is bundled with a different config then you may not have access to the app.json automatically.\n    return process.env.APP_MANIFEST || {};\n  },\n  get experienceUrl(): string {\n    if (canUseDOM) {\n      return location.origin + location.pathname;\n    } else {\n      return '';\n    }\n  },\n  get debugMode(): boolean {\n    return __DEV__;\n  },\n  async getWebViewUserAgentAsync(): Promise<string | null> {\n    if (canUseDOM) {\n      return navigator.userAgent;\n    } else {\n      return null;\n    }\n  },\n} as NativeConstants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}