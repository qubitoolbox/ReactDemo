{"ast":null,"code":"import { isArray, isBoolean, isNumber, isString } from 'vega-util';\nimport { isAggregateOp, isArgmaxDef, isArgminDef, isCountingAggregateOp } from './aggregate';\nimport { autoMaxBins, binToString, isBinned, isBinning } from './bin';\nimport { isScaleChannel, isSecondaryRangeChannel, POSITION_SCALE_CHANNELS, rangeType } from './channel';\nimport { getMarkConfig } from './compile/common';\nimport { dateTimeExpr, isDateTime } from './datetime';\nimport * as log from './log';\nimport { isRectBasedMark } from './mark';\nimport { isSortByChannel } from './sort';\nimport { isFacetFieldDef } from './spec/facet';\nimport { getLocalTimeUnit, getTimeUnitParts, isLocalSingleTimeUnit, isUtcSingleTimeUnit, normalizeTimeUnit } from './timeunit';\nimport { getFullName, QUANTITATIVE } from './type';\nimport { contains, flatAccessWithDatum, getFirstDefined, internalField, replacePathInField, titlecase } from './util';\nexport function isConditionalSelection(c) {\n  return c['selection'];\n}\nexport function isRepeatRef(field) {\n  return field && !isString(field) && 'repeat' in field;\n}\nexport function toFieldDefBase(fieldDef) {\n  const {\n    field,\n    timeUnit,\n    bin,\n    aggregate\n  } = fieldDef;\n  return Object.assign(Object.assign(Object.assign(Object.assign({}, timeUnit ? {\n    timeUnit\n  } : {}), bin ? {\n    bin\n  } : {}), aggregate ? {\n    aggregate\n  } : {}), {\n    field\n  });\n}\nexport function isSortableFieldDef(fieldDef) {\n  return isTypedFieldDef(fieldDef) && !!fieldDef['sort'];\n}\nexport function getBand(channel, fieldDef, fieldDef2, mark, config, {\n  isMidPoint\n} = {}) {\n  const {\n    timeUnit,\n    bin\n  } = fieldDef;\n\n  if (contains(['x', 'y'], channel)) {\n    if (isPositionFieldDef(fieldDef) && fieldDef.band !== undefined) {\n      return fieldDef.band;\n    } else if (timeUnit && !fieldDef2) {\n      if (isMidPoint) {\n        return getMarkConfig('timeUnitBandPosition', mark, config);\n      } else {\n        return isRectBasedMark(mark.type) ? getMarkConfig('timeUnitBand', mark, config) : 0;\n      }\n    } else if (isBinning(bin)) {\n      return isRectBasedMark(mark.type) && !isMidPoint ? 1 : 0.5;\n    }\n  }\n\n  return undefined;\n}\nexport function hasBand(channel, fieldDef, fieldDef2, mark, config) {\n  if (isBinning(fieldDef.bin) || fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === 'temporal') {\n    return !!getBand(channel, fieldDef, fieldDef2, mark, config);\n  }\n\n  return false;\n}\nexport function isConditionalDef(channelDef) {\n  return !!channelDef && !!channelDef.condition;\n}\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\n\nexport function hasConditionalFieldDef(channelDef) {\n  return !!channelDef && !!channelDef.condition && !isArray(channelDef.condition) && isFieldDef(channelDef.condition);\n}\nexport function hasConditionalValueDef(channelDef) {\n  return !!channelDef && !!channelDef.condition && (isArray(channelDef.condition) || isValueDef(channelDef.condition));\n}\nexport function isFieldDef(channelDef) {\n  return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\n}\nexport function isTypedFieldDef(channelDef) {\n  return !!channelDef && (!!channelDef['field'] && !!channelDef['type'] || channelDef['aggregate'] === 'count');\n}\nexport function isStringFieldDef(channelDef) {\n  return isFieldDef(channelDef) && isString(channelDef.field);\n}\nexport function isValueDef(channelDef) {\n  return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;\n}\nexport function isScaleFieldDef(channelDef) {\n  return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);\n}\nexport function isPositionFieldDef(channelDef) {\n  return !!channelDef && (!!channelDef['axis'] || !!channelDef['stack'] || !!channelDef['impute'] || channelDef['band'] !== undefined);\n}\nexport function isMarkPropFieldDef(channelDef) {\n  return !!channelDef && !!channelDef['legend'];\n}\nexport function isTextFieldDef(channelDef) {\n  return !!channelDef && !!channelDef['format'];\n}\n\nfunction isOpFieldDef(fieldDef) {\n  return !!fieldDef['op'];\n}\n/**\n * Get a Vega field reference from a Vega-Lite field def.\n */\n\n\nexport function vgField(fieldDef, opt = {}) {\n  var _a, _b, _c;\n\n  let field = fieldDef.field;\n  const prefix = opt.prefix;\n  let suffix = opt.suffix;\n  let argAccessor = ''; // for accessing argmin/argmax field at the end without getting escaped\n\n  if (isCount(fieldDef)) {\n    field = internalField('count');\n  } else {\n    let fn;\n\n    if (!opt.nofn) {\n      if (isOpFieldDef(fieldDef)) {\n        fn = fieldDef.op;\n      } else {\n        const {\n          bin,\n          aggregate,\n          timeUnit\n        } = fieldDef;\n\n        if (isBinning(bin)) {\n          fn = binToString(bin);\n          suffix = (_a = opt.binSuffix, _a !== null && _a !== void 0 ? _a : '') + (_b = opt.suffix, _b !== null && _b !== void 0 ? _b : '');\n        } else if (aggregate) {\n          if (isArgmaxDef(aggregate)) {\n            argAccessor = `.${field}`;\n            field = `argmax_${aggregate.argmax}`;\n          } else if (isArgminDef(aggregate)) {\n            argAccessor = `.${field}`;\n            field = `argmin_${aggregate.argmin}`;\n          } else {\n            fn = String(aggregate);\n          }\n        } else if (timeUnit) {\n          fn = String(timeUnit);\n          suffix = (!contains(['range', 'mid'], opt.binSuffix) && opt.binSuffix || '') + (_c = opt.suffix, _c !== null && _c !== void 0 ? _c : '');\n        }\n      }\n    }\n\n    if (fn) {\n      field = field ? `${fn}_${field}` : fn;\n    }\n  }\n\n  if (suffix) {\n    field = `${field}_${suffix}`;\n  }\n\n  if (prefix) {\n    field = `${prefix}_${field}`;\n  }\n\n  if (opt.forAs) {\n    return field;\n  } else if (opt.expr) {\n    // Expression to access flattened field. No need to escape dots.\n    return flatAccessWithDatum(field, opt.expr) + argAccessor;\n  } else {\n    // We flattened all fields so paths should have become dot.\n    return replacePathInField(field) + argAccessor;\n  }\n}\nexport function isDiscrete(fieldDef) {\n  switch (fieldDef.type) {\n    case 'nominal':\n    case 'ordinal':\n    case 'geojson':\n      return true;\n\n    case 'quantitative':\n      return !!fieldDef.bin;\n\n    case 'temporal':\n      return false;\n  }\n\n  throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\nexport function isContinuous(fieldDef) {\n  return !isDiscrete(fieldDef);\n}\nexport function isCount(fieldDef) {\n  return fieldDef.aggregate === 'count';\n}\nexport function verbalTitleFormatter(fieldDef, config) {\n  const {\n    field,\n    bin,\n    timeUnit,\n    aggregate\n  } = fieldDef;\n\n  if (aggregate === 'count') {\n    return config.countTitle;\n  } else if (isBinning(bin)) {\n    return `${field} (binned)`;\n  } else if (timeUnit) {\n    const units = getTimeUnitParts(timeUnit).join('-');\n    return `${field} (${units})`;\n  } else if (aggregate) {\n    if (isArgmaxDef(aggregate)) {\n      return `${field} for max ${aggregate.argmax}`;\n    } else if (isArgminDef(aggregate)) {\n      return `${field} for min ${aggregate.argmin}`;\n    } else {\n      return `${titlecase(aggregate)} of ${field}`;\n    }\n  }\n\n  return field;\n}\nexport function functionalTitleFormatter(fieldDef) {\n  const {\n    aggregate,\n    bin,\n    timeUnit,\n    field\n  } = fieldDef;\n\n  if (isArgmaxDef(aggregate)) {\n    return `${field} for argmax(${aggregate.argmax})`;\n  } else if (isArgminDef(aggregate)) {\n    return `${field} for argmin(${aggregate.argmin})`;\n  }\n\n  const fn = aggregate || timeUnit || isBinning(bin) && 'bin';\n\n  if (fn) {\n    return fn.toUpperCase() + '(' + field + ')';\n  } else {\n    return field;\n  }\n}\nexport const defaultTitleFormatter = (fieldDef, config) => {\n  switch (config.fieldTitle) {\n    case 'plain':\n      return fieldDef.field;\n\n    case 'functional':\n      return functionalTitleFormatter(fieldDef);\n\n    default:\n      return verbalTitleFormatter(fieldDef, config);\n  }\n};\nlet titleFormatter = defaultTitleFormatter;\nexport function setTitleFormatter(formatter) {\n  titleFormatter = formatter;\n}\nexport function resetTitleFormatter() {\n  setTitleFormatter(defaultTitleFormatter);\n}\nexport function title(fieldDef, config, {\n  allowDisabling,\n  includeDefault = true\n}) {\n  var _a, _b;\n\n  const guide = (_a = getGuide(fieldDef), _a !== null && _a !== void 0 ? _a : {});\n  const guideTitle = guide.title;\n  const def = includeDefault ? defaultTitle(fieldDef, config) : undefined;\n\n  if (allowDisabling) {\n    return getFirstDefined(guideTitle, fieldDef.title, def);\n  } else {\n    return _b = guideTitle !== null && guideTitle !== void 0 ? guideTitle : fieldDef.title, _b !== null && _b !== void 0 ? _b : def;\n  }\n}\nexport function getGuide(fieldDef) {\n  if (isPositionFieldDef(fieldDef) && fieldDef.axis) {\n    return fieldDef.axis;\n  } else if (isMarkPropFieldDef(fieldDef) && fieldDef.legend) {\n    return fieldDef.legend;\n  } else if (isFacetFieldDef(fieldDef) && fieldDef.header) {\n    return fieldDef.header;\n  }\n\n  return undefined;\n}\nexport function defaultTitle(fieldDef, config) {\n  return titleFormatter(fieldDef, config);\n}\nexport function format(fieldDef) {\n  var _a;\n\n  if (isTextFieldDef(fieldDef) && fieldDef.format) {\n    return fieldDef.format;\n  } else {\n    const guide = (_a = getGuide(fieldDef), _a !== null && _a !== void 0 ? _a : {});\n    return guide.format;\n  }\n}\nexport function defaultType(fieldDef, channel) {\n  if (fieldDef.timeUnit) {\n    return 'temporal';\n  }\n\n  if (isBinning(fieldDef.bin)) {\n    return 'quantitative';\n  }\n\n  switch (rangeType(channel)) {\n    case 'continuous':\n      return 'quantitative';\n\n    case 'discrete':\n      return 'nominal';\n\n    case 'flexible':\n      // color\n      return 'nominal';\n\n    default:\n      return 'quantitative';\n  }\n}\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\n\nexport function getFieldDef(channelDef) {\n  if (isFieldDef(channelDef)) {\n    return channelDef;\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return channelDef.condition;\n  }\n\n  return undefined;\n}\nexport function getTypedFieldDef(channelDef) {\n  if (isFieldDef(channelDef)) {\n    return channelDef;\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return channelDef.condition;\n  }\n\n  return undefined;\n}\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\n\nexport function normalize(channelDef, channel) {\n  if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\n    const primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';\n    log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n    return {\n      value: channelDef\n    };\n  } // If a fieldDef contains a field, we need type.\n\n\n  if (isFieldDef(channelDef)) {\n    return normalizeFieldDef(channelDef, channel);\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return Object.assign(Object.assign({}, channelDef), {\n      // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n      condition: normalizeFieldDef(channelDef.condition, channel)\n    });\n  }\n\n  return channelDef;\n}\nexport function normalizeFieldDef(fd, channel) {\n  const {\n    aggregate,\n    timeUnit,\n    bin,\n    field\n  } = fd;\n  const fieldDef = Object.assign({}, fd); // Drop invalid aggregate\n\n  if (aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {\n    log.warn(log.message.invalidAggregate(aggregate));\n    delete fieldDef.aggregate;\n  } // Normalize Time Unit\n\n\n  if (timeUnit) {\n    fieldDef.timeUnit = normalizeTimeUnit(timeUnit);\n  }\n\n  if (field) {\n    fieldDef.field = `${field}`;\n  } // Normalize bin\n\n\n  if (isBinning(bin)) {\n    fieldDef.bin = normalizeBin(bin, channel);\n  }\n\n  if (isBinned(bin) && !contains(POSITION_SCALE_CHANNELS, channel)) {\n    log.warn(`Channel ${channel} should not be used with \"binned\" bin`);\n  } // Normalize Type\n\n\n  if (isTypedFieldDef(fieldDef)) {\n    const {\n      type\n    } = fieldDef;\n    const fullType = getFullName(type);\n\n    if (type !== fullType) {\n      // convert short type to full type\n      fieldDef.type = fullType;\n    }\n\n    if (type !== 'quantitative') {\n      if (isCountingAggregateOp(aggregate)) {\n        log.warn(log.message.invalidFieldTypeForCountAggregate(type, aggregate));\n        fieldDef.type = 'quantitative';\n      }\n    }\n  } else if (!isSecondaryRangeChannel(channel)) {\n    // If type is empty / invalid, then augment with default type\n    const newType = defaultType(fieldDef, channel);\n    log.warn(log.message.missingFieldType(channel, newType));\n    fieldDef['type'] = newType;\n  }\n\n  if (isTypedFieldDef(fieldDef)) {\n    const {\n      compatible,\n      warning\n    } = channelCompatibility(fieldDef, channel);\n\n    if (!compatible) {\n      log.warn(warning);\n    }\n  }\n\n  if (isSortableFieldDef(fieldDef) && isString(fieldDef.sort)) {\n    const {\n      sort\n    } = fieldDef;\n\n    if (isSortByChannel(sort)) {\n      return Object.assign(Object.assign({}, fieldDef), {\n        sort: {\n          encoding: sort\n        }\n      });\n    }\n\n    const sub = sort.substr(1);\n\n    if (sort.charAt(0) === '-' && isSortByChannel(sub)) {\n      return Object.assign(Object.assign({}, fieldDef), {\n        sort: {\n          encoding: sub,\n          order: 'descending'\n        }\n      });\n    }\n  }\n\n  return fieldDef;\n}\nexport function normalizeBin(bin, channel) {\n  if (isBoolean(bin)) {\n    return {\n      maxbins: autoMaxBins(channel)\n    };\n  } else if (bin === 'binned') {\n    return {\n      binned: true\n    };\n  } else if (!bin.maxbins && !bin.step) {\n    return Object.assign(Object.assign({}, bin), {\n      maxbins: autoMaxBins(channel)\n    });\n  } else {\n    return bin;\n  }\n}\nconst COMPATIBLE = {\n  compatible: true\n};\nexport function channelCompatibility(fieldDef, channel) {\n  const type = fieldDef.type;\n\n  if (type === 'geojson' && channel !== 'shape') {\n    return {\n      compatible: false,\n      warning: `Channel ${channel} should not be used with a geojson data.`\n    };\n  }\n\n  switch (channel) {\n    case 'row':\n    case 'column':\n    case 'facet':\n      if (isContinuous(fieldDef)) {\n        return {\n          compatible: false,\n          warning: log.message.facetChannelShouldBeDiscrete(channel)\n        };\n      }\n\n      return COMPATIBLE;\n\n    case 'x':\n    case 'y':\n    case 'color':\n    case 'fill':\n    case 'stroke':\n    case 'text':\n    case 'detail':\n    case 'key':\n    case 'tooltip':\n    case 'href':\n    case 'url':\n      return COMPATIBLE;\n\n    case 'longitude':\n    case 'longitude2':\n    case 'latitude':\n    case 'latitude2':\n      if (type !== QUANTITATIVE) {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`\n        };\n      }\n\n      return COMPATIBLE;\n\n    case 'opacity':\n    case 'fillOpacity':\n    case 'strokeOpacity':\n    case 'strokeWidth':\n    case 'size':\n    case 'x2':\n    case 'y2':\n      if (type === 'nominal' && !fieldDef['sort']) {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should not be used with an unsorted discrete field.`\n        };\n      }\n\n      return COMPATIBLE;\n\n    case 'shape':\n      if (!contains(['ordinal', 'nominal', 'geojson'], fieldDef.type)) {\n        return {\n          compatible: false,\n          warning: 'Shape channel should be used with only either discrete or geojson data.'\n        };\n      }\n\n      return COMPATIBLE;\n\n    case 'order':\n      if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {\n        return {\n          compatible: false,\n          warning: `Channel order is inappropriate for nominal field, which has no inherent order.`\n        };\n      }\n\n      return COMPATIBLE;\n  }\n\n  throw new Error('channelCompatability not implemented for channel ' + channel);\n}\n/**\n * Check if the field def uses a time format or does not use any format but is temporal\n * (this does not cover field defs that are temporal but use a number format).\n */\n\nexport function isTimeFormatFieldDef(fieldDef) {\n  const guide = getGuide(fieldDef);\n  const formatType = guide && guide.formatType || isTextFieldDef(fieldDef) && fieldDef.formatType;\n  return formatType === 'time' || !formatType && isTimeFieldDef(fieldDef);\n}\n/**\n * Check if field def has tye `temporal`. If you want to also cover field defs that use a time format, use `isTimeFormatFieldDef`.\n */\n\nexport function isTimeFieldDef(fieldDef) {\n  return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;\n}\n/**\n * Getting a value associated with a fielddef.\n * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)\n */\n\nexport function valueExpr(v, {\n  timeUnit,\n  type,\n  time,\n  undefinedIfExprNotRequired\n}) {\n  let expr;\n\n  if (isDateTime(v)) {\n    expr = dateTimeExpr(v, true);\n  } else if (isString(v) || isNumber(v)) {\n    if (timeUnit || type === 'temporal') {\n      if (isLocalSingleTimeUnit(timeUnit)) {\n        expr = dateTimeExpr({\n          [timeUnit]: v\n        }, true);\n      } else if (isUtcSingleTimeUnit(timeUnit)) {\n        // FIXME is this really correct?\n        expr = valueExpr(v, {\n          timeUnit: getLocalTimeUnit(timeUnit)\n        });\n      } else {\n        // just pass the string to date function (which will call JS Date.parse())\n        expr = `datetime(${JSON.stringify(v)})`;\n      }\n    }\n  }\n\n  if (expr) {\n    return time ? `time(${expr})` : expr;\n  } // number or boolean or normal string\n\n\n  return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);\n}\n/**\n * Standardize value array -- convert each value to Vega expression if applicable\n */\n\nexport function valueArray(fieldDef, values) {\n  const {\n    timeUnit,\n    type\n  } = fieldDef;\n  return values.map(v => {\n    const expr = valueExpr(v, {\n      timeUnit,\n      type,\n      undefinedIfExprNotRequired: true\n    }); // return signal for the expression if we need an expression\n\n    if (expr !== undefined) {\n      return {\n        signal: expr\n      };\n    } // otherwise just return the original value\n\n\n    return v;\n  });\n}\n/**\n * Checks whether a fieldDef for a particular channel requires a computed bin range.\n */\n\nexport function binRequiresRange(fieldDef, channel) {\n  if (!isBinning(fieldDef.bin)) {\n    console.warn('Only use this method with binned field defs');\n    return false;\n  } // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.\n  // We could check whether the axis or legend exists (not disabled) but that seems overkill.\n\n\n  return isScaleChannel(channel) && contains(['ordinal', 'nominal'], fieldDef.type);\n}","map":{"version":3,"sources":["../../src/channeldef.ts"],"names":[],"mappings":"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","sourcesContent":["import {Text} from 'vega';\n// Declaration and utility for variants of a field definition object\nimport {LinearGradient, RadialGradient} from 'vega';\nimport {isArray, isBoolean, isNumber, isString} from 'vega-util';\nimport {Aggregate, isAggregateOp, isArgmaxDef, isArgminDef, isCountingAggregateOp} from './aggregate';\nimport {Axis} from './axis';\nimport {autoMaxBins, Bin, BinParams, binToString, isBinned, isBinning} from './bin';\nimport {Channel, isScaleChannel, isSecondaryRangeChannel, POSITION_SCALE_CHANNELS, rangeType} from './channel';\nimport {getMarkConfig} from './compile/common';\nimport {CompositeAggregate} from './compositemark';\nimport {Config} from './config';\nimport {DateTime, dateTimeExpr, isDateTime} from './datetime';\nimport {FormatMixins, Guide, TitleMixins} from './guide';\nimport {ImputeParams} from './impute';\nimport {Legend} from './legend';\nimport * as log from './log';\nimport {LogicalOperand} from './logical';\nimport {isRectBasedMark, MarkDef} from './mark';\nimport {Predicate} from './predicate';\nimport {Scale} from './scale';\nimport {isSortByChannel, Sort, SortOrder} from './sort';\nimport {isFacetFieldDef} from './spec/facet';\nimport {StackOffset} from './stack';\nimport {\n  getLocalTimeUnit,\n  getTimeUnitParts,\n  isLocalSingleTimeUnit,\n  isUtcSingleTimeUnit,\n  normalizeTimeUnit,\n  TimeUnit\n} from './timeunit';\nimport {AggregatedFieldDef, WindowFieldDef} from './transform';\nimport {getFullName, QUANTITATIVE, StandardType, Type} from './type';\nimport {contains, flatAccessWithDatum, getFirstDefined, internalField, replacePathInField, titlecase} from './util';\n\nexport type Value = number | string | boolean | null;\nexport type Gradient = LinearGradient | RadialGradient;\nexport type ValueOrGradient = Value | Gradient;\n\nexport type ValueOrGradientOrText = Value | Gradient | Text;\n\n/**\n * Definition object for a constant value (primitive value or gradient definition) of an encoding channel.\n */\nexport interface ValueDef<V extends ValueOrGradient | Value[] = Value> {\n  /**\n   * A constant value in visual domain (e.g., `\"red\"` / `\"#0099ff\"` / [gradient definition](https://vega.github.io/vega-lite/docs/types.html#gradient) for color, values between `0` to `1` for opacity).\n   */\n  value: V;\n}\n\n/**\n * Generic type for conditional channelDef.\n * F defines the underlying FieldDef type.\n */\n\nexport type ChannelDefWithCondition<F extends FieldDef<any>, V extends ValueOrGradientOrText = Value> =\n  | FieldDefWithCondition<F, V>\n  | ValueDefWithCondition<F, V>;\n\n/**\n * A ValueDef with Condition<ValueDef | FieldDef> where either the condition or the value are optional.\n * {\n *   condition: {field: ...} | {value: ...},\n *   value: ...,\n * }\n */\n\n/**\n * @minProperties 1\n */\nexport type ValueDefWithCondition<F extends FieldDef<any>, V extends ValueOrGradientOrText = Value> = Partial<\n  ValueDef<V>\n> & {\n  /**\n   * A field definition or one or more value definition(s) with a selection predicate.\n   */\n  condition?: Conditional<F> | Conditional<ValueDef<V>> | Conditional<ValueDef<V>>[];\n};\n\nexport type StringValueDefWithCondition<F extends Field, T extends Type = StandardType> = ValueDefWithCondition<\n  MarkPropFieldDef<F, T>,\n  string | null\n>;\n\nexport type ColorGradientValueDefWithCondition<F extends Field, T extends Type = StandardType> = ValueDefWithCondition<\n  MarkPropFieldDef<F, T>,\n  Gradient | string | null\n>;\n\nexport type NumericValueDefWithCondition<F extends Field> = ValueDefWithCondition<\n  MarkPropFieldDef<F, StandardType>,\n  number\n>;\n\nexport type TypeForShape = 'nominal' | 'ordinal' | 'geojson';\n\nexport type ShapeValueDefWithCondition<F extends Field> = StringValueDefWithCondition<F, TypeForShape>;\n\nexport type TextValueDefWithCondition<F extends Field> = ValueDefWithCondition<StringFieldDef<F>, Text>;\n\nexport type Conditional<CD extends FieldDef<any> | ValueDef<any>> = ConditionalPredicate<CD> | ConditionalSelection<CD>;\n\nexport type ConditionalPredicate<CD extends FieldDef<any> | ValueDef<any>> = {\n  /**\n   * Predicate for triggering the condition\n   */\n  test: LogicalOperand<Predicate>;\n} & CD;\n\nexport type ConditionalSelection<CD extends FieldDef<any> | ValueDef<any>> = {\n  /**\n   * A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose).\n   */\n  selection: LogicalOperand<string>;\n} & CD;\n\nexport function isConditionalSelection<T>(c: Conditional<T>): c is ConditionalSelection<T> {\n  return c['selection'];\n}\n\nexport interface ConditionValueDefMixins<V extends ValueOrGradientOrText = Value> {\n  /**\n   * One or more value definition(s) with [a selection or a test predicate](https://vega.github.io/vega-lite/docs/condition.html).\n   *\n   * __Note:__ A field definition's `condition` property can only contain [conditional value definitions](https://vega.github.io/vega-lite/docs/condition.html#value)\n   * since Vega-Lite only allows at most one encoded field per encoding channel.\n   */\n  condition?: Conditional<ValueDef<V>> | Conditional<ValueDef<V>>[];\n}\n\n/**\n * A FieldDef with Condition<ValueDef>\n * {\n *   condition: {value: ...},\n *   field: ...,\n *   ...\n * }\n */\n\nexport type FieldDefWithCondition<F extends FieldDef<any>, V extends ValueOrGradientOrText = Value> = F &\n  ConditionValueDefMixins<V>;\n\nexport type ColorGradientFieldDefWithCondition<F extends Field, T extends Type = StandardType> = FieldDefWithCondition<\n  MarkPropFieldDef<F, T>,\n  Gradient | string | null\n>;\n\nexport type NumericFieldDefWithCondition<F extends Field> = FieldDefWithCondition<\n  MarkPropFieldDef<F, StandardType>,\n  number\n>;\n\nexport type ShapeFieldDefWithCondition<F extends Field> = FieldDefWithCondition<\n  MarkPropFieldDef<F, TypeForShape>,\n  string | null\n>;\n\nexport type TextFieldDefWithCondition<F extends Field> = FieldDefWithCondition<StringFieldDef<F>, Text>;\n\nexport type StringFieldDefWithCondition<F extends Field> = FieldDefWithCondition<StringFieldDef<F>, string>;\n\n/**\n * A ValueDef with optional Condition<ValueDef | FieldDef>\n * {\n *   condition: {field: ...} | {value: ...},\n *   value: ...,\n * }\n */\n\n/**\n * Reference to a repeated value.\n */\nexport interface RepeatRef {\n  repeat: 'row' | 'column' | 'repeat';\n}\n\nexport type FieldName = string;\nexport type Field = FieldName | RepeatRef;\n\nexport function isRepeatRef(field: Field): field is RepeatRef {\n  return field && !isString(field) && 'repeat' in field;\n}\n\n/** @@hidden */\nexport type HiddenCompositeAggregate = CompositeAggregate;\n\nexport interface FieldDefBase<F, B extends Bin = Bin> {\n  /**\n   * __Required.__ A string defining the name of the field from which to pull a data value\n   * or an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n   *\n   * __See also:__ [`field`](https://vega.github.io/vega-lite/docs/field.html) documentation.\n   *\n   * __Notes:__\n   * 1)  Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `\"field\": \"foo.bar\"` and `\"field\": \"foo['bar']\"`).\n   * If field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `\"a\\\\.b\"` and `\"a\\\\[0\\\\]\"`).\n   * See more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n   * 2) `field` is not required if `aggregate` is `count`.\n   */\n  field?: F;\n\n  // function\n\n  /**\n   * Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\n   * or [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n   *\n   * __Default value:__ `undefined` (None)\n   *\n   * __See also:__ [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html) documentation.\n   */\n  timeUnit?: TimeUnit;\n\n  /**\n   * Aggregation function for the field\n   * (e.g., `\"mean\"`, `\"sum\"`, `\"median\"`, `\"min\"`, `\"max\"`, `\"count\"`).\n   *\n   * __Default value:__ `undefined` (None)\n   *\n   * __See also:__ [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html) documentation.\n   */\n  aggregate?: Aggregate | HiddenCompositeAggregate;\n\n  /**\n   * A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`\"binned\"`).\n   *\n   * - If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n   *\n   * - If `\"binned\"`, this indicates that the data for the `x` (or `y`) channel are already binned. You can map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-Lite.  To adjust the axis ticks based on the bin step, you can also set the axis's [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n   *\n   * __Default value:__ `false`\n   *\n   * __See also:__ [`bin`](https://vega.github.io/vega-lite/docs/bin.html) documentation.\n   */\n  bin?: B;\n}\n\nexport function toFieldDefBase(fieldDef: TypedFieldDef<string>): FieldDefBase<string> {\n  const {field, timeUnit, bin, aggregate} = fieldDef;\n  return {\n    ...(timeUnit ? {timeUnit} : {}),\n    ...(bin ? {bin} : {}),\n    ...(aggregate ? {aggregate} : {}),\n    field\n  };\n}\n\nexport interface TypeMixins<T extends Type> {\n  /**\n   * The encoded field's type of measurement (`\"quantitative\"`, `\"temporal\"`, `\"ordinal\"`, or `\"nominal\"`).\n   * It can also be a `\"geojson\"` type for encoding ['geoshape'](https://vega.github.io/vega-lite/docs/geoshape.html).\n   *\n   *\n   * __Note:__\n   *\n   * - Data values for a temporal field can be either a date-time string (e.g., `\"2015-03-07 12:32:17\"`, `\"17:01\"`, `\"2015-03-16\"`. `\"2015\"`) or a timestamp number (e.g., `1552199579097`).\n   * - Data `type` describes the semantics of the data rather than the primitive data types (number, string, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n   * - When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `\"quantitative\"` (for using a linear bin scale) or [`\"ordinal\"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n   * - When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `\"temporal\"` (for using a temporal scale) or [`\"ordinal\"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n   * - When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `\"cat\"` using `{\"aggregate\": \"distinct\", \"field\": \"cat\", \"type\": \"quantitative\"}`. The `\"type\"` of the aggregate output is `\"quantitative\"`.\n   * - Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).\n   *\n   * __See also:__ [`type`](https://vega.github.io/vega-lite/docs/type.html) documentation.\n   */\n  type: T;\n}\n\n/**\n *  Definition object for a data field, its type and transformation of an encoding channel.\n */\nexport type TypedFieldDef<\n  F extends Field,\n  T extends Type = Type,\n  B extends Bin = boolean | BinParams | 'binned' | null // This is equivalent to Bin but we use the full form so the docs has detailed types\n> = FieldDefBase<F, B> & TitleMixins & TypeMixins<T>;\n\nexport interface SortableFieldDef<\n  F extends Field,\n  T extends Type = StandardType,\n  B extends Bin = boolean | BinParams | null\n> extends TypedFieldDef<F, T, B> {\n  /**\n   * Sort order for the encoded field.\n   *\n   * For continuous fields (quantitative or temporal), `sort` can be either `\"ascending\"` or `\"descending\"`.\n   *\n   * For discrete fields, `sort` can be one of the following:\n   * - `\"ascending\"` or `\"descending\"` -- for sorting by the values' natural order in JavaScript.\n   * - [A string indicating an encoding channel name to sort by](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) (e.g., `\"x\"` or `\"y\"`) with an optional minus prefix for descending sort (e.g., `\"-x\"` to sort by x-field, descending). This channel string is short-form of [a sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding). For example, `\"sort\": \"-x\"` is equivalent to `\"sort\": {\"encoding\": \"x\", \"order\": \"descending\"}`.\n   * - [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n   * - [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order. For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `\"month\"` and `\"day\"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `\"Mon\"`, `\"Tue\"`).\n   * - `null` indicating no sort.\n   *\n   * __Default value:__ `\"ascending\"`\n   *\n   * __Note:__ `null` and sorting by another channel is not supported for `row` and `column`.\n   *\n   * __See also:__ [`sort`](https://vega.github.io/vega-lite/docs/sort.html) documentation.\n   */\n  sort?: Sort<F>;\n}\n\nexport function isSortableFieldDef<F extends Field>(fieldDef: FieldDef<F>): fieldDef is SortableFieldDef<F> {\n  return isTypedFieldDef(fieldDef) && !!fieldDef['sort'];\n}\n\nexport interface ScaleFieldDef<\n  F extends Field,\n  T extends Type = StandardType,\n  B extends Bin = boolean | BinParams | null\n> extends SortableFieldDef<F, T, B> {\n  /**\n   * An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n   *\n   * If `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n   *\n   * __Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied.\n   *\n   * __See also:__ [`scale`](https://vega.github.io/vega-lite/docs/scale.html) documentation.\n   */\n  scale?: Scale | null;\n}\n\n/**\n * A field definition of a secondary channel that shares a scale with another primary channel. For example, `x2`, `xError` and `xError2` share the same scale with `x`.\n */\nexport type SecondaryFieldDef<F extends Field> = FieldDefBase<F, null> & TitleMixins; // x2/y2 shouldn't have bin, but we keep bin property for simplicity of the codebase.\n\n/**\n * Field Def without scale (and without bin: \"binned\" support).\n */\nexport type FieldDefWithoutScale<F extends Field, T extends Type = StandardType> = TypedFieldDef<F, T>;\n\nexport type LatLongFieldDef<F extends Field> = FieldDefBase<F, null> &\n  TitleMixins &\n  Partial<TypeMixins<'quantitative'>>; // Lat long shouldn't have bin, but we keep bin property for simplicity of the codebase.\n\nexport interface PositionFieldDef<F extends Field>\n  extends ScaleFieldDef<\n    F,\n    StandardType,\n    boolean | BinParams | 'binned' | null // This is equivalent to Bin but we use the full form so the docs has detailed types\n  > {\n  /**\n   * An object defining properties of axis's gridlines, ticks and labels.\n   * If `null`, the axis for the encoding channel will be removed.\n   *\n   * __Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied.\n   *\n   * __See also:__ [`axis`](https://vega.github.io/vega-lite/docs/axis.html) documentation.\n   */\n  axis?: Axis | null;\n\n  /**\n   * Type of stacking offset if the field should be stacked.\n   * `stack` is only applicable for `x` and `y` channels with continuous domains.\n   * For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\n   *\n   * `stack` can be one of the following values:\n   * - `\"zero\"` or `true`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\n   * - `\"normalize\"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\n   * -`\"center\"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\n   * - `null` or `false` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\n   *\n   * __Default value:__ `zero` for plots with all of the following conditions are true:\n   * (1) the mark is `bar` or `area`;\n   * (2) the stacked measure channel (x or y) has a linear scale;\n   * (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y. Otherwise, `null` by default.\n   *\n   * __See also:__ [`stack`](https://vega.github.io/vega-lite/docs/stack.html) documentation.\n   */\n  stack?: StackOffset | null | boolean;\n\n  /**\n   * An object defining the properties of the Impute Operation to be applied.\n   * The field value of the other positional channel is taken as `key` of the `Impute` Operation.\n   * The field of the `color` channel if specified is used as `groupby` of the `Impute` Operation.\n   *\n   * __See also:__ [`impute`](https://vega.github.io/vega-lite/docs/impute.html) documentation.\n   */\n  impute?: ImputeParams | null;\n\n  /**\n   * For rect-based marks (`rect`, `bar`, and `image`), mark size relative to bandwidth of [band scales](https://vega.github.io/vega-lite/docs/scale.html#band) or time units. If set to `1`, the mark size is set to the bandwidth or the time unit interval. If set to `0.5`, the mark size is half of the bandwidth or the time unit interval.\n   *\n   * For other marks, relative position on a band of a stacked, binned, time unit or band scale. If set to `0`, the marks will be positioned at the beginning of the band. If set to `0.5`, the marks will be positioned in the middle of the band.\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  band?: number;\n}\n\nexport function getBand(\n  channel: Channel,\n  fieldDef: FieldDef<string>,\n  fieldDef2: ChannelDef<SecondaryFieldDef<string>>,\n  mark: MarkDef,\n  config: Config,\n  {isMidPoint}: {isMidPoint?: boolean} = {}\n) {\n  const {timeUnit, bin} = fieldDef;\n  if (contains(['x', 'y'], channel)) {\n    if (isPositionFieldDef(fieldDef) && fieldDef.band !== undefined) {\n      return fieldDef.band;\n    } else if (timeUnit && !fieldDef2) {\n      if (isMidPoint) {\n        return getMarkConfig('timeUnitBandPosition', mark, config);\n      } else {\n        return isRectBasedMark(mark.type) ? getMarkConfig('timeUnitBand', mark, config) : 0;\n      }\n    } else if (isBinning(bin)) {\n      return isRectBasedMark(mark.type) && !isMidPoint ? 1 : 0.5;\n    }\n  }\n  return undefined;\n}\n\nexport function hasBand(\n  channel: Channel,\n  fieldDef: FieldDef<string>,\n  fieldDef2: ChannelDef<SecondaryFieldDef<string>>,\n  mark: MarkDef,\n  config: Config\n) {\n  if (isBinning(fieldDef.bin) || (fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === 'temporal')) {\n    return !!getBand(channel, fieldDef, fieldDef2, mark, config);\n  }\n  return false;\n}\n\n/**\n * Field definition of a mark property, which can contain a legend.\n */\nexport type MarkPropFieldDef<F extends Field, T extends Type = Type> = ScaleFieldDef<\n  F,\n  T,\n  boolean | BinParams | null\n> & {\n  /**\n   * An object defining properties of the legend.\n   * If `null`, the legend for the encoding channel will be removed.\n   *\n   * __Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied.\n   *\n   * __See also:__ [`legend`](https://vega.github.io/vega-lite/docs/legend.html) documentation.\n   */\n  legend?: Legend | null;\n};\n\n// Detail\n\n// Order Path have no scale\n\nexport interface OrderFieldDef<F extends Field> extends FieldDefWithoutScale<F> {\n  /**\n   * The sort order. One of `\"ascending\"` (default) or `\"descending\"`.\n   */\n  sort?: SortOrder;\n}\n\nexport interface StringFieldDef<F extends Field> extends FieldDefWithoutScale<F, StandardType>, FormatMixins {}\n\nexport type FieldDef<F extends Field> = SecondaryFieldDef<F> | TypedFieldDef<F>;\nexport type ChannelDef<\n  FD extends FieldDef<any> = FieldDef<string>,\n  V extends ValueOrGradientOrText = ValueOrGradientOrText\n> = ChannelDefWithCondition<FD, V>;\n\nexport function isConditionalDef<F extends Field, V extends ValueOrGradientOrText>(\n  channelDef: ChannelDef<FieldDef<F>, V>\n): channelDef is ChannelDefWithCondition<FieldDef<F>, V> {\n  return !!channelDef && !!channelDef.condition;\n}\n\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\nexport function hasConditionalFieldDef<F extends Field, V extends ValueOrGradientOrText>(\n  channelDef: ChannelDef<FieldDef<F>, V>\n): channelDef is Partial<ValueDef<V>> & {condition: Conditional<TypedFieldDef<F>>} {\n  return !!channelDef && !!channelDef.condition && !isArray(channelDef.condition) && isFieldDef(channelDef.condition);\n}\n\nexport function hasConditionalValueDef<F extends Field, V extends ValueOrGradient>(\n  channelDef: ChannelDef<FieldDef<F>, V>\n): channelDef is ValueDef<V> & {condition: Conditional<ValueDef<V>> | Conditional<ValueDef<V>>[]} {\n  return !!channelDef && !!channelDef.condition && (isArray(channelDef.condition) || isValueDef(channelDef.condition));\n}\n\nexport function isFieldDef<F extends Field>(\n  channelDef: ChannelDef<FieldDef<F>>\n): channelDef is\n  | TypedFieldDef<F>\n  | SecondaryFieldDef<F>\n  | PositionFieldDef<F>\n  | ScaleFieldDef<F>\n  | MarkPropFieldDef<F>\n  | OrderFieldDef<F>\n  | StringFieldDef<F> {\n  return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\n}\n\nexport function isTypedFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): channelDef is TypedFieldDef<F> {\n  return !!channelDef && ((!!channelDef['field'] && !!channelDef['type']) || channelDef['aggregate'] === 'count');\n}\n\nexport function isStringFieldDef(channelDef: ChannelDef<FieldDef<Field>>): channelDef is TypedFieldDef<string> {\n  return isFieldDef(channelDef) && isString(channelDef.field);\n}\n\nexport function isValueDef<F extends Field, V extends ValueOrGradientOrText>(\n  channelDef: ChannelDef<FieldDef<F>, V>\n): channelDef is ValueDef<V> {\n  return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;\n}\n\nexport function isScaleFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): channelDef is ScaleFieldDef<F> {\n  return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);\n}\n\nexport function isPositionFieldDef<F extends Field>(\n  channelDef: ChannelDef<FieldDef<F>>\n): channelDef is PositionFieldDef<F> {\n  return (\n    !!channelDef &&\n    (!!channelDef['axis'] || !!channelDef['stack'] || !!channelDef['impute'] || channelDef['band'] !== undefined)\n  );\n}\n\nexport function isMarkPropFieldDef<F extends Field>(\n  channelDef: ChannelDef<FieldDef<F>>\n): channelDef is MarkPropFieldDef<F> {\n  return !!channelDef && !!channelDef['legend'];\n}\n\nexport function isTextFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): channelDef is StringFieldDef<F> {\n  return !!channelDef && !!channelDef['format'];\n}\n\nexport interface FieldRefOption {\n  /** Exclude bin, aggregate, timeUnit */\n  nofn?: boolean;\n  /** Wrap the field with datum, parent, or datum.datum (e.g., datum['...'] for Vega Expression */\n  expr?: 'datum' | 'parent' | 'datum.datum';\n  /** Prepend fn with custom function prefix */\n  prefix?: string;\n  /** Append suffix to the field ref for bin (default='start') */\n  binSuffix?: 'end' | 'range' | 'mid';\n  /** Append suffix to the field ref (general) */\n  suffix?: string;\n  /**\n   * Use the field name for `as` in a transform.\n   * We will not escape nested accesses because Vega transform outputs cannot be nested.\n   */\n  forAs?: boolean;\n}\n\nfunction isOpFieldDef(\n  fieldDef: FieldDefBase<string> | WindowFieldDef | AggregatedFieldDef\n): fieldDef is WindowFieldDef | AggregatedFieldDef {\n  return !!fieldDef['op'];\n}\n\n/**\n * Get a Vega field reference from a Vega-Lite field def.\n */\nexport function vgField(\n  fieldDef: FieldDefBase<string> | WindowFieldDef | AggregatedFieldDef,\n  opt: FieldRefOption = {}\n): string {\n  let field = fieldDef.field;\n  const prefix = opt.prefix;\n  let suffix = opt.suffix;\n\n  let argAccessor = ''; // for accessing argmin/argmax field at the end without getting escaped\n\n  if (isCount(fieldDef)) {\n    field = internalField('count');\n  } else {\n    let fn: string;\n\n    if (!opt.nofn) {\n      if (isOpFieldDef(fieldDef)) {\n        fn = fieldDef.op;\n      } else {\n        const {bin, aggregate, timeUnit} = fieldDef;\n        if (isBinning(bin)) {\n          fn = binToString(bin);\n          suffix = (opt.binSuffix ?? '') + (opt.suffix ?? '');\n        } else if (aggregate) {\n          if (isArgmaxDef(aggregate)) {\n            argAccessor = `.${field}`;\n            field = `argmax_${aggregate.argmax}`;\n          } else if (isArgminDef(aggregate)) {\n            argAccessor = `.${field}`;\n            field = `argmin_${aggregate.argmin}`;\n          } else {\n            fn = String(aggregate);\n          }\n        } else if (timeUnit) {\n          fn = String(timeUnit);\n          suffix = ((!contains(['range', 'mid'], opt.binSuffix) && opt.binSuffix) || '') + (opt.suffix ?? '');\n        }\n      }\n    }\n\n    if (fn) {\n      field = field ? `${fn}_${field}` : fn;\n    }\n  }\n\n  if (suffix) {\n    field = `${field}_${suffix}`;\n  }\n\n  if (prefix) {\n    field = `${prefix}_${field}`;\n  }\n\n  if (opt.forAs) {\n    return field;\n  } else if (opt.expr) {\n    // Expression to access flattened field. No need to escape dots.\n    return flatAccessWithDatum(field, opt.expr) + argAccessor;\n  } else {\n    // We flattened all fields so paths should have become dot.\n    return replacePathInField(field) + argAccessor;\n  }\n}\n\nexport function isDiscrete(fieldDef: TypedFieldDef<Field>) {\n  switch (fieldDef.type) {\n    case 'nominal':\n    case 'ordinal':\n    case 'geojson':\n      return true;\n    case 'quantitative':\n      return !!fieldDef.bin;\n    case 'temporal':\n      return false;\n  }\n  throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\n\nexport function isContinuous(fieldDef: TypedFieldDef<Field>) {\n  return !isDiscrete(fieldDef);\n}\n\nexport function isCount(fieldDef: FieldDefBase<Field>) {\n  return fieldDef.aggregate === 'count';\n}\n\nexport type FieldTitleFormatter = (fieldDef: FieldDefBase<string>, config: Config) => string;\n\nexport function verbalTitleFormatter(fieldDef: FieldDefBase<string>, config: Config) {\n  const {field, bin, timeUnit, aggregate} = fieldDef;\n  if (aggregate === 'count') {\n    return config.countTitle;\n  } else if (isBinning(bin)) {\n    return `${field} (binned)`;\n  } else if (timeUnit) {\n    const units = getTimeUnitParts(timeUnit).join('-');\n    return `${field} (${units})`;\n  } else if (aggregate) {\n    if (isArgmaxDef(aggregate)) {\n      return `${field} for max ${aggregate.argmax}`;\n    } else if (isArgminDef(aggregate)) {\n      return `${field} for min ${aggregate.argmin}`;\n    } else {\n      return `${titlecase(aggregate)} of ${field}`;\n    }\n  }\n  return field;\n}\n\nexport function functionalTitleFormatter(fieldDef: FieldDefBase<string>) {\n  const {aggregate, bin, timeUnit, field} = fieldDef;\n  if (isArgmaxDef(aggregate)) {\n    return `${field} for argmax(${aggregate.argmax})`;\n  } else if (isArgminDef(aggregate)) {\n    return `${field} for argmin(${aggregate.argmin})`;\n  }\n\n  const fn = aggregate || timeUnit || (isBinning(bin) && 'bin');\n  if (fn) {\n    return fn.toUpperCase() + '(' + field + ')';\n  } else {\n    return field;\n  }\n}\n\nexport const defaultTitleFormatter: FieldTitleFormatter = (fieldDef: FieldDefBase<string>, config: Config) => {\n  switch (config.fieldTitle) {\n    case 'plain':\n      return fieldDef.field;\n    case 'functional':\n      return functionalTitleFormatter(fieldDef);\n    default:\n      return verbalTitleFormatter(fieldDef, config);\n  }\n};\n\nlet titleFormatter = defaultTitleFormatter;\n\nexport function setTitleFormatter(formatter: FieldTitleFormatter) {\n  titleFormatter = formatter;\n}\n\nexport function resetTitleFormatter() {\n  setTitleFormatter(defaultTitleFormatter);\n}\n\nexport function title(\n  fieldDef: TypedFieldDef<string> | SecondaryFieldDef<string>,\n  config: Config,\n  {allowDisabling, includeDefault = true}: {allowDisabling: boolean; includeDefault?: boolean}\n) {\n  const guide = getGuide(fieldDef) ?? {};\n  const guideTitle = guide.title;\n  const def = includeDefault ? defaultTitle(fieldDef, config) : undefined;\n\n  if (allowDisabling) {\n    return getFirstDefined(guideTitle, fieldDef.title, def);\n  } else {\n    return guideTitle ?? fieldDef.title ?? def;\n  }\n}\n\nexport function getGuide(fieldDef: TypedFieldDef<string> | SecondaryFieldDef<string>): Guide {\n  if (isPositionFieldDef(fieldDef) && fieldDef.axis) {\n    return fieldDef.axis;\n  } else if (isMarkPropFieldDef(fieldDef) && fieldDef.legend) {\n    return fieldDef.legend;\n  } else if (isFacetFieldDef(fieldDef) && fieldDef.header) {\n    return fieldDef.header;\n  }\n  return undefined;\n}\n\nexport function defaultTitle(fieldDef: FieldDefBase<string>, config: Config) {\n  return titleFormatter(fieldDef, config);\n}\n\nexport function format(fieldDef: TypedFieldDef<string>) {\n  if (isTextFieldDef(fieldDef) && fieldDef.format) {\n    return fieldDef.format;\n  } else {\n    const guide = getGuide(fieldDef) ?? {};\n    return guide.format;\n  }\n}\n\nexport function defaultType(fieldDef: TypedFieldDef<Field>, channel: Channel): Type {\n  if (fieldDef.timeUnit) {\n    return 'temporal';\n  }\n  if (isBinning(fieldDef.bin)) {\n    return 'quantitative';\n  }\n  switch (rangeType(channel)) {\n    case 'continuous':\n      return 'quantitative';\n    case 'discrete':\n      return 'nominal';\n    case 'flexible': // color\n      return 'nominal';\n    default:\n      return 'quantitative';\n  }\n}\n\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\n\nexport function getFieldDef<F extends Field>(channelDef: ChannelDef<FieldDef<F>>): FieldDef<F> {\n  if (isFieldDef(channelDef)) {\n    return channelDef;\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return channelDef.condition;\n  }\n  return undefined;\n}\n\nexport function getTypedFieldDef<F extends Field>(channelDef: ChannelDef<TypedFieldDef<F>>): TypedFieldDef<F> {\n  if (isFieldDef(channelDef)) {\n    return channelDef;\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return channelDef.condition;\n  }\n  return undefined;\n}\n\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\nexport function normalize(channelDef: ChannelDef, channel: Channel): ChannelDef<any> {\n  if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\n    const primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';\n    log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n    return {value: channelDef};\n  }\n\n  // If a fieldDef contains a field, we need type.\n  if (isFieldDef(channelDef)) {\n    return normalizeFieldDef(channelDef, channel);\n  } else if (hasConditionalFieldDef(channelDef)) {\n    return {\n      ...channelDef,\n      // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n      condition: normalizeFieldDef(channelDef.condition, channel) as Conditional<TypedFieldDef<string>>\n    };\n  }\n  return channelDef;\n}\nexport function normalizeFieldDef(fd: FieldDef<string>, channel: Channel) {\n  const {aggregate, timeUnit, bin, field} = fd;\n  const fieldDef = {...fd};\n\n  // Drop invalid aggregate\n  if (aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {\n    log.warn(log.message.invalidAggregate(aggregate));\n    delete fieldDef.aggregate;\n  }\n\n  // Normalize Time Unit\n  if (timeUnit) {\n    fieldDef.timeUnit = normalizeTimeUnit(timeUnit);\n  }\n\n  if (field) {\n    fieldDef.field = `${field}`;\n  }\n\n  // Normalize bin\n  if (isBinning(bin)) {\n    fieldDef.bin = normalizeBin(bin, channel);\n  }\n\n  if (isBinned(bin) && !contains(POSITION_SCALE_CHANNELS, channel)) {\n    log.warn(`Channel ${channel} should not be used with \"binned\" bin`);\n  }\n\n  // Normalize Type\n  if (isTypedFieldDef(fieldDef)) {\n    const {type} = fieldDef;\n    const fullType = getFullName(type);\n    if (type !== fullType) {\n      // convert short type to full type\n      fieldDef.type = fullType;\n    }\n    if (type !== 'quantitative') {\n      if (isCountingAggregateOp(aggregate)) {\n        log.warn(log.message.invalidFieldTypeForCountAggregate(type, aggregate));\n        fieldDef.type = 'quantitative';\n      }\n    }\n  } else if (!isSecondaryRangeChannel(channel)) {\n    // If type is empty / invalid, then augment with default type\n    const newType = defaultType(fieldDef as TypedFieldDef<any>, channel);\n    log.warn(log.message.missingFieldType(channel, newType));\n\n    fieldDef['type'] = newType;\n  }\n\n  if (isTypedFieldDef(fieldDef)) {\n    const {compatible, warning} = channelCompatibility(fieldDef, channel);\n    if (!compatible) {\n      log.warn(warning);\n    }\n  }\n\n  if (isSortableFieldDef(fieldDef) && isString(fieldDef.sort)) {\n    const {sort} = fieldDef;\n    if (isSortByChannel(sort)) {\n      return {\n        ...fieldDef,\n        sort: {encoding: sort}\n      };\n    }\n    const sub = sort.substr(1);\n    if (sort.charAt(0) === '-' && isSortByChannel(sub)) {\n      return {\n        ...fieldDef,\n        sort: {encoding: sub, order: 'descending'}\n      };\n    }\n  }\n\n  return fieldDef;\n}\n\nexport function normalizeBin(bin: BinParams | boolean | 'binned', channel?: Channel) {\n  if (isBoolean(bin)) {\n    return {maxbins: autoMaxBins(channel)};\n  } else if (bin === 'binned') {\n    return {\n      binned: true\n    };\n  } else if (!bin.maxbins && !bin.step) {\n    return {...bin, maxbins: autoMaxBins(channel)};\n  } else {\n    return bin;\n  }\n}\n\nconst COMPATIBLE = {compatible: true};\nexport function channelCompatibility(\n  fieldDef: TypedFieldDef<Field>,\n  channel: Channel\n): {compatible: boolean; warning?: string} {\n  const type = fieldDef.type;\n\n  if (type === 'geojson' && channel !== 'shape') {\n    return {\n      compatible: false,\n      warning: `Channel ${channel} should not be used with a geojson data.`\n    };\n  }\n\n  switch (channel) {\n    case 'row':\n    case 'column':\n    case 'facet':\n      if (isContinuous(fieldDef)) {\n        return {\n          compatible: false,\n          warning: log.message.facetChannelShouldBeDiscrete(channel)\n        };\n      }\n      return COMPATIBLE;\n\n    case 'x':\n    case 'y':\n    case 'color':\n    case 'fill':\n    case 'stroke':\n    case 'text':\n    case 'detail':\n    case 'key':\n    case 'tooltip':\n    case 'href':\n    case 'url':\n      return COMPATIBLE;\n\n    case 'longitude':\n    case 'longitude2':\n    case 'latitude':\n    case 'latitude2':\n      if (type !== QUANTITATIVE) {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`\n        };\n      }\n      return COMPATIBLE;\n\n    case 'opacity':\n    case 'fillOpacity':\n    case 'strokeOpacity':\n    case 'strokeWidth':\n    case 'size':\n    case 'x2':\n    case 'y2':\n      if (type === 'nominal' && !fieldDef['sort']) {\n        return {\n          compatible: false,\n          warning: `Channel ${channel} should not be used with an unsorted discrete field.`\n        };\n      }\n      return COMPATIBLE;\n\n    case 'shape':\n      if (!contains(['ordinal', 'nominal', 'geojson'], fieldDef.type)) {\n        return {\n          compatible: false,\n          warning: 'Shape channel should be used with only either discrete or geojson data.'\n        };\n      }\n      return COMPATIBLE;\n\n    case 'order':\n      if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {\n        return {\n          compatible: false,\n          warning: `Channel order is inappropriate for nominal field, which has no inherent order.`\n        };\n      }\n      return COMPATIBLE;\n  }\n  throw new Error('channelCompatability not implemented for channel ' + channel);\n}\n\n/**\n * Check if the field def uses a time format or does not use any format but is temporal\n * (this does not cover field defs that are temporal but use a number format).\n */\nexport function isTimeFormatFieldDef(fieldDef: TypedFieldDef<string>): boolean {\n  const guide = getGuide(fieldDef);\n  const formatType = (guide && guide.formatType) || (isTextFieldDef(fieldDef) && fieldDef.formatType);\n  return formatType === 'time' || (!formatType && isTimeFieldDef(fieldDef));\n}\n\n/**\n * Check if field def has tye `temporal`. If you want to also cover field defs that use a time format, use `isTimeFormatFieldDef`.\n */\nexport function isTimeFieldDef(fieldDef: TypedFieldDef<any>) {\n  return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;\n}\n\n/**\n * Getting a value associated with a fielddef.\n * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)\n */\nexport function valueExpr(\n  v: number | string | boolean | DateTime,\n  {\n    timeUnit,\n    type,\n    time,\n    undefinedIfExprNotRequired\n  }: {\n    timeUnit: TimeUnit;\n    type?: Type;\n    time?: boolean;\n    undefinedIfExprNotRequired?: boolean;\n  }\n): string {\n  let expr;\n  if (isDateTime(v)) {\n    expr = dateTimeExpr(v, true);\n  } else if (isString(v) || isNumber(v)) {\n    if (timeUnit || type === 'temporal') {\n      if (isLocalSingleTimeUnit(timeUnit)) {\n        expr = dateTimeExpr({[timeUnit]: v}, true);\n      } else if (isUtcSingleTimeUnit(timeUnit)) {\n        // FIXME is this really correct?\n        expr = valueExpr(v, {timeUnit: getLocalTimeUnit(timeUnit)});\n      } else {\n        // just pass the string to date function (which will call JS Date.parse())\n        expr = `datetime(${JSON.stringify(v)})`;\n      }\n    }\n  }\n  if (expr) {\n    return time ? `time(${expr})` : expr;\n  }\n  // number or boolean or normal string\n  return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);\n}\n\n/**\n * Standardize value array -- convert each value to Vega expression if applicable\n */\nexport function valueArray(fieldDef: TypedFieldDef<string>, values: (number | string | boolean | DateTime)[]) {\n  const {timeUnit, type} = fieldDef;\n  return values.map(v => {\n    const expr = valueExpr(v, {timeUnit, type, undefinedIfExprNotRequired: true});\n    // return signal for the expression if we need an expression\n    if (expr !== undefined) {\n      return {signal: expr};\n    }\n    // otherwise just return the original value\n    return v;\n  });\n}\n\n/**\n * Checks whether a fieldDef for a particular channel requires a computed bin range.\n */\nexport function binRequiresRange(fieldDef: TypedFieldDef<string>, channel: Channel) {\n  if (!isBinning(fieldDef.bin)) {\n    console.warn('Only use this method with binned field defs');\n    return false;\n  }\n\n  // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.\n  // We could check whether the axis or legend exists (not disabled) but that seems overkill.\n  return isScaleChannel(channel) && contains(['ordinal', 'nominal'], fieldDef.type);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}