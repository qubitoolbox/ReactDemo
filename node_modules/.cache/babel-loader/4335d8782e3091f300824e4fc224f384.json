{"ast":null,"code":"import { entries, uniqueId } from './../../util';\nimport { OutputNode } from './dataflow';\nimport { SourceNode } from './source';\n/**\n * Print debug information for dataflow tree.\n */\n\nexport function debug(node) {\n  console.log(`${node.constructor.name}${node.debugName ? `(${node.debugName})` : ''} -> ${node.children.map(c => {\n    return `${c.constructor.name}${c.debugName ? ` (${c.debugName})` : ''}`;\n  })}`);\n  console.log(node);\n  node.children.forEach(debug);\n}\n/**\n * Print the dataflow tree as graphviz.\n *\n * Render the output in http://viz-js.com/.\n */\n\nexport function draw(roots) {\n  // check the graph before printing it since the logic below assumes a consistent graph\n  checkLinks(roots);\n  const nodes = {};\n  const edges = [];\n\n  function getId(node) {\n    let id = node['__uniqueid'];\n\n    if (id === undefined) {\n      id = uniqueId();\n      node['__uniqueid'] = id;\n    }\n\n    return id;\n  }\n\n  function getLabel(node) {\n    var _a, _b, _c;\n\n    const out = [node.constructor.name.slice(0, -4)];\n\n    if (node.debugName) {\n      out.push(`<i>${node.debugName}</i>`);\n    } else if (node instanceof SourceNode) {\n      if (node.data.name || node.data.url) {\n        out.push(`<i>${(_a = node.data.name, _a !== null && _a !== void 0 ? _a : node.data.url)}</i>`);\n      }\n    }\n\n    const dep = node.dependentFields();\n\n    if ((_b = dep) === null || _b === void 0 ? void 0 : _b.size) {\n      out.push(`<font color=\"grey\" point-size=\"10\">IN:</font> ${[...node.dependentFields()].join(', ')}`);\n    }\n\n    const prod = node.producedFields();\n\n    if ((_c = prod) === null || _c === void 0 ? void 0 : _c.size) {\n      out.push(`<font color=\"grey\" point-size=\"10\">OUT:</font> ${[...node.producedFields()].join(', ')}`);\n    }\n\n    if (node instanceof OutputNode) {\n      out.push(`<font color=\"grey\" point-size=\"10\">required:</font> ${node.isRequired()}`);\n    }\n\n    return out.join('<br/>');\n  }\n\n  function collector(node) {\n    var _a, _b;\n\n    const id = getId(node);\n    nodes[id] = {\n      id: id,\n      label: getLabel(node),\n      hash: node instanceof SourceNode ? (_b = (_a = node.data.url, _a !== null && _a !== void 0 ? _a : node.data.name), _b !== null && _b !== void 0 ? _b : node.debugName) : String(node.hash()).replace(/\"/g, '')\n    };\n\n    for (const child of node.children) {\n      edges.push([id, getId(child)]);\n      collector(child);\n    }\n  }\n\n  roots.forEach(n => collector(n));\n  const dot = `digraph DataFlow {\n  rankdir = TB;\n  node [shape=record]\n  ${entries(nodes).map(({\n    key,\n    value\n  }) => `  \"${key}\" [\n    label = <${value.label}>;\n    tooltip = \"[${value.id}]&#010;${value.hash}\"\n  ]`).join('\\n')}\n\n  ${edges.map(([source, target]) => `\"${source}\" -> \"${target}\"`).join(' ')}\n}`;\n  console.log(dot);\n  return dot;\n}\n/**\n * Iterates over a dataflow graph and checks whether all links are consistent.\n */\n\nexport function checkLinks(nodes) {\n  for (const node of nodes) {\n    for (const child of node.children) {\n      if (child.parent !== node) {\n        console.error('Dataflow graph is inconsistent.', node, child);\n        return false;\n      }\n    }\n\n    if (!checkLinks(node.children)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../../../../src/compile/data/debug.ts"],"names":[],"mappings":"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","sourcesContent":["import {entries, uniqueId} from './../../util';\nimport {DataFlowNode, OutputNode} from './dataflow';\nimport {SourceNode} from './source';\n\n/**\n * Print debug information for dataflow tree.\n */\nexport function debug(node: DataFlowNode) {\n  console.log(\n    `${(node.constructor as any).name}${node.debugName ? `(${node.debugName})` : ''} -> ${node.children.map(c => {\n      return `${(c.constructor as any).name}${c.debugName ? ` (${c.debugName})` : ''}`;\n    })}`\n  );\n  console.log(node);\n  node.children.forEach(debug);\n}\n\n/**\n * Print the dataflow tree as graphviz.\n *\n * Render the output in http://viz-js.com/.\n */\nexport function draw(roots: readonly DataFlowNode[]) {\n  // check the graph before printing it since the logic below assumes a consistent graph\n  checkLinks(roots);\n\n  const nodes: {[key: string]: {id: string | number; label: string; hash: string | number}} = {};\n  const edges: [string, string][] = [];\n\n  function getId(node: DataFlowNode) {\n    let id = node['__uniqueid'];\n    if (id === undefined) {\n      id = uniqueId();\n      node['__uniqueid'] = id;\n    }\n    return id;\n  }\n\n  function getLabel(node: DataFlowNode) {\n    const out = [(node.constructor as any).name.slice(0, -4)];\n\n    if (node.debugName) {\n      out.push(`<i>${node.debugName}</i>`);\n    } else if (node instanceof SourceNode) {\n      if (node.data.name || node.data.url) {\n        out.push(`<i>${node.data.name ?? node.data.url}</i>`);\n      }\n    }\n\n    const dep = node.dependentFields();\n    if (dep?.size) {\n      out.push(`<font color=\"grey\" point-size=\"10\">IN:</font> ${[...node.dependentFields()].join(', ')}`);\n    }\n    const prod = node.producedFields();\n    if (prod?.size) {\n      out.push(`<font color=\"grey\" point-size=\"10\">OUT:</font> ${[...node.producedFields()].join(', ')}`);\n    }\n    if (node instanceof OutputNode) {\n      out.push(`<font color=\"grey\" point-size=\"10\">required:</font> ${node.isRequired()}`);\n    }\n    return out.join('<br/>');\n  }\n\n  function collector(node: DataFlowNode) {\n    const id = getId(node);\n    nodes[id] = {\n      id: id,\n      label: getLabel(node),\n      hash:\n        node instanceof SourceNode\n          ? node.data.url ?? node.data.name ?? node.debugName\n          : String(node.hash()).replace(/\"/g, '')\n    };\n\n    for (const child of node.children) {\n      edges.push([id, getId(child)]);\n      collector(child);\n    }\n  }\n\n  roots.forEach(n => collector(n));\n\n  const dot = `digraph DataFlow {\n  rankdir = TB;\n  node [shape=record]\n  ${entries(nodes)\n    .map(\n      ({key, value}) => `  \"${key}\" [\n    label = <${value.label}>;\n    tooltip = \"[${value.id}]&#010;${value.hash}\"\n  ]`\n    )\n    .join('\\n')}\n\n  ${edges.map(([source, target]) => `\"${source}\" -> \"${target}\"`).join(' ')}\n}`;\n\n  console.log(dot);\n\n  return dot;\n}\n\n/**\n * Iterates over a dataflow graph and checks whether all links are consistent.\n */\nexport function checkLinks(nodes: readonly DataFlowNode[]): boolean {\n  for (const node of nodes) {\n    for (const child of node.children) {\n      if (child.parent !== node) {\n        console.error('Dataflow graph is inconsistent.', node, child);\n        return false;\n      }\n    }\n\n    if (!checkLinks(node.children)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}