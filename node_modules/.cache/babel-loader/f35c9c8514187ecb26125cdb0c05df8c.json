{"ast":null,"code":"// DateTime definition object\nimport { isNumber } from 'vega-util';\nimport * as log from './log';\nimport { duplicate, keys } from './util';\n/*\n * A designated year that starts on Sunday.\n */\n\nconst SUNDAY_YEAR = 2006;\nexport function isDateTime(o) {\n  return !!o && (!!o.year || !!o.quarter || !!o.month || !!o.date || !!o.day || !!o.hours || !!o.minutes || !!o.seconds || !!o.milliseconds);\n}\nexport const MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\nexport const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));\nexport const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));\n\nfunction normalizeQuarter(q) {\n  if (isNumber(q)) {\n    if (q > 4) {\n      log.warn(log.message.invalidTimeUnit('quarter', q));\n    } // We accept 1-based quarter, so need to readjust to 0-based quarter\n\n\n    return (q - 1).toString();\n  } else {\n    // Invalid quarter\n    throw new Error(log.message.invalidTimeUnit('quarter', q));\n  }\n}\n\nfunction normalizeMonth(m) {\n  if (isNumber(m)) {\n    // We accept 1-based month, so need to readjust to 0-based month\n    return (m - 1).toString();\n  } else {\n    const lowerM = m.toLowerCase();\n    const monthIndex = MONTHS.indexOf(lowerM);\n\n    if (monthIndex !== -1) {\n      return monthIndex + ''; // 0 for january, ...\n    }\n\n    const shortM = lowerM.substr(0, 3);\n    const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n\n    if (shortMonthIndex !== -1) {\n      return shortMonthIndex + '';\n    } // Invalid month\n\n\n    throw new Error(log.message.invalidTimeUnit('month', m));\n  }\n}\n\nfunction normalizeDay(d) {\n  if (isNumber(d)) {\n    // mod so that this can be both 0-based where 0 = sunday\n    // and 1-based where 7=sunday\n    return d % 7 + '';\n  } else {\n    const lowerD = d.toLowerCase();\n    const dayIndex = DAYS.indexOf(lowerD);\n\n    if (dayIndex !== -1) {\n      return dayIndex + ''; // 0 for january, ...\n    }\n\n    const shortD = lowerD.substr(0, 3);\n    const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n\n    if (shortDayIndex !== -1) {\n      return shortDayIndex + '';\n    } // Invalid day\n\n\n    throw new Error(log.message.invalidTimeUnit('day', d));\n  }\n}\n/**\n * Return Vega Expression for a particular date time.\n * @param d\n * @param normalize whether to normalize quarter, month, day.\n * @param toJSON whether to return the date in JSON format\n */\n\n\nexport function dateTimeExpr(d, normalize = false, toJSON = false) {\n  const units = [];\n\n  if (normalize && d.day !== undefined) {\n    if (keys(d).length > 1) {\n      log.warn(log.message.droppedDay(d));\n      d = duplicate(d);\n      delete d.day;\n    }\n  }\n\n  if (d.year !== undefined) {\n    units.push(d.year);\n  } else if (d.day !== undefined) {\n    // Set year to 2006 for working with day since January 1 2006 is a Sunday\n    units.push(SUNDAY_YEAR);\n  } else {\n    units.push(0);\n  }\n\n  if (d.month !== undefined) {\n    const month = normalize ? normalizeMonth(d.month) : d.month;\n    units.push(month);\n  } else if (d.quarter !== undefined) {\n    const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n    units.push(quarter + '*3');\n  } else {\n    units.push(0); // months start at zero in JS\n  }\n\n  if (d.date !== undefined) {\n    units.push(d.date);\n  } else if (d.day !== undefined) {\n    // HACK: Day only works as a standalone unit\n    // This is only correct because we always set year to 2006 for day\n    const day = normalize ? normalizeDay(d.day) : d.day;\n    units.push(day + '+1');\n  } else {\n    units.push(1); // Date starts at 1 in JS\n  } // Note: can't use TimeUnit enum here as importing it will create\n  // circular dependency problem!\n\n\n  for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {\n    const unit = d[timeUnit];\n    units.push(typeof unit === 'undefined' ? 0 : unit);\n  }\n\n  const unitsString = units.join(', ');\n\n  if (toJSON) {\n    if (d.utc) {\n      return new Function(`return +new Date(Date.UTC(${unitsString}))`)();\n    } else {\n      return new Function(`return +new Date(${unitsString})`)();\n    }\n  }\n\n  if (d.utc) {\n    return `utc(${unitsString})`;\n  } else {\n    return `datetime(${unitsString})`;\n  }\n}","map":{"version":3,"sources":["../../src/datetime.ts"],"names":[],"mappings":"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","sourcesContent":["// DateTime definition object\n\nimport {isNumber} from 'vega-util';\nimport * as log from './log';\nimport {duplicate, keys} from './util';\n\n/*\n * A designated year that starts on Sunday.\n */\nconst SUNDAY_YEAR = 2006;\n\n/**\n * @minimum 1\n * @maximum 12\n * @TJS-type integer\n */\nexport type Month = number;\n\n/**\n * @minimum 1\n * @maximum 7\n */\nexport type Day = number;\n\n/**\n * Object for defining datetime in Vega-Lite Filter.\n * If both month and quarter are provided, month has higher precedence.\n * `day` cannot be combined with other date.\n * We accept string for month and day names.\n */\nexport interface DateTime {\n  /**\n   * Integer value representing the year.\n   * @TJS-type integer\n   */\n  year?: number;\n\n  /**\n   * Integer value representing the quarter of the year (from 1-4).\n   * @minimum 1\n   * @maximum 4\n   * @TJS-type integer\n   */\n  quarter?: number;\n\n  /**\n   * One of:\n   * (1) integer value representing the month from `1`-`12`. `1` represents January;\n   * (2) case-insensitive month name (e.g., `\"January\"`);\n   * (3) case-insensitive, 3-character short month name (e.g., `\"Jan\"`).\n   */\n  month?: Month | string;\n\n  /**\n   * Integer value representing the date from 1-31.\n   * @minimum 1\n   * @maximum 31\n   * @TJS-type integer\n   */\n  date?: number;\n\n  /**\n   * Value representing the day of a week. This can be one of:\n   * (1) integer value -- `1` represents Monday;\n   * (2) case-insensitive day name (e.g., `\"Monday\"`);\n   * (3) case-insensitive, 3-character short day name (e.g., `\"Mon\"`).\n   *\n   * **Warning:** A DateTime definition object with `day`** should not be combined with `year`, `quarter`, `month`, or `date`.\n   */\n  day?: Day | string;\n\n  /**\n   * Integer value representing the hour of a day from 0-23.\n   * @minimum 0\n   * @maximum 23\n   * @TJS-type integer\n   */\n  hours?: number;\n\n  /**\n   * Integer value representing the minute segment of time from 0-59.\n   * @minimum 0\n   * @maximum 59\n   * @TJS-type integer\n   */\n  minutes?: number;\n\n  /**\n   * Integer value representing the second segment (0-59) of a time value\n   * @minimum 0\n   * @maximum 59\n   * @TJS-type integer\n   */\n  seconds?: number;\n\n  /**\n   * Integer value representing the millisecond segment of time.\n   * @minimum 0\n   * @maximum 999\n   * @TJS-type integer\n   */\n  milliseconds?: number;\n\n  /**\n   * A boolean flag indicating if date time is in utc time. If false, the date time is in local time\n   */\n  utc?: boolean;\n}\n\n/**\n * Internal Object for defining datetime expressions.\n * This is an expression version of DateTime.\n * If both month and quarter are provided, month has higher precedence.\n * `day` cannot be combined with other date.\n */\nexport interface DateTimeExpr {\n  year?: string;\n  quarter?: string;\n  month?: string;\n  date?: string;\n  day?: string;\n  hours?: string;\n  minutes?: string;\n  seconds?: string;\n  milliseconds?: string;\n  utc?: boolean;\n}\n\nexport function isDateTime(o: any): o is DateTime {\n  return (\n    !!o &&\n    (!!o.year ||\n      !!o.quarter ||\n      !!o.month ||\n      !!o.date ||\n      !!o.day ||\n      !!o.hours ||\n      !!o.minutes ||\n      !!o.seconds ||\n      !!o.milliseconds)\n  );\n}\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december'\n];\nexport const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));\n\nexport const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));\n\nfunction normalizeQuarter(q: number | string) {\n  if (isNumber(q)) {\n    if (q > 4) {\n      log.warn(log.message.invalidTimeUnit('quarter', q));\n    }\n    // We accept 1-based quarter, so need to readjust to 0-based quarter\n    return (q - 1).toString();\n  } else {\n    // Invalid quarter\n    throw new Error(log.message.invalidTimeUnit('quarter', q));\n  }\n}\n\nfunction normalizeMonth(m: string | number) {\n  if (isNumber(m)) {\n    // We accept 1-based month, so need to readjust to 0-based month\n    return (m - 1).toString();\n  } else {\n    const lowerM = m.toLowerCase();\n    const monthIndex = MONTHS.indexOf(lowerM);\n    if (monthIndex !== -1) {\n      return monthIndex + ''; // 0 for january, ...\n    }\n    const shortM = lowerM.substr(0, 3);\n    const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n    if (shortMonthIndex !== -1) {\n      return shortMonthIndex + '';\n    }\n    // Invalid month\n    throw new Error(log.message.invalidTimeUnit('month', m));\n  }\n}\n\nfunction normalizeDay(d: string | number) {\n  if (isNumber(d)) {\n    // mod so that this can be both 0-based where 0 = sunday\n    // and 1-based where 7=sunday\n    return (d % 7) + '';\n  } else {\n    const lowerD = d.toLowerCase();\n    const dayIndex = DAYS.indexOf(lowerD);\n    if (dayIndex !== -1) {\n      return dayIndex + ''; // 0 for january, ...\n    }\n    const shortD = lowerD.substr(0, 3);\n    const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n    if (shortDayIndex !== -1) {\n      return shortDayIndex + '';\n    }\n    // Invalid day\n    throw new Error(log.message.invalidTimeUnit('day', d));\n  }\n}\n\n/**\n * Return Vega Expression for a particular date time.\n * @param d\n * @param normalize whether to normalize quarter, month, day.\n * @param toJSON whether to return the date in JSON format\n */\nexport function dateTimeExpr(d: DateTime | DateTimeExpr, normalize = false, toJSON = false) {\n  const units: (string | number)[] = [];\n\n  if (normalize && d.day !== undefined) {\n    if (keys(d).length > 1) {\n      log.warn(log.message.droppedDay(d));\n      d = duplicate(d);\n      delete d.day;\n    }\n  }\n\n  if (d.year !== undefined) {\n    units.push(d.year);\n  } else if (d.day !== undefined) {\n    // Set year to 2006 for working with day since January 1 2006 is a Sunday\n    units.push(SUNDAY_YEAR);\n  } else {\n    units.push(0);\n  }\n\n  if (d.month !== undefined) {\n    const month = normalize ? normalizeMonth(d.month) : d.month;\n    units.push(month);\n  } else if (d.quarter !== undefined) {\n    const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n    units.push(quarter + '*3');\n  } else {\n    units.push(0); // months start at zero in JS\n  }\n\n  if (d.date !== undefined) {\n    units.push(d.date);\n  } else if (d.day !== undefined) {\n    // HACK: Day only works as a standalone unit\n    // This is only correct because we always set year to 2006 for day\n    const day = normalize ? normalizeDay(d.day) : d.day;\n    units.push(day + '+1');\n  } else {\n    units.push(1); // Date starts at 1 in JS\n  }\n\n  // Note: can't use TimeUnit enum here as importing it will create\n  // circular dependency problem!\n  for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds'] as const) {\n    const unit = d[timeUnit];\n    units.push(typeof unit === 'undefined' ? 0 : unit);\n  }\n\n  const unitsString = units.join(', ');\n\n  if (toJSON) {\n    if (d.utc) {\n      return new Function(`return +new Date(Date.UTC(${unitsString}))`)();\n    } else {\n      return new Function(`return +new Date(${unitsString})`)();\n    }\n  }\n\n  if (d.utc) {\n    return `utc(${unitsString})`;\n  } else {\n    return `datetime(${unitsString})`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}