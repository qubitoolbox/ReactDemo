{"ast":null,"code":"import { duplicate } from '../../util';\nimport { expression } from '../predicate';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\nexport class FilterNode extends DataFlowNode {\n  constructor(parent, model, filter) {\n    super(parent);\n    this.model = model;\n    this.filter = filter; // TODO: refactor this to not take a node and\n    // then add a static function makeFromOperand and make the constructor take only an expression\n\n    this.expr = expression(this.model, this.filter, this);\n    this._dependentFields = getDependentFields(this.expr);\n  }\n\n  clone() {\n    return new FilterNode(null, this.model, duplicate(this.filter));\n  }\n\n  dependentFields() {\n    return this._dependentFields;\n  }\n\n  producedFields() {\n    return new Set(); // filter does not produce any new fields\n  }\n\n  assemble() {\n    return {\n      type: 'filter',\n      expr: this.expr\n    };\n  }\n\n  hash() {\n    return `Filter ${this.expr}`;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/compile/data/filter.ts"],"names":[],"mappings":"AAEA,SAAQ,SAAR,QAAwB,YAAxB;AAGA,SAAQ,UAAR,QAAyB,cAAzB;AACA,SAAQ,YAAR,QAA2B,YAA3B;AACA,SAAQ,kBAAR,QAAiC,eAAjC;AAEA,OAAM,MAAO,UAAP,SAA0B,YAA1B,CAAsC;AAO1C,EAAA,WAAA,CAAY,MAAZ,EAAmD,KAAnD,EAAkF,MAAlF,EAAmH;AACjH,UAAM,MAAN;AADiD,SAAA,KAAA,GAAA,KAAA;AAA+B,SAAA,MAAA,GAAA,MAAA,CAAiC,CAGjH;AACA;;AACA,SAAK,IAAL,GAAY,UAAU,CAAC,KAAK,KAAN,EAAa,KAAK,MAAlB,EAA0B,IAA1B,CAAtB;AAEA,SAAK,gBAAL,GAAwB,kBAAkB,CAAC,KAAK,IAAN,CAA1C;AACD;;AAZM,EAAA,KAAK,GAAA;AACV,WAAO,IAAI,UAAJ,CAAe,IAAf,EAAqB,KAAK,KAA1B,EAAiC,SAAS,CAAC,KAAK,MAAN,CAA1C,CAAP;AACD;;AAYM,EAAA,eAAe,GAAA;AACpB,WAAO,KAAK,gBAAZ;AACD;;AAEM,EAAA,cAAc,GAAA;AACnB,WAAO,IAAI,GAAJ,EAAP,CADmB,CACO;AAC3B;;AAEM,EAAA,QAAQ,GAAA;AACb,WAAO;AACL,MAAA,IAAI,EAAE,QADD;AAEL,MAAA,IAAI,EAAE,KAAK;AAFN,KAAP;AAID;;AAEM,EAAA,IAAI,GAAA;AACT,WAAO,UAAU,KAAK,IAAI,EAA1B;AACD;;AAlCyC","sourcesContent":["import {LogicalOperand} from '../../logical';\nimport {Predicate} from '../../predicate';\nimport {duplicate} from '../../util';\nimport {FilterTransform as VgFilterTransform} from 'vega';\nimport {Model} from '../model';\nimport {expression} from '../predicate';\nimport {DataFlowNode} from './dataflow';\nimport {getDependentFields} from './expressions';\n\nexport class FilterNode extends DataFlowNode {\n  private expr: string;\n  private _dependentFields: Set<string>;\n  public clone() {\n    return new FilterNode(null, this.model, duplicate(this.filter));\n  }\n\n  constructor(parent: DataFlowNode, private readonly model: Model, private readonly filter: LogicalOperand<Predicate>) {\n    super(parent);\n\n    // TODO: refactor this to not take a node and\n    // then add a static function makeFromOperand and make the constructor take only an expression\n    this.expr = expression(this.model, this.filter, this);\n\n    this._dependentFields = getDependentFields(this.expr);\n  }\n\n  public dependentFields() {\n    return this._dependentFields;\n  }\n\n  public producedFields() {\n    return new Set<string>(); // filter does not produce any new fields\n  }\n\n  public assemble(): VgFilterTransform {\n    return {\n      type: 'filter',\n      expr: this.expr\n    };\n  }\n\n  public hash() {\n    return `Filter ${this.expr}`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}