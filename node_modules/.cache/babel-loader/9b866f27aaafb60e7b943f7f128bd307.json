{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\p5ML\\\\P5Comp.js\";\nimport React, { Component } from \"react\";\nimport Sketch from \"react-p5\";\nimport * as ml5 from 'ml5';\nimport tiger from \"../../assets/img/tiger.jpg\";\nexport default class PComp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      predictions: [] // Set the empty array predictions state\n\n    };\n\n    this.setPredictions = pred => {\n      // Set the prediction state with the model predictions\n      this.setState({\n        predictions: pred\n      });\n    };\n\n    this.classifyImg = () => {\n      // Initialize the Image Classifier method with MobileNet\n      const classifier = ml5.imageClassifier('MobileNet', modelLoaded); // When the model is loaded\n\n      function modelLoaded() {\n        console.log('Model Loaded!');\n      } // Put the image to classify inside a variable\n\n\n      const image = document.getElementById('image'); // Make a prediction with a selected image\n\n      classifier.predict(image, 5, function (err, results) {\n        // Return the results\n        return results;\n      }).then(results => {\n        // Set the predictions in the state\n        this.setPredictions(results);\n      });\n    };\n  }\n\n  componentDidMount() {\n    // once the component has mount, start the classification\n    this.classifyImg();\n  }\n\n  render() {\n    // First set the predictions to a default value while loading\n    let predictions = React.createElement(\"div\", {\n      className: \"loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }); // Map over the predictions and return each prediction with probability\n\n    if (this.state.predictions.length > 0) {\n      predictions = this.state.predictions.map((pred, i) => {\n        let {\n          className,\n          probability\n        } = pred; // round the probability with 2 decimal\n\n        probability = Math.floor(probability * 10000) / 100 + \"%\";\n        return React.createElement(\"div\", {\n          key: i + \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, i + 1, \". Prediction: \", className, \" at \", probability, \" \");\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Image classification with ML5.js\"), React.createElement(\"img\", {\n      src: tiger,\n      id: \"image\",\n      width: \"400\",\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), predictions);\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/p5ML/P5Comp.js"],"names":["React","Component","Sketch","ml5","tiger","PComp","state","predictions","setPredictions","pred","setState","classifyImg","classifier","imageClassifier","modelLoaded","console","log","image","document","getElementById","predict","err","results","then","componentDidMount","render","length","map","i","className","probability","Math","floor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AAEA,eAAe,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAAA;AAAA;AAAA,SACzCK,KADyC,GACjC;AACJC,MAAAA,WAAW,EAAE,EADT,CACa;;AADb,KADiC;;AAAA,SAKvCC,cALuC,GAKrBC,IAAD,IAAU;AACzB;AACA,WAAKC,QAAL,CAAc;AACZH,QAAAA,WAAW,EAAEE;AADD,OAAd;AAGD,KAVsC;;AAAA,SAYvCE,WAZuC,GAYzB,MAAM;AAClB;AACA,YAAMC,UAAU,GAAGT,GAAG,CAACU,eAAJ,CAAoB,WAApB,EAAiCC,WAAjC,CAAnB,CAFkB,CAGlB;;AACA,eAASA,WAAT,GAAuB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,OANiB,CAOlB;;;AACA,YAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAd,CARkB,CASlB;;AACAP,MAAAA,UAAU,CAACQ,OAAX,CAAmBH,KAAnB,EAA0B,CAA1B,EAA6B,UAASI,GAAT,EAAcC,OAAd,EAAuB;AACpD;AACE,eAAOA,OAAP;AACD,OAHD,EAIGC,IAJH,CAISD,OAAD,IAAa;AACjB;AACA,aAAKd,cAAL,CAAoBc,OAApB;AACD,OAPH;AAQD,KA9BsC;AAAA;;AAgCvCE,EAAAA,iBAAiB,GAAE;AACjB;AACA,SAAKb,WAAL;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP;AACA,QAAIlB,WAAW,GAAI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnB,CAFO,CAGP;;AACA,QAAG,KAAKD,KAAL,CAAWC,WAAX,CAAuBmB,MAAvB,GAAgC,CAAnC,EAAqC;AACnCnB,MAAAA,WAAW,GAAG,KAAKD,KAAL,CAAWC,WAAX,CAAuBoB,GAAvB,CAA2B,CAAClB,IAAD,EAAOmB,CAAP,KAAa;AACpD,YAAI;AAAEC,UAAAA,SAAF;AAAaC,UAAAA;AAAb,YAA6BrB,IAAjC,CADoD,CAEpD;;AACAqB,QAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWF,WAAW,GAAG,KAAzB,IAAkC,GAAlC,GAAwC,GAAtD;AACA,eACE;AAAK,UAAA,GAAG,EAAGF,CAAC,GAAG,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsBA,CAAC,GAAC,CAAxB,oBAA2CC,SAA3C,UAA4DC,WAA5D,MADF;AAGD,OAPa,CAAd;AAQD;;AAED,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADA,EAEA;AAAK,MAAA,GAAG,EAAG1B,KAAX;AAAmB,MAAA,EAAE,EAAC,OAAtB;AAA8B,MAAA,KAAK,EAAC,KAApC;AAA0C,MAAA,GAAG,EAAC,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,EAGIG,WAHJ,CADF;AAOD;;AA3DsC","sourcesContent":["import React, { Component } from \"react\";\r\nimport Sketch from \"react-p5\";\r\nimport * as ml5 from 'ml5'\r\nimport tiger from \"../../assets/img/tiger.jpg\";\r\n \r\nexport default class PComp extends Component {\r\n    state = {\r\n        predictions: []  // Set the empty array predictions state\r\n      }\r\n    \r\n      setPredictions = (pred) => {\r\n        // Set the prediction state with the model predictions\r\n        this.setState({\r\n          predictions: pred\r\n        });\r\n      }\r\n    \r\n      classifyImg = () => {\r\n        // Initialize the Image Classifier method with MobileNet\r\n        const classifier = ml5.imageClassifier('MobileNet', modelLoaded);\r\n        // When the model is loaded\r\n        function modelLoaded() {\r\n          console.log('Model Loaded!');\r\n        }\r\n        // Put the image to classify inside a variable\r\n        const image = document.getElementById('image');\r\n        // Make a prediction with a selected image\r\n        classifier.predict(image, 5, function(err, results) {\r\n        // Return the results\r\n          return results;\r\n        })\r\n          .then((results) => {\r\n            // Set the predictions in the state\r\n            this.setPredictions(results)\r\n          })\r\n      }\r\n    \r\n      componentDidMount(){\r\n        // once the component has mount, start the classification\r\n        this.classifyImg();\r\n      }\r\n    \r\n      render() {\r\n        // First set the predictions to a default value while loading\r\n        let predictions = (<div className=\"loader\"></div>);\r\n        // Map over the predictions and return each prediction with probability\r\n        if(this.state.predictions.length > 0){\r\n          predictions = this.state.predictions.map((pred, i) => {\r\n            let { className, probability } = pred;\r\n            // round the probability with 2 decimal\r\n            probability = Math.floor(probability * 10000) / 100 + \"%\";\r\n            return (\r\n              <div key={ i + \"\" }>{ i+1 }. Prediction: { className } at { probability } </div>\r\n            )\r\n          })\r\n        }\r\n          \r\n        return (\r\n          <div className=\"App\">\r\n          <h1>Image classification with ML5.js</h1>\r\n          <img src={ tiger } id=\"image\" width=\"400\" alt=\"\" />\r\n            { predictions }\r\n          </div>\r\n        );\r\n      }\r\n    }"]},"metadata":{},"sourceType":"module"}