{"ast":null,"code":"import Pulse from '../Pulse';\nvar NO_OPT = {\n  skip: false,\n  force: false\n};\n/**\n * Touches an operator, scheduling it to be evaluated. If invoked outside of\n * a pulse propagation, the operator will be evaluated the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the operator\n * will be queued for evaluation if and only if the operator has not yet been\n * evaluated on the current propagation timestamp.\n * @param {Operator} op - The operator to touch.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nexport function touch(op, options) {\n  var opt = options || NO_OPT;\n\n  if (this._pulse) {\n    // if in midst of propagation, add to priority queue\n    this._enqueue(op);\n  } else {\n    // otherwise, queue for next propagation\n    this._touched.add(op);\n  }\n\n  if (opt.skip) op.skip(true);\n  return this;\n}\n/**\n * Updates the value of the given operator.\n * @param {Operator} op - The operator to update.\n * @param {*} value - The value to set.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nexport function update(op, value, options) {\n  var opt = options || NO_OPT;\n\n  if (op.set(value) || opt.force) {\n    this.touch(op, opt);\n  }\n\n  return this;\n}\n/**\n * Pulses an operator with a changeset of tuples. If invoked outside of\n * a pulse propagation, the pulse will be applied the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n * will be added to the set of active pulses and will be applied if and\n * only if the target operator has not yet been evaluated on the current\n * propagation timestamp.\n * @param {Operator} op - The operator to pulse.\n * @param {ChangeSet} value - The tuple changeset to apply.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\n\nexport function pulse(op, changeset, options) {\n  this.touch(op, options || NO_OPT);\n  var p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),\n      t = op.pulse && op.pulse.source || [];\n  p.target = op;\n  this._input[op.id] = changeset.pulse(p, t);\n  return this;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-dataflow/src/dataflow/update.js"],"names":["Pulse","NO_OPT","skip","force","touch","op","options","opt","_pulse","_enqueue","_touched","add","update","value","set","pulse","changeset","p","_clock","t","source","target","_input","id"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,IAAIC,MAAM,GAAG;AAACC,EAAAA,IAAI,EAAE,KAAP;AAAcC,EAAAA,KAAK,EAAE;AAArB,CAAb;AAEA;;;;;;;;;;;;;AAYA,OAAO,SAASC,KAAT,CAAeC,EAAf,EAAmBC,OAAnB,EAA4B;AACjC,MAAIC,GAAG,GAAGD,OAAO,IAAIL,MAArB;;AACA,MAAI,KAAKO,MAAT,EAAiB;AACf;AACA,SAAKC,QAAL,CAAcJ,EAAd;AACD,GAHD,MAGO;AACL;AACA,SAAKK,QAAL,CAAcC,GAAd,CAAkBN,EAAlB;AACD;;AACD,MAAIE,GAAG,CAACL,IAAR,EAAcG,EAAE,CAACH,IAAH,CAAQ,IAAR;AACd,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;AAWA,OAAO,SAASU,MAAT,CAAgBP,EAAhB,EAAoBQ,KAApB,EAA2BP,OAA3B,EAAoC;AACzC,MAAIC,GAAG,GAAGD,OAAO,IAAIL,MAArB;;AACA,MAAII,EAAE,CAACS,GAAH,CAAOD,KAAP,KAAiBN,GAAG,CAACJ,KAAzB,EAAgC;AAC9B,SAAKC,KAAL,CAAWC,EAAX,EAAeE,GAAf;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;;AAcA,OAAO,SAASQ,KAAT,CAAeV,EAAf,EAAmBW,SAAnB,EAA8BV,OAA9B,EAAuC;AAC5C,OAAKF,KAAL,CAAWC,EAAX,EAAeC,OAAO,IAAIL,MAA1B;AAEA,MAAIgB,CAAC,GAAG,IAAIjB,KAAJ,CAAU,IAAV,EAAgB,KAAKkB,MAAL,IAAe,KAAKV,MAAL,GAAc,CAAd,GAAkB,CAAjC,CAAhB,CAAR;AAAA,MACIW,CAAC,GAAGd,EAAE,CAACU,KAAH,IAAYV,EAAE,CAACU,KAAH,CAASK,MAArB,IAA+B,EADvC;AAGAH,EAAAA,CAAC,CAACI,MAAF,GAAWhB,EAAX;AACA,OAAKiB,MAAL,CAAYjB,EAAE,CAACkB,EAAf,IAAqBP,SAAS,CAACD,KAAV,CAAgBE,CAAhB,EAAmBE,CAAnB,CAArB;AAEA,SAAO,IAAP;AACD","sourcesContent":["import Pulse from '../Pulse';\n\nvar NO_OPT = {skip: false, force: false};\n\n/**\n * Touches an operator, scheduling it to be evaluated. If invoked outside of\n * a pulse propagation, the operator will be evaluated the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the operator\n * will be queued for evaluation if and only if the operator has not yet been\n * evaluated on the current propagation timestamp.\n * @param {Operator} op - The operator to touch.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nexport function touch(op, options) {\n  var opt = options || NO_OPT;\n  if (this._pulse) {\n    // if in midst of propagation, add to priority queue\n    this._enqueue(op);\n  } else {\n    // otherwise, queue for next propagation\n    this._touched.add(op);\n  }\n  if (opt.skip) op.skip(true);\n  return this;\n}\n\n/**\n * Updates the value of the given operator.\n * @param {Operator} op - The operator to update.\n * @param {*} value - The value to set.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nexport function update(op, value, options) {\n  var opt = options || NO_OPT;\n  if (op.set(value) || opt.force) {\n    this.touch(op, opt);\n  }\n  return this;\n}\n\n/**\n * Pulses an operator with a changeset of tuples. If invoked outside of\n * a pulse propagation, the pulse will be applied the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n * will be added to the set of active pulses and will be applied if and\n * only if the target operator has not yet been evaluated on the current\n * propagation timestamp.\n * @param {Operator} op - The operator to pulse.\n * @param {ChangeSet} value - The tuple changeset to apply.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nexport function pulse(op, changeset, options) {\n  this.touch(op, options || NO_OPT);\n\n  var p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),\n      t = op.pulse && op.pulse.source || [];\n\n  p.target = op;\n  this._input[op.id] = changeset.pulse(p, t);\n\n  return this;\n}\n"]},"metadata":{},"sourceType":"module"}