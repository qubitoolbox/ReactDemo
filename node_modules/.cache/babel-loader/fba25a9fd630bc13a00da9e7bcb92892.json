{"ast":null,"code":"import { isBinned } from '../bin';\nimport { getMainRangeChannel, SECONDARY_RANGE_CHANNEL } from '../channel';\nimport { isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isUnitSpec } from '../spec/unit';\nexport class RuleForRangedLineNormalizer {\n  constructor() {\n    this.name = 'RuleForRangedLine';\n  }\n\n  hasMatchingType(spec) {\n    if (isUnitSpec(spec)) {\n      const {\n        encoding,\n        mark\n      } = spec;\n\n      if (mark === 'line') {\n        for (const channel of SECONDARY_RANGE_CHANNEL) {\n          const mainChannel = getMainRangeChannel(channel);\n          const mainChannelDef = encoding[mainChannel];\n\n          if (!!encoding[channel] && isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  run(spec, params, normalize) {\n    const {\n      encoding\n    } = spec;\n    log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n    return normalize(Object.assign(Object.assign({}, spec), {\n      mark: 'rule'\n    }), params);\n  }\n\n}","map":{"version":3,"sources":["../../../src/normalize/ruleforrangedline.ts"],"names":[],"mappings":"AAAA,SAAQ,QAAR,QAAuB,QAAvB;AACA,SAAQ,mBAAR,EAA6B,uBAA7B,QAA2D,YAA3D;AACA,SAAe,UAAf,QAAgC,eAAhC;AAEA,OAAO,KAAK,GAAZ,MAAqB,QAArB;AAEA,SAAyB,UAAzB,QAA0C,cAA1C;AAaA,OAAM,MAAO,2BAAP,CAAkC;AAAxC,EAAA,WAAA,GAAA;AACS,SAAA,IAAA,GAAO,mBAAP;AA+BR;;AA7BQ,EAAA,eAAe,CAAC,IAAD,EAA4B;AAChD,QAAI,UAAU,CAAC,IAAD,CAAd,EAAsB;AACpB,YAAM;AAAC,QAAA,QAAD;AAAW,QAAA;AAAX,UAAmB,IAAzB;;AACA,UAAI,IAAI,KAAK,MAAb,EAAqB;AACnB,aAAK,MAAM,OAAX,IAAsB,uBAAtB,EAA+C;AAC7C,gBAAM,WAAW,GAAG,mBAAmB,CAAC,OAAD,CAAvC;AACA,gBAAM,cAAc,GAAG,QAAQ,CAAC,WAAD,CAA/B;;AAEA,cAAI,CAAC,CAAC,QAAQ,CAAC,OAAD,CAAV,IAAuB,UAAU,CAAC,cAAD,CAAjC,IAAqD,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAhB,CAAlE,EAAwF;AACtF,mBAAO,IAAP;AACD;AACF;AACF;AACF;;AACD,WAAO,KAAP;AACD;;AAEM,EAAA,GAAG,CAAC,IAAD,EAAuB,MAAvB,EAAiD,SAAjD,EAAgF;AACxF,UAAM;AAAC,MAAA;AAAD,QAAa,IAAnB;AACA,IAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,OAAJ,CAAY,aAAZ,CAA0B,CAAC,CAAC,QAAQ,CAAC,EAArC,EAAyC,CAAC,CAAC,QAAQ,CAAC,EAApD,CAAT;AAEA,WAAO,SAAS,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAET,IAFS,CAAA,EAEL;AACP,MAAA,IAAI,EAAE;AADC,KAFK,CAAA,EAKd,MALc,CAAhB;AAOD;;AA/BqC","sourcesContent":["import {isBinned} from '../bin';\nimport {getMainRangeChannel, SECONDARY_RANGE_CHANNEL} from '../channel';\nimport {Field, isFieldDef} from '../channeldef';\nimport {Encoding} from '../encoding';\nimport * as log from '../log';\nimport {GenericSpec} from '../spec';\nimport {GenericUnitSpec, isUnitSpec} from '../spec/unit';\nimport {NonFacetUnitNormalizer, NormalizeLayerOrUnit, NormalizerParams} from './base';\n\ninterface EncodingX2Mixins {\n  x2: Encoding<Field>['x2'];\n}\n\ninterface EncodingY2Mixins {\n  y2: Encoding<Field>['y2'];\n}\n\ntype RangedLineSpec = GenericUnitSpec<Encoding<Field> & (EncodingX2Mixins | EncodingY2Mixins), 'line'>;\n\nexport class RuleForRangedLineNormalizer implements NonFacetUnitNormalizer<RangedLineSpec> {\n  public name = 'RuleForRangedLine';\n\n  public hasMatchingType(spec: GenericSpec<any, any>): spec is RangedLineSpec {\n    if (isUnitSpec(spec)) {\n      const {encoding, mark} = spec;\n      if (mark === 'line') {\n        for (const channel of SECONDARY_RANGE_CHANNEL) {\n          const mainChannel = getMainRangeChannel(channel);\n          const mainChannelDef = encoding[mainChannel];\n\n          if (!!encoding[channel] && isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  public run(spec: RangedLineSpec, params: NormalizerParams, normalize: NormalizeLayerOrUnit) {\n    const {encoding} = spec;\n    log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n\n    return normalize(\n      {\n        ...spec,\n        mark: 'rule'\n      },\n      params\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}