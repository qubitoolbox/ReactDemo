{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for loess transform nodes\n */\n\nexport class LoessTransformNode extends DataFlowNode {\n  constructor(parent, transform) {\n    var _a, _b, _c;\n\n    super(parent);\n    this.transform = transform;\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n\n    const specifiedAs = (_a = this.transform.as, _a !== null && _a !== void 0 ? _a : [undefined, undefined]);\n    this.transform.as = [(_b = specifiedAs[0], _b !== null && _b !== void 0 ? _b : transform.on), (_c = specifiedAs[1], _c !== null && _c !== void 0 ? _c : transform.loess)];\n  }\n\n  clone() {\n    return new LoessTransformNode(null, duplicate(this.transform));\n  }\n\n  dependentFields() {\n    var _a;\n\n    return new Set([this.transform.loess, this.transform.on, ...(_a = this.transform.groupby, _a !== null && _a !== void 0 ? _a : [])]);\n  }\n\n  producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  hash() {\n    return `LoessTransform ${hash(this.transform)}`;\n  }\n\n  assemble() {\n    const _a = this.transform,\n          {\n      loess,\n      on\n    } = _a,\n          rest = __rest(_a, [\"loess\", \"on\"]);\n\n    const result = Object.assign({\n      type: 'loess',\n      x: on,\n      y: loess\n    }, rest);\n    return result;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/compile/data/loess.ts"],"names":[],"mappings":";AAEA,SAAQ,SAAR,EAAmB,IAAnB,QAA8B,YAA9B;AACA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;;;AAGA,OAAM,MAAO,kBAAP,SAAkC,YAAlC,CAA8C;AAKlD,EAAA,WAAA,CAAY,MAAZ,EAA0C,SAA1C,EAAmE;;;AACjE,UAAM,MAAN;AADwC,SAAA,SAAA,GAAA,SAAA;AAExC,SAAK,SAAL,GAAiB,SAAS,CAAC,SAAD,CAA1B,CAFiE,CAE1B;;AACvC,UAAM,WAAW,IAAA,EAAA,GAAG,KAAK,SAAL,CAAe,EAAlB,EAAoB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,SAAD,EAAY,SAAZ,CAAxB,CAAjB;AACA,SAAK,SAAL,CAAe,EAAf,GAAoB,EAAA,EAAA,GAAC,WAAW,CAAC,CAAD,CAAZ,EAAe,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,SAAS,CAAC,EAA7B,IAA+B,EAAA,GAAE,WAAW,CAAC,CAAD,CAAb,EAAgB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,SAAS,CAAC,KAA7D,EAApB;AACD;;AATM,EAAA,KAAK,GAAA;AACV,WAAO,IAAI,kBAAJ,CAAuB,IAAvB,EAA6B,SAAS,CAAC,KAAK,SAAN,CAAtC,CAAP;AACD;;AASM,EAAA,eAAe,GAAA;;;AACpB,WAAO,IAAI,GAAJ,CAAQ,CAAC,KAAK,SAAL,CAAe,KAAhB,EAAuB,KAAK,SAAL,CAAe,EAAtC,EAA0C,IAAG,EAAA,GAAC,KAAK,SAAL,CAAe,OAAhB,EAAuB,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAA9B,CAA1C,CAAR,CAAP;AACD;;AAEM,EAAA,cAAc,GAAA;AACnB,WAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,EAAvB,CAAP;AACD;;AAEM,EAAA,IAAI,GAAA;AACT,WAAO,kBAAkB,IAAI,CAAC,KAAK,SAAN,CAAgB,EAA7C;AACD;;AAEM,EAAA,QAAQ,GAAA;AACb,UAAM,EAAA,GAAA,KAAA,SAAN;AAAA,UAAM;AAAC,MAAA,KAAD;AAAQ,MAAA;AAAR,QAAU,EAAhB;AAAA,UAAkB,IAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,OAAA,EAAA,IAAA,CAAA,CAAlB;;AACA,UAAM,MAAM,GAAA,MAAA,CAAA,MAAA,CAAA;AACV,MAAA,IAAI,EAAE,OADI;AAEV,MAAA,CAAC,EAAE,EAFO;AAGV,MAAA,CAAC,EAAE;AAHO,KAAA,EAIP,IAJO,CAAZ;AAMA,WAAO,MAAP;AACD;;AAjCiD","sourcesContent":["import {LoessTransform as VgLoessTransform} from 'vega';\nimport {LoessTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for loess transform nodes\n */\nexport class LoessTransformNode extends DataFlowNode {\n  public clone() {\n    return new LoessTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: LoessTransform) {\n    super(parent);\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const specifiedAs = this.transform.as ?? [undefined, undefined];\n    this.transform.as = [specifiedAs[0] ?? transform.on, specifiedAs[1] ?? transform.loess];\n  }\n\n  public dependentFields() {\n    return new Set([this.transform.loess, this.transform.on, ...(this.transform.groupby ?? [])]);\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  public hash() {\n    return `LoessTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgLoessTransform {\n    const {loess, on, ...rest} = this.transform;\n    const result: VgLoessTransform = {\n      type: 'loess',\n      x: on,\n      y: loess,\n      ...rest\n    };\n    return result;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}