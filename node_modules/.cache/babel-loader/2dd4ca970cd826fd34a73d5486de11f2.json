{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\FirstML\\\\hmm.js\";\nimport React from \"react\";\nimport * as tf from '@tensorflow/tfjs'; //import '@tensorflow/tfjs-react-native';\n\nexport default class TheMl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isTfReady: false,\n      isModelReady: false\n    };\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n\n    this.setState({\n      isTfReady: true\n    });\n    this.model = await mobilenet.load();\n    this.setState({\n      isModelReady: true\n    });\n  }\n\n  render() {\n    //\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, this.state.isTfReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"First Time outputing TFS\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"hmm\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Model ready?\", ' ', this.state.isModelReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Yes\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Loading Model...\")));\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/hmm.js"],"names":["React","tf","TheMl","Component","constructor","props","state","isTfReady","isModelReady","componentDidMount","ready","setState","model","mobilenet","load","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB,C,CACA;;AAEA,eAAe,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AACjDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,YAAY,EAAE;AAFH,KAAb;AAID;;AAED,QAAMC,iBAAN,GAA0B;AACxB;AACA,UAAMR,EAAE,CAACS,KAAH,EAAN,CAFwB,CAGxB;;AACA,SAAKC,QAAL,CAAc;AACZJ,MAAAA,SAAS,EAAE;AADC,KAAd;AAGA,SAAKK,KAAL,GAAa,MAAMC,SAAS,CAACC,IAAV,EAAnB;AACA,SAAKH,QAAL,CAAc;AAAEH,MAAAA,YAAY,EAAE;AAAhB,KAAd;AACD;;AAGDO,EAAAA,MAAM,GAAG;AACP;AACA,WAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKT,KAAL,CAAWC,SAAX,GAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAArB,GAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAD1D,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACiB,GADjB,EAEK,KAAKD,KAAL,CAAWE,YAAX,GAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA1B,GAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAF5C,CAFJ,CAFJ;AAWD;;AAlCgD","sourcesContent":["import React from \"react\";\r\nimport * as tf from '@tensorflow/tfjs';\r\n//import '@tensorflow/tfjs-react-native';\r\n \r\nexport default class TheMl extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isTfReady: false,\r\n      isModelReady: false\r\n    };\r\n  }\r\n \r\n  async componentDidMount() {\r\n    // Wait for tf to be ready.\r\n    await tf.ready();\r\n    // Signal to the app that tensorflow.js can now be used.\r\n    this.setState({\r\n      isTfReady: true,\r\n    })\r\n    this.model = await mobilenet.load()\r\n    this.setState({ isModelReady: true })\r\n  }\r\n \r\n \r\n  render() {\r\n    //\r\n    return (\r\n\r\n        <div>\r\n            {this.state.isTfReady?<p>First Time outputing TFS</p>:<p>hmm</p>}\r\n            <p>\r\n                Model ready?{' '}\r\n                {this.state.isModelReady ? <p>Yes</p> : <p>Loading Model...</p>}\r\n            </p>\r\n        </div>\r\n\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}