{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { isString, toSet } from 'vega-util';\nimport * as CHANNEL from './channel';\nimport { CHANNELS, isColorChannel } from './channel';\nimport * as log from './log';\nimport * as TYPE from './type';\nimport { TYPE_INDEX } from './type';\nimport { contains, keys } from './util';\nexport var ScaleType;\n\n(function (ScaleType) {\n  // Continuous - Quantitative\n  ScaleType.LINEAR = 'linear';\n  ScaleType.LOG = 'log';\n  ScaleType.POW = 'pow';\n  ScaleType.SQRT = 'sqrt';\n  ScaleType.SYMLOG = 'symlog'; // Continuous - Time\n\n  ScaleType.TIME = 'time';\n  ScaleType.UTC = 'utc'; // Discretizing scales\n\n  ScaleType.QUANTILE = 'quantile';\n  ScaleType.QUANTIZE = 'quantize';\n  ScaleType.THRESHOLD = 'threshold';\n  ScaleType.BIN_ORDINAL = 'bin-ordinal'; // Discrete scales\n\n  ScaleType.ORDINAL = 'ordinal';\n  ScaleType.POINT = 'point';\n  ScaleType.BAND = 'band';\n})(ScaleType || (ScaleType = {}));\n/**\n * Index for scale categories -- only scale of the same categories can be merged together.\n * Current implementation is trying to be conservative and avoid merging scale type that might not work together\n */\n\n\nconst SCALE_CATEGORY_INDEX = {\n  linear: 'numeric',\n  log: 'numeric',\n  pow: 'numeric',\n  sqrt: 'numeric',\n  symlog: 'numeric',\n  time: 'time',\n  utc: 'time',\n  ordinal: 'ordinal',\n  'bin-ordinal': 'bin-ordinal',\n  point: 'ordinal-position',\n  band: 'ordinal-position',\n  quantile: 'discretizing',\n  quantize: 'discretizing',\n  threshold: 'discretizing'\n};\nexport const SCALE_TYPES = keys(SCALE_CATEGORY_INDEX);\n/**\n * Whether the two given scale types can be merged together.\n */\n\nexport function scaleCompatible(scaleType1, scaleType2) {\n  const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];\n  const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];\n  return scaleCategory1 === scaleCategory2 || scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time' || scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time';\n}\n/**\n * Index for scale precedence -- high score = higher priority for merging.\n */\n\nconst SCALE_PRECEDENCE_INDEX = {\n  // numeric\n  linear: 0,\n  log: 1,\n  pow: 1,\n  sqrt: 1,\n  symlog: 1,\n  // time\n  time: 0,\n  utc: 0,\n  // ordinal-position -- these have higher precedence than continuous scales as they support more types of data\n  point: 10,\n  band: 11,\n  // non grouped types\n  ordinal: 0,\n  'bin-ordinal': 0,\n  quantile: 0,\n  quantize: 0,\n  threshold: 0\n};\n/**\n * Return scale categories -- only scale of the same categories can be merged together.\n */\n\nexport function scaleTypePrecedence(scaleType) {\n  return SCALE_PRECEDENCE_INDEX[scaleType];\n}\nexport const CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];\nconst CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);\nexport const QUANTITATIVE_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog'];\nexport const CONTINUOUS_TO_DISCRETE_SCALES = ['quantile', 'quantize', 'threshold'];\nconst CONTINUOUS_TO_DISCRETE_INDEX = toSet(CONTINUOUS_TO_DISCRETE_SCALES);\nexport const CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat(['quantile', 'quantize', 'threshold']);\nconst CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);\nexport const DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];\nconst DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);\nexport const TIME_SCALE_TYPES = ['time', 'utc'];\nexport function hasDiscreteDomain(type) {\n  return type in DISCRETE_DOMAIN_INDEX;\n}\nexport function hasContinuousDomain(type) {\n  return type in CONTINUOUS_DOMAIN_INDEX;\n}\nexport function isContinuousToContinuous(type) {\n  return type in CONTINUOUS_TO_CONTINUOUS_INDEX;\n}\nexport function isContinuousToDiscrete(type) {\n  return type in CONTINUOUS_TO_DISCRETE_INDEX;\n}\nexport const defaultScaleConfig = {\n  pointPadding: 0.5,\n  barBandPaddingInner: 0.1,\n  rectBandPaddingInner: 0,\n  minBandSize: 2,\n  minFontSize: 8,\n  maxFontSize: 40,\n  minOpacity: 0.3,\n  maxOpacity: 0.8,\n  // FIXME: revise if these *can* become ratios of width/height step\n  minSize: 9,\n  minStrokeWidth: 1,\n  maxStrokeWidth: 4,\n  quantileCount: 4,\n  quantizeCount: 4\n};\nexport function isExtendedScheme(scheme) {\n  return !isString(scheme) && !!scheme['name'];\n}\nexport function isSelectionDomain(domain) {\n  var _a;\n\n  return (_a = domain) === null || _a === void 0 ? void 0 : _a['selection'];\n}\nconst SCALE_PROPERTY_INDEX = {\n  type: 1,\n  domain: 1,\n  align: 1,\n  range: 1,\n  scheme: 1,\n  bins: 1,\n  // Other properties\n  reverse: 1,\n  round: 1,\n  // quantitative / time\n  clamp: 1,\n  nice: 1,\n  // quantitative\n  base: 1,\n  exponent: 1,\n  constant: 1,\n  interpolate: 1,\n  zero: 1,\n  // band/point\n  padding: 1,\n  paddingInner: 1,\n  paddingOuter: 1\n};\nexport const SCALE_PROPERTIES = keys(SCALE_PROPERTY_INDEX);\n\nconst {\n  type,\n  domain,\n  range,\n  scheme\n} = SCALE_PROPERTY_INDEX,\n      NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = __rest(SCALE_PROPERTY_INDEX, [\"type\", \"domain\", \"range\", \"scheme\"]);\n\nexport const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = keys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);\nexport const SCALE_TYPE_INDEX = generateScaleTypeIndex();\nexport function scaleTypeSupportProperty(scaleType, propName) {\n  switch (propName) {\n    case 'type':\n    case 'domain':\n    case 'reverse':\n    case 'range':\n      return true;\n\n    case 'scheme':\n    case 'interpolate':\n      return !contains(['point', 'band', 'identity'], scaleType);\n\n    case 'bins':\n      return !contains(['point', 'band', 'identity', 'ordinal'], scaleType);\n\n    case 'round':\n      return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';\n\n    case 'padding':\n      return isContinuousToContinuous(scaleType) || contains(['point', 'band'], scaleType);\n\n    case 'paddingOuter':\n    case 'align':\n      return contains(['point', 'band'], scaleType);\n\n    case 'paddingInner':\n      return scaleType === 'band';\n\n    case 'clamp':\n      return isContinuousToContinuous(scaleType);\n\n    case 'nice':\n      return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';\n\n    case 'exponent':\n      return scaleType === 'pow';\n\n    case 'base':\n      return scaleType === 'log';\n\n    case 'constant':\n      return scaleType === 'symlog';\n\n    case 'zero':\n      return hasContinuousDomain(scaleType) && !contains(['log', 'time', 'utc', 'threshold', 'quantile' // quantile depends on distribution so zero does not matter\n      ], scaleType);\n  }\n}\n/**\n * Returns undefined if the input channel supports the input scale property name\n */\n\nexport function channelScalePropertyIncompatability(channel, propName) {\n  switch (propName) {\n    case 'interpolate':\n    case 'scheme':\n      if (!isColorChannel(channel)) {\n        return log.message.cannotUseScalePropertyWithNonColor(channel);\n      }\n\n      return undefined;\n\n    case 'align':\n    case 'type':\n    case 'bins':\n    case 'domain':\n    case 'range':\n    case 'base':\n    case 'exponent':\n    case 'constant':\n    case 'nice':\n    case 'padding':\n    case 'paddingInner':\n    case 'paddingOuter':\n    case 'reverse':\n    case 'round':\n    case 'clamp':\n    case 'zero':\n      return undefined;\n    // GOOD!\n  }\n}\nexport function scaleTypeSupportDataType(specifiedType, fieldDefType) {\n  if (contains([TYPE.ORDINAL, TYPE.NOMINAL], fieldDefType)) {\n    return specifiedType === undefined || hasDiscreteDomain(specifiedType);\n  } else if (fieldDefType === TYPE.TEMPORAL) {\n    return contains([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);\n  } else if (fieldDefType === TYPE.QUANTITATIVE) {\n    return contains([ScaleType.LOG, ScaleType.POW, ScaleType.SQRT, ScaleType.SYMLOG, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD, ScaleType.LINEAR, undefined], specifiedType);\n  }\n\n  return true;\n}\nexport function channelSupportScaleType(channel, scaleType) {\n  switch (channel) {\n    case CHANNEL.X:\n    case CHANNEL.Y:\n      return isContinuousToContinuous(scaleType) || contains(['band', 'point'], scaleType);\n\n    case CHANNEL.SIZE: // TODO: size and opacity can support ordinal with more modification\n\n    case CHANNEL.STROKEWIDTH:\n    case CHANNEL.OPACITY:\n    case CHANNEL.FILLOPACITY:\n    case CHANNEL.STROKEOPACITY:\n      // Although it generally doesn't make sense to use band with size and opacity,\n      // it can also work since we use band: 0.5 to get midpoint.\n      return isContinuousToContinuous(scaleType) || isContinuousToDiscrete(scaleType) || contains(['band', 'point'], scaleType);\n\n    case CHANNEL.COLOR:\n    case CHANNEL.FILL:\n    case CHANNEL.STROKE:\n      return scaleType !== 'band';\n    // band does not make sense with color\n\n    case CHANNEL.SHAPE:\n      return scaleType === 'ordinal';\n    // shape = lookup only\n  }\n  /* istanbul ignore next: it should never reach here */\n\n\n  return false;\n}\nexport function getSupportedScaleType(channel, fieldDefType) {\n  return SCALE_TYPE_INDEX[generateScaleTypeIndexKey(channel, fieldDefType)];\n} // generates ScaleTypeIndex where keys are encoding channels and values are list of valid ScaleTypes\n\nfunction generateScaleTypeIndex() {\n  var _a;\n\n  const index = {};\n\n  for (const channel of CHANNELS) {\n    for (const fieldDefType of keys(TYPE_INDEX)) {\n      for (const scaleType of SCALE_TYPES) {\n        const key = generateScaleTypeIndexKey(channel, fieldDefType);\n\n        if (channelSupportScaleType(channel, scaleType) && scaleTypeSupportDataType(scaleType, fieldDefType)) {\n          index[key] = (_a = index[key], _a !== null && _a !== void 0 ? _a : []);\n          index[key].push(scaleType);\n        }\n      }\n    }\n  }\n\n  return index;\n}\n\nfunction generateScaleTypeIndexKey(channel, fieldDefType) {\n  return channel + '_' + fieldDefType;\n}","map":{"version":3,"sources":["../../src/scale.ts"],"names":[],"mappings":";AACA,SAAQ,QAAR,EAAkB,KAAlB,QAA8B,WAA9B;AACA,OAAO,KAAK,OAAZ,MAAyB,WAAzB;AACA,SAAiB,QAAjB,EAA2B,cAA3B,QAAgD,WAAhD;AAEA,OAAO,KAAK,GAAZ,MAAqB,OAArB;AAEA,OAAO,KAAK,IAAZ,MAAsB,QAAtB;AACA,SAAc,UAAd,QAA+B,QAA/B;AACA,SAAQ,QAAR,EAAwB,IAAxB,QAAmC,QAAnC;AAGA,OAAM,IAAW,SAAX;;AAAN,CAAA,UAAiB,SAAjB,EAA0B;AACxB;AACa,EAAA,SAAA,CAAA,MAAA,GAAmB,QAAnB;AACA,EAAA,SAAA,CAAA,GAAA,GAAa,KAAb;AACA,EAAA,SAAA,CAAA,GAAA,GAAa,KAAb;AACA,EAAA,SAAA,CAAA,IAAA,GAAe,MAAf;AACA,EAAA,SAAA,CAAA,MAAA,GAAmB,QAAnB,CANW,CAOxB;;AACa,EAAA,SAAA,CAAA,IAAA,GAAe,MAAf;AACA,EAAA,SAAA,CAAA,GAAA,GAAa,KAAb,CATW,CAWxB;;AACa,EAAA,SAAA,CAAA,QAAA,GAAuB,UAAvB;AACA,EAAA,SAAA,CAAA,QAAA,GAAuB,UAAvB;AACA,EAAA,SAAA,CAAA,SAAA,GAAyB,WAAzB;AACA,EAAA,SAAA,CAAA,WAAA,GAA6B,aAA7B,CAfW,CAiBxB;;AACa,EAAA,SAAA,CAAA,OAAA,GAAqB,SAArB;AACA,EAAA,SAAA,CAAA,KAAA,GAAiB,OAAjB;AACA,EAAA,SAAA,CAAA,IAAA,GAAe,MAAf;AACd,CArBD,EAAiB,SAAS,KAAT,SAAS,GAAA,EAAA,CAA1B;AAuCA;;;;;;AAIA,MAAM,oBAAoB,GAGtB;AACF,EAAA,MAAM,EAAE,SADN;AAEF,EAAA,GAAG,EAAE,SAFH;AAGF,EAAA,GAAG,EAAE,SAHH;AAIF,EAAA,IAAI,EAAE,SAJJ;AAKF,EAAA,MAAM,EAAE,SALN;AAMF,EAAA,IAAI,EAAE,MANJ;AAOF,EAAA,GAAG,EAAE,MAPH;AAQF,EAAA,OAAO,EAAE,SARP;AASF,iBAAe,aATb;AAUF,EAAA,KAAK,EAAE,kBAVL;AAWF,EAAA,IAAI,EAAE,kBAXJ;AAYF,EAAA,QAAQ,EAAE,cAZR;AAaF,EAAA,QAAQ,EAAE,cAbR;AAcF,EAAA,SAAS,EAAE;AAdT,CAHJ;AAoBA,OAAO,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAD,CAAxB;AAEP;;;;AAGA,OAAM,SAAU,eAAV,CAA0B,UAA1B,EAAiD,UAAjD,EAAsE;AAC1E,QAAM,cAAc,GAAG,oBAAoB,CAAC,UAAD,CAA3C;AACA,QAAM,cAAc,GAAG,oBAAoB,CAAC,UAAD,CAA3C;AACA,SACE,cAAc,KAAK,cAAnB,IACC,cAAc,KAAK,kBAAnB,IAAyC,cAAc,KAAK,MAD7D,IAEC,cAAc,KAAK,kBAAnB,IAAyC,cAAc,KAAK,MAH/D;AAKD;AAED;;;;AAGA,MAAM,sBAAsB,GAGxB;AACF;AACA,EAAA,MAAM,EAAE,CAFN;AAGF,EAAA,GAAG,EAAE,CAHH;AAIF,EAAA,GAAG,EAAE,CAJH;AAKF,EAAA,IAAI,EAAE,CALJ;AAMF,EAAA,MAAM,EAAE,CANN;AAOF;AACA,EAAA,IAAI,EAAE,CARJ;AASF,EAAA,GAAG,EAAE,CATH;AAUF;AACA,EAAA,KAAK,EAAE,EAXL;AAYF,EAAA,IAAI,EAAE,EAZJ;AAaF;AACA,EAAA,OAAO,EAAE,CAdP;AAeF,iBAAe,CAfb;AAgBF,EAAA,QAAQ,EAAE,CAhBR;AAiBF,EAAA,QAAQ,EAAE,CAjBR;AAkBF,EAAA,SAAS,EAAE;AAlBT,CAHJ;AAwBA;;;;AAGA,OAAM,SAAU,mBAAV,CAA8B,SAA9B,EAAkD;AACtD,SAAO,sBAAsB,CAAC,SAAD,CAA7B;AACD;AAED,OAAO,MAAM,+BAA+B,GAAgB,CAAC,QAAD,EAAW,KAAX,EAAkB,KAAlB,EAAyB,MAAzB,EAAiC,QAAjC,EAA2C,MAA3C,EAAmD,KAAnD,CAArD;AACP,MAAM,8BAA8B,GAAG,KAAK,CAAC,+BAAD,CAA5C;AAEA,OAAO,MAAM,mBAAmB,GAAgB,CAAC,QAAD,EAAW,KAAX,EAAkB,KAAlB,EAAyB,MAAzB,EAAiC,QAAjC,CAAzC;AAEP,OAAO,MAAM,6BAA6B,GAAgB,CAAC,UAAD,EAAa,UAAb,EAAyB,WAAzB,CAAnD;AACP,MAAM,4BAA4B,GAAG,KAAK,CAAC,6BAAD,CAA1C;AAEA,OAAO,MAAM,wBAAwB,GAAgB,+BAA+B,CAAC,MAAhC,CAAuC,CAC1F,UAD0F,EAE1F,UAF0F,EAG1F,WAH0F,CAAvC,CAA9C;AAKP,MAAM,uBAAuB,GAAG,KAAK,CAAC,wBAAD,CAArC;AAEA,OAAO,MAAM,sBAAsB,GAAgB,CAAC,SAAD,EAAY,aAAZ,EAA2B,OAA3B,EAAoC,MAApC,CAA5C;AACP,MAAM,qBAAqB,GAAG,KAAK,CAAC,sBAAD,CAAnC;AAEA,OAAO,MAAM,gBAAgB,GAAgB,CAAC,MAAD,EAAS,KAAT,CAAtC;AAEP,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAA2C;AAC/C,SAAO,IAAI,IAAI,qBAAf;AACD;AAED,OAAM,SAAU,mBAAV,CACJ,IADI,EACW;AAEf,SAAO,IAAI,IAAI,uBAAf;AACD;AAED,OAAM,SAAU,wBAAV,CACJ,IADI,EACW;AAEf,SAAO,IAAI,IAAI,8BAAf;AACD;AAED,OAAM,SAAU,sBAAV,CAAiC,IAAjC,EAAgD;AACpD,SAAO,IAAI,IAAI,4BAAf;AACD;AAyMD,OAAO,MAAM,kBAAkB,GAAgB;AAC7C,EAAA,YAAY,EAAE,GAD+B;AAG7C,EAAA,mBAAmB,EAAE,GAHwB;AAI7C,EAAA,oBAAoB,EAAE,CAJuB;AAM7C,EAAA,WAAW,EAAE,CANgC;AAQ7C,EAAA,WAAW,EAAE,CARgC;AAS7C,EAAA,WAAW,EAAE,EATgC;AAW7C,EAAA,UAAU,EAAE,GAXiC;AAY7C,EAAA,UAAU,EAAE,GAZiC;AAc7C;AACA,EAAA,OAAO,EAAE,CAfoC;AAiB7C,EAAA,cAAc,EAAE,CAjB6B;AAkB7C,EAAA,cAAc,EAAE,CAlB6B;AAmB7C,EAAA,aAAa,EAAE,CAnB8B;AAoB7C,EAAA,aAAa,EAAE;AApB8B,CAAxC;AA6CP,OAAM,SAAU,gBAAV,CAA2B,MAA3B,EAAwD;AAC5D,SAAO,CAAC,QAAQ,CAAC,MAAD,CAAT,IAAqB,CAAC,CAAC,MAAM,CAAC,MAAD,CAApC;AACD;AAED,OAAM,SAAU,iBAAV,CAA4B,MAA5B,EAA0C;;;AAC9C,SAAA,CAAA,EAAA,GAAO,MAAP,MAAa,IAAb,IAAa,EAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAa,EAAA,CAAG,WAAH,CAAb;AACD;AAoLD,MAAM,oBAAoB,GAAsB;AAC9C,EAAA,IAAI,EAAE,CADwC;AAE9C,EAAA,MAAM,EAAE,CAFsC;AAG9C,EAAA,KAAK,EAAE,CAHuC;AAI9C,EAAA,KAAK,EAAE,CAJuC;AAK9C,EAAA,MAAM,EAAE,CALsC;AAM9C,EAAA,IAAI,EAAE,CANwC;AAO9C;AACA,EAAA,OAAO,EAAE,CARqC;AAS9C,EAAA,KAAK,EAAE,CATuC;AAU9C;AACA,EAAA,KAAK,EAAE,CAXuC;AAY9C,EAAA,IAAI,EAAE,CAZwC;AAa9C;AACA,EAAA,IAAI,EAAE,CAdwC;AAe9C,EAAA,QAAQ,EAAE,CAfoC;AAgB9C,EAAA,QAAQ,EAAE,CAhBoC;AAiB9C,EAAA,WAAW,EAAE,CAjBiC;AAkB9C,EAAA,IAAI,EAAE,CAlBwC;AAmB9C;AACA,EAAA,OAAO,EAAE,CApBqC;AAqB9C,EAAA,YAAY,EAAE,CArBgC;AAsB9C,EAAA,YAAY,EAAE;AAtBgC,CAAhD;AAyBA,OAAO,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAD,CAA7B;;AAEP,MAAM;AAAC,EAAA,IAAD;AAAO,EAAA,MAAP;AAAe,EAAA,KAAf;AAAsB,EAAA;AAAtB,IAAoF,oBAA1F;AAAA,MAAoC,+CAAA,GAAA,MAAA,CAAA,oBAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,CAAA,CAApC;;AAEA,OAAO,MAAM,2CAA2C,GAAG,IAAI,CAAC,+CAAD,CAAxD;AAEP,OAAO,MAAM,gBAAgB,GAAG,sBAAsB,EAA/C;AAEP,OAAM,SAAU,wBAAV,CAAmC,SAAnC,EAAyD,QAAzD,EAA8E;AAClF,UAAQ,QAAR;AACE,SAAK,MAAL;AACA,SAAK,QAAL;AACA,SAAK,SAAL;AACA,SAAK,OAAL;AACE,aAAO,IAAP;;AACF,SAAK,QAAL;AACA,SAAK,aAAL;AACE,aAAO,CAAC,QAAQ,CAAC,CAAC,OAAD,EAAU,MAAV,EAAkB,UAAlB,CAAD,EAAgC,SAAhC,CAAhB;;AACF,SAAK,MAAL;AACE,aAAO,CAAC,QAAQ,CAAC,CAAC,OAAD,EAAU,MAAV,EAAkB,UAAlB,EAA8B,SAA9B,CAAD,EAA2C,SAA3C,CAAhB;;AACF,SAAK,OAAL;AACE,aAAO,wBAAwB,CAAC,SAAD,CAAxB,IAAuC,SAAS,KAAK,MAArD,IAA+D,SAAS,KAAK,OAApF;;AACF,SAAK,SAAL;AACE,aAAO,wBAAwB,CAAC,SAAD,CAAxB,IAAuC,QAAQ,CAAC,CAAC,OAAD,EAAU,MAAV,CAAD,EAAoB,SAApB,CAAtD;;AACF,SAAK,cAAL;AACA,SAAK,OAAL;AACE,aAAO,QAAQ,CAAC,CAAC,OAAD,EAAU,MAAV,CAAD,EAAoB,SAApB,CAAf;;AACF,SAAK,cAAL;AACE,aAAO,SAAS,KAAK,MAArB;;AACF,SAAK,OAAL;AACE,aAAO,wBAAwB,CAAC,SAAD,CAA/B;;AACF,SAAK,MAAL;AACE,aAAO,wBAAwB,CAAC,SAAD,CAAxB,IAAuC,SAAS,KAAK,UAArD,IAAmE,SAAS,KAAK,WAAxF;;AACF,SAAK,UAAL;AACE,aAAO,SAAS,KAAK,KAArB;;AACF,SAAK,MAAL;AACE,aAAO,SAAS,KAAK,KAArB;;AACF,SAAK,UAAL;AACE,aAAO,SAAS,KAAK,QAArB;;AACF,SAAK,MAAL;AACE,aACE,mBAAmB,CAAC,SAAD,CAAnB,IACA,CAAC,QAAQ,CACP,CACE,KADF,EAEE,MAFF,EAGE,KAHF,EAIE,WAJF,EAKE,UALF,CAKa;AALb,OADO,EAQP,SARO,CAFX;AA/BJ;AA6CD;AAED;;;;AAGA,OAAM,SAAU,mCAAV,CAA8C,OAA9C,EAAgE,QAAhE,EAAqF;AACzF,UAAQ,QAAR;AACE,SAAK,aAAL;AACA,SAAK,QAAL;AACE,UAAI,CAAC,cAAc,CAAC,OAAD,CAAnB,EAA8B;AAC5B,eAAO,GAAG,CAAC,OAAJ,CAAY,kCAAZ,CAA+C,OAA/C,CAAP;AACD;;AACD,aAAO,SAAP;;AACF,SAAK,OAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,QAAL;AACA,SAAK,OAAL;AACA,SAAK,MAAL;AACA,SAAK,UAAL;AACA,SAAK,UAAL;AACA,SAAK,MAAL;AACA,SAAK,SAAL;AACA,SAAK,cAAL;AACA,SAAK,cAAL;AACA,SAAK,SAAL;AACA,SAAK,OAAL;AACA,SAAK,OAAL;AACA,SAAK,MAAL;AACE,aAAO,SAAP;AAAkB;AAvBtB;AAyBD;AAED,OAAM,SAAU,wBAAV,CAAmC,aAAnC,EAA6D,YAA7D,EAA+E;AACnF,MAAI,QAAQ,CAAC,CAAC,IAAI,CAAC,OAAN,EAAe,IAAI,CAAC,OAApB,CAAD,EAA+B,YAA/B,CAAZ,EAA0D;AACxD,WAAO,aAAa,KAAK,SAAlB,IAA+B,iBAAiB,CAAC,aAAD,CAAvD;AACD,GAFD,MAEO,IAAI,YAAY,KAAK,IAAI,CAAC,QAA1B,EAAoC;AACzC,WAAO,QAAQ,CAAC,CAAC,SAAS,CAAC,IAAX,EAAiB,SAAS,CAAC,GAA3B,EAAgC,SAAhC,CAAD,EAA6C,aAA7C,CAAf;AACD,GAFM,MAEA,IAAI,YAAY,KAAK,IAAI,CAAC,YAA1B,EAAwC;AAC7C,WAAO,QAAQ,CACb,CACE,SAAS,CAAC,GADZ,EAEE,SAAS,CAAC,GAFZ,EAGE,SAAS,CAAC,IAHZ,EAIE,SAAS,CAAC,MAJZ,EAKE,SAAS,CAAC,QALZ,EAME,SAAS,CAAC,QANZ,EAOE,SAAS,CAAC,SAPZ,EAQE,SAAS,CAAC,MARZ,EASE,SATF,CADa,EAYb,aAZa,CAAf;AAcD;;AAED,SAAO,IAAP;AACD;AAED,OAAM,SAAU,uBAAV,CAAkC,OAAlC,EAAoD,SAApD,EAAwE;AAC5E,UAAQ,OAAR;AACE,SAAK,OAAO,CAAC,CAAb;AACA,SAAK,OAAO,CAAC,CAAb;AACE,aAAO,wBAAwB,CAAC,SAAD,CAAxB,IAAuC,QAAQ,CAAC,CAAC,MAAD,EAAS,OAAT,CAAD,EAAoB,SAApB,CAAtD;;AACF,SAAK,OAAO,CAAC,IAAb,CAJF,CAIqB;;AACnB,SAAK,OAAO,CAAC,WAAb;AACA,SAAK,OAAO,CAAC,OAAb;AACA,SAAK,OAAO,CAAC,WAAb;AACA,SAAK,OAAO,CAAC,aAAb;AACE;AACA;AACA,aACE,wBAAwB,CAAC,SAAD,CAAxB,IACA,sBAAsB,CAAC,SAAD,CADtB,IAEA,QAAQ,CAAC,CAAC,MAAD,EAAS,OAAT,CAAD,EAAoB,SAApB,CAHV;;AAKF,SAAK,OAAO,CAAC,KAAb;AACA,SAAK,OAAO,CAAC,IAAb;AACA,SAAK,OAAO,CAAC,MAAb;AACE,aAAO,SAAS,KAAK,MAArB;AAA6B;;AAC/B,SAAK,OAAO,CAAC,KAAb;AACE,aAAO,SAAS,KAAK,SAArB;AAAgC;AArBpC;AAuBA;;;AACA,SAAO,KAAP;AACD;AAED,OAAM,SAAU,qBAAV,CAAgC,OAAhC,EAAkD,YAAlD,EAAoE;AACxE,SAAO,gBAAgB,CAAC,yBAAyB,CAAC,OAAD,EAAU,YAAV,CAA1B,CAAvB;AACD,C,CAMD;;AACA,SAAS,sBAAT,GAA+B;;;AAC7B,QAAM,KAAK,GAAmB,EAA9B;;AACA,OAAK,MAAM,OAAX,IAAsB,QAAtB,EAAgC;AAC9B,SAAK,MAAM,YAAX,IAA2B,IAAI,CAAC,UAAD,CAA/B,EAA6C;AAC3C,WAAK,MAAM,SAAX,IAAwB,WAAxB,EAAqC;AACnC,cAAM,GAAG,GAAG,yBAAyB,CAAC,OAAD,EAAU,YAAV,CAArC;;AACA,YAAI,uBAAuB,CAAC,OAAD,EAAU,SAAV,CAAvB,IAA+C,wBAAwB,CAAC,SAAD,EAAY,YAAZ,CAA3E,EAAsG;AACpG,UAAA,KAAK,CAAC,GAAD,CAAL,IAAU,EAAA,GAAG,KAAK,CAAC,GAAD,CAAR,EAAa,EAAA,KAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAA3B;AACA,UAAA,KAAK,CAAC,GAAD,CAAL,CAAW,IAAX,CAAgB,SAAhB;AACD;AACF;AACF;AACF;;AACD,SAAO,KAAP;AACD;;AAED,SAAS,yBAAT,CAAmC,OAAnC,EAAqD,YAArD,EAAuE;AACrE,SAAO,OAAO,GAAG,GAAV,GAAgB,YAAvB;AACD","sourcesContent":["import {RangeEnum} from 'vega';\nimport {isString, toSet} from 'vega-util';\nimport * as CHANNEL from './channel';\nimport {Channel, CHANNELS, isColorChannel} from './channel';\nimport {DateTime} from './datetime';\nimport * as log from './log';\nimport {SelectionExtent} from './selection';\nimport * as TYPE from './type';\nimport {Type, TYPE_INDEX} from './type';\nimport {contains, Flag, keys} from './util';\nimport {ScaleInterpolate, ScaleInterpolateParams} from './vega.schema';\n\nexport namespace ScaleType {\n  // Continuous - Quantitative\n  export const LINEAR: 'linear' = 'linear';\n  export const LOG: 'log' = 'log';\n  export const POW: 'pow' = 'pow';\n  export const SQRT: 'sqrt' = 'sqrt';\n  export const SYMLOG: 'symlog' = 'symlog';\n  // Continuous - Time\n  export const TIME: 'time' = 'time';\n  export const UTC: 'utc' = 'utc';\n\n  // Discretizing scales\n  export const QUANTILE: 'quantile' = 'quantile';\n  export const QUANTIZE: 'quantize' = 'quantize';\n  export const THRESHOLD: 'threshold' = 'threshold';\n  export const BIN_ORDINAL: 'bin-ordinal' = 'bin-ordinal';\n\n  // Discrete scales\n  export const ORDINAL: 'ordinal' = 'ordinal';\n  export const POINT: 'point' = 'point';\n  export const BAND: 'band' = 'band';\n}\n\nexport type ScaleType =\n  | typeof ScaleType.LINEAR\n  | typeof ScaleType.LOG\n  | typeof ScaleType.POW\n  | typeof ScaleType.SQRT\n  | typeof ScaleType.SYMLOG\n  | typeof ScaleType.TIME\n  | typeof ScaleType.UTC\n  | typeof ScaleType.QUANTILE\n  | typeof ScaleType.QUANTIZE\n  | typeof ScaleType.THRESHOLD\n  | typeof ScaleType.BIN_ORDINAL\n  | typeof ScaleType.ORDINAL\n  | typeof ScaleType.POINT\n  | typeof ScaleType.BAND;\n\n/**\n * Index for scale categories -- only scale of the same categories can be merged together.\n * Current implementation is trying to be conservative and avoid merging scale type that might not work together\n */\nconst SCALE_CATEGORY_INDEX: {\n  // Using Mapped Type to declare type (https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)\n  [k in ScaleType]: ScaleType | 'numeric' | 'ordinal-position' | 'discretizing';\n} = {\n  linear: 'numeric',\n  log: 'numeric',\n  pow: 'numeric',\n  sqrt: 'numeric',\n  symlog: 'numeric',\n  time: 'time',\n  utc: 'time',\n  ordinal: 'ordinal',\n  'bin-ordinal': 'bin-ordinal', // TODO: should bin-ordinal support merging with other\n  point: 'ordinal-position',\n  band: 'ordinal-position',\n  quantile: 'discretizing',\n  quantize: 'discretizing',\n  threshold: 'discretizing'\n};\n\nexport const SCALE_TYPES = keys(SCALE_CATEGORY_INDEX) as ScaleType[];\n\n/**\n * Whether the two given scale types can be merged together.\n */\nexport function scaleCompatible(scaleType1: ScaleType, scaleType2: ScaleType) {\n  const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];\n  const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];\n  return (\n    scaleCategory1 === scaleCategory2 ||\n    (scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time') ||\n    (scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time')\n  );\n}\n\n/**\n * Index for scale precedence -- high score = higher priority for merging.\n */\nconst SCALE_PRECEDENCE_INDEX: {\n  // Using Mapped Type to declare type (https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)\n  [k in ScaleType]: number;\n} = {\n  // numeric\n  linear: 0,\n  log: 1,\n  pow: 1,\n  sqrt: 1,\n  symlog: 1,\n  // time\n  time: 0,\n  utc: 0,\n  // ordinal-position -- these have higher precedence than continuous scales as they support more types of data\n  point: 10,\n  band: 11, // band has higher precedence as it is better for interaction\n  // non grouped types\n  ordinal: 0,\n  'bin-ordinal': 0,\n  quantile: 0,\n  quantize: 0,\n  threshold: 0\n};\n\n/**\n * Return scale categories -- only scale of the same categories can be merged together.\n */\nexport function scaleTypePrecedence(scaleType: ScaleType): number {\n  return SCALE_PRECEDENCE_INDEX[scaleType];\n}\n\nexport const CONTINUOUS_TO_CONTINUOUS_SCALES: ScaleType[] = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];\nconst CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);\n\nexport const QUANTITATIVE_SCALES: ScaleType[] = ['linear', 'log', 'pow', 'sqrt', 'symlog'];\n\nexport const CONTINUOUS_TO_DISCRETE_SCALES: ScaleType[] = ['quantile', 'quantize', 'threshold'];\nconst CONTINUOUS_TO_DISCRETE_INDEX = toSet(CONTINUOUS_TO_DISCRETE_SCALES);\n\nexport const CONTINUOUS_DOMAIN_SCALES: ScaleType[] = CONTINUOUS_TO_CONTINUOUS_SCALES.concat([\n  'quantile',\n  'quantize',\n  'threshold'\n]);\nconst CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);\n\nexport const DISCRETE_DOMAIN_SCALES: ScaleType[] = ['ordinal', 'bin-ordinal', 'point', 'band'];\nconst DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);\n\nexport const TIME_SCALE_TYPES: ScaleType[] = ['time', 'utc'];\n\nexport function hasDiscreteDomain(type: ScaleType): type is 'ordinal' | 'bin-ordinal' | 'point' | 'band' {\n  return type in DISCRETE_DOMAIN_INDEX;\n}\n\nexport function hasContinuousDomain(\n  type: ScaleType\n): type is 'linear' | 'log' | 'pow' | 'sqrt' | 'symlog' | 'time' | 'utc' | 'quantile' | 'quantize' | 'threshold' {\n  return type in CONTINUOUS_DOMAIN_INDEX;\n}\n\nexport function isContinuousToContinuous(\n  type: ScaleType\n): type is 'linear' | 'log' | 'pow' | 'sqrt' | 'symlog' | 'time' | 'utc' {\n  return type in CONTINUOUS_TO_CONTINUOUS_INDEX;\n}\n\nexport function isContinuousToDiscrete(type: ScaleType): type is 'quantile' | 'quantize' | 'threshold' {\n  return type in CONTINUOUS_TO_DISCRETE_INDEX;\n}\n\nexport type NiceTime = 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n\nexport interface ScaleConfig {\n  /**\n   * If true, rounds numeric output values to integers.\n   * This can be helpful for snapping to the pixel grid.\n   * (Only available for `x`, `y`, and `size` scales.)\n   */\n  round?: boolean;\n\n  /**\n   * If true, values that exceed the data domain are clamped to either the minimum or maximum range value\n   */\n  clamp?: boolean;\n\n  /**\n   * Default inner padding for `x` and `y` band-ordinal scales.\n   *\n   * __Default value:__\n   * - `barBandPaddingInner` for bar marks (`0.1` by default)\n   * - `rectBandPaddingInner` for rect and other marks (`0` by default)\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  bandPaddingInner?: number;\n\n  /**\n   * Default outer padding for `x` and `y` band-ordinal scales.\n   *\n   * __Default value:__ `paddingInner/2` (which makes _width/height = number of unique values * step_)\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  bandPaddingOuter?: number;\n\n  /**\n   * Default inner padding for `x` and `y` band-ordinal scales of `\"bar\"` marks.\n   *\n   * __Default value:__ `0.1`\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  barBandPaddingInner?: number;\n\n  /**\n   * Default inner padding for `x` and `y` band-ordinal scales of `\"rect\"` marks.\n   *\n   * __Default value:__ `0`\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  rectBandPaddingInner?: number;\n\n  /**\n   * Default padding for continuous scales.\n   *\n   * __Default:__ `5` for continuous x-scale of a vertical bar and continuous y-scale of a horizontal bar.; `0` otherwise.\n   *\n   * @minimum 0\n   */\n  continuousPadding?: number;\n\n  /**\n   * Default outer padding for `x` and `y` point-ordinal scales.\n   *\n   * __Default value:__ `0.5` (which makes _width/height = number of unique values * step_)\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  pointPadding?: number;\n\n  /**\n   * Use the source data range before aggregation as scale domain instead of aggregated data for aggregate axis.\n   *\n   * This is equivalent to setting `domain` to `\"unaggregate\"` for aggregated _quantitative_ fields by default.\n   *\n   * This property only works with aggregate functions that produce values within the raw data domain (`\"mean\"`, `\"average\"`, `\"median\"`, `\"q1\"`, `\"q3\"`, `\"min\"`, `\"max\"`). For other aggregations that produce values outside of the raw data domain (e.g. `\"count\"`, `\"sum\"`), this property is ignored.\n   *\n   * __Default value:__ `false`\n   */\n  useUnaggregatedDomain?: boolean;\n\n  // nice should depends on type (quantitative or temporal), so\n  // let's not make a config.\n\n  // Configs for Range\n\n  /**\n   * The default max value for mapping quantitative fields to bar's size/bandSize.\n   *\n   * If undefined (default), we will use the axis's size (width or height) - 1.\n   * @minimum 0\n   */\n  maxBandSize?: number;\n\n  /**\n   * The default min value for mapping quantitative fields to bar and tick's size/bandSize scale with zero=false.\n   *\n   * __Default value:__ `2`\n   *\n   * @minimum 0\n   */\n  minBandSize?: number;\n\n  /**\n   * The default max value for mapping quantitative fields to text's size/fontSize.\n   *\n   * __Default value:__ `40`\n   *\n   * @minimum 0\n   */\n  maxFontSize?: number;\n\n  /**\n   * The default min value for mapping quantitative fields to tick's size/fontSize scale with zero=false\n   *\n   * __Default value:__ `8`\n   *\n   * @minimum 0\n   */\n  minFontSize?: number;\n\n  /**\n   * Default minimum opacity for mapping a field to opacity.\n   *\n   * __Default value:__ `0.3`\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  minOpacity?: number;\n\n  /**\n   * Default max opacity for mapping a field to opacity.\n   *\n   * __Default value:__ `0.8`\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  maxOpacity?: number;\n\n  /**\n   * Default minimum value for point size scale with zero=false.\n   *\n   * __Default value:__ `9`\n   *\n   * @minimum 0\n   */\n  minSize?: number;\n\n  /**\n   * Default max value for point size scale.\n   * @minimum 0\n   */\n  maxSize?: number;\n\n  /**\n   * Default minimum strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks with zero=false.\n   *\n   * __Default value:__ `1`\n   *\n   * @minimum 0\n   */\n  minStrokeWidth?: number;\n\n  /**\n   * Default max strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks.\n   *\n   * __Default value:__ `4`\n   *\n   * @minimum 0\n   */\n  maxStrokeWidth?: number;\n\n  /**\n   * Default range cardinality for [`quantile`](https://vega.github.io/vega-lite/docs/scale.html#quantile) scale.\n   *\n   * __Default value:__ `4`\n   *\n   * @minimum 0\n   */\n  quantileCount?: number;\n\n  /**\n   * Default range cardinality for [`quantize`](https://vega.github.io/vega-lite/docs/scale.html#quantize) scale.\n   *\n   * __Default value:__ `4`\n   *\n   * @minimum 0\n   */\n  quantizeCount?: number;\n}\n\nexport const defaultScaleConfig: ScaleConfig = {\n  pointPadding: 0.5,\n\n  barBandPaddingInner: 0.1,\n  rectBandPaddingInner: 0,\n\n  minBandSize: 2,\n\n  minFontSize: 8,\n  maxFontSize: 40,\n\n  minOpacity: 0.3,\n  maxOpacity: 0.8,\n\n  // FIXME: revise if these *can* become ratios of width/height step\n  minSize: 9, // Point size is area. For square point, 9 = 3 pixel ^ 2, not too small!\n\n  minStrokeWidth: 1,\n  maxStrokeWidth: 4,\n  quantileCount: 4,\n  quantizeCount: 4\n};\n\nexport interface SchemeParams {\n  /**\n   * A color scheme name for ordinal scales (e.g., `\"category10\"` or `\"blues\"`).\n   *\n   * For the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.\n   */\n  name: string;\n\n  /**\n   * The extent of the color range to use. For example `[0.2, 1]` will rescale the color scheme such that color values in the range _[0, 0.2)_ are excluded from the scheme.\n   */\n  extent?: number[];\n\n  /**\n   * The number of colors to use in the scheme. This can be useful for scale types such as `\"quantize\"`, which use the length of the scale range to determine the number of discrete bins for the scale domain.\n   */\n  count?: number;\n}\n\nexport type Domain = number[] | string[] | boolean[] | DateTime[] | 'unaggregated' | SelectionExtent;\nexport type Scheme = string | SchemeParams;\n\nexport function isExtendedScheme(scheme: string | SchemeParams): scheme is SchemeParams {\n  return !isString(scheme) && !!scheme['name'];\n}\n\nexport function isSelectionDomain(domain: Domain): domain is SelectionExtent {\n  return domain?.['selection'];\n}\n\nexport interface Scale {\n  /**\n   * The type of scale. Vega-Lite supports the following categories of scale types:\n   *\n   * 1) [**Continuous Scales**](https://vega.github.io/vega-lite/docs/scale.html#continuous) -- mapping continuous domains to continuous output ranges ([`\"linear\"`](https://vega.github.io/vega-lite/docs/scale.html#linear), [`\"pow\"`](https://vega.github.io/vega-lite/docs/scale.html#pow), [`\"sqrt\"`](https://vega.github.io/vega-lite/docs/scale.html#sqrt), [`\"symlog\"`](https://vega.github.io/vega-lite/docs/scale.html#symlog), [`\"log\"`](https://vega.github.io/vega-lite/docs/scale.html#log), [`\"time\"`](https://vega.github.io/vega-lite/docs/scale.html#time), [`\"utc\"`](https://vega.github.io/vega-lite/docs/scale.html#utc).\n   *\n   * 2) [**Discrete Scales**](https://vega.github.io/vega-lite/docs/scale.html#discrete) -- mapping discrete domains to discrete ([`\"ordinal\"`](https://vega.github.io/vega-lite/docs/scale.html#ordinal)) or continuous ([`\"band\"`](https://vega.github.io/vega-lite/docs/scale.html#band) and [`\"point\"`](https://vega.github.io/vega-lite/docs/scale.html#point)) output ranges.\n   *\n   * 3) [**Discretizing Scales**](https://vega.github.io/vega-lite/docs/scale.html#discretizing) -- mapping continuous domains to discrete output ranges [`\"bin-ordinal\"`](https://vega.github.io/vega-lite/docs/scale.html#bin-ordinal), [`\"quantile\"`](https://vega.github.io/vega-lite/docs/scale.html#quantile), [`\"quantize\"`](https://vega.github.io/vega-lite/docs/scale.html#quantize) and [`\"threshold\"`](https://vega.github.io/vega-lite/docs/scale.html#threshold).\n   *\n   * __Default value:__ please see the [scale type table](https://vega.github.io/vega-lite/docs/scale.html#type).\n   */\n  type?: ScaleType;\n\n  /**\n   * Customized domain values.\n   *\n   * For _quantitative_ fields, `domain` can take the form of a two-element array with minimum and maximum values. [Piecewise scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise) can be created by providing a `domain` with more than two entries.\n   * If the input field is aggregated, `domain` can also be a string value `\"unaggregated\"`, indicating that the domain should include the raw data values prior to the aggregation.\n   *\n   * For _temporal_ fields, `domain` can be a two-element array minimum and maximum values, in the form of either timestamps or the [DateTime definition objects](https://vega.github.io/vega-lite/docs/types.html#datetime).\n   *\n   * For _ordinal_ and _nominal_ fields, `domain` can be an array that lists valid input values.\n   *\n   * The `selection` property can be used to [interactively determine](https://vega.github.io/vega-lite/docs/selection.html#scale-domains) the scale domain.\n   */\n  domain?: number[] | string[] | boolean[] | DateTime[] | 'unaggregated' | SelectionExtent;\n\n  // Hide because we might not really need this.\n  /**\n   * If true, reverses the order of the scale range.\n   * __Default value:__ `false`.\n   *\n   * @hidden\n   */\n  reverse?: boolean;\n\n  /**\n   * The range of the scale. One of:\n   *\n   * - A string indicating a [pre-defined named scale range](https://vega.github.io/vega-lite/docs/scale.html#range-config) (e.g., example, `\"symbol\"`, or `\"diverging\"`).\n   *\n   * - For [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous), two-element array indicating  minimum and maximum values, or an array with more than two entries for specifying a [piecewise scale](https://vega.github.io/vega-lite/docs/scale.html#piecewise).\n   *\n   * - For [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) and [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales, an array of desired output values.\n   *\n   * __Notes:__\n   *\n   * 1) For color scales you can also specify a color [`scheme`](https://vega.github.io/vega-lite/docs/scale.html#scheme) instead of `range`.\n   *\n   * 2) Any directly specified `range` for `x` and `y` channels will be ignored. Range can be customized via the view's corresponding [size](https://vega.github.io/vega-lite/docs/size.html) (`width` and `height`).\n   */\n  range?: number[] | string[] | RangeEnum;\n\n  // ordinal\n\n  /**\n   * A string indicating a color [scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme) name (e.g., `\"category10\"` or `\"blues\"`) or a [scheme parameter object](https://vega.github.io/vega-lite/docs/scale.html#scheme-params).\n   *\n   * Discrete color schemes may be used with [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) or [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales. Continuous color schemes are intended for use with color scales.\n   *\n   * For the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.\n   */\n  scheme?: string | SchemeParams;\n\n  /**\n   * The alignment of the steps within the scale range.\n   *\n   * This value must lie in the range `[0,1]`. A value of `0.5` indicates that the steps should be centered within the range. A value of `0` or `1` may be used to shift the bands to one side, say to position them adjacent to an axis.\n   *\n   * __Default value:__ `0.5`\n   */\n  align?: number;\n\n  /**\n   * An array of bin boundaries over the scale domain. If provided, axes and legends will use the bin boundaries to inform the choice of tick marks and text labels.\n   */\n  bins?: number[];\n\n  /**\n   * If `true`, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid.\n   *\n   * __Default value:__ `false`.\n   */\n  round?: boolean;\n\n  /**\n   * For _[continuous](https://vega.github.io/vega-lite/docs/scale.html#continuous)_ scales, expands the scale domain to accommodate the specified number of pixels on each of the scale range. The scale range must represent pixels for this parameter to function as intended. Padding adjustment is performed prior to all other adjustments, including the effects of the `zero`, `nice`, `domainMin`, and `domainMax` properties.\n   *\n   * For _[band](https://vega.github.io/vega-lite/docs/scale.html#band)_ scales, shortcut for setting `paddingInner` and `paddingOuter` to the same value.\n   *\n   * For _[point](https://vega.github.io/vega-lite/docs/scale.html#point)_ scales, alias for `paddingOuter`.\n   *\n   * __Default value:__ For _continuous_ scales, derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `continuousPadding`.\n   * For _band and point_ scales, see `paddingInner` and `paddingOuter`. By default, Vega-Lite sets padding such that _width/height = number of unique values * step_.\n   *\n   * @minimum 0\n   */\n  padding?: number;\n\n  /**\n   * The inner padding (spacing) within each band step of band scales, as a fraction of the step size. This value must lie in the range [0,1].\n   *\n   * For point scale, this property is invalid as point scales do not have internal band widths (only step sizes between bands).\n   *\n   * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingInner`.\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  paddingInner?: number;\n\n  /**\n   * The outer padding (spacing) at the ends of the range of band and point scales,\n   * as a fraction of the step size. This value must lie in the range [0,1].\n   *\n   * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingOuter` for band scales and `pointPadding` for point scales.\n   * By default, Vega-Lite sets outer padding such that _width/height = number of unique values * step_.\n   *\n   * @minimum 0\n   * @maximum 1\n   */\n  paddingOuter?: number;\n\n  // typical\n  /**\n   * If `true`, values that exceed the data domain are clamped to either the minimum or maximum range value\n   *\n   * __Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/config.html#scale-config)'s `clamp` (`true` by default).\n   */\n  clamp?: boolean;\n\n  /**\n   * Extending the domain so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of _[0.201479…, 0.996679…]_, a nice domain might be _[0.2, 1.0]_.\n   *\n   * For quantitative scales such as linear, `nice` can be either a boolean flag or a number. If `nice` is a number, it will represent a desired tick count. This allows greater control over the step size used to extend the bounds, guaranteeing that the returned ticks will exactly cover the domain.\n   *\n   * For temporal fields with time and utc scales, the `nice` value can be a string indicating the desired time interval. Legal values are `\"millisecond\"`, `\"second\"`, `\"minute\"`, `\"hour\"`, `\"day\"`, `\"week\"`, `\"month\"`, and `\"year\"`. Alternatively, `time` and `utc` scales can accept an object-valued interval specifier of the form `{\"interval\": \"month\", \"step\": 3}`, which includes a desired number of interval steps. Here, the domain would snap to quarter (Jan, Apr, Jul, Oct) boundaries.\n   *\n   * __Default value:__ `true` for unbinned _quantitative_ fields; `false` otherwise.\n   *\n   */\n  nice?: boolean | number | NiceTime | {interval: string; step: number};\n\n  /**\n   * The logarithm base of the `log` scale (default `10`).\n   */\n  base?: number;\n\n  /**\n   * The exponent of the `pow` scale.\n   */\n  exponent?: number;\n\n  /**\n   * A constant determining the slope of the symlog function around zero. Only used for `symlog` scales.\n   *\n   * __Default value:__ `1`\n   */\n  constant?: number;\n\n  /**\n   * If `true`, ensures that a zero baseline value is included in the scale domain.\n   *\n   * __Default value:__ `true` for x and y channels if the quantitative field is not binned and no custom `domain` is provided; `false` otherwise.\n   *\n   * __Note:__ Log, time, and utc scales do not support `zero`.\n   */\n  zero?: boolean;\n\n  /**\n   * The interpolation method for range values. By default, a general interpolator for numbers, dates, strings and colors (in HCL space) is used. For color ranges, this property allows interpolation in alternative color spaces. Legal values include `rgb`, `hsl`, `hsl-long`, `lab`, `hcl`, `hcl-long`, `cubehelix` and `cubehelix-long` ('-long' variants use longer paths in polar coordinate spaces). If object-valued, this property accepts an object with a string-valued _type_ property and an optional numeric _gamma_ property applicable to rgb and cubehelix interpolators. For more, see the [d3-interpolate documentation](https://github.com/d3/d3-interpolate).\n   *\n   * * __Default value:__ `hcl`\n   */\n  interpolate?: ScaleInterpolate | ScaleInterpolateParams;\n}\n\nconst SCALE_PROPERTY_INDEX: Flag<keyof Scale> = {\n  type: 1,\n  domain: 1,\n  align: 1,\n  range: 1,\n  scheme: 1,\n  bins: 1,\n  // Other properties\n  reverse: 1,\n  round: 1,\n  // quantitative / time\n  clamp: 1,\n  nice: 1,\n  // quantitative\n  base: 1,\n  exponent: 1,\n  constant: 1,\n  interpolate: 1,\n  zero: 1, // zero depends on domain\n  // band/point\n  padding: 1,\n  paddingInner: 1,\n  paddingOuter: 1\n};\n\nexport const SCALE_PROPERTIES = keys(SCALE_PROPERTY_INDEX);\n\nconst {type, domain, range, scheme, ...NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX} = SCALE_PROPERTY_INDEX;\n\nexport const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = keys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);\n\nexport const SCALE_TYPE_INDEX = generateScaleTypeIndex();\n\nexport function scaleTypeSupportProperty(scaleType: ScaleType, propName: keyof Scale): boolean {\n  switch (propName) {\n    case 'type':\n    case 'domain':\n    case 'reverse':\n    case 'range':\n      return true;\n    case 'scheme':\n    case 'interpolate':\n      return !contains(['point', 'band', 'identity'], scaleType);\n    case 'bins':\n      return !contains(['point', 'band', 'identity', 'ordinal'], scaleType);\n    case 'round':\n      return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';\n    case 'padding':\n      return isContinuousToContinuous(scaleType) || contains(['point', 'band'], scaleType);\n    case 'paddingOuter':\n    case 'align':\n      return contains(['point', 'band'], scaleType);\n    case 'paddingInner':\n      return scaleType === 'band';\n    case 'clamp':\n      return isContinuousToContinuous(scaleType);\n    case 'nice':\n      return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';\n    case 'exponent':\n      return scaleType === 'pow';\n    case 'base':\n      return scaleType === 'log';\n    case 'constant':\n      return scaleType === 'symlog';\n    case 'zero':\n      return (\n        hasContinuousDomain(scaleType) &&\n        !contains(\n          [\n            'log', // log scale cannot have zero value\n            'time',\n            'utc', // zero is not meaningful for time\n            'threshold', // threshold requires custom domain so zero does not matter\n            'quantile' // quantile depends on distribution so zero does not matter\n          ],\n          scaleType\n        )\n      );\n  }\n}\n\n/**\n * Returns undefined if the input channel supports the input scale property name\n */\nexport function channelScalePropertyIncompatability(channel: Channel, propName: keyof Scale): string {\n  switch (propName) {\n    case 'interpolate':\n    case 'scheme':\n      if (!isColorChannel(channel)) {\n        return log.message.cannotUseScalePropertyWithNonColor(channel);\n      }\n      return undefined;\n    case 'align':\n    case 'type':\n    case 'bins':\n    case 'domain':\n    case 'range':\n    case 'base':\n    case 'exponent':\n    case 'constant':\n    case 'nice':\n    case 'padding':\n    case 'paddingInner':\n    case 'paddingOuter':\n    case 'reverse':\n    case 'round':\n    case 'clamp':\n    case 'zero':\n      return undefined; // GOOD!\n  }\n}\n\nexport function scaleTypeSupportDataType(specifiedType: ScaleType, fieldDefType: Type): boolean {\n  if (contains([TYPE.ORDINAL, TYPE.NOMINAL], fieldDefType)) {\n    return specifiedType === undefined || hasDiscreteDomain(specifiedType);\n  } else if (fieldDefType === TYPE.TEMPORAL) {\n    return contains([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);\n  } else if (fieldDefType === TYPE.QUANTITATIVE) {\n    return contains(\n      [\n        ScaleType.LOG,\n        ScaleType.POW,\n        ScaleType.SQRT,\n        ScaleType.SYMLOG,\n        ScaleType.QUANTILE,\n        ScaleType.QUANTIZE,\n        ScaleType.THRESHOLD,\n        ScaleType.LINEAR,\n        undefined\n      ],\n      specifiedType\n    );\n  }\n\n  return true;\n}\n\nexport function channelSupportScaleType(channel: Channel, scaleType: ScaleType): boolean {\n  switch (channel) {\n    case CHANNEL.X:\n    case CHANNEL.Y:\n      return isContinuousToContinuous(scaleType) || contains(['band', 'point'], scaleType);\n    case CHANNEL.SIZE: // TODO: size and opacity can support ordinal with more modification\n    case CHANNEL.STROKEWIDTH:\n    case CHANNEL.OPACITY:\n    case CHANNEL.FILLOPACITY:\n    case CHANNEL.STROKEOPACITY:\n      // Although it generally doesn't make sense to use band with size and opacity,\n      // it can also work since we use band: 0.5 to get midpoint.\n      return (\n        isContinuousToContinuous(scaleType) ||\n        isContinuousToDiscrete(scaleType) ||\n        contains(['band', 'point'], scaleType)\n      );\n    case CHANNEL.COLOR:\n    case CHANNEL.FILL:\n    case CHANNEL.STROKE:\n      return scaleType !== 'band'; // band does not make sense with color\n    case CHANNEL.SHAPE:\n      return scaleType === 'ordinal'; // shape = lookup only\n  }\n  /* istanbul ignore next: it should never reach here */\n  return false;\n}\n\nexport function getSupportedScaleType(channel: Channel, fieldDefType: Type) {\n  return SCALE_TYPE_INDEX[generateScaleTypeIndexKey(channel, fieldDefType)];\n}\n\nexport interface ScaleTypeIndex {\n  [channel: string]: ScaleType[];\n}\n\n// generates ScaleTypeIndex where keys are encoding channels and values are list of valid ScaleTypes\nfunction generateScaleTypeIndex() {\n  const index: ScaleTypeIndex = {};\n  for (const channel of CHANNELS) {\n    for (const fieldDefType of keys(TYPE_INDEX)) {\n      for (const scaleType of SCALE_TYPES) {\n        const key = generateScaleTypeIndexKey(channel, fieldDefType);\n        if (channelSupportScaleType(channel, scaleType) && scaleTypeSupportDataType(scaleType, fieldDefType)) {\n          index[key] = index[key] ?? [];\n          index[key].push(scaleType);\n        }\n      }\n    }\n  }\n  return index;\n}\n\nfunction generateScaleTypeIndexKey(channel: Channel, fieldDefType: Type) {\n  return channel + '_' + fieldDefType;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}