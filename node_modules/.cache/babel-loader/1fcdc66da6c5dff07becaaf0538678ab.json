{"ast":null,"code":"import { operatorExpression } from './expression';\nimport parseParameters from './parameters';\nimport { isOperator } from './util';\nimport { error } from 'vega-util';\n/**\n * Parse a dataflow operator.\n */\n\nexport default function (spec, ctx) {\n  if (isOperator(spec.type) || !spec.type) {\n    ctx.operator(spec, spec.update ? operatorExpression(spec.update, ctx) : null);\n  } else {\n    ctx.transform(spec, spec.type);\n  }\n}\n/**\n * Parse and assign operator parameters.\n */\n\nexport function parseOperatorParameters(spec, ctx) {\n  if (spec.params) {\n    var op = ctx.get(spec.id);\n    if (!op) error('Invalid operator id: ' + spec.id);\n    ctx.dataflow.connect(op, op.parameters(parseParameters(spec.params, ctx), spec.react, spec.initonly));\n  }\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-runtime/src/operator.js"],"names":["operatorExpression","parseParameters","isOperator","error","spec","ctx","type","operator","update","transform","parseOperatorParameters","params","op","get","id","dataflow","connect","parameters","react","initonly"],"mappings":"AAAA,SAAQA,kBAAR,QAAiC,cAAjC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,UAAR,QAAyB,QAAzB;AACA,SAAQC,KAAR,QAAoB,WAApB;AAEA;;;;AAGA,eAAe,UAASC,IAAT,EAAeC,GAAf,EAAoB;AACjC,MAAIH,UAAU,CAACE,IAAI,CAACE,IAAN,CAAV,IAAyB,CAACF,IAAI,CAACE,IAAnC,EAAyC;AACvCD,IAAAA,GAAG,CAACE,QAAJ,CAAaH,IAAb,EACEA,IAAI,CAACI,MAAL,GAAcR,kBAAkB,CAACI,IAAI,CAACI,MAAN,EAAcH,GAAd,CAAhC,GAAqD,IADvD;AAED,GAHD,MAGO;AACLA,IAAAA,GAAG,CAACI,SAAJ,CAAcL,IAAd,EAAoBA,IAAI,CAACE,IAAzB;AACD;AACF;AAED;;;;AAGA,OAAO,SAASI,uBAAT,CAAiCN,IAAjC,EAAuCC,GAAvC,EAA4C;AACjD,MAAID,IAAI,CAACO,MAAT,EAAiB;AACf,QAAIC,EAAE,GAAGP,GAAG,CAACQ,GAAJ,CAAQT,IAAI,CAACU,EAAb,CAAT;AACA,QAAI,CAACF,EAAL,EAAST,KAAK,CAAC,0BAA0BC,IAAI,CAACU,EAAhC,CAAL;AACTT,IAAAA,GAAG,CAACU,QAAJ,CAAaC,OAAb,CAAqBJ,EAArB,EAAyBA,EAAE,CAACK,UAAH,CACvBhB,eAAe,CAACG,IAAI,CAACO,MAAN,EAAcN,GAAd,CADQ,EAEvBD,IAAI,CAACc,KAFkB,EAGvBd,IAAI,CAACe,QAHkB,CAAzB;AAKD;AACF","sourcesContent":["import {operatorExpression} from './expression';\nimport parseParameters from './parameters';\nimport {isOperator} from './util';\nimport {error} from 'vega-util';\n\n/**\n * Parse a dataflow operator.\n */\nexport default function(spec, ctx) {\n  if (isOperator(spec.type) || !spec.type) {\n    ctx.operator(spec,\n      spec.update ? operatorExpression(spec.update, ctx) : null);\n  } else {\n    ctx.transform(spec, spec.type);\n  }\n}\n\n/**\n * Parse and assign operator parameters.\n */\nexport function parseOperatorParameters(spec, ctx) {\n  if (spec.params) {\n    var op = ctx.get(spec.id);\n    if (!op) error('Invalid operator id: ' + spec.id);\n    ctx.dataflow.connect(op, op.parameters(\n      parseParameters(spec.params, ctx),\n      spec.react,\n      spec.initonly\n    ));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}