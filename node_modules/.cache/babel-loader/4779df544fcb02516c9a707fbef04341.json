{"ast":null,"code":"import { toSet } from 'vega-util';\nimport { contains, keys } from './util';\nexport const AREA = 'area';\nexport const BAR = 'bar';\nexport const IMAGE = 'image';\nexport const LINE = 'line';\nexport const POINT = 'point';\nexport const RECT = 'rect';\nexport const RULE = 'rule';\nexport const TEXT = 'text';\nexport const TICK = 'tick';\nexport const TRAIL = 'trail';\nexport const CIRCLE = 'circle';\nexport const SQUARE = 'square';\nexport const GEOSHAPE = 'geoshape'; // Using mapped type to declare index, ensuring we always have all marks when we add more.\n\nconst MARK_INDEX = {\n  area: 1,\n  bar: 1,\n  image: 1,\n  line: 1,\n  point: 1,\n  text: 1,\n  tick: 1,\n  trail: 1,\n  rect: 1,\n  geoshape: 1,\n  rule: 1,\n  circle: 1,\n  square: 1\n};\nexport function isMark(m) {\n  return !!MARK_INDEX[m];\n}\nexport function isPathMark(m) {\n  return contains(['line', 'area', 'trail'], m);\n}\nexport function isRectBasedMark(m) {\n  return contains(['rect', 'bar', 'image'], m);\n}\nexport const PRIMITIVE_MARKS = keys(MARK_INDEX);\nexport function isMarkDef(mark) {\n  return mark['type'];\n}\nconst PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);\nexport function isPrimitiveMark(mark) {\n  const markType = isMarkDef(mark) ? mark.type : mark;\n  return markType in PRIMITIVE_MARK_INDEX;\n}\nexport const STROKE_CONFIG = ['stroke', 'strokeWidth', 'strokeDash', 'strokeDashOffset', 'strokeOpacity', 'strokeJoin', 'strokeMiterLimit'];\nexport const FILL_CONFIG = ['fill', 'fillOpacity'];\nexport const FILL_STROKE_CONFIG = [...STROKE_CONFIG, ...FILL_CONFIG];\nexport const VL_ONLY_MARK_CONFIG_PROPERTIES = ['filled', 'color', 'tooltip', 'invalid', 'timeUnitBandPosition', 'timeUnitBand'];\nexport const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n  area: ['line', 'point'],\n  bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n  rect: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n  line: ['point'],\n  tick: ['bandSize', 'thickness']\n};\nexport const defaultMarkConfig = {\n  color: '#4c78a8',\n  invalid: 'filter',\n  timeUnitBand: 1\n};\nconst DEFAULT_RECT_BAND_SIZE = 5;\nexport const defaultBarConfig = {\n  binSpacing: 1,\n  continuousBandSize: DEFAULT_RECT_BAND_SIZE,\n  timeUnitBandPosition: 0.5\n};\nexport const defaultRectConfig = {\n  binSpacing: 0,\n  continuousBandSize: DEFAULT_RECT_BAND_SIZE,\n  timeUnitBandPosition: 0.5\n};\nexport const defaultTickConfig = {\n  thickness: 1\n};\nexport function getMarkType(m) {\n  return isMarkDef(m) ? m.type : m;\n}","map":{"version":3,"sources":["../../src/mark.ts"],"names":[],"mappings":"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","sourcesContent":["import {Color} from 'vega';\nimport {toSet} from 'vega-util';\nimport {Gradient, Value} from './channeldef';\nimport {CompositeMark, CompositeMarkDef} from './compositemark';\nimport {contains, keys, Flag} from './util';\nimport {BaseMarkConfig} from './vega.schema';\n\nexport const AREA: 'area' = 'area';\nexport const BAR: 'bar' = 'bar';\nexport const IMAGE: 'image' = 'image';\nexport const LINE: 'line' = 'line';\nexport const POINT: 'point' = 'point';\nexport const RECT: 'rect' = 'rect';\nexport const RULE: 'rule' = 'rule';\nexport const TEXT: 'text' = 'text';\nexport const TICK: 'tick' = 'tick';\nexport const TRAIL: 'trail' = 'trail';\nexport const CIRCLE: 'circle' = 'circle';\nexport const SQUARE: 'square' = 'square';\nexport const GEOSHAPE: 'geoshape' = 'geoshape';\n\n/**\n * All types of primitive marks.\n */\nexport type Mark =\n  | typeof AREA\n  | typeof BAR\n  | typeof LINE\n  | typeof IMAGE\n  | typeof TRAIL\n  | typeof POINT\n  | typeof TEXT\n  | typeof TICK\n  | typeof RECT\n  | typeof RULE\n  | typeof CIRCLE\n  | typeof SQUARE\n  | typeof GEOSHAPE;\n\n// Using mapped type to declare index, ensuring we always have all marks when we add more.\nconst MARK_INDEX: Flag<Mark> = {\n  area: 1,\n  bar: 1,\n  image: 1,\n  line: 1,\n  point: 1,\n  text: 1,\n  tick: 1,\n  trail: 1,\n  rect: 1,\n  geoshape: 1,\n  rule: 1,\n  circle: 1,\n  square: 1\n};\n\nexport function isMark(m: string): m is Mark {\n  return !!MARK_INDEX[m];\n}\n\nexport function isPathMark(m: Mark | CompositeMark): m is 'line' | 'area' | 'trail' {\n  return contains(['line', 'area', 'trail'], m);\n}\n\nexport function isRectBasedMark(m: Mark | CompositeMark): m is 'rect' | 'bar' | 'image' {\n  return contains(['rect', 'bar', 'image'], m);\n}\n\nexport const PRIMITIVE_MARKS = keys(MARK_INDEX);\n\nexport interface ColorMixins {\n  /**\n   * Default color.\n   *\n   * __Default value:__ <span style=\"color: #4682b4;\">&#9632;</span> `\"#4682b4\"`\n   *\n   * __Note:__\n   * - This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\n   * - The `fill` and `stroke` properties have higher precedence than `color` and will override `color`.\n   */\n  color?: Color | Gradient;\n}\n\nexport interface TooltipContent {\n  content: 'encoding' | 'data';\n}\n\n/** @hidden */\nexport type Hide = 'hide';\n\nexport interface MarkConfig extends ColorMixins, BaseMarkConfig {\n  // ========== VL-Specific ==========\n\n  /**\n   * Whether the mark's color should be used as fill color instead of stroke color.\n   *\n   * __Default value:__ `false` for all `point`, `line`, and `rule` marks as well as `geoshape` marks for [`graticule`](https://vega.github.io/vega-lite/docs/data.html#graticule) data sources; otherwise, `true`.\n   *\n   * __Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).\n   *\n   */\n  filled?: boolean;\n\n  // ========== Overriding Vega ==========\n\n  /**\n   * The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\n   *\n   * - If `tooltip` is `true` or `{\"content\": \"encoding\"}`, then all fields from `encoding` will be used.\n   * - If `tooltip` is `{\"content\": \"data\"}`, then all fields that appear in the highlighted data point will be used.\n   * - If set to `null` or `false`, then no tooltip will be used.\n   *\n   * See the [`tooltip`](https://vega.github.io/vega-lite/docs/tooltip.html) documentation for a detailed discussion about tooltip  in Vega-Lite.\n   *\n   * __Default value:__ `null`\n   */\n  tooltip?: Value | TooltipContent | null;\n\n  /**\n   * Default size for marks.\n   * - For `point`/`circle`/`square`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.\n   * - For `bar`, this represents the band size of the bar, in pixels.\n   * - For `text`, this represents the font size, in pixels.\n   *\n   * __Default value:__\n   * - `30` for point, circle, square marks; width/height's `step`\n   * - `2` for bar marks with discrete dimensions;\n   * - `5` for bar marks with continuous dimensions;\n   * - `11` for text marks.\n   *\n   * @minimum 0\n   */\n  size?: number;\n\n  /**\n   * For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.\n   */\n  order?: null | boolean;\n\n  /**\n   * Defines how Vega-Lite should handle marks for invalid values (`null` and `NaN`).\n   * - If set to `\"filter\"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).\n   * - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.\n   */\n  invalid?: 'filter' | Hide | null;\n\n  /**\n   * Default relative band position for a time unit. If set to `0`, the marks will be positioned at the beginning of the time unit band step.\n   * If set to `0.5`, the marks will be positioned in the middle of the time unit band step.\n   */\n  timeUnitBandPosition?: number;\n\n  /**\n   * Default relative band size for a time unit. If set to `1`, the bandwidth of the marks will be equal to the time unit band step.\n   * If set to `0.5`, bandwidth of the marks will be half of the time unit band step.\n   */\n  timeUnitBand?: number;\n}\n\nexport interface RectBinSpacingMixins {\n  /**\n   * Offset between bars for binned field. The ideal value for this is either 0 (preferred by statisticians) or 1 (Vega-Lite default, D3 example style).\n   *\n   * __Default value:__ `1`\n   *\n   * @minimum 0\n   */\n  binSpacing?: number;\n}\n\nexport type AnyMark = CompositeMark | CompositeMarkDef | Mark | MarkDef;\n\nexport function isMarkDef(mark: string | GenericMarkDef<any>): mark is GenericMarkDef<any> {\n  return mark['type'];\n}\n\nconst PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);\n\nexport function isPrimitiveMark(mark: AnyMark): mark is Mark {\n  const markType = isMarkDef(mark) ? mark.type : mark;\n  return markType in PRIMITIVE_MARK_INDEX;\n}\n\nexport const STROKE_CONFIG = [\n  'stroke',\n  'strokeWidth',\n  'strokeDash',\n  'strokeDashOffset',\n  'strokeOpacity',\n  'strokeJoin',\n  'strokeMiterLimit'\n] as const;\n\nexport const FILL_CONFIG = ['fill', 'fillOpacity'] as const;\n\nexport const FILL_STROKE_CONFIG = [...STROKE_CONFIG, ...FILL_CONFIG];\n\nexport const VL_ONLY_MARK_CONFIG_PROPERTIES: (keyof MarkConfig)[] = [\n  'filled',\n  'color',\n  'tooltip',\n  'invalid',\n  'timeUnitBandPosition',\n  'timeUnitBand'\n];\n\nexport const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX: {\n  [k in Mark]?: (keyof Required<MarkConfigMixins>[k])[];\n} = {\n  area: ['line', 'point'],\n  bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n  rect: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n  line: ['point'],\n  tick: ['bandSize', 'thickness']\n};\n\nexport const defaultMarkConfig: MarkConfig = {\n  color: '#4c78a8',\n  invalid: 'filter',\n  timeUnitBand: 1\n};\n\nexport interface MarkConfigMixins {\n  /** Mark Config */\n  mark?: MarkConfig;\n\n  // MARK-SPECIFIC CONFIGS\n  /** Area-Specific Config */\n  area?: AreaConfig;\n\n  /** Bar-Specific Config */\n  bar?: RectConfig;\n\n  /** Circle-Specific Config */\n  circle?: MarkConfig;\n\n  /** Image-specific Config */\n  image?: RectConfig;\n\n  /** Line-Specific Config */\n  line?: LineConfig;\n\n  /** Point-Specific Config */\n  point?: MarkConfig;\n\n  /** Rect-Specific Config */\n  rect?: RectConfig;\n\n  /** Rule-Specific Config */\n  rule?: MarkConfig;\n\n  /** Square-Specific Config */\n  square?: MarkConfig;\n\n  /** Text-Specific Config */\n  text?: MarkConfig;\n\n  /** Tick-Specific Config */\n  tick?: TickConfig;\n\n  /** Trail-Specific Config */\n  trail?: LineConfig;\n\n  /** Geoshape-Specific Config */\n  geoshape?: MarkConfig;\n}\n\nexport interface RectConfig extends RectBinSpacingMixins, MarkConfig {\n  /**\n   * The default size of the bars on continuous scales.\n   *\n   * __Default value:__ `5`\n   *\n   * @minimum 0\n   */\n  continuousBandSize?: number;\n\n  /**\n   * The default size of the bars with discrete dimensions. If unspecified, the default size is  `step-2`, which provides 2 pixel offset between bars.\n   * @minimum 0\n   */\n  discreteBandSize?: number;\n}\n\nexport type OverlayMarkDef = MarkConfig & MarkDefMixins;\n\nexport interface PointOverlayMixins {\n  /**\n   * A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.\n   *\n   * - If this property is `\"transparent\"`, transparent points will be used (for enhancing tooltips and selections).\n   *\n   * - If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.\n   *\n   * - If this property is `false`, no points would be automatically added to line or area marks.\n   *\n   * __Default value:__ `false`.\n   */\n  point?: boolean | OverlayMarkDef | 'transparent';\n}\n\nexport interface LineConfig extends MarkConfig, PointOverlayMixins {}\n\nexport interface LineOverlayMixins {\n  /**\n   * A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.\n   *\n   * - If this value is an empty object (`{}`) or `true`, lines with default properties will be used.\n   *\n   * - If this value is `false`, no lines would be automatically added to area marks.\n   *\n   * __Default value:__ `false`.\n   */\n  line?: boolean | OverlayMarkDef;\n}\n\nexport interface AreaConfig extends MarkConfig, PointOverlayMixins, LineOverlayMixins {}\n\nexport interface TickThicknessMixins {\n  /**\n   * Thickness of the tick mark.\n   *\n   * __Default value:__  `1`\n   *\n   * @minimum 0\n   */\n  thickness?: number;\n}\n\nexport interface GenericMarkDef<M> {\n  /**\n   * The mark type. This could a primitive mark type\n   * (one of `\"bar\"`, `\"circle\"`, `\"square\"`, `\"tick\"`, `\"line\"`,\n   * `\"area\"`, `\"point\"`, `\"geoshape\"`, `\"rule\"`, and `\"text\"`)\n   * or a composite mark type (`\"boxplot\"`, `\"errorband\"`, `\"errorbar\"`).\n   */\n  type: M;\n}\n\nexport interface MarkDefMixins {\n  /**\n   * A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.\n   *\n   * __Default value:__ The mark's name. For example, a bar mark will have style `\"bar\"` by default.\n   * __Note:__ Any specified style will augment the default style. For example, a bar mark with `\"style\": \"foo\"` will receive from `config.style.bar` and `config.style.foo` (the specified style `\"foo\"` has higher precedence).\n   */\n  style?: string | string[];\n\n  /**\n   * Whether a mark be clipped to the enclosing group’s width and height.\n   */\n  clip?: boolean;\n\n  // Offset properties should not be a part of config\n\n  /**\n   * Offset for x-position.\n   */\n  xOffset?: number;\n\n  /**\n   * Offset for y-position.\n   */\n  yOffset?: number;\n\n  /**\n   * Offset for x2-position.\n   */\n  x2Offset?: number;\n\n  /**\n   * Offset for y2-position.\n   */\n  y2Offset?: number;\n}\n\n// Point/Line OverlayMixins are only for area, line, and trail but we don't want to declare multiple types of MarkDef\n\n// Point/Line OverlayMixins are only for area, line, and trail but we don't want to declare multiple types of MarkDef\nexport interface MarkDef<M extends string | Mark = Mark>\n  extends GenericMarkDef<M>,\n    RectBinSpacingMixins,\n    MarkConfig,\n    PointOverlayMixins,\n    LineOverlayMixins,\n    TickThicknessMixins,\n    MarkDefMixins {}\n\nconst DEFAULT_RECT_BAND_SIZE = 5;\n\nexport const defaultBarConfig: RectConfig = {\n  binSpacing: 1,\n  continuousBandSize: DEFAULT_RECT_BAND_SIZE,\n  timeUnitBandPosition: 0.5\n};\n\nexport const defaultRectConfig: RectConfig = {\n  binSpacing: 0,\n  continuousBandSize: DEFAULT_RECT_BAND_SIZE,\n  timeUnitBandPosition: 0.5\n};\n\nexport interface TickConfig extends MarkConfig, TickThicknessMixins {\n  /**\n   * The width of the ticks.\n   *\n   * __Default value:__  3/4 of step (width step for horizontal ticks and height step for vertical ticks).\n   * @minimum 0\n   */\n  bandSize?: number;\n}\n\nexport const defaultTickConfig: TickConfig = {\n  thickness: 1\n};\n\nexport function getMarkType(m: string | GenericMarkDef<any>) {\n  return isMarkDef(m) ? m.type : m;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}