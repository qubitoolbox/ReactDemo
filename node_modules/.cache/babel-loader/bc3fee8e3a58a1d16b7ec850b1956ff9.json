{"ast":null,"code":"import { isArray } from 'vega-util';\nimport * as log from '../log';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseRepeatLayoutSize } from './layoutsize/parse';\nexport class RepeatModel extends BaseConcatModel {\n  constructor(spec, parent, parentGivenName, repeatValues, config) {\n    super(spec, 'repeat', parent, parentGivenName, config, repeatValues, spec.resolve);\n\n    if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n      log.warn(log.message.REPEAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.repeat = spec.repeat;\n    this.children = this._initChildren(spec, this.repeat, repeatValues, config);\n  }\n\n  _initChildren(spec, repeat, repeater, config) {\n    const children = [];\n    const row = !isArray(repeat) && repeat.row || [repeater ? repeater.row : null];\n    const column = !isArray(repeat) && repeat.column || [repeater ? repeater.column : null];\n    const repeatValues = isArray(repeat) && repeat || [repeater ? repeater.repeat : null]; // cross product\n\n    for (const repeatValue of repeatValues) {\n      for (const rowValue of row) {\n        for (const columnValue of column) {\n          const name = (repeatValue ? `__repeat_repeat_${repeatValue}` : '') + (rowValue ? `__repeat_row_${rowValue}` : '') + (columnValue ? `__repeat_column_${columnValue}` : '');\n          const childRepeat = {\n            repeat: repeatValue,\n            row: rowValue,\n            column: columnValue\n          };\n          children.push(buildModel(spec.spec, this, this.getName('child' + name), undefined, childRepeat, config));\n        }\n      }\n    }\n\n    return children;\n  }\n\n  parseLayoutSize() {\n    parseRepeatLayoutSize(this);\n  }\n\n  assembleDefaultLayout() {\n    const {\n      repeat\n    } = this;\n    const columns = isArray(repeat) ? undefined : repeat.column ? repeat.column.length : 1;\n    return Object.assign(Object.assign({}, columns ? {\n      columns\n    } : {}), {\n      bounds: 'full',\n      align: 'all'\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/compile/repeat.ts"],"names":[],"mappings":"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","sourcesContent":["import {isArray} from 'vega-util';\nimport {Config} from '../config';\nimport * as log from '../log';\nimport {NormalizedRepeatSpec} from '../spec';\nimport {RepeatMapping} from '../spec/repeat';\nimport {VgLayout} from '../vega.schema';\nimport {BaseConcatModel} from './baseconcat';\nimport {buildModel} from './buildmodel';\nimport {parseRepeatLayoutSize} from './layoutsize/parse';\nimport {Model} from './model';\nimport {RepeaterValue} from './repeater';\n\nexport class RepeatModel extends BaseConcatModel {\n  public readonly repeat: RepeatMapping | string[];\n\n  public readonly children: Model[];\n\n  constructor(\n    spec: NormalizedRepeatSpec,\n    parent: Model,\n    parentGivenName: string,\n    repeatValues: RepeaterValue,\n    config: Config\n  ) {\n    super(spec, 'repeat', parent, parentGivenName, config, repeatValues, spec.resolve);\n\n    if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n      log.warn(log.message.REPEAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.repeat = spec.repeat;\n    this.children = this._initChildren(spec, this.repeat, repeatValues, config);\n  }\n\n  private _initChildren(\n    spec: NormalizedRepeatSpec,\n    repeat: RepeatMapping | string[],\n    repeater: RepeaterValue,\n    config: Config\n  ): Model[] {\n    const children: Model[] = [];\n\n    const row = (!isArray(repeat) && repeat.row) || [repeater ? repeater.row : null];\n    const column = (!isArray(repeat) && repeat.column) || [repeater ? repeater.column : null];\n    const repeatValues = (isArray(repeat) && repeat) || [repeater ? repeater.repeat : null];\n\n    // cross product\n    for (const repeatValue of repeatValues) {\n      for (const rowValue of row) {\n        for (const columnValue of column) {\n          const name =\n            (repeatValue ? `__repeat_repeat_${repeatValue}` : '') +\n            (rowValue ? `__repeat_row_${rowValue}` : '') +\n            (columnValue ? `__repeat_column_${columnValue}` : '');\n\n          const childRepeat = {\n            repeat: repeatValue,\n            row: rowValue,\n            column: columnValue\n          };\n\n          children.push(buildModel(spec.spec, this, this.getName('child' + name), undefined, childRepeat, config));\n        }\n      }\n    }\n\n    return children;\n  }\n\n  public parseLayoutSize() {\n    parseRepeatLayoutSize(this);\n  }\n\n  protected assembleDefaultLayout(): VgLayout {\n    const {repeat} = this;\n    const columns = isArray(repeat) ? undefined : repeat.column ? repeat.column.length : 1;\n\n    return {\n      ...(columns ? {columns} : {}),\n      bounds: 'full',\n      align: 'all'\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}