{"ast":null,"code":"import { TUPLE, unitName } from '.';\nimport { singleOrMultiSignals } from './multi';\nconst single = {\n  signals: singleOrMultiSignals,\n  modifyExpr: (model, selCmpt) => {\n    const tpl = selCmpt.name + TUPLE;\n    return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);\n  }\n};\nexport default single;","map":{"version":3,"sources":["../../../../src/compile/selection/single.ts"],"names":[],"mappings":"AAAA,SAA2B,KAA3B,EAAkC,QAAlC,QAAiD,GAAjD;AACA,SAAQ,oBAAR,QAAmC,SAAnC;AAEA,MAAM,MAAM,GAAgC;AAC1C,EAAA,OAAO,EAAE,oBADiC;AAG1C,EAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,OAAR,KAAmB;AAC7B,UAAM,GAAG,GAAG,OAAO,CAAC,IAAR,GAAe,KAA3B;AACA,WAAO,GAAG,GAAG,IAAN,IAAc,OAAO,CAAC,OAAR,KAAoB,QAApB,GAA+B,MAA/B,GAAwC,UAAU,QAAQ,CAAC,KAAD,CAAO,GAA/E,CAAP;AACD;AANyC,CAA5C;AASA,eAAe,MAAf","sourcesContent":["import {SelectionCompiler, TUPLE, unitName} from '.';\nimport {singleOrMultiSignals} from './multi';\n\nconst single: SelectionCompiler<'single'> = {\n  signals: singleOrMultiSignals,\n\n  modifyExpr: (model, selCmpt) => {\n    const tpl = selCmpt.name + TUPLE;\n    return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);\n  }\n};\n\nexport default single;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}