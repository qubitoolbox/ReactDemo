{"ast":null,"code":"import { dateTimeExpr } from './datetime';\nimport * as log from './log';\nimport { accessPathWithDatum, keys, replaceAll } from './util';\nimport stringify from 'fast-json-stable-stringify';\nexport var TimeUnit;\n\n(function (TimeUnit) {\n  TimeUnit.YEAR = 'year';\n  TimeUnit.MONTH = 'month';\n  TimeUnit.DAY = 'day';\n  TimeUnit.DATE = 'date';\n  TimeUnit.HOURS = 'hours';\n  TimeUnit.MINUTES = 'minutes';\n  TimeUnit.SECONDS = 'seconds';\n  TimeUnit.MILLISECONDS = 'milliseconds';\n  TimeUnit.YEARMONTH = 'yearmonth';\n  TimeUnit.YEARMONTHDATE = 'yearmonthdate';\n  TimeUnit.YEARMONTHDATEHOURS = 'yearmonthdatehours';\n  TimeUnit.YEARMONTHDATEHOURSMINUTES = 'yearmonthdatehoursminutes';\n  TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS = 'yearmonthdatehoursminutesseconds'; // MONTHDATE and MONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n\n  TimeUnit.MONTHDATE = 'monthdate';\n  TimeUnit.MONTHDATEHOURS = 'monthdatehours';\n  TimeUnit.HOURSMINUTES = 'hoursminutes';\n  TimeUnit.HOURSMINUTESSECONDS = 'hoursminutesseconds';\n  TimeUnit.MINUTESSECONDS = 'minutesseconds';\n  TimeUnit.SECONDSMILLISECONDS = 'secondsmilliseconds';\n  TimeUnit.QUARTER = 'quarter';\n  TimeUnit.YEARQUARTER = 'yearquarter';\n  TimeUnit.QUARTERMONTH = 'quartermonth';\n  TimeUnit.YEARQUARTERMONTH = 'yearquartermonth';\n  TimeUnit.UTCYEAR = 'utcyear';\n  TimeUnit.UTCMONTH = 'utcmonth';\n  TimeUnit.UTCDAY = 'utcday';\n  TimeUnit.UTCDATE = 'utcdate';\n  TimeUnit.UTCHOURS = 'utchours';\n  TimeUnit.UTCMINUTES = 'utcminutes';\n  TimeUnit.UTCSECONDS = 'utcseconds';\n  TimeUnit.UTCMILLISECONDS = 'utcmilliseconds';\n  TimeUnit.UTCYEARMONTH = 'utcyearmonth';\n  TimeUnit.UTCYEARMONTHDATE = 'utcyearmonthdate';\n  TimeUnit.UTCYEARMONTHDATEHOURS = 'utcyearmonthdatehours';\n  TimeUnit.UTCYEARMONTHDATEHOURSMINUTES = 'utcyearmonthdatehoursminutes';\n  TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS = 'utcyearmonthdatehoursminutesseconds'; // UTCMONTHDATE and UTCMONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n\n  TimeUnit.UTCMONTHDATE = 'utcmonthdate';\n  TimeUnit.UTCMONTHDATEHOURS = 'utcmonthdatehours';\n  TimeUnit.UTCHOURSMINUTES = 'utchoursminutes';\n  TimeUnit.UTCHOURSMINUTESSECONDS = 'utchoursminutesseconds';\n  TimeUnit.UTCMINUTESSECONDS = 'utcminutesseconds';\n  TimeUnit.UTCSECONDSMILLISECONDS = 'utcsecondsmilliseconds';\n  TimeUnit.UTCQUARTER = 'utcquarter';\n  TimeUnit.UTCYEARQUARTER = 'utcyearquarter';\n  TimeUnit.UTCQUARTERMONTH = 'utcquartermonth';\n  TimeUnit.UTCYEARQUARTERMONTH = 'utcyearquartermonth';\n})(TimeUnit || (TimeUnit = {}));\n/** Time Unit that only corresponds to only one part of Date objects. */\n\n\nconst LOCAL_SINGLE_TIMEUNIT_INDEX = {\n  year: 1,\n  quarter: 1,\n  month: 1,\n  day: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n};\nexport const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n  return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nconst UTC_SINGLE_TIMEUNIT_INDEX = {\n  utcyear: 1,\n  utcquarter: 1,\n  utcmonth: 1,\n  utcday: 1,\n  utcdate: 1,\n  utchours: 1,\n  utcminutes: 1,\n  utcseconds: 1,\n  utcmilliseconds: 1\n};\nexport function isUtcSingleTimeUnit(timeUnit) {\n  return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nconst LOCAL_MULTI_TIMEUNIT_INDEX = {\n  yearquarter: 1,\n  yearquartermonth: 1,\n  yearmonth: 1,\n  yearmonthdate: 1,\n  yearmonthdatehours: 1,\n  yearmonthdatehoursminutes: 1,\n  yearmonthdatehoursminutesseconds: 1,\n  quartermonth: 1,\n  monthdate: 1,\n  monthdatehours: 1,\n  hoursminutes: 1,\n  hoursminutesseconds: 1,\n  minutesseconds: 1,\n  secondsmilliseconds: 1\n};\nconst UTC_MULTI_TIMEUNIT_INDEX = {\n  utcyearquarter: 1,\n  utcyearquartermonth: 1,\n  utcyearmonth: 1,\n  utcyearmonthdate: 1,\n  utcyearmonthdatehours: 1,\n  utcyearmonthdatehoursminutes: 1,\n  utcyearmonthdatehoursminutesseconds: 1,\n  utcquartermonth: 1,\n  utcmonthdate: 1,\n  utcmonthdatehours: 1,\n  utchoursminutes: 1,\n  utchoursminutesseconds: 1,\n  utcminutesseconds: 1,\n  utcsecondsmilliseconds: 1\n};\nconst UTC_TIMEUNIT_INDEX = Object.assign(Object.assign({}, UTC_SINGLE_TIMEUNIT_INDEX), UTC_MULTI_TIMEUNIT_INDEX);\nexport function isUTCTimeUnit(t) {\n  return !!UTC_TIMEUNIT_INDEX[t];\n}\nexport function getLocalTimeUnit(t) {\n  return t.substr(3);\n}\nconst TIMEUNIT_INDEX = Object.assign(Object.assign(Object.assign(Object.assign({}, LOCAL_SINGLE_TIMEUNIT_INDEX), UTC_SINGLE_TIMEUNIT_INDEX), LOCAL_MULTI_TIMEUNIT_INDEX), UTC_MULTI_TIMEUNIT_INDEX);\nexport const TIMEUNITS = keys(TIMEUNIT_INDEX); // In order of increasing specificity\n\nexport const VEGALITE_TIMEFORMAT = {\n  'year-month': '%b %Y ',\n  'year-month-date': '%b %d, %Y '\n};\nexport function isTimeUnit(t) {\n  return !!TIMEUNIT_INDEX[t];\n}\nexport function getTimeUnitParts(timeUnit) {\n  return TIMEUNIT_PARTS.reduce((parts, part) => {\n    if (containsTimeUnit(timeUnit, part)) {\n      return [...parts, part];\n    }\n\n    return parts;\n  }, []);\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\n\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n  const index = fullTimeUnit.indexOf(timeUnit);\n  return index > -1 && (timeUnit !== TimeUnit.SECONDS || index === 0 || fullTimeUnit.charAt(index - 1) !== 'i') // exclude milliseconds\n  ;\n}\n/**\n * Returns Vega expresssion for a given timeUnit and fieldRef\n */\n\nexport function fieldExpr(fullTimeUnit, field, {\n  end\n} = {\n  end: false\n}) {\n  const fieldRef = accessPathWithDatum(field);\n  const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n\n  function func(timeUnit) {\n    if (timeUnit === TimeUnit.QUARTER) {\n      // quarter starting at 0 (0,3,6,9).\n      return `(${utc}quarter(${fieldRef})-1)`;\n    } else {\n      return `${utc}${timeUnit}(${fieldRef})`;\n    }\n  }\n\n  let lastTimeUnit;\n  const d = TIMEUNIT_PARTS.reduce((dateExpr, tu) => {\n    if (containsTimeUnit(fullTimeUnit, tu)) {\n      dateExpr[tu] = func(tu);\n      lastTimeUnit = tu;\n    }\n\n    return dateExpr;\n  }, {});\n\n  if (end) {\n    d[lastTimeUnit] += '+1';\n  }\n\n  return dateTimeExpr(d);\n}\nexport function getTimeUnitSpecifierExpression(timeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const timeUnitParts = getTimeUnitParts(timeUnit);\n  return `timeUnitSpecifier(${stringify(timeUnitParts)}, ${stringify(VEGALITE_TIMEFORMAT)})`;\n}\n/**\n * returns the signal expression used for axis labels for a time unit\n */\n\nexport function formatExpression(timeUnit, field, isUTCScale) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const timeUnitSpecifierExpr = getTimeUnitSpecifierExpression(timeUnit); // We only use utcFormat for utc scale\n  // For utc time units, the data is already converted as a part of timeUnit transform.\n  // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n\n  if (isUTCScale) {\n    return `utcFormat(${field}, ${timeUnitSpecifierExpr})`;\n  } else {\n    return `timeFormat(${field}, ${timeUnitSpecifierExpr})`;\n  }\n}\nexport function normalizeTimeUnit(timeUnit) {\n  if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {\n    log.warn(log.message.dayReplacedWithDate(timeUnit));\n    return replaceAll(timeUnit, 'day', 'date');\n  }\n\n  return timeUnit;\n}","map":{"version":3,"sources":["../../src/timeunit.ts"],"names":[],"mappings":"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","sourcesContent":["import {DateTimeExpr, dateTimeExpr} from './datetime';\nimport * as log from './log';\nimport {accessPathWithDatum, Flag, keys, replaceAll} from './util';\nimport stringify from 'fast-json-stable-stringify';\n\nexport namespace TimeUnit {\n  export const YEAR: 'year' = 'year';\n  export const MONTH: 'month' = 'month';\n  export const DAY: 'day' = 'day';\n  export const DATE: 'date' = 'date';\n  export const HOURS: 'hours' = 'hours';\n  export const MINUTES: 'minutes' = 'minutes';\n  export const SECONDS: 'seconds' = 'seconds';\n  export const MILLISECONDS: 'milliseconds' = 'milliseconds';\n  export const YEARMONTH: 'yearmonth' = 'yearmonth';\n  export const YEARMONTHDATE: 'yearmonthdate' = 'yearmonthdate';\n  export const YEARMONTHDATEHOURS: 'yearmonthdatehours' = 'yearmonthdatehours';\n  export const YEARMONTHDATEHOURSMINUTES: 'yearmonthdatehoursminutes' = 'yearmonthdatehoursminutes';\n  export const YEARMONTHDATEHOURSMINUTESSECONDS: 'yearmonthdatehoursminutesseconds' =\n    'yearmonthdatehoursminutesseconds';\n\n  // MONTHDATE and MONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n  export const MONTHDATE: 'monthdate' = 'monthdate';\n  export const MONTHDATEHOURS: 'monthdatehours' = 'monthdatehours';\n  export const HOURSMINUTES: 'hoursminutes' = 'hoursminutes';\n  export const HOURSMINUTESSECONDS: 'hoursminutesseconds' = 'hoursminutesseconds';\n  export const MINUTESSECONDS: 'minutesseconds' = 'minutesseconds';\n  export const SECONDSMILLISECONDS: 'secondsmilliseconds' = 'secondsmilliseconds';\n  export const QUARTER: 'quarter' = 'quarter';\n  export const YEARQUARTER: 'yearquarter' = 'yearquarter';\n  export const QUARTERMONTH: 'quartermonth' = 'quartermonth';\n  export const YEARQUARTERMONTH: 'yearquartermonth' = 'yearquartermonth';\n  export const UTCYEAR: 'utcyear' = 'utcyear';\n  export const UTCMONTH: 'utcmonth' = 'utcmonth';\n  export const UTCDAY: 'utcday' = 'utcday';\n  export const UTCDATE: 'utcdate' = 'utcdate';\n  export const UTCHOURS: 'utchours' = 'utchours';\n  export const UTCMINUTES: 'utcminutes' = 'utcminutes';\n  export const UTCSECONDS: 'utcseconds' = 'utcseconds';\n  export const UTCMILLISECONDS: 'utcmilliseconds' = 'utcmilliseconds';\n  export const UTCYEARMONTH: 'utcyearmonth' = 'utcyearmonth';\n  export const UTCYEARMONTHDATE: 'utcyearmonthdate' = 'utcyearmonthdate';\n  export const UTCYEARMONTHDATEHOURS: 'utcyearmonthdatehours' = 'utcyearmonthdatehours';\n  export const UTCYEARMONTHDATEHOURSMINUTES: 'utcyearmonthdatehoursminutes' = 'utcyearmonthdatehoursminutes';\n  export const UTCYEARMONTHDATEHOURSMINUTESSECONDS: 'utcyearmonthdatehoursminutesseconds' =\n    'utcyearmonthdatehoursminutesseconds';\n\n  // UTCMONTHDATE and UTCMONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n  export const UTCMONTHDATE: 'utcmonthdate' = 'utcmonthdate';\n  export const UTCMONTHDATEHOURS: 'utcmonthdatehours' = 'utcmonthdatehours';\n  export const UTCHOURSMINUTES: 'utchoursminutes' = 'utchoursminutes';\n  export const UTCHOURSMINUTESSECONDS: 'utchoursminutesseconds' = 'utchoursminutesseconds';\n  export const UTCMINUTESSECONDS: 'utcminutesseconds' = 'utcminutesseconds';\n  export const UTCSECONDSMILLISECONDS: 'utcsecondsmilliseconds' = 'utcsecondsmilliseconds';\n  export const UTCQUARTER: 'utcquarter' = 'utcquarter';\n  export const UTCYEARQUARTER: 'utcyearquarter' = 'utcyearquarter';\n  export const UTCQUARTERMONTH: 'utcquartermonth' = 'utcquartermonth';\n  export const UTCYEARQUARTERMONTH: 'utcyearquartermonth' = 'utcyearquartermonth';\n}\n\nexport type LocalSingleTimeUnit =\n  | typeof TimeUnit.YEAR\n  | typeof TimeUnit.QUARTER\n  | typeof TimeUnit.MONTH\n  | typeof TimeUnit.DAY\n  | typeof TimeUnit.DATE\n  | typeof TimeUnit.HOURS\n  | typeof TimeUnit.MINUTES\n  | typeof TimeUnit.SECONDS\n  | typeof TimeUnit.MILLISECONDS;\n\n/** Time Unit that only corresponds to only one part of Date objects. */\nconst LOCAL_SINGLE_TIMEUNIT_INDEX: Flag<LocalSingleTimeUnit> = {\n  year: 1,\n  quarter: 1,\n  month: 1,\n  day: 1,\n  date: 1,\n  hours: 1,\n  minutes: 1,\n  seconds: 1,\n  milliseconds: 1\n};\n\nexport const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\n\nexport function isLocalSingleTimeUnit(timeUnit: string): timeUnit is LocalSingleTimeUnit {\n  return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\n\nexport type UtcSingleTimeUnit =\n  | typeof TimeUnit.UTCYEAR\n  | typeof TimeUnit.UTCQUARTER\n  | typeof TimeUnit.UTCMONTH\n  | typeof TimeUnit.UTCDAY\n  | typeof TimeUnit.UTCDATE\n  | typeof TimeUnit.UTCHOURS\n  | typeof TimeUnit.UTCMINUTES\n  | typeof TimeUnit.UTCSECONDS\n  | typeof TimeUnit.UTCMILLISECONDS;\n\nconst UTC_SINGLE_TIMEUNIT_INDEX: Flag<UtcSingleTimeUnit> = {\n  utcyear: 1,\n  utcquarter: 1,\n  utcmonth: 1,\n  utcday: 1,\n  utcdate: 1,\n  utchours: 1,\n  utcminutes: 1,\n  utcseconds: 1,\n  utcmilliseconds: 1\n};\n\nexport function isUtcSingleTimeUnit(timeUnit: string): timeUnit is UtcSingleTimeUnit {\n  return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\n\nexport type SingleTimeUnit = LocalSingleTimeUnit | UtcSingleTimeUnit;\n\nexport type LocalMultiTimeUnit =\n  // Local Time\n  | typeof TimeUnit.YEARQUARTER\n  | typeof TimeUnit.YEARQUARTERMONTH\n  | typeof TimeUnit.YEARMONTH\n  | typeof TimeUnit.YEARMONTHDATE\n  | typeof TimeUnit.YEARMONTHDATEHOURS\n  | typeof TimeUnit.YEARMONTHDATEHOURSMINUTES\n  | typeof TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS\n  | typeof TimeUnit.QUARTERMONTH\n  | typeof TimeUnit.MONTHDATE\n  | typeof TimeUnit.MONTHDATEHOURS\n  | typeof TimeUnit.HOURSMINUTES\n  | typeof TimeUnit.HOURSMINUTESSECONDS\n  | typeof TimeUnit.MINUTESSECONDS\n  | typeof TimeUnit.SECONDSMILLISECONDS;\n\nconst LOCAL_MULTI_TIMEUNIT_INDEX: Flag<LocalMultiTimeUnit> = {\n  yearquarter: 1,\n  yearquartermonth: 1,\n\n  yearmonth: 1,\n  yearmonthdate: 1,\n  yearmonthdatehours: 1,\n  yearmonthdatehoursminutes: 1,\n  yearmonthdatehoursminutesseconds: 1,\n\n  quartermonth: 1,\n\n  monthdate: 1,\n  monthdatehours: 1,\n\n  hoursminutes: 1,\n  hoursminutesseconds: 1,\n\n  minutesseconds: 1,\n\n  secondsmilliseconds: 1\n};\n\nexport type UtcMultiTimeUnit =\n  | typeof TimeUnit.UTCYEARQUARTER\n  | typeof TimeUnit.UTCYEARQUARTERMONTH\n  | typeof TimeUnit.UTCYEARMONTH\n  | typeof TimeUnit.UTCYEARMONTHDATE\n  | typeof TimeUnit.UTCYEARMONTHDATEHOURS\n  | typeof TimeUnit.UTCYEARMONTHDATEHOURSMINUTES\n  | typeof TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS\n  | typeof TimeUnit.UTCQUARTERMONTH\n  | typeof TimeUnit.UTCMONTHDATE\n  | typeof TimeUnit.UTCMONTHDATEHOURS\n  | typeof TimeUnit.UTCHOURSMINUTES\n  | typeof TimeUnit.UTCHOURSMINUTESSECONDS\n  | typeof TimeUnit.UTCMINUTESSECONDS\n  | typeof TimeUnit.UTCSECONDSMILLISECONDS;\n\nconst UTC_MULTI_TIMEUNIT_INDEX: Flag<UtcMultiTimeUnit> = {\n  utcyearquarter: 1,\n  utcyearquartermonth: 1,\n\n  utcyearmonth: 1,\n  utcyearmonthdate: 1,\n  utcyearmonthdatehours: 1,\n  utcyearmonthdatehoursminutes: 1,\n  utcyearmonthdatehoursminutesseconds: 1,\n\n  utcquartermonth: 1,\n\n  utcmonthdate: 1,\n  utcmonthdatehours: 1,\n\n  utchoursminutes: 1,\n  utchoursminutesseconds: 1,\n\n  utcminutesseconds: 1,\n\n  utcsecondsmilliseconds: 1\n};\n\nexport type MultiTimeUnit = LocalMultiTimeUnit | UtcMultiTimeUnit;\n\nexport type LocalTimeUnit = LocalSingleTimeUnit | LocalMultiTimeUnit;\nexport type UtcTimeUnit = UtcSingleTimeUnit | UtcMultiTimeUnit;\n\nconst UTC_TIMEUNIT_INDEX: Flag<UtcTimeUnit> = {\n  ...UTC_SINGLE_TIMEUNIT_INDEX,\n  ...UTC_MULTI_TIMEUNIT_INDEX\n};\n\nexport function isUTCTimeUnit(t: string): t is UtcTimeUnit {\n  return !!UTC_TIMEUNIT_INDEX[t];\n}\n\nexport function getLocalTimeUnit(t: UtcTimeUnit): LocalTimeUnit {\n  return t.substr(3) as LocalTimeUnit;\n}\n\nexport type TimeUnit = SingleTimeUnit | MultiTimeUnit;\n\nconst TIMEUNIT_INDEX: Flag<TimeUnit> = {\n  ...LOCAL_SINGLE_TIMEUNIT_INDEX,\n  ...UTC_SINGLE_TIMEUNIT_INDEX,\n  ...LOCAL_MULTI_TIMEUNIT_INDEX,\n  ...UTC_MULTI_TIMEUNIT_INDEX\n};\n\nexport const TIMEUNITS = keys(TIMEUNIT_INDEX);\n\nexport type TimeUnitFormat =\n  | 'year'\n  | 'year-month'\n  | 'year-month-date'\n  | 'quarter'\n  | 'month'\n  | 'date'\n  | 'week'\n  | 'day'\n  | 'hours'\n  | 'hours-minutes'\n  | 'minutes'\n  | 'seconds'\n  | 'milliseconds';\n\n// matches vega time unit format specifier\n// matches vega time unit format specifier\nexport type TimeFormatConfig = {\n  [unit in TimeUnitFormat]?: string;\n};\n\n// In order of increasing specificity\nexport const VEGALITE_TIMEFORMAT: TimeFormatConfig = {\n  'year-month': '%b %Y ',\n  'year-month-date': '%b %d, %Y '\n};\n\nexport function isTimeUnit(t: string): t is TimeUnit {\n  return !!TIMEUNIT_INDEX[t];\n}\n\nexport function getTimeUnitParts(timeUnit: TimeUnit) {\n  return TIMEUNIT_PARTS.reduce((parts, part) => {\n    if (containsTimeUnit(timeUnit, part)) {\n      return [...parts, part];\n    }\n    return parts;\n  }, []);\n}\n\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit: TimeUnit, timeUnit: TimeUnit) {\n  const index = fullTimeUnit.indexOf(timeUnit);\n  return (\n    index > -1 && (timeUnit !== TimeUnit.SECONDS || index === 0 || fullTimeUnit.charAt(index - 1) !== 'i') // exclude milliseconds\n  );\n}\n\n/**\n * Returns Vega expresssion for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit: TimeUnit, field: string, {end}: {end: boolean} = {end: false}): string {\n  const fieldRef = accessPathWithDatum(field);\n\n  const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n\n  function func(timeUnit: TimeUnit) {\n    if (timeUnit === TimeUnit.QUARTER) {\n      // quarter starting at 0 (0,3,6,9).\n      return `(${utc}quarter(${fieldRef})-1)`;\n    } else {\n      return `${utc}${timeUnit}(${fieldRef})`;\n    }\n  }\n\n  let lastTimeUnit: TimeUnit;\n\n  const d = TIMEUNIT_PARTS.reduce((dateExpr: DateTimeExpr, tu: TimeUnit) => {\n    if (containsTimeUnit(fullTimeUnit, tu)) {\n      dateExpr[tu] = func(tu);\n      lastTimeUnit = tu;\n    }\n    return dateExpr;\n  }, {} as {[key in SingleTimeUnit]: string});\n\n  if (end) {\n    d[lastTimeUnit] += '+1';\n  }\n\n  return dateTimeExpr(d);\n}\n\nexport function getTimeUnitSpecifierExpression(timeUnit: TimeUnit) {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const timeUnitParts = getTimeUnitParts(timeUnit);\n  return `timeUnitSpecifier(${stringify(timeUnitParts)}, ${stringify(VEGALITE_TIMEFORMAT)})`;\n}\n\n/**\n * returns the signal expression used for axis labels for a time unit\n */\nexport function formatExpression(timeUnit: TimeUnit, field: string, isUTCScale: boolean): string {\n  if (!timeUnit) {\n    return undefined;\n  }\n\n  const timeUnitSpecifierExpr = getTimeUnitSpecifierExpression(timeUnit);\n\n  // We only use utcFormat for utc scale\n  // For utc time units, the data is already converted as a part of timeUnit transform.\n  // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n  if (isUTCScale) {\n    return `utcFormat(${field}, ${timeUnitSpecifierExpr})`;\n  } else {\n    return `timeFormat(${field}, ${timeUnitSpecifierExpr})`;\n  }\n}\n\nexport function normalizeTimeUnit(timeUnit: TimeUnit): TimeUnit {\n  if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {\n    log.warn(log.message.dayReplacedWithDate(timeUnit));\n    return replaceAll(timeUnit, 'day', 'date') as TimeUnit;\n  }\n  return timeUnit;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}