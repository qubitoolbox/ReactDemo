{"ast":null,"code":"import { format, isTypedFieldDef, isValueDef } from '../../../channeldef';\nimport { formatSignalRef } from '../../common';\nimport { wrapCondition } from './conditional';\nexport function text(model, channel = 'text') {\n  const channelDef = model.encoding[channel];\n  return wrapCondition(model, channelDef, channel, cDef => textRef(cDef, model.config));\n}\nexport function textRef(channelDef, config, expr = 'datum') {\n  // text\n  if (channelDef) {\n    if (isValueDef(channelDef)) {\n      return {\n        value: channelDef.value\n      };\n    }\n\n    if (isTypedFieldDef(channelDef)) {\n      return formatSignalRef(channelDef, format(channelDef), expr, config);\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["../../../../../src/compile/mark/encode/text.ts"],"names":[],"mappings":"AAAA,SAA2C,MAA3C,EAAmD,eAAnD,EAAoE,UAApE,QAA4F,qBAA5F;AAGA,SAAQ,eAAR,QAA8B,cAA9B;AAEA,SAAQ,aAAR,QAA4B,eAA5B;AAEA,OAAM,SAAU,IAAV,CAAe,KAAf,EAAiC,OAAA,GAAmC,MAApE,EAA0E;AAC9E,QAAM,UAAU,GAAG,KAAK,CAAC,QAAN,CAAe,OAAf,CAAnB;AACA,SAAO,aAAa,CAAC,KAAD,EAAQ,UAAR,EAAoB,OAApB,EAA6B,IAAI,IAAI,OAAO,CAAC,IAAD,EAAO,KAAK,CAAC,MAAb,CAA5C,CAApB;AACD;AAED,OAAM,SAAU,OAAV,CACJ,UADI,EAEJ,MAFI,EAGJ,IAAA,GAAgC,OAH5B,EAGmC;AAEvC;AACA,MAAI,UAAJ,EAAgB;AACd,QAAI,UAAU,CAAC,UAAD,CAAd,EAA4B;AAC1B,aAAO;AAAC,QAAA,KAAK,EAAE,UAAU,CAAC;AAAnB,OAAP;AACD;;AACD,QAAI,eAAe,CAAC,UAAD,CAAnB,EAAiC;AAC/B,aAAO,eAAe,CAAC,UAAD,EAAa,MAAM,CAAC,UAAD,CAAnB,EAAiC,IAAjC,EAAuC,MAAvC,CAAtB;AACD;AACF;;AACD,SAAO,SAAP;AACD","sourcesContent":["import {ChannelDefWithCondition, FieldDef, format, isTypedFieldDef, isValueDef, Value} from '../../../channeldef';\nimport {Config} from '../../../config';\nimport {VgValueRef} from '../../../vega.schema';\nimport {formatSignalRef} from '../../common';\nimport {UnitModel} from '../../unit';\nimport {wrapCondition} from './conditional';\n\nexport function text(model: UnitModel, channel: 'text' | 'href' | 'url' = 'text') {\n  const channelDef = model.encoding[channel];\n  return wrapCondition(model, channelDef, channel, cDef => textRef(cDef, model.config));\n}\n\nexport function textRef(\n  channelDef: ChannelDefWithCondition<FieldDef<string>, Value | string[]>,\n  config: Config,\n  expr: 'datum' | 'datum.datum' = 'datum'\n): VgValueRef {\n  // text\n  if (channelDef) {\n    if (isValueDef(channelDef)) {\n      return {value: channelDef.value};\n    }\n    if (isTypedFieldDef(channelDef)) {\n      return formatSignalRef(channelDef, format(channelDef), expr, config);\n    }\n  }\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}