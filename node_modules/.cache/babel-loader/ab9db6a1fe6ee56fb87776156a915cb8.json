{"ast":null,"code":"/** Constants and utilities for data type */\n\n/** Data type based on level of measurement */\nexport const TYPE_INDEX = {\n  quantitative: 1,\n  ordinal: 1,\n  temporal: 1,\n  nominal: 1,\n  geojson: 1\n};\nexport function isType(t) {\n  return !!TYPE_INDEX[t];\n}\nexport const QUANTITATIVE = 'quantitative';\nexport const ORDINAL = 'ordinal';\nexport const TEMPORAL = 'temporal';\nexport const NOMINAL = 'nominal';\nexport const GEOJSON = 'geojson';\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\n\nexport function getFullName(type) {\n  if (type) {\n    type = type.toLowerCase();\n\n    switch (type) {\n      case 'q':\n      case QUANTITATIVE:\n        return 'quantitative';\n\n      case 't':\n      case TEMPORAL:\n        return 'temporal';\n\n      case 'o':\n      case ORDINAL:\n        return 'ordinal';\n\n      case 'n':\n      case NOMINAL:\n        return 'nominal';\n\n      case GEOJSON:\n        return 'geojson';\n    }\n  } // If we get invalid input, return undefined type.\n\n\n  return undefined;\n}","map":{"version":3,"sources":["../../src/type.ts"],"names":[],"mappings":"AACA;;AACA;AAEA,OAAO,MAAM,UAAU,GAAe;AACpC,EAAA,YAAY,EAAE,CADsB;AAEpC,EAAA,OAAO,EAAE,CAF2B;AAGpC,EAAA,QAAQ,EAAE,CAH0B;AAIpC,EAAA,OAAO,EAAE,CAJ2B;AAKpC,EAAA,OAAO,EAAE;AAL2B,CAA/B;AAQP,OAAM,SAAU,MAAV,CAAiB,CAAjB,EAAuB;AAC3B,SAAO,CAAC,CAAC,UAAU,CAAC,CAAD,CAAnB;AACD;AAED,OAAO,MAAM,YAAY,GAAmB,cAArC;AACP,OAAO,MAAM,OAAO,GAAc,SAA3B;AACP,OAAO,MAAM,QAAQ,GAAe,UAA7B;AACP,OAAO,MAAM,OAAO,GAAc,SAA3B;AAEP,OAAO,MAAM,OAAO,GAAc,SAA3B;AAMP;;;;;;AAKA,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAAyC;AAC7C,MAAI,IAAJ,EAAU;AACR,IAAA,IAAI,GAAG,IAAI,CAAC,WAAL,EAAP;;AACA,YAAQ,IAAR;AACE,WAAK,GAAL;AACA,WAAK,YAAL;AACE,eAAO,cAAP;;AACF,WAAK,GAAL;AACA,WAAK,QAAL;AACE,eAAO,UAAP;;AACF,WAAK,GAAL;AACA,WAAK,OAAL;AACE,eAAO,SAAP;;AACF,WAAK,GAAL;AACA,WAAK,OAAL;AACE,eAAO,SAAP;;AACF,WAAK,OAAL;AACE,eAAO,SAAP;AAdJ;AAgBD,GAnB4C,CAoB7C;;;AACA,SAAO,SAAP;AACD","sourcesContent":["import {Flag} from './util';\n/** Constants and utilities for data type */\n/** Data type based on level of measurement */\n\nexport const TYPE_INDEX: Flag<Type> = {\n  quantitative: 1,\n  ordinal: 1,\n  temporal: 1,\n  nominal: 1,\n  geojson: 1\n};\n\nexport function isType(t: any): t is Type {\n  return !!TYPE_INDEX[t];\n}\n\nexport const QUANTITATIVE: 'quantitative' = 'quantitative';\nexport const ORDINAL: 'ordinal' = 'ordinal';\nexport const TEMPORAL: 'temporal' = 'temporal';\nexport const NOMINAL: 'nominal' = 'nominal';\n\nexport const GEOJSON: 'geojson' = 'geojson';\n\nexport type StandardType = typeof QUANTITATIVE | typeof ORDINAL | typeof TEMPORAL | typeof NOMINAL;\n\nexport type Type = StandardType | typeof GEOJSON;\n\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\nexport function getFullName(type: Type | string): Type | undefined {\n  if (type) {\n    type = type.toLowerCase();\n    switch (type) {\n      case 'q':\n      case QUANTITATIVE:\n        return 'quantitative';\n      case 't':\n      case TEMPORAL:\n        return 'temporal';\n      case 'o':\n      case ORDINAL:\n        return 'ordinal';\n      case 'n':\n      case NOMINAL:\n        return 'nominal';\n      case GEOJSON:\n        return 'geojson';\n    }\n  }\n  // If we get invalid input, return undefined type.\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}