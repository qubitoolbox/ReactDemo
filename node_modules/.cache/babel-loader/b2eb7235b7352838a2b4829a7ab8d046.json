{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tf = __importStar(require(\"@tensorflow/tfjs-core\"));\n\nconst platform_react_native_1 = require(\"../platform_react_native\");\n\nconst drawTextureProgramInfo = __importStar(require(\"./draw_texture_program_info\"));\n\nconst resizeBilinearProgramInfo = __importStar(require(\"./resize_bilinear_program_info\"));\n\nconst resizeNNProgramInfo = __importStar(require(\"./resize_nearest_neigbor_program_info\")); // Shared cached frameBuffer object from external context\n\n\nconst fboCache = new WeakMap(); // Internal target texture used for resizing camera texture input\n\nconst resizeTextureCache = new WeakMap();\nconst resizeTextureDimsCache = new WeakMap(); // Cache for shader programs and associated vertex array buffers.\n\nconst programCacheByContext = new WeakMap();\n/**\n * Download data from an texture.\n *\n * @param gl\n * @param texture\n * @param dims\n */\n\nfunction downloadTextureData(gl, texture, dims) {\n  const {\n    width,\n    height,\n    depth\n  } = dims;\n  const pixels = new Uint8Array(width * height * depth);\n\n  if (!fboCache.has(gl)) {\n    fboCache.set(gl, createFrameBuffer(gl));\n  }\n\n  const fbo = fboCache.get(gl);\n  const debugMode = platform_react_native_1.getDebugMode();\n  tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  });\n  tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n  });\n  tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n    const level = 0;\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, level);\n  });\n  tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n    const format = depth === 3 ? gl.RGB : gl.RGBA;\n    const x = 0;\n    const y = 0;\n    gl.readPixels(x, y, width, height, format, gl.UNSIGNED_BYTE, pixels);\n  }); // Unbind framebuffer\n\n  tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  });\n  return pixels;\n}\n\nexports.downloadTextureData = downloadTextureData;\n/**\n * Upload image data to a texture.\n *\n * @param imageData data to upload\n * @param gl gl context to use\n * @param dims image size\n * @param texture optional texture to upload data to. If none is passed a new\n *     texture will be returned\n */\n\nfunction uploadTextureData(imageData, gl, dims, texture) {\n  const targetTextureWidth = dims.width;\n  const targetTextureHeight = dims.height;\n  tf.util.assert(targetTextureWidth * targetTextureHeight * dims.depth === imageData.length, () => 'uploadTextureData Error: imageData length must match w * h * d');\n  const targetTexture = texture || gl.createTexture();\n  gl.activeTexture(gl.TEXTURE0);\n  gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  const debugMode = platform_react_native_1.getDebugMode();\n  const level = 0;\n  const format = dims.depth === 3 ? gl.RGB : gl.RGBA;\n  const internalFormat = format;\n  const border = 0;\n  const type = gl.UNSIGNED_BYTE;\n  tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, targetTextureWidth, targetTextureHeight, border, format, type, imageData);\n  });\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  return targetTexture;\n}\n\nexports.uploadTextureData = uploadTextureData;\n/**\n * Render a texture to the default framebuffer (i.e. screen)\n *\n * @param gl WebGL context to use\n * @param texture texture to render\n * @param dims texture size\n */\n\nfunction drawTexture(gl, texture, dims, flipHorizontal) {\n  const {\n    program,\n    vao,\n    vertices,\n    uniformLocations\n  } = drawTextureProgram(gl, flipHorizontal);\n  gl.useProgram(program);\n  gl.bindVertexArray(vao); // Set texture sampler uniform\n\n  const TEXTURE_UNIT = 0;\n  gl.uniform1i(uniformLocations.get('inputTexture'), TEXTURE_UNIT);\n  gl.activeTexture(gl.TEXTURE0 + TEXTURE_UNIT);\n  gl.bindTexture(gl.TEXTURE_2D, texture); // Draw to screen\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.viewport(0, 0, dims.width, dims.height); // gl.clearColor(1, 1, 0, 1);\n  // gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 2);\n  gl.bindVertexArray(null);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.useProgram(null);\n}\n\nexports.drawTexture = drawTexture;\n\nfunction runResizeProgram(gl, inputTexture, inputDims, outputDims, alignCorners, interpolation) {\n  const debugMode = platform_react_native_1.getDebugMode();\n  const {\n    program,\n    vao,\n    vertices,\n    uniformLocations\n  } = resizeProgram(gl, inputDims, outputDims, alignCorners, interpolation);\n  gl.useProgram(program); // Set up geometry\n\n  tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n    gl.bindVertexArray(vao);\n  }); //\n  // Set up input texture\n  //\n\n  gl.uniform1i(uniformLocations.get('inputTexture'), 1);\n  gl.activeTexture(gl.TEXTURE0 + 1);\n  gl.bindTexture(gl.TEXTURE_2D, inputTexture); //\n  // Set up output texture.\n  //\n\n  if (!resizeTextureCache.has(gl)) {\n    resizeTextureCache.set(gl, gl.createTexture());\n  }\n\n  const resizeTexture = resizeTextureCache.get(gl);\n  const targetTexture = resizeTexture;\n  const targetTextureWidth = outputDims.width;\n  const targetTextureHeight = outputDims.height;\n  gl.activeTexture(gl.TEXTURE0 + 2);\n  gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // Reallocate texture storage if target size has changed.\n\n  if (!resizeTextureDimsCache.has(gl)) {\n    resizeTextureDimsCache.set(gl, {\n      width: -1,\n      height: -1\n    });\n  }\n\n  const resizeTextureDims = resizeTextureDimsCache.get(gl);\n\n  if (resizeTextureDims == null || resizeTextureDims.width !== targetTextureWidth || resizeTextureDims.height !== targetTextureHeight) {\n    const level = 0;\n    const format = outputDims.depth === 3 ? gl.RGB : gl.RGBA;\n    const internalFormat = format;\n    const border = 0;\n    const type = gl.UNSIGNED_BYTE;\n    tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, targetTextureWidth, targetTextureHeight, border, format, type, null);\n    });\n    resizeTextureDimsCache.set(gl, {\n      width: targetTextureWidth,\n      height: targetTextureHeight\n    });\n  } //\n  // Render to output texture\n  //\n\n\n  if (!fboCache.has(gl)) {\n    fboCache.set(gl, createFrameBuffer(gl));\n  }\n\n  const fbo = fboCache.get(gl);\n  gl.viewport(0, 0, targetTextureWidth, targetTextureHeight);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, targetTexture, 0);\n  const fboComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n  if (fboComplete !== gl.FRAMEBUFFER_COMPLETE) {\n    switch (fboComplete) {\n      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n        throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT');\n\n      case gl.FRAMEBUFFER_UNSUPPORTED:\n        throw new Error('createFrameBuffer: gl.FRAMEBUFFER_UNSUPPORTED');\n\n      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n        throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT');\n\n      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n        throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS');\n\n      case gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:\n        throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE');\n\n      default:\n        throw new Error('createFrameBuffer Error: Other or unknown fbo complete status: ' + `${fboComplete}`);\n    }\n  }\n\n  gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 2); // Restore previous state\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.useProgram(null);\n  gl.bindVertexArray(null);\n  return targetTexture;\n}\n\nexports.runResizeProgram = runResizeProgram;\n\nfunction createFrameBuffer(gl) {\n  const fb = gl.createFramebuffer();\n\n  if (fb == null) {\n    throw new Error('Could not create framebuffer');\n  }\n\n  return fb;\n}\n\nfunction drawTextureProgram(gl, flipHorizontal) {\n  if (!programCacheByContext.has(gl)) {\n    programCacheByContext.set(gl, new Map());\n  }\n\n  const programCache = programCacheByContext.get(gl);\n  const cacheKey = `drawTexture_${flipHorizontal}`;\n\n  if (!programCache.has(cacheKey)) {\n    const vertSource = drawTextureProgramInfo.vertexShaderSource(flipHorizontal);\n    const fragSource = drawTextureProgramInfo.fragmentShaderSource();\n    const vertices = drawTextureProgramInfo.vertices();\n    const texCoords = drawTextureProgramInfo.texCoords();\n    const programObjects = createProgramObjects(gl, vertSource, fragSource, vertices, texCoords);\n    programCache.set(cacheKey, programObjects);\n  }\n\n  return programCache.get(cacheKey);\n}\n\nfunction resizeProgram(gl, sourceDims, targetDims, alignCorners, interpolation) {\n  if (!programCacheByContext.has(gl)) {\n    programCacheByContext.set(gl, new Map());\n  }\n\n  const programCache = programCacheByContext.get(gl);\n  const cacheKey = `resize_${sourceDims.width}_${sourceDims.height}_${sourceDims.depth}_${targetDims.width}_${targetDims.height}_${targetDims.depth}_${alignCorners}_${interpolation}`;\n\n  if (!programCache.has(cacheKey)) {\n    const vertSource = resizeNNProgramInfo.vertexShaderSource();\n    let fragSource;\n\n    if (interpolation === 'nearest_neighbor') {\n      fragSource = resizeNNProgramInfo.fragmentShaderSource(sourceDims, targetDims, alignCorners);\n    } else {\n      fragSource = resizeBilinearProgramInfo.fragmentShaderSource(sourceDims, targetDims, alignCorners);\n    }\n\n    const vertices = resizeNNProgramInfo.vertices();\n    const texCoords = resizeNNProgramInfo.texCoords();\n    const programObjects = createProgramObjects(gl, vertSource, fragSource, vertices, texCoords);\n    programCache.set(cacheKey, programObjects);\n  }\n\n  return programCache.get(cacheKey);\n}\n\nfunction createProgramObjects(gl, vertexShaderSource, fragmentShaderSource, vertices, texCoords) {\n  const debugMode = platform_react_native_1.getDebugMode();\n  const vertShader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(vertShader, vertexShaderSource);\n  gl.compileShader(vertShader);\n  const fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(fragShader, fragmentShaderSource);\n  gl.compileShader(fragShader);\n  const program = gl.createProgram();\n  gl.attachShader(program, vertShader);\n  gl.attachShader(program, fragShader);\n  gl.linkProgram(program);\n  gl.validateProgram(program); // Use a vertex array objects to record geometry info\n\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao); // Set up geometry\n\n  tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n    const positionAttrib = gl.getAttribLocation(program, 'position');\n    const vertsCoordsBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertsCoordsBuffer);\n    gl.enableVertexAttribArray(positionAttrib);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n    gl.vertexAttribPointer(positionAttrib, 2, gl.FLOAT, false, 0, 0);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  });\n  tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n    const texCoordsAttrib = gl.getAttribLocation(program, 'texCoords');\n    const texCoordsBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordsBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(texCoordsAttrib);\n    gl.vertexAttribPointer(texCoordsAttrib, 2, gl.FLOAT, false, 0, 0);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  });\n  const uniformLocations = new Map();\n  tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n    const inputTextureLoc = gl.getUniformLocation(program, 'inputTexture');\n    uniformLocations.set('inputTexture', inputTextureLoc);\n  }); // Unbind\n\n  gl.bindVertexArray(null);\n  return {\n    program,\n    vao,\n    vertices,\n    uniformLocations\n  };\n}","map":{"version":3,"sources":["../../src/camera/camera_webgl_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tf = __importStar(require(\"@tensorflow/tfjs-core\"));\nconst platform_react_native_1 = require(\"../platform_react_native\");\nconst drawTextureProgramInfo = __importStar(require(\"./draw_texture_program_info\"));\nconst resizeBilinearProgramInfo = __importStar(require(\"./resize_bilinear_program_info\"));\nconst resizeNNProgramInfo = __importStar(require(\"./resize_nearest_neigbor_program_info\"));\n// Shared cached frameBuffer object from external context\nconst fboCache = new WeakMap();\n// Internal target texture used for resizing camera texture input\nconst resizeTextureCache = new WeakMap();\nconst resizeTextureDimsCache = new WeakMap();\n// Cache for shader programs and associated vertex array buffers.\nconst programCacheByContext = new WeakMap();\n/**\n * Download data from an texture.\n *\n * @param gl\n * @param texture\n * @param dims\n */\nfunction downloadTextureData(gl, texture, dims) {\n    const { width, height, depth } = dims;\n    const pixels = new Uint8Array(width * height * depth);\n    if (!fboCache.has(gl)) {\n        fboCache.set(gl, createFrameBuffer(gl));\n    }\n    const fbo = fboCache.get(gl);\n    const debugMode = platform_react_native_1.getDebugMode();\n    tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    });\n    tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n    });\n    tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n        const level = 0;\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, level);\n    });\n    tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n        const format = depth === 3 ? gl.RGB : gl.RGBA;\n        const x = 0;\n        const y = 0;\n        gl.readPixels(x, y, width, height, format, gl.UNSIGNED_BYTE, pixels);\n    });\n    // Unbind framebuffer\n    tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    });\n    return pixels;\n}\nexports.downloadTextureData = downloadTextureData;\n/**\n * Upload image data to a texture.\n *\n * @param imageData data to upload\n * @param gl gl context to use\n * @param dims image size\n * @param texture optional texture to upload data to. If none is passed a new\n *     texture will be returned\n */\nfunction uploadTextureData(imageData, gl, dims, texture) {\n    const targetTextureWidth = dims.width;\n    const targetTextureHeight = dims.height;\n    tf.util.assert(targetTextureWidth * targetTextureHeight * dims.depth ===\n        imageData.length, () => 'uploadTextureData Error: imageData length must match w * h * d');\n    const targetTexture = texture || gl.createTexture();\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const debugMode = platform_react_native_1.getDebugMode();\n    const level = 0;\n    const format = dims.depth === 3 ? gl.RGB : gl.RGBA;\n    const internalFormat = format;\n    const border = 0;\n    const type = gl.UNSIGNED_BYTE;\n    tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n        gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, targetTextureWidth, targetTextureHeight, border, format, type, imageData);\n    });\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return targetTexture;\n}\nexports.uploadTextureData = uploadTextureData;\n/**\n * Render a texture to the default framebuffer (i.e. screen)\n *\n * @param gl WebGL context to use\n * @param texture texture to render\n * @param dims texture size\n */\nfunction drawTexture(gl, texture, dims, flipHorizontal) {\n    const { program, vao, vertices, uniformLocations } = drawTextureProgram(gl, flipHorizontal);\n    gl.useProgram(program);\n    gl.bindVertexArray(vao);\n    // Set texture sampler uniform\n    const TEXTURE_UNIT = 0;\n    gl.uniform1i(uniformLocations.get('inputTexture'), TEXTURE_UNIT);\n    gl.activeTexture(gl.TEXTURE0 + TEXTURE_UNIT);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // Draw to screen\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, dims.width, dims.height);\n    // gl.clearColor(1, 1, 0, 1);\n    // gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 2);\n    gl.bindVertexArray(null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.useProgram(null);\n}\nexports.drawTexture = drawTexture;\nfunction runResizeProgram(gl, inputTexture, inputDims, outputDims, alignCorners, interpolation) {\n    const debugMode = platform_react_native_1.getDebugMode();\n    const { program, vao, vertices, uniformLocations } = resizeProgram(gl, inputDims, outputDims, alignCorners, interpolation);\n    gl.useProgram(program);\n    // Set up geometry\n    tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n        gl.bindVertexArray(vao);\n    });\n    //\n    // Set up input texture\n    //\n    gl.uniform1i(uniformLocations.get('inputTexture'), 1);\n    gl.activeTexture(gl.TEXTURE0 + 1);\n    gl.bindTexture(gl.TEXTURE_2D, inputTexture);\n    //\n    // Set up output texture.\n    //\n    if (!resizeTextureCache.has(gl)) {\n        resizeTextureCache.set(gl, gl.createTexture());\n    }\n    const resizeTexture = resizeTextureCache.get(gl);\n    const targetTexture = resizeTexture;\n    const targetTextureWidth = outputDims.width;\n    const targetTextureHeight = outputDims.height;\n    gl.activeTexture(gl.TEXTURE0 + 2);\n    gl.bindTexture(gl.TEXTURE_2D, targetTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    // Reallocate texture storage if target size has changed.\n    if (!resizeTextureDimsCache.has(gl)) {\n        resizeTextureDimsCache.set(gl, { width: -1, height: -1 });\n    }\n    const resizeTextureDims = resizeTextureDimsCache.get(gl);\n    if (resizeTextureDims == null ||\n        resizeTextureDims.width !== targetTextureWidth ||\n        resizeTextureDims.height !== targetTextureHeight) {\n        const level = 0;\n        const format = outputDims.depth === 3 ? gl.RGB : gl.RGBA;\n        const internalFormat = format;\n        const border = 0;\n        const type = gl.UNSIGNED_BYTE;\n        tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, targetTextureWidth, targetTextureHeight, border, format, type, null);\n        });\n        resizeTextureDimsCache.set(gl, { width: targetTextureWidth, height: targetTextureHeight });\n    }\n    //\n    // Render to output texture\n    //\n    if (!fboCache.has(gl)) {\n        fboCache.set(gl, createFrameBuffer(gl));\n    }\n    const fbo = fboCache.get(gl);\n    gl.viewport(0, 0, targetTextureWidth, targetTextureHeight);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, targetTexture, 0);\n    const fboComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (fboComplete !== gl.FRAMEBUFFER_COMPLETE) {\n        switch (fboComplete) {\n            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n                throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT');\n            case gl.FRAMEBUFFER_UNSUPPORTED:\n                throw new Error('createFrameBuffer: gl.FRAMEBUFFER_UNSUPPORTED');\n            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n                throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT');\n            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n                throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS');\n            case gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:\n                throw new Error('createFrameBuffer: gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE');\n            default:\n                throw new Error('createFrameBuffer Error: Other or unknown fbo complete status: ' +\n                    `${fboComplete}`);\n        }\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 2);\n    // Restore previous state\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.useProgram(null);\n    gl.bindVertexArray(null);\n    return targetTexture;\n}\nexports.runResizeProgram = runResizeProgram;\nfunction createFrameBuffer(gl) {\n    const fb = gl.createFramebuffer();\n    if (fb == null) {\n        throw new Error('Could not create framebuffer');\n    }\n    return fb;\n}\nfunction drawTextureProgram(gl, flipHorizontal) {\n    if (!programCacheByContext.has(gl)) {\n        programCacheByContext.set(gl, new Map());\n    }\n    const programCache = programCacheByContext.get(gl);\n    const cacheKey = `drawTexture_${flipHorizontal}`;\n    if (!programCache.has(cacheKey)) {\n        const vertSource = drawTextureProgramInfo.vertexShaderSource(flipHorizontal);\n        const fragSource = drawTextureProgramInfo.fragmentShaderSource();\n        const vertices = drawTextureProgramInfo.vertices();\n        const texCoords = drawTextureProgramInfo.texCoords();\n        const programObjects = createProgramObjects(gl, vertSource, fragSource, vertices, texCoords);\n        programCache.set(cacheKey, programObjects);\n    }\n    return programCache.get(cacheKey);\n}\nfunction resizeProgram(gl, sourceDims, targetDims, alignCorners, interpolation) {\n    if (!programCacheByContext.has(gl)) {\n        programCacheByContext.set(gl, new Map());\n    }\n    const programCache = programCacheByContext.get(gl);\n    const cacheKey = `resize_${sourceDims.width}_${sourceDims.height}_${sourceDims.depth}_${targetDims.width}_${targetDims.height}_${targetDims.depth}_${alignCorners}_${interpolation}`;\n    if (!programCache.has(cacheKey)) {\n        const vertSource = resizeNNProgramInfo.vertexShaderSource();\n        let fragSource;\n        if (interpolation === 'nearest_neighbor') {\n            fragSource = resizeNNProgramInfo.fragmentShaderSource(sourceDims, targetDims, alignCorners);\n        }\n        else {\n            fragSource = resizeBilinearProgramInfo.fragmentShaderSource(sourceDims, targetDims, alignCorners);\n        }\n        const vertices = resizeNNProgramInfo.vertices();\n        const texCoords = resizeNNProgramInfo.texCoords();\n        const programObjects = createProgramObjects(gl, vertSource, fragSource, vertices, texCoords);\n        programCache.set(cacheKey, programObjects);\n    }\n    return programCache.get(cacheKey);\n}\nfunction createProgramObjects(gl, vertexShaderSource, fragmentShaderSource, vertices, texCoords) {\n    const debugMode = platform_react_native_1.getDebugMode();\n    const vertShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertShader, vertexShaderSource);\n    gl.compileShader(vertShader);\n    const fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragShader, fragmentShaderSource);\n    gl.compileShader(fragShader);\n    const program = gl.createProgram();\n    gl.attachShader(program, vertShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    gl.validateProgram(program);\n    // Use a vertex array objects to record geometry info\n    const vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    // Set up geometry\n    tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n        const positionAttrib = gl.getAttribLocation(program, 'position');\n        const vertsCoordsBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertsCoordsBuffer);\n        gl.enableVertexAttribArray(positionAttrib);\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n        gl.vertexAttribPointer(positionAttrib, 2, gl.FLOAT, false, 0, 0);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    });\n    tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n        const texCoordsAttrib = gl.getAttribLocation(program, 'texCoords');\n        const texCoordsBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, texCoordsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, texCoords, gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(texCoordsAttrib);\n        gl.vertexAttribPointer(texCoordsAttrib, 2, gl.FLOAT, false, 0, 0);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    });\n    const uniformLocations = new Map();\n    tf.webgl.webgl_util.callAndCheck(gl, debugMode, () => {\n        const inputTextureLoc = gl.getUniformLocation(program, 'inputTexture');\n        uniformLocations.set('inputTexture', inputTextureLoc);\n    });\n    // Unbind\n    gl.bindVertexArray(null);\n    return {\n        program,\n        vao,\n        vertices,\n        uniformLocations,\n    };\n}\n//# sourceMappingURL=camera_webgl_util.js.map"]},"metadata":{},"sourceType":"script"}