{"ast":null,"code":"import { isArray } from 'vega-util';\nexport const DEFAULT_SORT_OP = 'mean';\nconst SORT_BY_CHANNEL_INDEX = {\n  x: 1,\n  y: 1,\n  color: 1,\n  fill: 1,\n  stroke: 1,\n  strokeWidth: 1,\n  size: 1,\n  shape: 1,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  opacity: 1,\n  text: 1\n};\nexport function isSortByChannel(c) {\n  return !!SORT_BY_CHANNEL_INDEX[c];\n}\nexport function isSortByEncoding(sort) {\n  return !!sort && !!sort['encoding'];\n}\nexport function isSortField(sort) {\n  return !!sort && (sort['op'] === 'count' || !!sort['field']);\n}\nexport function isSortArray(sort) {\n  return !!sort && isArray(sort);\n}","map":{"version":3,"sources":["../../src/sort.ts"],"names":[],"mappings":"AAAA,SAAQ,OAAR,QAAsB,WAAtB;AA4BA,OAAO,MAAM,eAAe,GAAG,MAAxB;AA0DP,MAAM,qBAAqB,GAAwB;AACjD,EAAA,CAAC,EAAE,CAD8C;AAEjD,EAAA,CAAC,EAAE,CAF8C;AAGjD,EAAA,KAAK,EAAE,CAH0C;AAIjD,EAAA,IAAI,EAAE,CAJ2C;AAKjD,EAAA,MAAM,EAAE,CALyC;AAMjD,EAAA,WAAW,EAAE,CANoC;AAOjD,EAAA,IAAI,EAAE,CAP2C;AAQjD,EAAA,KAAK,EAAE,CAR0C;AASjD,EAAA,WAAW,EAAE,CAToC;AAUjD,EAAA,aAAa,EAAE,CAVkC;AAWjD,EAAA,OAAO,EAAE,CAXwC;AAYjD,EAAA,IAAI,EAAE;AAZ2C,CAAnD;AAeA,OAAM,SAAU,eAAV,CAA0B,CAA1B,EAAmC;AACvC,SAAO,CAAC,CAAC,qBAAqB,CAAC,CAAD,CAA9B;AACD;AAoBD,OAAM,SAAU,gBAAV,CAA8B,IAA9B,EAA2C;AAC/C,SAAO,CAAC,CAAC,IAAF,IAAU,CAAC,CAAC,IAAI,CAAC,UAAD,CAAvB;AACD;AAED,OAAM,SAAU,WAAV,CAAyB,IAAzB,EAAsC;AAC1C,SAAO,CAAC,CAAC,IAAF,KAAW,IAAI,CAAC,IAAD,CAAJ,KAAe,OAAf,IAA0B,CAAC,CAAC,IAAI,CAAC,OAAD,CAA3C,CAAP;AACD;AAED,OAAM,SAAU,WAAV,CAAyB,IAAzB,EAAsC;AAC1C,SAAO,CAAC,CAAC,IAAF,IAAU,OAAO,CAAC,IAAD,CAAxB;AACD","sourcesContent":["import {isArray} from 'vega-util';\nimport {NonArgAggregateOp} from './aggregate';\nimport {FieldName} from './channeldef';\nimport {DateTime} from './datetime';\nimport {Flag} from './util';\n\nexport type SortOrder = 'ascending' | 'descending';\n\n/**\n * A sort definition for transform\n */\nexport interface SortField {\n  /**\n   * The name of the field to sort.\n   */\n  field: FieldName;\n\n  /**\n   * Whether to sort the field in ascending or descending order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport interface SortFields {\n  field: FieldName[];\n  order?: SortOrder[];\n}\n\nexport const DEFAULT_SORT_OP = 'mean';\n\n/**\n * A sort definition for sorting a discrete scale in an encoding field definition.\n */\n\nexport interface EncodingSortField<F> {\n  /**\n   * The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.\n   *\n   * __Default value:__ If unspecified, defaults to the field specified in the outer data reference.\n   */\n  field?: F; // Field is optional because `\"op\": \"count\"` does not require a field.\n  /**\n   * An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to perform on the field prior to sorting (e.g., `\"count\"`, `\"mean\"` and `\"median\"`).\n   * An aggregation is required when there are multiple values of the sort field for each encoded data field.\n   * The input data objects will be aggregated, grouped by the encoded data field.\n   *\n   * For a full list of operations, please see the documentation for [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).\n   *\n   * __Default value:__ `\"sum\"` for stacked plots. Otherwise, `\"mean\"`.\n   */\n  op?: NonArgAggregateOp;\n\n  /**\n   * The sort order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport interface SortByEncoding {\n  /**\n   * The [encoding channel](https://vega.github.io/vega-lite/docs/encoding.html#channels) to sort by (e.g., `\"x\"`, `\"y\"`)\n   */\n  encoding: SortByChannel;\n\n  /**\n   * The sort order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder | null;\n}\n\nexport type SortArray = number[] | string[] | boolean[] | DateTime[];\n\nexport type SortByChannel =\n  | 'x'\n  | 'y'\n  | 'color'\n  | 'fill'\n  | 'stroke'\n  | 'strokeWidth'\n  | 'size'\n  | 'shape'\n  | 'fillOpacity'\n  | 'strokeOpacity'\n  | 'opacity'\n  | 'text';\n\nconst SORT_BY_CHANNEL_INDEX: Flag<SortByChannel> = {\n  x: 1,\n  y: 1,\n  color: 1,\n  fill: 1,\n  stroke: 1,\n  strokeWidth: 1,\n  size: 1,\n  shape: 1,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  opacity: 1,\n  text: 1\n};\n\nexport function isSortByChannel(c: string): c is SortByChannel {\n  return !!SORT_BY_CHANNEL_INDEX[c];\n}\n\nexport type SortByChannelDesc =\n  | '-x'\n  | '-y'\n  | '-color'\n  | '-fill'\n  | '-stroke'\n  | '-strokeWidth'\n  | '-size'\n  | '-shape'\n  | '-fillOpacity'\n  | '-strokeOpacity'\n  | '-opacity'\n  | '-text';\n\nexport type AllSortString = SortOrder | SortByChannel | SortByChannelDesc;\n\nexport type Sort<F> = SortArray | AllSortString | EncodingSortField<F> | SortByEncoding | null;\n\nexport function isSortByEncoding<F>(sort: Sort<F>): sort is SortByEncoding {\n  return !!sort && !!sort['encoding'];\n}\n\nexport function isSortField<F>(sort: Sort<F>): sort is EncodingSortField<F> {\n  return !!sort && (sort['op'] === 'count' || !!sort['field']);\n}\n\nexport function isSortArray<F>(sort: Sort<F>): sort is SortArray {\n  return !!sort && isArray(sort);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}