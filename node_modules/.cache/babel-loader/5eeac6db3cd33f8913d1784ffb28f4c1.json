{"ast":null,"code":"import { offset } from './render-size';\nimport { constant, isString } from 'vega-util';\nimport { point } from 'vega-scenegraph';\n/**\n * Extend an event with additional view-specific methods.\n * Adds a new property ('vega') to an event that provides a number\n * of methods for querying information about the current interaction.\n * The vega object provides the following methods:\n *   view - Returns the backing View instance.\n *   item - Returns the currently active scenegraph item (if any).\n *   group - Returns the currently active scenegraph group (if any).\n *     This method accepts a single string-typed argument indicating the name\n *     of the desired parent group. The scenegraph will be traversed from\n *     the item up towards the root to search for a matching group. If no\n *     argument is provided the enclosing group for the active item is\n *     returned, unless the item it itself a group, in which case it is\n *     returned directly.\n *   xy - Returns a two-element array containing the x and y coordinates for\n *     mouse or touch events. For touch events, this is based on the first\n *     elements in the changedTouches array. This method accepts a single\n *     argument: either an item instance or mark name that should serve as\n *     the reference coordinate system. If no argument is provided the\n *     top-level view coordinate system is assumed.\n *   x - Returns the current x-coordinate, accepts the same arguments as xy.\n *   y - Returns the current y-coordinate, accepts the same arguments as xy.\n * @param {Event} event - The input event to extend.\n * @param {Item} item - The currently active scenegraph item (if any).\n * @return {Event} - The extended input event.\n */\n\nexport default function (view, event, item) {\n  var r = view._renderer,\n      el = r && r.canvas(),\n      p,\n      e,\n      translate;\n\n  if (el) {\n    translate = offset(view);\n    e = event.changedTouches ? event.changedTouches[0] : event;\n    p = point(e, el);\n    p[0] -= translate[0];\n    p[1] -= translate[1];\n  }\n\n  event.dataflow = view;\n  event.item = item;\n  event.vega = extension(view, item, p);\n  return event;\n}\n\nfunction extension(view, item, point) {\n  var itemGroup = item ? item.mark.marktype === 'group' ? item : item.mark.group : null;\n\n  function group(name) {\n    var g = itemGroup,\n        i;\n    if (name) for (i = item; i; i = i.mark.group) {\n      if (i.mark.name === name) {\n        g = i;\n        break;\n      }\n    }\n    return g && g.mark && g.mark.interactive ? g : {};\n  }\n\n  function xy(item) {\n    if (!item) return point;\n    if (isString(item)) item = group(item);\n    var p = point.slice();\n\n    while (item) {\n      p[0] -= item.x || 0;\n      p[1] -= item.y || 0;\n      item = item.mark && item.mark.group;\n    }\n\n    return p;\n  }\n\n  return {\n    view: constant(view),\n    item: constant(item || {}),\n    group: group,\n    xy: xy,\n    x: function (item) {\n      return xy(item)[0];\n    },\n    y: function (item) {\n      return xy(item)[1];\n    }\n  };\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-view/src/events-extend.js"],"names":["offset","constant","isString","point","view","event","item","r","_renderer","el","canvas","p","e","translate","changedTouches","dataflow","vega","extension","itemGroup","mark","marktype","group","name","g","i","interactive","xy","slice","x","y"],"mappings":"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","sourcesContent":["import {offset} from './render-size';\nimport {constant, isString} from 'vega-util';\nimport {point} from 'vega-scenegraph';\n\n/**\n * Extend an event with additional view-specific methods.\n * Adds a new property ('vega') to an event that provides a number\n * of methods for querying information about the current interaction.\n * The vega object provides the following methods:\n *   view - Returns the backing View instance.\n *   item - Returns the currently active scenegraph item (if any).\n *   group - Returns the currently active scenegraph group (if any).\n *     This method accepts a single string-typed argument indicating the name\n *     of the desired parent group. The scenegraph will be traversed from\n *     the item up towards the root to search for a matching group. If no\n *     argument is provided the enclosing group for the active item is\n *     returned, unless the item it itself a group, in which case it is\n *     returned directly.\n *   xy - Returns a two-element array containing the x and y coordinates for\n *     mouse or touch events. For touch events, this is based on the first\n *     elements in the changedTouches array. This method accepts a single\n *     argument: either an item instance or mark name that should serve as\n *     the reference coordinate system. If no argument is provided the\n *     top-level view coordinate system is assumed.\n *   x - Returns the current x-coordinate, accepts the same arguments as xy.\n *   y - Returns the current y-coordinate, accepts the same arguments as xy.\n * @param {Event} event - The input event to extend.\n * @param {Item} item - The currently active scenegraph item (if any).\n * @return {Event} - The extended input event.\n */\nexport default function(view, event, item) {\n  var r  = view._renderer,\n      el = r && r.canvas(),\n      p, e, translate;\n\n  if (el) {\n    translate = offset(view);\n    e = event.changedTouches ? event.changedTouches[0] : event;\n    p = point(e, el);\n    p[0] -= translate[0];\n    p[1] -= translate[1];\n  }\n\n  event.dataflow = view;\n  event.item = item;\n  event.vega = extension(view, item, p);\n  return event;\n}\n\nfunction extension(view, item, point) {\n  var itemGroup = item\n    ? item.mark.marktype === 'group' ? item : item.mark.group\n    : null;\n\n  function group(name) {\n    var g = itemGroup, i;\n    if (name) for (i = item; i; i = i.mark.group) {\n      if (i.mark.name === name) { g = i; break; }\n    }\n    return g && g.mark && g.mark.interactive ? g : {};\n  }\n\n  function xy(item) {\n    if (!item) return point;\n    if (isString(item)) item = group(item);\n\n    var p = point.slice();\n    while (item) {\n      p[0] -= item.x || 0;\n      p[1] -= item.y || 0;\n      item = item.mark && item.mark.group;\n    }\n    return p;\n  }\n\n  return {\n    view:  constant(view),\n    item:  constant(item || {}),\n    group: group,\n    xy:    xy,\n    x:     function(item) { return xy(item)[0]; },\n    y:     function(item) { return xy(item)[1]; }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}