{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\FirstML\\\\AnotherMl.js\";\nimport React from \"react\"; //import * as t_f from '@tensorflow/tfjs-node'\n\nimport * as tf from '@tensorflow/tfjs'; //const model = tf.sequential();\n\nconst model = tf.sequential({\n  layers: [tf.layers.dense({\n    inputShape: [784],\n    units: 32,\n    activation: 'relu'\n  }), tf.layers.dense({\n    units: 10,\n    activation: 'softmax'\n  })]\n});\nexport default class AnotherMl extends React.Component {\n  constructor(props) {\n    super(props);\n    model.compile({\n      optimizer: 'sgd',\n      loss: 'categoricalCrossentropy',\n      metrics: ['accuracy']\n    });\n    this.state = {\n      isTfReady: false,\n      trained: false,\n      isitraining: false,\n      prediction: null\n    };\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n    //this.setState({isTfReady: true})\n    //this.train()\n    //this.setState({training:true})\n    //const source = { uri: response.uri }\n\n    this.trainTheModel();\n  }\n\n  async trainTheModel() {\n    // Generate dummy data.\n    const data = tf.randomNormal([100, 784]);\n    const labels = tf.randomUniform([100, 10]);\n\n    function onBatchEnd(batch, logs) {\n      console.log('Accuracy', logs.acc);\n      this.setState({\n        isitraining: true\n      });\n    } // Train for 5 epochs with batch size of 32.\n\n\n    model.fit(data, labels, {\n      epochs: 5,\n      batchSize: 32,\n      callbacks: {\n        onBatchEnd\n      }\n    }).then(info => {\n      console.log('Final accuracy', info.history.acc);\n      this.setState({\n        isitraining: fale\n      });\n      this.setState({\n        trained: true\n      });\n    });\n\n    if (this.state.isitraining) {\n      this.thePrediction();\n    }\n  }\n\n  async thePrediction() {\n    const prediction = model.predict(tf.randomNormal([3, 784]));\n    prediction.print();\n  }\n\n  render() {\n    const {\n      isTfReady,\n      isModelReady,\n      prediction\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.isTfReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Yes Ready\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Not Ready\"), this.state.training ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Yes Trained\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Still Training\"));\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/AnotherMl.js"],"names":["React","tf","model","sequential","layers","dense","inputShape","units","activation","AnotherMl","Component","constructor","props","compile","optimizer","loss","metrics","state","isTfReady","trained","isitraining","prediction","componentDidMount","ready","trainTheModel","data","randomNormal","labels","randomUniform","onBatchEnd","batch","logs","console","log","acc","setState","fit","epochs","batchSize","callbacks","then","info","history","fale","thePrediction","predict","print","render","isModelReady","training"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n//import * as t_f from '@tensorflow/tfjs-node'\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\n//const model = tf.sequential();\r\n\r\n\r\nconst model = tf.sequential({\r\n    layers: [\r\n      tf.layers.dense({inputShape: [784], units: 32, activation: 'relu'}),\r\n      tf.layers.dense({units: 10, activation: 'softmax'}),\r\n    ]\r\n   });\r\n\r\nexport default class AnotherMl extends React.Component{\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        model.compile({\r\n            optimizer: 'sgd',\r\n            loss: 'categoricalCrossentropy',\r\n            metrics: ['accuracy']\r\n          });\r\n\r\n        this.state = {\r\n            isTfReady:false,\r\n            trained:false,\r\n            isitraining: false,\r\n            prediction:null\r\n        }\r\n        \r\n      }\r\n    \r\n    async componentDidMount() {\r\n        // Wait for tf to be ready.\r\n        await tf.ready();\r\n        // Signal to the app that tensorflow.js can now be used.\r\n        //this.setState({isTfReady: true})\r\n        //this.train()\r\n        //this.setState({training:true})\r\n        //const source = { uri: response.uri }\r\n        this.trainTheModel()\r\n\r\n    }\r\n    \r\n\r\n    async trainTheModel(){\r\n\r\n\r\n        // Generate dummy data.\r\n        const data = tf.randomNormal([100, 784]);\r\n        const labels = tf.randomUniform([100, 10]);\r\n\r\n        function onBatchEnd(batch, logs) {\r\n            console.log('Accuracy', logs.acc);\r\n            this.setState({isitraining:true})\r\n        }\r\n\r\n        // Train for 5 epochs with batch size of 32.\r\n        model.fit(data, labels, {\r\n        epochs: 5,\r\n        batchSize: 32,\r\n        callbacks: {onBatchEnd}\r\n        }).then(info => {\r\n            console.log('Final accuracy', info.history.acc);\r\n            this.setState({isitraining:fale})\r\n            this.setState({trained:true})\r\n        });\r\n\r\n        if(this.state.isitraining){\r\n            this.thePrediction()\r\n        }\r\n    }\r\n\r\n    async thePrediction(){\r\n        const prediction = model.predict(tf.randomNormal([3, 784]));\r\n        prediction.print();\r\n    }\r\n\r\n\r\n    render()\r\n        {\r\n            const { isTfReady, isModelReady, prediction } = this.state\r\n\r\n            return (\r\n\r\n            <div>\r\n\r\n                {this.state.isTfReady?<p>Yes Ready</p>:<p>Not Ready</p>}\r\n                {this.state.training?<p>Yes Trained</p>:<p>Still Training</p>}\r\n                \r\n                \r\n                \r\n            </div>\r\n            );\r\n        }\r\n    \r\n\r\n}"]},"metadata":{},"sourceType":"module"}