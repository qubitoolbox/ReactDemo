{"ast":null,"code":"import { Left, Top, Bottom, Value, zero, one } from './constants';\nimport guideMark from './guide-mark';\nimport { lookup } from './guide-util';\nimport { RuleMark } from '../marks/marktypes';\nimport { AxisGridRole } from '../marks/roles';\nimport { addEncoders } from '../encode/encode-util';\nimport { extend, isObject } from 'vega-util';\nexport default function (spec, config, userEncode, dataRef, band) {\n  var _ = lookup(spec, config),\n      orient = spec.orient,\n      vscale = spec.gridScale,\n      sign = orient === Left || orient === Top ? 1 : -1,\n      offset = offsetValue(spec.offset, sign),\n      encode,\n      enter,\n      exit,\n      update,\n      tickPos,\n      u,\n      v,\n      v2,\n      s;\n\n  encode = {\n    enter: enter = {\n      opacity: zero\n    },\n    update: update = {\n      opacity: one\n    },\n    exit: exit = {\n      opacity: zero\n    }\n  };\n  addEncoders(encode, {\n    stroke: _('gridColor'),\n    strokeDash: _('gridDash'),\n    strokeDashOffset: _('gridDashOffset'),\n    strokeOpacity: _('gridOpacity'),\n    strokeWidth: _('gridWidth')\n  });\n  tickPos = {\n    scale: spec.scale,\n    field: Value,\n    band: band.band,\n    extra: band.extra,\n    offset: band.offset,\n    round: _('tickRound')\n  };\n\n  if (orient === Top || orient === Bottom) {\n    u = 'x';\n    v = 'y';\n    s = 'height';\n  } else {\n    u = 'y';\n    v = 'x';\n    s = 'width';\n  }\n\n  v2 = v + '2';\n  update[u] = enter[u] = exit[u] = tickPos;\n\n  if (vscale) {\n    update[v] = enter[v] = {\n      scale: vscale,\n      range: 0,\n      mult: sign,\n      offset: offset\n    };\n    update[v2] = enter[v2] = {\n      scale: vscale,\n      range: 1,\n      mult: sign,\n      offset: offset\n    };\n  } else {\n    update[v] = enter[v] = {\n      value: 0,\n      offset: offset\n    };\n    update[v2] = enter[v2] = {\n      signal: s,\n      mult: sign,\n      offset: offset\n    };\n  }\n\n  return guideMark(RuleMark, AxisGridRole, null, Value, dataRef, encode, userEncode);\n}\n\nfunction offsetValue(offset, sign) {\n  if (sign === 1) {// do nothing!\n  } else if (!isObject(offset)) {\n    offset = sign * (offset || 0);\n  } else {\n    var entry = offset = extend({}, offset);\n\n    while (entry.mult != null) {\n      if (!isObject(entry.mult)) {\n        entry.mult *= sign;\n        return offset;\n      } else {\n        entry = entry.mult = extend({}, entry.mult);\n      }\n    }\n\n    entry.mult = sign;\n  }\n\n  return offset;\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-parser/src/parsers/guides/axis-grid.js"],"names":["Left","Top","Bottom","Value","zero","one","guideMark","lookup","RuleMark","AxisGridRole","addEncoders","extend","isObject","spec","config","userEncode","dataRef","band","_","orient","vscale","gridScale","sign","offset","offsetValue","encode","enter","exit","update","tickPos","u","v","v2","s","opacity","stroke","strokeDash","strokeDashOffset","strokeOpacity","strokeWidth","scale","field","extra","round","range","mult","value","signal","entry"],"mappings":"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","sourcesContent":["import {Left, Top, Bottom, Value, zero, one} from './constants';\nimport guideMark from './guide-mark';\nimport {lookup} from './guide-util';\nimport {RuleMark} from '../marks/marktypes';\nimport {AxisGridRole} from '../marks/roles';\nimport {addEncoders} from '../encode/encode-util';\nimport {extend, isObject} from 'vega-util';\n\nexport default function(spec, config, userEncode, dataRef, band) {\n  var _ = lookup(spec, config),\n      orient = spec.orient,\n      vscale = spec.gridScale,\n      sign = (orient === Left || orient === Top) ? 1 : -1,\n      offset = offsetValue(spec.offset, sign),\n      encode, enter, exit, update, tickPos, u, v, v2, s;\n\n  encode = {\n    enter: enter = {opacity: zero},\n    update: update = {opacity: one},\n    exit: exit = {opacity: zero}\n  };\n\n  addEncoders(encode, {\n    stroke:           _('gridColor'),\n    strokeDash:       _('gridDash'),\n    strokeDashOffset: _('gridDashOffset'),\n    strokeOpacity:    _('gridOpacity'),\n    strokeWidth:      _('gridWidth')\n  });\n\n  tickPos = {\n    scale:  spec.scale,\n    field:  Value,\n    band:   band.band,\n    extra:  band.extra,\n    offset: band.offset,\n    round:  _('tickRound')\n  };\n\n  if (orient === Top || orient === Bottom) {\n    u = 'x';\n    v = 'y';\n    s = 'height';\n  } else {\n    u = 'y';\n    v = 'x';\n    s = 'width';\n  }\n  v2 = v + '2';\n\n  update[u] = enter[u] = exit[u] = tickPos;\n\n  if (vscale) {\n    update[v] = enter[v] = {scale: vscale, range: 0, mult: sign, offset: offset};\n    update[v2] = enter[v2] = {scale: vscale, range: 1, mult: sign, offset: offset};\n  } else {\n    update[v] = enter[v] = {value: 0, offset: offset};\n    update[v2] = enter[v2] = {signal: s, mult: sign, offset: offset};\n  }\n\n  return guideMark(RuleMark, AxisGridRole, null, Value, dataRef, encode, userEncode);\n}\n\nfunction offsetValue(offset, sign)  {\n  if (sign === 1) {\n    // do nothing!\n  } else if (!isObject(offset)) {\n    offset = sign * (offset || 0);\n  } else {\n    var entry = offset = extend({}, offset);\n\n    while (entry.mult != null) {\n      if (!isObject(entry.mult)) {\n        entry.mult *= sign;\n        return offset;\n      } else {\n        entry = entry.mult = extend({}, entry.mult);\n      }\n    }\n\n    entry.mult = sign;\n  }\n\n  return offset;\n}\n"]},"metadata":{},"sourceType":"module"}