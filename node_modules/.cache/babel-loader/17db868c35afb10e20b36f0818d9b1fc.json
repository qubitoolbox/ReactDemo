{"ast":null,"code":"import { default as dsv, delimitedFormat } from './dsv';\nimport json from './json';\nimport topojson from './topojson';\nimport { hasOwnProperty } from 'vega-util';\nexport const format = {\n  dsv: dsv,\n  csv: delimitedFormat(','),\n  tsv: delimitedFormat('\\t'),\n  json: json,\n  topojson: topojson\n};\nexport function formats(name, reader) {\n  if (arguments.length > 1) {\n    format[name] = reader;\n    return this;\n  } else {\n    return hasOwnProperty(format, name) ? format[name] : null;\n  }\n}\nexport function responseType(type) {\n  const f = formats(type);\n  return f && f.responseType || 'text';\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-loader/src/formats/index.js"],"names":["default","dsv","delimitedFormat","json","topojson","hasOwnProperty","format","csv","tsv","formats","name","reader","arguments","length","responseType","type","f"],"mappings":"AAAA,SAAQA,OAAO,IAAIC,GAAnB,EAAwBC,eAAxB,QAA8C,OAA9C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,cAAR,QAA6B,WAA7B;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBL,EAAAA,GAAG,EAAEA,GADe;AAEpBM,EAAAA,GAAG,EAAEL,eAAe,CAAC,GAAD,CAFA;AAGpBM,EAAAA,GAAG,EAAEN,eAAe,CAAC,IAAD,CAHA;AAIpBC,EAAAA,IAAI,EAAEA,IAJc;AAKpBC,EAAAA,QAAQ,EAAEA;AALU,CAAf;AAQP,OAAO,SAASK,OAAT,CAAiBC,IAAjB,EAAuBC,MAAvB,EAA+B;AACpC,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxBP,IAAAA,MAAM,CAACI,IAAD,CAAN,GAAeC,MAAf;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL,WAAON,cAAc,CAACC,MAAD,EAASI,IAAT,CAAd,GAA+BJ,MAAM,CAACI,IAAD,CAArC,GAA8C,IAArD;AACD;AACF;AAED,OAAO,SAASI,YAAT,CAAsBC,IAAtB,EAA4B;AACjC,QAAMC,CAAC,GAAGP,OAAO,CAACM,IAAD,CAAjB;AACA,SAAOC,CAAC,IAAIA,CAAC,CAACF,YAAP,IAAuB,MAA9B;AACD","sourcesContent":["import {default as dsv, delimitedFormat} from './dsv';\nimport json from './json';\nimport topojson from './topojson';\nimport {hasOwnProperty} from 'vega-util';\n\nexport const format = {\n  dsv: dsv,\n  csv: delimitedFormat(','),\n  tsv: delimitedFormat('\\t'),\n  json: json,\n  topojson: topojson\n};\n\nexport function formats(name, reader) {\n  if (arguments.length > 1) {\n    format[name] = reader;\n    return this;\n  } else {\n    return hasOwnProperty(format, name) ? format[name] : null;\n  }\n}\n\nexport function responseType(type) {\n  const f = formats(type);\n  return f && f.responseType || 'text';\n}\n"]},"metadata":{},"sourceType":"module"}