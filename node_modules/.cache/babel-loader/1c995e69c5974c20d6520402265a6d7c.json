{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\FirstML\\\\AnotherMl.js\";\nimport React from \"react\"; //import * as t_f from '@tensorflow/tfjs-node'\n\nimport * as tf from '@tensorflow/tfjs';\nimport LineGraph from 'C:/NewReactResume/resm/src/Components/ChartJs/Charts.js'; //const model = tf.sequential();\n\nconst model = tf.sequential({\n  layers: [tf.layers.dense({\n    inputShape: [5],\n    units: 5,\n    activation: 'sigmoid'\n  }), tf.layers.dense({\n    units: 5,\n    activation: 'softmax'\n  })]\n});\nvar prediction_;\nexport default class AnotherMl extends React.Component {\n  constructor(props) {\n    super(props);\n    model.compile({\n      optimizer: 'sgd',\n      loss: 'categoricalCrossentropy',\n      metrics: ['accuracy']\n    });\n    this.state = {\n      isTfReady: false,\n      trained: false,\n      isitraining: false,\n      x: [null],\n      y: [null],\n      loss: [],\n      counter: 0,\n      prediction: null\n    };\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n\n    this.setState({\n      isTfReady: true\n    });\n    this.setState({\n      trained: false\n    }); //this.setState({counter:0+1})\n    //this.train()\n    //this.setState({training:true})\n    //const source = { uri: response.uri }\n\n    this.trainTheModel();\n  }\n\n  async trainTheModel() {\n    // Generate dummy data.\n    const data = tf.randomNormal([100, 5]);\n    const labels = tf.randomUniform([100, 5]);\n    this.setState({\n      isitraining: true\n    });\n    this.setState({\n      x: data\n    });\n    this.setState({\n      y: labels\n    });\n    let counter = 0;\n\n    function onBatchEnd(batch, logs) {\n      console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\n\n      let hi = () => {\n        setState({\n          loss: logs.loss\n        });\n      };\n\n      hi();\n      counter += 1; //isTraining()\n      //)\n    } // Train for 5 epochs with batch size of 32.\n\n\n    model.fit(data, labels, {\n      epochs: 1,\n      batchSize: 10,\n      callbacks: {\n        onBatchEnd\n      }\n    }).then(info => {\n      //this.setState({isitraining:false})\n      console.log('Final accuracy', info.history.acc);\n      this.setState({\n        isitraining: false\n      });\n      this.setState({\n        trained: true\n      });\n      this.thePrediction();\n    }); //this.thePrediction()\n  }\n\n  async thePrediction() {\n    if (this.state.trained) {\n      prediction_ = await model.predict(tf.randomNormal([3, 5])); //console.log(prediction_?\"yes\":\"no\")\n      //console.log(prediction_.print())\n\n      this.setState({\n        prediction: prediction_.toString(prediction_.print())\n      }); //this.setState({prediction: prediction_.print()})\n      //console.log(prediction_.print())\n    }\n  }\n\n  render() {\n    const {\n      isTfReady,\n      trained,\n      isitraining,\n      x,\n      y,\n      prediction\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.isTfReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Yes Ready\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Not Ready\"), this.state.isitraining ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Yes Training\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Not Training\"), this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Yes Trained\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Not Trained\"), this.state.prediction && this.state.trained ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, JSON.stringify(this.state.prediction), \" \") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Not\"), React.createElement(LineGraph, {\n      data: parseFloat(this.state.x),\n      labels: this.state.y,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/AnotherMl.js"],"names":["React","tf","LineGraph","model","sequential","layers","dense","inputShape","units","activation","prediction_","AnotherMl","Component","constructor","props","compile","optimizer","loss","metrics","state","isTfReady","trained","isitraining","x","y","counter","prediction","componentDidMount","ready","setState","trainTheModel","data","randomNormal","labels","randomUniform","onBatchEnd","batch","logs","console","log","acc","hi","fit","epochs","batchSize","callbacks","then","info","history","thePrediction","predict","toString","print","render","JSON","stringify","parseFloat"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n//import * as t_f from '@tensorflow/tfjs-node'\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport LineGraph from 'C:/NewReactResume/resm/src/Components/ChartJs/Charts.js'\r\n\r\n//const model = tf.sequential();\r\n\r\n\r\nconst model = tf.sequential({\r\n    layers: [\r\n      tf.layers.dense({inputShape: [5], units: 5, activation: 'sigmoid'}),\r\n      tf.layers.dense({units: 5, activation: 'softmax'}),\r\n    ]\r\n   });\r\nvar prediction_;\r\n\r\nexport default class AnotherMl extends React.Component{\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        model.compile({\r\n            optimizer: 'sgd',\r\n            loss: 'categoricalCrossentropy',\r\n            metrics: ['accuracy']\r\n          });\r\n\r\n        this.state = {\r\n            isTfReady:false,\r\n            trained:false,\r\n            isitraining: false,\r\n            x : [null], \r\n            y : [null],\r\n            loss : [],\r\n            counter : 0,\r\n            prediction:null\r\n        }\r\n        \r\n      }\r\n    \r\n    async componentDidMount() {\r\n        // Wait for tf to be ready.\r\n        await tf.ready();\r\n        // Signal to the app that tensorflow.js can now be used.\r\n        this.setState({isTfReady: true})\r\n        this.setState({trained: false})\r\n        //this.setState({counter:0+1})\r\n        //this.train()\r\n        //this.setState({training:true})\r\n        //const source = { uri: response.uri }\r\n        this.trainTheModel()\r\n\r\n    }\r\n    \r\n\r\n    async trainTheModel(){\r\n\r\n\r\n        // Generate dummy data.\r\n        const data = tf.randomNormal([100, 5]);\r\n        const labels = tf.randomUniform([100, 5]);\r\n        this.setState({isitraining:true})\r\n        this.setState({x:data})\r\n        this.setState({y:labels})\r\n        let counter = 0;\r\n\r\n        function onBatchEnd(batch, logs) {\r\n            \r\n            console.log('Accuracy', logs.acc, 'loss', logs.loss, 'epoch', counter);\r\n\r\n            let hi = () => {setState({loss:logs.loss})};\r\n            hi()\r\n            counter += 1;\r\n            //isTraining()\r\n            //)\r\n        }\r\n\r\n        // Train for 5 epochs with batch size of 32.\r\n        model.fit(data, labels, {\r\n        epochs: 1,\r\n        batchSize: 10,\r\n        callbacks: {onBatchEnd}\r\n        }).then(info => {\r\n            //this.setState({isitraining:false})\r\n            console.log('Final accuracy', info.history.acc);\r\n            this.setState({isitraining:false})\r\n            this.setState({trained:true})\r\n            this.thePrediction()\r\n        });\r\n\r\n            //this.thePrediction()\r\n        \r\n    }\r\n\r\n    async thePrediction(){\r\n\r\n        if(this.state.trained)\r\n            {\r\n                prediction_ = await model.predict(tf.randomNormal([3, 5]));\r\n                //console.log(prediction_?\"yes\":\"no\")\r\n                //console.log(prediction_.print())\r\n                this.setState({prediction: prediction_.toString(prediction_.print())})\r\n                \r\n\r\n                //this.setState({prediction: prediction_.print()})\r\n                //console.log(prediction_.print())\r\n            }\r\n    }\r\n\r\n\r\n    render()\r\n        {\r\n            const { isTfReady, trained, isitraining,  x, y, prediction} = this.state\r\n            return (\r\n\r\n            <div>\r\n                \r\n                {this.state.isTfReady?<p>Yes Ready</p>:<p>Not Ready</p>}\r\n                {this.state.isitraining?<p>Yes Training</p>:<p>Not Training</p>}\r\n                {this.state.trained?<p>Yes Trained</p>:<p>Not Trained</p>}\r\n                {this.state.prediction && this.state.trained? <p>{JSON.stringify(this.state.prediction)} </p>: <p>Not</p>}\r\n                \r\n                <LineGraph data={parseFloat(this.state.x)} labels={this.state.y} />\r\n            </div>\r\n            );\r\n        }\r\n    \r\n\r\n}"]},"metadata":{},"sourceType":"module"}