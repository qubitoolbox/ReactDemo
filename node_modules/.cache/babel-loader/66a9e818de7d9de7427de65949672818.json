{"ast":null,"code":"export default function Heap(cmp) {\n  var nodes = [];\n  return {\n    clear: () => nodes = [],\n    size: () => nodes.length,\n    peek: () => nodes[0],\n    push: x => {\n      nodes.push(x);\n      return siftdown(nodes, 0, nodes.length - 1, cmp);\n    },\n    pop: () => {\n      var last = nodes.pop(),\n          item;\n\n      if (nodes.length) {\n        item = nodes[0];\n        nodes[0] = last;\n        siftup(nodes, 0, cmp);\n      } else {\n        item = last;\n      }\n\n      return item;\n    }\n  };\n}\n\nfunction siftdown(array, start, idx, cmp) {\n  var item, parent, pidx;\n  item = array[idx];\n\n  while (idx > start) {\n    pidx = idx - 1 >> 1;\n    parent = array[pidx];\n\n    if (cmp(item, parent) < 0) {\n      array[idx] = parent;\n      idx = pidx;\n      continue;\n    }\n\n    break;\n  }\n\n  return array[idx] = item;\n}\n\nfunction siftup(array, idx, cmp) {\n  var start = idx,\n      end = array.length,\n      item = array[idx],\n      cidx = (idx << 1) + 1,\n      ridx;\n\n  while (cidx < end) {\n    ridx = cidx + 1;\n\n    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n      cidx = ridx;\n    }\n\n    array[idx] = array[cidx];\n    idx = cidx;\n    cidx = (idx << 1) + 1;\n  }\n\n  array[idx] = item;\n  return siftdown(array, start, idx, cmp);\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-dataflow/src/util/Heap.js"],"names":["Heap","cmp","nodes","clear","size","length","peek","push","x","siftdown","pop","last","item","siftup","array","start","idx","parent","pidx","end","cidx","ridx"],"mappings":"AAAA,eAAe,SAASA,IAAT,CAAcC,GAAd,EAAmB;AAChC,MAAIC,KAAK,GAAG,EAAZ;AACA,SAAO;AACLC,IAAAA,KAAK,EAAE,MAAMD,KAAK,GAAG,EADhB;AAELE,IAAAA,IAAI,EAAE,MAAMF,KAAK,CAACG,MAFb;AAGLC,IAAAA,IAAI,EAAE,MAAMJ,KAAK,CAAC,CAAD,CAHZ;AAILK,IAAAA,IAAI,EAAEC,CAAC,IAAI;AACTN,MAAAA,KAAK,CAACK,IAAN,CAAWC,CAAX;AACA,aAAOC,QAAQ,CAACP,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACG,MAAN,GAAe,CAA1B,EAA6BJ,GAA7B,CAAf;AACD,KAPI;AAQLS,IAAAA,GAAG,EAAE,MAAM;AACT,UAAIC,IAAI,GAAGT,KAAK,CAACQ,GAAN,EAAX;AAAA,UAAwBE,IAAxB;;AACA,UAAIV,KAAK,CAACG,MAAV,EAAkB;AAChBO,QAAAA,IAAI,GAAGV,KAAK,CAAC,CAAD,CAAZ;AACAA,QAAAA,KAAK,CAAC,CAAD,CAAL,GAAWS,IAAX;AACAE,QAAAA,MAAM,CAACX,KAAD,EAAQ,CAAR,EAAWD,GAAX,CAAN;AACD,OAJD,MAIO;AACLW,QAAAA,IAAI,GAAGD,IAAP;AACD;;AACD,aAAOC,IAAP;AACD;AAlBI,GAAP;AAoBD;;AAED,SAASH,QAAT,CAAkBK,KAAlB,EAAyBC,KAAzB,EAAgCC,GAAhC,EAAqCf,GAArC,EAA0C;AACxC,MAAIW,IAAJ,EAAUK,MAAV,EAAkBC,IAAlB;AAEAN,EAAAA,IAAI,GAAGE,KAAK,CAACE,GAAD,CAAZ;;AACA,SAAOA,GAAG,GAAGD,KAAb,EAAoB;AAClBG,IAAAA,IAAI,GAAIF,GAAG,GAAG,CAAP,IAAa,CAApB;AACAC,IAAAA,MAAM,GAAGH,KAAK,CAACI,IAAD,CAAd;;AACA,QAAIjB,GAAG,CAACW,IAAD,EAAOK,MAAP,CAAH,GAAoB,CAAxB,EAA2B;AACzBH,MAAAA,KAAK,CAACE,GAAD,CAAL,GAAaC,MAAb;AACAD,MAAAA,GAAG,GAAGE,IAAN;AACA;AACD;;AACD;AACD;;AACD,SAAQJ,KAAK,CAACE,GAAD,CAAL,GAAaJ,IAArB;AACD;;AAED,SAASC,MAAT,CAAgBC,KAAhB,EAAuBE,GAAvB,EAA4Bf,GAA5B,EAAiC;AAC/B,MAAIc,KAAK,GAAGC,GAAZ;AAAA,MACIG,GAAG,GAAGL,KAAK,CAACT,MADhB;AAAA,MAEIO,IAAI,GAAGE,KAAK,CAACE,GAAD,CAFhB;AAAA,MAGII,IAAI,GAAG,CAACJ,GAAG,IAAI,CAAR,IAAa,CAHxB;AAAA,MAG2BK,IAH3B;;AAKA,SAAOD,IAAI,GAAGD,GAAd,EAAmB;AACjBE,IAAAA,IAAI,GAAGD,IAAI,GAAG,CAAd;;AACA,QAAIC,IAAI,GAAGF,GAAP,IAAclB,GAAG,CAACa,KAAK,CAACM,IAAD,CAAN,EAAcN,KAAK,CAACO,IAAD,CAAnB,CAAH,IAAiC,CAAnD,EAAsD;AACpDD,MAAAA,IAAI,GAAGC,IAAP;AACD;;AACDP,IAAAA,KAAK,CAACE,GAAD,CAAL,GAAaF,KAAK,CAACM,IAAD,CAAlB;AACAJ,IAAAA,GAAG,GAAGI,IAAN;AACAA,IAAAA,IAAI,GAAG,CAACJ,GAAG,IAAI,CAAR,IAAa,CAApB;AACD;;AACDF,EAAAA,KAAK,CAACE,GAAD,CAAL,GAAaJ,IAAb;AACA,SAAOH,QAAQ,CAACK,KAAD,EAAQC,KAAR,EAAeC,GAAf,EAAoBf,GAApB,CAAf;AACD","sourcesContent":["export default function Heap(cmp) {\n  var nodes = [];\n  return {\n    clear: () => nodes = [],\n    size: () => nodes.length,\n    peek: () => nodes[0],\n    push: x => {\n      nodes.push(x);\n      return siftdown(nodes, 0, nodes.length - 1, cmp);\n    },\n    pop: () => {\n      var last = nodes.pop(), item;\n      if (nodes.length) {\n        item = nodes[0];\n        nodes[0] = last;\n        siftup(nodes, 0, cmp);\n      } else {\n        item = last;\n      }\n      return item;\n    }\n  };\n}\n\nfunction siftdown(array, start, idx, cmp) {\n  var item, parent, pidx;\n\n  item = array[idx];\n  while (idx > start) {\n    pidx = (idx - 1) >> 1;\n    parent = array[pidx];\n    if (cmp(item, parent) < 0) {\n      array[idx] = parent;\n      idx = pidx;\n      continue;\n    }\n    break;\n  }\n  return (array[idx] = item);\n}\n\nfunction siftup(array, idx, cmp) {\n  var start = idx,\n      end = array.length,\n      item = array[idx],\n      cidx = (idx << 1) + 1, ridx;\n\n  while (cidx < end) {\n    ridx = cidx + 1;\n    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n      cidx = ridx;\n    }\n    array[idx] = array[cidx];\n    idx = cidx;\n    cidx = (idx << 1) + 1;\n  }\n  array[idx] = item;\n  return siftdown(array, start, idx, cmp);\n}\n"]},"metadata":{},"sourceType":"module"}