{"ast":null,"code":"import renderHeadless from './render-headless';\nimport { RenderType as Type } from 'vega-scenegraph';\nimport { error } from 'vega-util';\n/**\n * Produce an image URL for the visualization. Depending on the type\n * parameter, the generated URL contains data for either a PNG or SVG image.\n * The URL can be used (for example) to download images of the visualization.\n * This method is asynchronous, returning a Promise instance.\n * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.\n *   The 'canvas' and 'png' types are synonyms for a PNG image.\n * @return {Promise} - A promise that resolves to an image URL.\n */\n\nexport default async function (type, scaleFactor) {\n  if (type !== Type.Canvas && type !== Type.SVG && type !== Type.PNG) {\n    error('Unrecognized image type: ' + type);\n  }\n\n  const r = await renderHeadless(this, type, scaleFactor);\n  return type === Type.SVG ? toBlobURL(r.svg(), 'image/svg+xml') : r.canvas().toDataURL('image/png');\n}\n\nfunction toBlobURL(data, mime) {\n  var blob = new Blob([data], {\n    type: mime\n  });\n  return window.URL.createObjectURL(blob);\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-view/src/render-to-image-url.js"],"names":["renderHeadless","RenderType","Type","error","type","scaleFactor","Canvas","SVG","PNG","r","toBlobURL","svg","canvas","toDataURL","data","mime","blob","Blob","window","URL","createObjectURL"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,mBAA3B;AACA,SAAQC,UAAU,IAAIC,IAAtB,QAAiC,iBAAjC;AACA,SAAQC,KAAR,QAAoB,WAApB;AAEA;;;;;;;;;;AASA,eAAe,gBAAeC,IAAf,EAAqBC,WAArB,EAAkC;AAC/C,MAAID,IAAI,KAAKF,IAAI,CAACI,MAAd,IAAwBF,IAAI,KAAKF,IAAI,CAACK,GAAtC,IAA6CH,IAAI,KAAKF,IAAI,CAACM,GAA/D,EAAoE;AAClEL,IAAAA,KAAK,CAAC,8BAA8BC,IAA/B,CAAL;AACD;;AAED,QAAMK,CAAC,GAAG,MAAMT,cAAc,CAAC,IAAD,EAAOI,IAAP,EAAaC,WAAb,CAA9B;AACA,SAAOD,IAAI,KAAKF,IAAI,CAACK,GAAd,GACHG,SAAS,CAACD,CAAC,CAACE,GAAF,EAAD,EAAU,eAAV,CADN,GAEHF,CAAC,CAACG,MAAF,GAAWC,SAAX,CAAqB,WAArB,CAFJ;AAGD;;AAED,SAASH,SAAT,CAAmBI,IAAnB,EAAyBC,IAAzB,EAA+B;AAC7B,MAAIC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACH,IAAD,CAAT,EAAiB;AAACV,IAAAA,IAAI,EAAEW;AAAP,GAAjB,CAAX;AACA,SAAOG,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BJ,IAA3B,CAAP;AACD","sourcesContent":["import renderHeadless from './render-headless';\nimport {RenderType as Type} from 'vega-scenegraph';\nimport {error} from 'vega-util';\n\n/**\n * Produce an image URL for the visualization. Depending on the type\n * parameter, the generated URL contains data for either a PNG or SVG image.\n * The URL can be used (for example) to download images of the visualization.\n * This method is asynchronous, returning a Promise instance.\n * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.\n *   The 'canvas' and 'png' types are synonyms for a PNG image.\n * @return {Promise} - A promise that resolves to an image URL.\n */\nexport default async function(type, scaleFactor) {\n  if (type !== Type.Canvas && type !== Type.SVG && type !== Type.PNG) {\n    error('Unrecognized image type: ' + type);\n  }\n\n  const r = await renderHeadless(this, type, scaleFactor);\n  return type === Type.SVG\n    ? toBlobURL(r.svg(), 'image/svg+xml')\n    : r.canvas().toDataURL('image/png');\n}\n\nfunction toBlobURL(data, mime) {\n  var blob = new Blob([data], {type: mime});\n  return window.URL.createObjectURL(blob);\n}\n"]},"metadata":{},"sourceType":"module"}