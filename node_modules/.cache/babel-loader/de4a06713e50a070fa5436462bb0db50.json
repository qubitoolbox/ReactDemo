{"ast":null,"code":"import HierarchyLayout from './HierarchyLayout';\nimport { error, hasOwnProperty, inherits } from 'vega-util';\nimport { treemap, treemapBinary, treemapDice, treemapSlice, treemapSliceDice, treemapSquarify, treemapResquarify } from 'd3-hierarchy';\nvar Tiles = {\n  binary: treemapBinary,\n  dice: treemapDice,\n  slice: treemapSlice,\n  slicedice: treemapSliceDice,\n  squarify: treemapSquarify,\n  resquarify: treemapResquarify\n};\nvar Output = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n/**\n * Treemap layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\n\nexport default function Treemap(params) {\n  HierarchyLayout.call(this, params);\n}\nTreemap.Definition = {\n  \"type\": \"Treemap\",\n  \"metadata\": {\n    \"tree\": true,\n    \"modifies\": true\n  },\n  \"params\": [{\n    \"name\": \"field\",\n    \"type\": \"field\"\n  }, {\n    \"name\": \"sort\",\n    \"type\": \"compare\"\n  }, {\n    \"name\": \"method\",\n    \"type\": \"enum\",\n    \"default\": \"squarify\",\n    \"values\": [\"squarify\", \"resquarify\", \"binary\", \"dice\", \"slice\", \"slicedice\"]\n  }, {\n    \"name\": \"padding\",\n    \"type\": \"number\",\n    \"default\": 0\n  }, {\n    \"name\": \"paddingInner\",\n    \"type\": \"number\",\n    \"default\": 0\n  }, {\n    \"name\": \"paddingOuter\",\n    \"type\": \"number\",\n    \"default\": 0\n  }, {\n    \"name\": \"paddingTop\",\n    \"type\": \"number\",\n    \"default\": 0\n  }, {\n    \"name\": \"paddingRight\",\n    \"type\": \"number\",\n    \"default\": 0\n  }, {\n    \"name\": \"paddingBottom\",\n    \"type\": \"number\",\n    \"default\": 0\n  }, {\n    \"name\": \"paddingLeft\",\n    \"type\": \"number\",\n    \"default\": 0\n  }, {\n    \"name\": \"ratio\",\n    \"type\": \"number\",\n    \"default\": 1.618033988749895\n  }, {\n    \"name\": \"round\",\n    \"type\": \"boolean\",\n    \"default\": false\n  }, {\n    \"name\": \"size\",\n    \"type\": \"number\",\n    \"array\": true,\n    \"length\": 2\n  }, {\n    \"name\": \"as\",\n    \"type\": \"string\",\n    \"array\": true,\n    \"length\": Output.length,\n    \"default\": Output\n  }]\n};\nvar prototype = inherits(Treemap, HierarchyLayout);\n/**\n * Treemap layout generator. Adds 'method' and 'ratio' parameters\n * to configure the underlying tile method.\n */\n\nprototype.layout = function () {\n  var x = treemap();\n\n  x.ratio = function (_) {\n    var t = x.tile();\n    if (t.ratio) x.tile(t.ratio(_));\n  };\n\n  x.method = function (_) {\n    if (hasOwnProperty(Tiles, _)) x.tile(Tiles[_]);else error('Unrecognized Treemap layout method: ' + _);\n  };\n\n  return x;\n};\n\nprototype.params = ['method', 'ratio', 'size', 'round', 'padding', 'paddingInner', 'paddingOuter', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'];\nprototype.fields = Output;","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-hierarchy/src/Treemap.js"],"names":["HierarchyLayout","error","hasOwnProperty","inherits","treemap","treemapBinary","treemapDice","treemapSlice","treemapSliceDice","treemapSquarify","treemapResquarify","Tiles","binary","dice","slice","slicedice","squarify","resquarify","Output","Treemap","params","call","Definition","length","prototype","layout","x","ratio","_","t","tile","method","fields"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,SAAQC,KAAR,EAAeC,cAAf,EAA+BC,QAA/B,QAA8C,WAA9C;AACA,SACEC,OADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,gBALF,EAMEC,eANF,EAOEC,iBAPF,QAQO,cARP;AAUA,IAAIC,KAAK,GAAG;AACVC,EAAAA,MAAM,EAAEP,aADE;AAEVQ,EAAAA,IAAI,EAAEP,WAFI;AAGVQ,EAAAA,KAAK,EAAEP,YAHG;AAIVQ,EAAAA,SAAS,EAAEP,gBAJD;AAKVQ,EAAAA,QAAQ,EAAEP,eALA;AAMVQ,EAAAA,UAAU,EAAEP;AANF,CAAZ;AASA,IAAIQ,MAAM,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,OAAzB,EAAkC,UAAlC,CAAb;AAEA;;;;;;;AAMA,eAAe,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AACtCpB,EAAAA,eAAe,CAACqB,IAAhB,CAAqB,IAArB,EAA2BD,MAA3B;AACD;AAEDD,OAAO,CAACG,UAAR,GAAqB;AACnB,UAAQ,SADW;AAEnB,cAAY;AAAC,YAAQ,IAAT;AAAe,gBAAY;AAA3B,GAFO;AAGnB,YAAU,CACR;AAAE,YAAQ,OAAV;AAAmB,YAAQ;AAA3B,GADQ,EAER;AAAE,YAAQ,MAAV;AAAkB,YAAQ;AAA1B,GAFQ,EAGR;AAAE,YAAQ,QAAV;AAAoB,YAAQ,MAA5B;AAAoC,eAAW,UAA/C;AACE,cAAU,CAAC,UAAD,EAAa,YAAb,EAA2B,QAA3B,EAAqC,MAArC,EAA6C,OAA7C,EAAsD,WAAtD;AADZ,GAHQ,EAKR;AAAE,YAAQ,SAAV;AAAqB,YAAQ,QAA7B;AAAuC,eAAW;AAAlD,GALQ,EAMR;AAAE,YAAQ,cAAV;AAA0B,YAAQ,QAAlC;AAA4C,eAAW;AAAvD,GANQ,EAOR;AAAE,YAAQ,cAAV;AAA0B,YAAQ,QAAlC;AAA4C,eAAW;AAAvD,GAPQ,EAQR;AAAE,YAAQ,YAAV;AAAwB,YAAQ,QAAhC;AAA0C,eAAW;AAArD,GARQ,EASR;AAAE,YAAQ,cAAV;AAA0B,YAAQ,QAAlC;AAA4C,eAAW;AAAvD,GATQ,EAUR;AAAE,YAAQ,eAAV;AAA2B,YAAQ,QAAnC;AAA6C,eAAW;AAAxD,GAVQ,EAWR;AAAE,YAAQ,aAAV;AAAyB,YAAQ,QAAjC;AAA2C,eAAW;AAAtD,GAXQ,EAYR;AAAE,YAAQ,OAAV;AAAmB,YAAQ,QAA3B;AAAqC,eAAW;AAAhD,GAZQ,EAaR;AAAE,YAAQ,OAAV;AAAmB,YAAQ,SAA3B;AAAsC,eAAW;AAAjD,GAbQ,EAcR;AAAE,YAAQ,MAAV;AAAkB,YAAQ,QAA1B;AAAoC,aAAS,IAA7C;AAAmD,cAAU;AAA7D,GAdQ,EAeR;AAAE,YAAQ,IAAV;AAAgB,YAAQ,QAAxB;AAAkC,aAAS,IAA3C;AAAiD,cAAUJ,MAAM,CAACK,MAAlE;AAA0E,eAAWL;AAArF,GAfQ;AAHS,CAArB;AAsBA,IAAIM,SAAS,GAAGrB,QAAQ,CAACgB,OAAD,EAAUnB,eAAV,CAAxB;AAEA;;;;;AAIAwB,SAAS,CAACC,MAAV,GAAmB,YAAW;AAC5B,MAAIC,CAAC,GAAGtB,OAAO,EAAf;;AACAsB,EAAAA,CAAC,CAACC,KAAF,GAAU,UAASC,CAAT,EAAY;AACpB,QAAIC,CAAC,GAAGH,CAAC,CAACI,IAAF,EAAR;AACA,QAAID,CAAC,CAACF,KAAN,EAAaD,CAAC,CAACI,IAAF,CAAOD,CAAC,CAACF,KAAF,CAAQC,CAAR,CAAP;AACd,GAHD;;AAIAF,EAAAA,CAAC,CAACK,MAAF,GAAW,UAASH,CAAT,EAAY;AACrB,QAAI1B,cAAc,CAACS,KAAD,EAAQiB,CAAR,CAAlB,EAA8BF,CAAC,CAACI,IAAF,CAAOnB,KAAK,CAACiB,CAAD,CAAZ,EAA9B,KACK3B,KAAK,CAAC,yCAAyC2B,CAA1C,CAAL;AACN,GAHD;;AAIA,SAAOF,CAAP;AACD,CAXD;;AAaAF,SAAS,CAACJ,MAAV,GAAmB,CACjB,QADiB,EACP,OADO,EACE,MADF,EACU,OADV,EAEjB,SAFiB,EAEN,cAFM,EAEU,cAFV,EAGjB,YAHiB,EAGH,cAHG,EAGa,eAHb,EAG8B,aAH9B,CAAnB;AAMAI,SAAS,CAACQ,MAAV,GAAmBd,MAAnB","sourcesContent":["import HierarchyLayout from './HierarchyLayout';\nimport {error, hasOwnProperty, inherits} from 'vega-util';\nimport {\n  treemap,\n  treemapBinary,\n  treemapDice,\n  treemapSlice,\n  treemapSliceDice,\n  treemapSquarify,\n  treemapResquarify\n} from 'd3-hierarchy';\n\nvar Tiles = {\n  binary: treemapBinary,\n  dice: treemapDice,\n  slice: treemapSlice,\n  slicedice: treemapSliceDice,\n  squarify: treemapSquarify,\n  resquarify: treemapResquarify\n};\n\nvar Output = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n/**\n * Treemap layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\nexport default function Treemap(params) {\n  HierarchyLayout.call(this, params);\n}\n\nTreemap.Definition = {\n  \"type\": \"Treemap\",\n  \"metadata\": {\"tree\": true, \"modifies\": true},\n  \"params\": [\n    { \"name\": \"field\", \"type\": \"field\" },\n    { \"name\": \"sort\", \"type\": \"compare\" },\n    { \"name\": \"method\", \"type\": \"enum\", \"default\": \"squarify\",\n      \"values\": [\"squarify\", \"resquarify\", \"binary\", \"dice\", \"slice\", \"slicedice\"] },\n    { \"name\": \"padding\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingInner\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingOuter\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingTop\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingRight\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingBottom\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"paddingLeft\", \"type\": \"number\", \"default\": 0 },\n    { \"name\": \"ratio\", \"type\": \"number\", \"default\": 1.618033988749895 },\n    { \"name\": \"round\", \"type\": \"boolean\", \"default\": false },\n    { \"name\": \"size\", \"type\": \"number\", \"array\": true, \"length\": 2 },\n    { \"name\": \"as\", \"type\": \"string\", \"array\": true, \"length\": Output.length, \"default\": Output }\n  ]\n};\n\nvar prototype = inherits(Treemap, HierarchyLayout);\n\n/**\n * Treemap layout generator. Adds 'method' and 'ratio' parameters\n * to configure the underlying tile method.\n */\nprototype.layout = function() {\n  var x = treemap();\n  x.ratio = function(_) {\n    var t = x.tile();\n    if (t.ratio) x.tile(t.ratio(_));\n  };\n  x.method = function(_) {\n    if (hasOwnProperty(Tiles, _)) x.tile(Tiles[_]);\n    else error('Unrecognized Treemap layout method: ' + _);\n  };\n  return x;\n};\n\nprototype.params = [\n  'method', 'ratio', 'size', 'round',\n  'padding', 'paddingInner', 'paddingOuter',\n  'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'\n];\n\nprototype.fields = Output;\n"]},"metadata":{},"sourceType":"module"}