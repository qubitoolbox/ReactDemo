{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tf = __importStar(require(\"@tensorflow/tfjs-core\"));\n\nconst buffer_1 = require(\"buffer\");\n\nconst expo_gl_1 = require(\"expo-gl\");\n\nconst react_native_1 = require(\"react-native\");\n\nlet debugMode_ = false;\n\nfunction setDebugMode(debugMode) {\n  debugMode_ = debugMode_;\n}\n\nexports.setDebugMode = setDebugMode;\n\nfunction getDebugMode() {\n  return debugMode_;\n}\n\nexports.getDebugMode = getDebugMode; // See implemetation note on fetch\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/0ee5f68929610106ee6864baa04ea90be0fc5160/Libraries/vendor/core/whatwg-fetch.js#L421\n\nfunction parseHeaders(rawHeaders) {\n  const headers = new Headers(); // Replace instances of \\r\\n and \\n followed by at least one space or\n  // horizontal tab with a space https://tools.ietf.org/html/rfc7230#section-3.2\n\n  const preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n  preProcessedHeaders.split(/\\r?\\n/).forEach(line => {\n    const parts = line.split(':');\n    const key = parts.shift().trim();\n\n    if (key) {\n      const value = parts.join(':').trim();\n      headers.append(key, value);\n    }\n  });\n  return headers;\n} // Implementation note: This is a patch of react-native's fetch implementation\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/0ee5f68929610106ee6864baa04ea90be0fc5160/Libraries/vendor/core/whatwg-fetch.js#L484\n//\n// The response object supplied by fetch does not implement arrayBuffer()\n// FileReader.readAsArrayBuffer is not implemented.\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/d7a5e3e215eedb7377a86f172e0619403e20c2b8/Libraries/Blob/FileReader.js#L83\n//\n// However if one uses XMLHttpRequest directly and set the responseType\n// correctly before making the request. The returned response object will have\n// a working arrayBuffer method that can be used downstraeam.\n\n/**\n * Makes an HTTP request.\n * @param path The URL path to make a request to\n * @param init The request init. See init here:\n *     https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n * @param options A RequestDetails object.\n *    - __options.isBinary__ boolean indicating whether this request is for a\n *     binary file.\n */\n\n/** @doc {heading: 'Platform helpers', subheading: 'http'} */\n\n\nasync function fetch(path, init, options) {\n  return new Promise((resolve, reject) => {\n    const request = new Request(path, init);\n    const xhr = new XMLHttpRequest();\n\n    xhr.onload = () => {\n      const reqOptions = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || ''),\n        url: ''\n      };\n      reqOptions.url = 'responseURL' in xhr ? xhr.responseURL : reqOptions.headers.get('X-Request-URL'); //@ts-ignore â€” ts belives the latter case will never occur.\n\n      const body = 'response' in xhr ? xhr.response : xhr.responseText;\n      resolve(new Response(body, reqOptions));\n    };\n\n    xhr.onerror = () => reject(new TypeError('Network request failed'));\n\n    xhr.ontimeout = () => reject(new TypeError('Network request failed'));\n\n    xhr.open(request.method, request.url, true);\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true;\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false;\n    }\n\n    if (options != null && options.isBinary) {\n      // In react native We need to set the response type to arraybuffer when\n      // fetching binary resources in order for `.arrayBuffer` to work correctly\n      // on the response.\n      xhr.responseType = 'arraybuffer';\n    }\n\n    request.headers.forEach((value, name) => {\n      xhr.setRequestHeader(name, value);\n    });\n    xhr.send( //@ts-ignore\n    typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n  });\n}\n\nexports.fetch = fetch;\n\nclass PlatformReactNative {\n  /**\n   * Makes an HTTP request.\n   *\n   * see @fetch docs above.\n   */\n  async fetch(path, init, options) {\n    return fetch(path, init, options);\n  }\n  /**\n   * Encode the provided string into an array of bytes using the provided\n   * encoding.\n   */\n\n\n  encode(text, encoding) {\n    // See https://www.w3.org/TR/encoding/#utf-16le\n    if (encoding === 'utf-16') {\n      encoding = 'utf16le';\n    }\n\n    return new Uint8Array(buffer_1.Buffer.from(text, encoding));\n  }\n  /** Decode the provided bytes into a string using the provided encoding. */\n\n\n  decode(bytes, encoding) {\n    // See https://www.w3.org/TR/encoding/#utf-16le\n    if (encoding === 'utf-16') {\n      encoding = 'utf16le';\n    }\n\n    return buffer_1.Buffer.from(bytes).toString(encoding);\n  }\n\n  now() {\n    //@ts-ignore\n    if (global.nativePerformanceNow) {\n      //@ts-ignore\n      return global.nativePerformanceNow();\n    }\n\n    return Date.now();\n  }\n\n}\n\nexports.PlatformReactNative = PlatformReactNative;\n\nfunction setupGlobals() {\n  global.Buffer = buffer_1.Buffer;\n}\n\nfunction registerWebGLBackend() {\n  try {\n    const PRIORITY = 5;\n    tf.registerBackend('rn-webgl', async () => {\n      const glContext = await expo_gl_1.GLView.createContextAsync(); // ExpoGl getBufferSubData is not implemented yet (throws an exception).\n\n      tf.env().set('WEBGL_BUFFER_SUPPORTED', false); //\n      // Mock extension support for EXT_color_buffer_float and\n      // EXT_color_buffer_half_float on the expo-gl context object.\n      // In react native we do not have to get a handle to the extension\n      // in order to use the functionality of that extension on the device.\n      //\n      // This code block makes iOS and Android devices pass the extension checks\n      // used in core. After those are done core will actually test whether\n      // we can render/download float or half float textures.\n      //\n      // We can remove this block once we upstream checking for these\n      // extensions in expo.\n      //\n      // TODO look into adding support for checking these extensions in expo-gl\n      //\n      //@ts-ignore\n\n      const getExt = glContext.getExtension.bind(glContext);\n\n      const shimGetExt = name => {\n        if (name === 'EXT_color_buffer_float') {\n          if (react_native_1.Platform.OS === 'ios') {\n            // iOS does not support EXT_color_buffer_float\n            return null;\n          } else {\n            return {};\n          }\n        }\n\n        if (name === 'EXT_color_buffer_half_float') {\n          return {};\n        }\n\n        return getExt(name);\n      }; //\n      // Manually make 'read' synchronous. glContext has a defined gl.fenceSync\n      // function that throws a \"Not implemented yet\" exception so core\n      // cannot properly detect that it is not supported. We mock\n      // implementations of gl.fenceSync and gl.clientWaitSync\n      // TODO remove once fenceSync and clientWaitSync is implemented upstream.\n      //\n\n\n      const shimFenceSync = () => {\n        return {};\n      };\n\n      const shimClientWaitSync = () => glContext.CONDITION_SATISFIED; // @ts-ignore\n\n\n      glContext.getExtension = shimGetExt.bind(glContext);\n      glContext.fenceSync = shimFenceSync.bind(glContext);\n      glContext.clientWaitSync = shimClientWaitSync.bind(glContext); // Set the WebGLContext before flag evaluation\n\n      tf.webgl.setWebGLContext(2, glContext);\n      const context = new tf.webgl.GPGPUContext();\n      const backend = new tf.webgl.MathBackendWebGL(context);\n      return backend;\n    }, PRIORITY); // Register all the webgl kernels on the rn-webgl backend\n\n    const kernels = tf.getKernelsForBackend('webgl');\n    kernels.forEach(kernelConfig => {\n      const newKernelConfig = Object.assign({}, kernelConfig, {\n        backendName: 'rn-webgl'\n      });\n      tf.registerKernel(newKernelConfig);\n    });\n  } catch (e) {\n    throw new Error(`Failed to register Webgl backend: ${e.message}`);\n  }\n}\n\ntf.env().registerFlag('IS_REACT_NATIVE', () => navigator && navigator.product === 'ReactNative');\n\nif (tf.env().getBool('IS_REACT_NATIVE')) {\n  setupGlobals();\n  registerWebGLBackend();\n  tf.setPlatform('react-native', new PlatformReactNative());\n}","map":{"version":3,"sources":["../src/platform_react_native.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tf = __importStar(require(\"@tensorflow/tfjs-core\"));\nconst buffer_1 = require(\"buffer\");\nconst expo_gl_1 = require(\"expo-gl\");\nconst react_native_1 = require(\"react-native\");\nlet debugMode_ = false;\nfunction setDebugMode(debugMode) {\n    debugMode_ = debugMode_;\n}\nexports.setDebugMode = setDebugMode;\nfunction getDebugMode() {\n    return debugMode_;\n}\nexports.getDebugMode = getDebugMode;\n// See implemetation note on fetch\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/0ee5f68929610106ee6864baa04ea90be0fc5160/Libraries/vendor/core/whatwg-fetch.js#L421\nfunction parseHeaders(rawHeaders) {\n    const headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or\n    // horizontal tab with a space https://tools.ietf.org/html/rfc7230#section-3.2\n    const preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(line => {\n        const parts = line.split(':');\n        const key = parts.shift().trim();\n        if (key) {\n            const value = parts.join(':').trim();\n            headers.append(key, value);\n        }\n    });\n    return headers;\n}\n// Implementation note: This is a patch of react-native's fetch implementation\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/0ee5f68929610106ee6864baa04ea90be0fc5160/Libraries/vendor/core/whatwg-fetch.js#L484\n//\n// The response object supplied by fetch does not implement arrayBuffer()\n// FileReader.readAsArrayBuffer is not implemented.\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/d7a5e3e215eedb7377a86f172e0619403e20c2b8/Libraries/Blob/FileReader.js#L83\n//\n// However if one uses XMLHttpRequest directly and set the responseType\n// correctly before making the request. The returned response object will have\n// a working arrayBuffer method that can be used downstraeam.\n/**\n * Makes an HTTP request.\n * @param path The URL path to make a request to\n * @param init The request init. See init here:\n *     https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n * @param options A RequestDetails object.\n *    - __options.isBinary__ boolean indicating whether this request is for a\n *     binary file.\n */\n/** @doc {heading: 'Platform helpers', subheading: 'http'} */\nasync function fetch(path, init, options) {\n    return new Promise((resolve, reject) => {\n        const request = new Request(path, init);\n        const xhr = new XMLHttpRequest();\n        xhr.onload = () => {\n            const reqOptions = {\n                status: xhr.status,\n                statusText: xhr.statusText,\n                headers: parseHeaders(xhr.getAllResponseHeaders() || ''),\n                url: '',\n            };\n            reqOptions.url = 'responseURL' in xhr ?\n                xhr.responseURL :\n                reqOptions.headers.get('X-Request-URL');\n            //@ts-ignore â€” ts belives the latter case will never occur.\n            const body = 'response' in xhr ? xhr.response : xhr.responseText;\n            resolve(new Response(body, reqOptions));\n        };\n        xhr.onerror = () => reject(new TypeError('Network request failed'));\n        xhr.ontimeout = () => reject(new TypeError('Network request failed'));\n        xhr.open(request.method, request.url, true);\n        if (request.credentials === 'include') {\n            xhr.withCredentials = true;\n        }\n        else if (request.credentials === 'omit') {\n            xhr.withCredentials = false;\n        }\n        if (options != null && options.isBinary) {\n            // In react native We need to set the response type to arraybuffer when\n            // fetching binary resources in order for `.arrayBuffer` to work correctly\n            // on the response.\n            xhr.responseType = 'arraybuffer';\n        }\n        request.headers.forEach((value, name) => {\n            xhr.setRequestHeader(name, value);\n        });\n        xhr.send(\n        //@ts-ignore\n        typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    });\n}\nexports.fetch = fetch;\nclass PlatformReactNative {\n    /**\n     * Makes an HTTP request.\n     *\n     * see @fetch docs above.\n     */\n    async fetch(path, init, options) {\n        return fetch(path, init, options);\n    }\n    /**\n     * Encode the provided string into an array of bytes using the provided\n     * encoding.\n     */\n    encode(text, encoding) {\n        // See https://www.w3.org/TR/encoding/#utf-16le\n        if (encoding === 'utf-16') {\n            encoding = 'utf16le';\n        }\n        return new Uint8Array(buffer_1.Buffer.from(text, encoding));\n    }\n    /** Decode the provided bytes into a string using the provided encoding. */\n    decode(bytes, encoding) {\n        // See https://www.w3.org/TR/encoding/#utf-16le\n        if (encoding === 'utf-16') {\n            encoding = 'utf16le';\n        }\n        return buffer_1.Buffer.from(bytes).toString(encoding);\n    }\n    now() {\n        //@ts-ignore\n        if (global.nativePerformanceNow) {\n            //@ts-ignore\n            return global.nativePerformanceNow();\n        }\n        return Date.now();\n    }\n}\nexports.PlatformReactNative = PlatformReactNative;\nfunction setupGlobals() {\n    global.Buffer = buffer_1.Buffer;\n}\nfunction registerWebGLBackend() {\n    try {\n        const PRIORITY = 5;\n        tf.registerBackend('rn-webgl', async () => {\n            const glContext = await expo_gl_1.GLView.createContextAsync();\n            // ExpoGl getBufferSubData is not implemented yet (throws an exception).\n            tf.env().set('WEBGL_BUFFER_SUPPORTED', false);\n            //\n            // Mock extension support for EXT_color_buffer_float and\n            // EXT_color_buffer_half_float on the expo-gl context object.\n            // In react native we do not have to get a handle to the extension\n            // in order to use the functionality of that extension on the device.\n            //\n            // This code block makes iOS and Android devices pass the extension checks\n            // used in core. After those are done core will actually test whether\n            // we can render/download float or half float textures.\n            //\n            // We can remove this block once we upstream checking for these\n            // extensions in expo.\n            //\n            // TODO look into adding support for checking these extensions in expo-gl\n            //\n            //@ts-ignore\n            const getExt = glContext.getExtension.bind(glContext);\n            const shimGetExt = (name) => {\n                if (name === 'EXT_color_buffer_float') {\n                    if (react_native_1.Platform.OS === 'ios') {\n                        // iOS does not support EXT_color_buffer_float\n                        return null;\n                    }\n                    else {\n                        return {};\n                    }\n                }\n                if (name === 'EXT_color_buffer_half_float') {\n                    return {};\n                }\n                return getExt(name);\n            };\n            //\n            // Manually make 'read' synchronous. glContext has a defined gl.fenceSync\n            // function that throws a \"Not implemented yet\" exception so core\n            // cannot properly detect that it is not supported. We mock\n            // implementations of gl.fenceSync and gl.clientWaitSync\n            // TODO remove once fenceSync and clientWaitSync is implemented upstream.\n            //\n            const shimFenceSync = () => {\n                return {};\n            };\n            const shimClientWaitSync = () => glContext.CONDITION_SATISFIED;\n            // @ts-ignore\n            glContext.getExtension = shimGetExt.bind(glContext);\n            glContext.fenceSync = shimFenceSync.bind(glContext);\n            glContext.clientWaitSync = shimClientWaitSync.bind(glContext);\n            // Set the WebGLContext before flag evaluation\n            tf.webgl.setWebGLContext(2, glContext);\n            const context = new tf.webgl.GPGPUContext();\n            const backend = new tf.webgl.MathBackendWebGL(context);\n            return backend;\n        }, PRIORITY);\n        // Register all the webgl kernels on the rn-webgl backend\n        const kernels = tf.getKernelsForBackend('webgl');\n        kernels.forEach(kernelConfig => {\n            const newKernelConfig = Object.assign({}, kernelConfig, { backendName: 'rn-webgl' });\n            tf.registerKernel(newKernelConfig);\n        });\n    }\n    catch (e) {\n        throw (new Error(`Failed to register Webgl backend: ${e.message}`));\n    }\n}\ntf.env().registerFlag('IS_REACT_NATIVE', () => navigator && navigator.product === 'ReactNative');\nif (tf.env().getBool('IS_REACT_NATIVE')) {\n    setupGlobals();\n    registerWebGLBackend();\n    tf.setPlatform('react-native', new PlatformReactNative());\n}\n//# sourceMappingURL=platform_react_native.js.map"]},"metadata":{},"sourceType":"script"}