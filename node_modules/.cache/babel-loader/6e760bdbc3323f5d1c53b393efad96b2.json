{"ast":null,"code":"var _jsxFileName = \"C:\\\\NewReactResume\\\\resm\\\\src\\\\Components\\\\FirstML\\\\hmm.js\";\nimport React from \"react\";\nimport * as tf from '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as jpeg from 'jpeg-js'; //import Constants from 'expo-constants'\n//import * as Permissions from 'expo-permissions'\n//import '@tensorflow/tfjs-react-native';\n\nexport default class TheMl extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.classifyImage = async () => {\n      try {\n        const imageAssetPath = Image.resolveAssetSource(this.state.image);\n        const response = await fetch(imageAssetPath.uri, {}, {\n          isBinary: true\n        });\n        const rawImageData = await response.arrayBuffer();\n        const imageTensor = this.imageToTensor(rawImageData);\n        const predictions = await this.model.classify(imageTensor);\n        this.setState({\n          predictions\n        });\n        console.log(predictions);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.state = {\n      isTfReady: false,\n      isModelReady: false,\n      predictions: null,\n      image: null\n    };\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready(); // Signal to the app that tensorflow.js can now be used.\n\n    this.setState({\n      isTfReady: true\n    });\n    this.model = await mobilenet.load();\n    this.setState({\n      isModelReady: true\n    });\n  }\n\n  imageToTensor(rawImageData) {\n    const TO_UINT8ARRAY = true;\n    const {\n      width,\n      height,\n      data\n    } = jpeg.decode(rawImageData, TO_UINT8ARRAY); // Drop the alpha channel info for mobilenet\n\n    const buffer = new Uint8Array(width * height * 3);\n    let offset = 0; // offset into original data\n\n    for (let i = 0; i < buffer.length; i += 3) {\n      buffer[i] = data[offset];\n      buffer[i + 1] = data[offset + 1];\n      buffer[i + 2] = data[offset + 2];\n      offset += 4;\n    }\n\n    return tf.tensor3d(buffer, [height, width, 3]);\n  }\n\n  render() {\n    const {\n      isTfReady,\n      isModelReady,\n      predictions,\n      image\n    } = this.state; //\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.state.isTfReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"First Time outputing TFS\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"yes\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Model ready?\", ' ', this.state.isModelReady ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Yes\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Loading Model...\")));\n  }\n\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/src/Components/FirstML/hmm.js"],"names":["React","tf","mobilenet","jpeg","TheMl","Component","constructor","props","classifyImage","imageAssetPath","Image","resolveAssetSource","state","image","response","fetch","uri","isBinary","rawImageData","arrayBuffer","imageTensor","imageToTensor","predictions","model","classify","setState","console","log","error","isTfReady","isModelReady","componentDidMount","ready","load","TO_UINT8ARRAY","width","height","data","decode","buffer","Uint8Array","offset","i","length","tensor3d","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as mobilenet from '@tensorflow-models/mobilenet';\r\nimport * as jpeg from 'jpeg-js'\r\n\r\n//import Constants from 'expo-constants'\r\n//import * as Permissions from 'expo-permissions'\r\n//import '@tensorflow/tfjs-react-native';\r\n \r\nexport default class TheMl extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isTfReady: false,\r\n      isModelReady: false,\r\n      predictions: null,\r\n      image: null\r\n    };\r\n  }\r\n \r\n  async componentDidMount() {\r\n    // Wait for tf to be ready.\r\n    await tf.ready();\r\n    // Signal to the app that tensorflow.js can now be used.\r\n    this.setState({\r\n      isTfReady: true,\r\n    })\r\n    this.model = await mobilenet.load()\r\n    this.setState({ isModelReady: true })\r\n\r\n  }\r\n\r\n  imageToTensor(rawImageData) {\r\n    const TO_UINT8ARRAY = true\r\n    const { width, height, data } = jpeg.decode(rawImageData, TO_UINT8ARRAY)\r\n    // Drop the alpha channel info for mobilenet\r\n    const buffer = new Uint8Array(width * height * 3)\r\n    let offset = 0 // offset into original data\r\n    for (let i = 0; i < buffer.length; i += 3) {\r\n      buffer[i] = data[offset]\r\n      buffer[i + 1] = data[offset + 1]\r\n      buffer[i + 2] = data[offset + 2]\r\n\r\n      offset += 4\r\n    }\r\n\r\n    return tf.tensor3d(buffer, [height, width, 3])\r\n  }\r\n\r\n  classifyImage = async () => {\r\n    try {\r\n      const imageAssetPath = Image.resolveAssetSource(this.state.image)\r\n      const response = await fetch(imageAssetPath.uri, {}, { isBinary: true })\r\n      const rawImageData = await response.arrayBuffer()\r\n      const imageTensor = this.imageToTensor(rawImageData)\r\n      const predictions = await this.model.classify(imageTensor)\r\n      this.setState({ predictions })\r\n      console.log(predictions)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n \r\n \r\n  render() {\r\n\r\n    const { isTfReady, isModelReady, predictions, image } = this.state\r\n    //\r\n    return (\r\n\r\n        <div>\r\n            {this.state.isTfReady?<p>First Time outputing TFS</p>:<p>yes</p>}\r\n            <p>\r\n                Model ready?{' '}\r\n                {this.state.isModelReady ? <p>Yes</p> : <p>Loading Model...</p>}\r\n            </p>\r\n        </div>\r\n\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}