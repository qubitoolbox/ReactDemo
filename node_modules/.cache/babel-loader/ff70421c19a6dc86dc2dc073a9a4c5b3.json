{"ast":null,"code":"import expression from './expression';\nimport field from './field';\nimport property from './property';\nimport { ScalePrefix } from 'vega-functions';\nimport { hasOwnProperty, isString, stringValue } from 'vega-util';\nexport default function (enc, value, scope, params, fields) {\n  var scale = getScale(enc.scale, scope, params, fields),\n      interp,\n      func,\n      flag;\n\n  if (enc.range != null) {\n    // pull value from scale range\n    interp = +enc.range;\n    func = scale + '.range()';\n    value = interp === 0 ? func + '[0]' : '($=' + func + ',' + (interp === 1 ? '$[$.length-1]' : '$[0]+' + interp + '*($[$.length-1]-$[0])') + ')';\n  } else {\n    // run value through scale and/or pull scale bandwidth\n    if (value !== undefined) value = scale + '(' + value + ')';\n\n    if (enc.band && (flag = hasBandwidth(enc.scale, scope))) {\n      func = scale + '.bandwidth';\n\n      if (enc.band.signal) {\n        interp = func + '()*' + property(enc.band, scope, params, fields);\n      } else {\n        interp = +enc.band;\n        interp = func + '()' + (interp === 1 ? '' : '*' + interp);\n      } // if we don't know the scale type, check for bandwidth\n\n\n      if (flag < 0) interp = '(' + func + '?' + interp + ':0)';\n      value = (value ? value + '+' : '') + interp;\n\n      if (enc.extra) {\n        // include logic to handle extraneous elements\n        value = '(datum.extra?' + scale + '(datum.extra.value):' + value + ')';\n      }\n    }\n\n    if (value == null) value = '0';\n  }\n\n  return value;\n}\n\nfunction hasBandwidth(name, scope) {\n  if (!isString(name)) return -1;\n  var type = scope.scaleType(name);\n  return type === 'band' || type === 'point' ? 1 : 0;\n}\n\nexport function getScale(name, scope, params, fields) {\n  var scaleName;\n\n  if (isString(name)) {\n    // direct scale lookup; add scale as parameter\n    scaleName = ScalePrefix + name;\n\n    if (!hasOwnProperty(params, scaleName)) {\n      params[scaleName] = scope.scaleRef(name);\n    }\n\n    scaleName = stringValue(scaleName);\n  } else {\n    // indirect scale lookup; add all scales as parameters\n    for (scaleName in scope.scales) {\n      params[ScalePrefix + scaleName] = scope.scaleRef(scaleName);\n    }\n\n    scaleName = stringValue(ScalePrefix) + '+' + (name.signal ? '(' + expression(name.signal, scope, params, fields) + ')' : field(name, scope, params, fields));\n  }\n\n  return '_[' + scaleName + ']';\n}","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/vega-parser/src/parsers/encode/scale.js"],"names":["expression","field","property","ScalePrefix","hasOwnProperty","isString","stringValue","enc","value","scope","params","fields","scale","getScale","interp","func","flag","range","undefined","band","hasBandwidth","signal","extra","name","type","scaleType","scaleName","scaleRef","scales"],"mappings":"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","sourcesContent":["import expression from './expression';\nimport field from './field';\nimport property from './property';\nimport {ScalePrefix} from 'vega-functions';\nimport {hasOwnProperty, isString, stringValue} from 'vega-util';\n\nexport default function(enc, value, scope, params, fields) {\n  var scale = getScale(enc.scale, scope, params, fields),\n      interp, func, flag;\n\n  if (enc.range != null) {\n    // pull value from scale range\n    interp = +enc.range;\n    func = scale + '.range()';\n    value = (interp === 0) ? (func + '[0]')\n      : '($=' + func + ',' + ((interp === 1) ? '$[$.length-1]'\n      : '$[0]+' + interp + '*($[$.length-1]-$[0])') + ')';\n  } else {\n    // run value through scale and/or pull scale bandwidth\n    if (value !== undefined) value = scale + '(' + value + ')';\n\n    if (enc.band && (flag = hasBandwidth(enc.scale, scope))) {\n      func = scale + '.bandwidth';\n\n      if (enc.band.signal) {\n        interp = func + '()*' + property(enc.band, scope, params, fields);\n      } else {\n        interp = +enc.band;\n        interp = func + '()' + (interp===1 ? '' : '*' + interp);\n      }\n\n      // if we don't know the scale type, check for bandwidth\n      if (flag < 0) interp = '(' + func + '?' + interp + ':0)';\n\n      value = (value ? value + '+' : '') + interp;\n\n      if (enc.extra) {\n        // include logic to handle extraneous elements\n        value = '(datum.extra?' + scale + '(datum.extra.value):' + value + ')';\n      }\n    }\n\n    if (value == null) value = '0';\n  }\n\n  return value;\n}\n\nfunction hasBandwidth(name, scope) {\n  if (!isString(name)) return -1;\n  var type = scope.scaleType(name);\n  return type === 'band' || type === 'point' ? 1 : 0;\n}\n\nexport function getScale(name, scope, params, fields) {\n  var scaleName;\n\n  if (isString(name)) {\n    // direct scale lookup; add scale as parameter\n    scaleName = ScalePrefix + name;\n    if (!hasOwnProperty(params, scaleName)) {\n      params[scaleName] = scope.scaleRef(name);\n    }\n    scaleName = stringValue(scaleName);\n  } else {\n    // indirect scale lookup; add all scales as parameters\n    for (scaleName in scope.scales) {\n      params[ScalePrefix + scaleName] = scope.scaleRef(scaleName);\n    }\n    scaleName = stringValue(ScalePrefix) + '+'\n      + (name.signal\n        ? '(' + expression(name.signal, scope, params, fields) + ')'\n        : field(name, scope, params, fields));\n  }\n\n  return '_[' + scaleName + ']';\n}\n"]},"metadata":{},"sourceType":"module"}