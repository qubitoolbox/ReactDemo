{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { hasOwnProperty, isArray } from 'vega-util';\nimport { hasConditionalFieldDef, isConditionalDef, isFieldDef, isRepeatRef, isSortableFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isSortField } from '../sort';\nimport { isFacetMapping } from '../spec/facet';\nexport function replaceRepeaterInFacet(facet, repeater) {\n  if (isFacetMapping(facet)) {\n    return replaceRepeater(facet, repeater);\n  }\n\n  return replaceRepeaterInFieldDef(facet, repeater);\n}\nexport function replaceRepeaterInEncoding(encoding, repeater) {\n  return replaceRepeater(encoding, repeater);\n}\n/**\n * Replaces repeated value and returns if the repeated value is valid.\n */\n\nfunction replaceRepeat(o, repeater) {\n  if (isRepeatRef(o.field)) {\n    if (o.field.repeat in repeater) {\n      // any needed to calm down ts compiler\n      return Object.assign(Object.assign({}, o), {\n        field: repeater[o.field.repeat]\n      });\n    } else {\n      log.warn(log.message.noSuchRepeatedValue(o.field.repeat));\n      return undefined;\n    }\n  }\n\n  return o;\n}\n/**\n * Replace repeater values in a field def with the concrete field name.\n */\n\n\nfunction replaceRepeaterInFieldDef(fieldDef, repeater) {\n  fieldDef = replaceRepeat(fieldDef, repeater);\n\n  if (fieldDef === undefined) {\n    // the field def should be ignored\n    return undefined;\n  } else if (fieldDef === null) {\n    return null;\n  }\n\n  if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {\n    const sort = replaceRepeat(fieldDef.sort, repeater);\n    fieldDef = Object.assign(Object.assign({}, fieldDef), sort ? {\n      sort\n    } : {});\n  }\n\n  return fieldDef;\n}\n\nfunction replaceRepeaterInChannelDef(channelDef, repeater) {\n  if (isFieldDef(channelDef)) {\n    const fd = replaceRepeaterInFieldDef(channelDef, repeater);\n\n    if (fd) {\n      return fd;\n    } else if (isConditionalDef(channelDef)) {\n      return {\n        condition: channelDef.condition\n      };\n    }\n  } else {\n    if (hasConditionalFieldDef(channelDef)) {\n      const fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);\n\n      if (fd) {\n        return Object.assign(Object.assign({}, channelDef), {\n          condition: fd\n        });\n      } else {\n        const {\n          condition\n        } = channelDef,\n              channelDefWithoutCondition = __rest(channelDef, [\"condition\"]);\n\n        return channelDefWithoutCondition;\n      }\n    }\n\n    return channelDef;\n  }\n\n  return undefined;\n}\n\nfunction replaceRepeater(mapping, repeater) {\n  const out = {};\n\n  for (const channel in mapping) {\n    if (hasOwnProperty(mapping, channel)) {\n      const channelDef = mapping[channel];\n\n      if (isArray(channelDef)) {\n        // array cannot have condition\n        out[channel] = channelDef.map(cd => replaceRepeaterInChannelDef(cd, repeater)).filter(cd => cd);\n      } else {\n        const cd = replaceRepeaterInChannelDef(channelDef, repeater);\n\n        if (cd !== undefined) {\n          out[channel] = cd;\n        }\n      }\n    }\n  }\n\n  return out;\n}","map":{"version":3,"sources":["../../../src/compile/repeater.ts"],"names":[],"mappings":"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","sourcesContent":["import {hasOwnProperty, isArray} from 'vega-util';\nimport {\n  ChannelDef,\n  Field,\n  FieldDef,\n  hasConditionalFieldDef,\n  isConditionalDef,\n  isFieldDef,\n  isRepeatRef,\n  isSortableFieldDef,\n  ScaleFieldDef,\n  ValueDef\n} from '../channeldef';\nimport {Encoding} from '../encoding';\nimport * as log from '../log';\nimport {isSortField} from '../sort';\nimport {FacetFieldDef, FacetMapping, isFacetMapping} from '../spec/facet';\n\nexport interface RepeaterValue {\n  row?: string;\n  column?: string;\n\n  repeat?: string;\n}\n\nexport function replaceRepeaterInFacet(\n  facet: FacetFieldDef<Field> | FacetMapping<Field>,\n  repeater: RepeaterValue\n): FacetFieldDef<string> | FacetMapping<string> {\n  if (isFacetMapping(facet)) {\n    return replaceRepeater(facet, repeater) as FacetMapping<string>;\n  }\n  return replaceRepeaterInFieldDef(facet, repeater) as FacetFieldDef<string>;\n}\n\nexport function replaceRepeaterInEncoding(encoding: Encoding<Field>, repeater: RepeaterValue): Encoding<string> {\n  return replaceRepeater(encoding, repeater) as Encoding<string>;\n}\n\n/**\n * Replaces repeated value and returns if the repeated value is valid.\n */\nfunction replaceRepeat<T extends {field?: Field}>(o: T, repeater: RepeaterValue): T {\n  if (isRepeatRef(o.field)) {\n    if (o.field.repeat in repeater) {\n      // any needed to calm down ts compiler\n      return {...(o as any), field: repeater[o.field.repeat]};\n    } else {\n      log.warn(log.message.noSuchRepeatedValue(o.field.repeat));\n      return undefined;\n    }\n  }\n  return o;\n}\n\n/**\n * Replace repeater values in a field def with the concrete field name.\n */\nfunction replaceRepeaterInFieldDef(fieldDef: FieldDef<Field>, repeater: RepeaterValue): FieldDef<string> {\n  fieldDef = replaceRepeat(fieldDef, repeater);\n\n  if (fieldDef === undefined) {\n    // the field def should be ignored\n    return undefined;\n  } else if (fieldDef === null) {\n    return null;\n  }\n\n  if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {\n    const sort = replaceRepeat(fieldDef.sort, repeater);\n    fieldDef = {\n      ...fieldDef,\n      ...(sort ? {sort} : {})\n    };\n  }\n\n  return fieldDef as ScaleFieldDef<string>;\n}\n\nfunction replaceRepeaterInChannelDef(channelDef: ChannelDef<FieldDef<Field>>, repeater: RepeaterValue): ChannelDef {\n  if (isFieldDef(channelDef)) {\n    const fd = replaceRepeaterInFieldDef(channelDef, repeater);\n    if (fd) {\n      return fd;\n    } else if (isConditionalDef(channelDef)) {\n      return {condition: channelDef.condition};\n    }\n  } else {\n    if (hasConditionalFieldDef(channelDef)) {\n      const fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);\n      if (fd) {\n        return {\n          ...channelDef,\n          condition: fd\n        } as ChannelDef;\n      } else {\n        const {condition, ...channelDefWithoutCondition} = channelDef;\n        return channelDefWithoutCondition as ChannelDef;\n      }\n    }\n    return channelDef as ValueDef;\n  }\n  return undefined;\n}\n\ntype EncodingOrFacet<F extends Field> = Encoding<F> | FacetMapping<F>;\n\nfunction replaceRepeater(mapping: EncodingOrFacet<Field>, repeater: RepeaterValue): EncodingOrFacet<string> {\n  const out: EncodingOrFacet<string> = {};\n  for (const channel in mapping) {\n    if (hasOwnProperty(mapping, channel)) {\n      const channelDef: ChannelDef<FieldDef<Field>> | ChannelDef<FieldDef<Field>>[] = mapping[channel];\n\n      if (isArray(channelDef)) {\n        // array cannot have condition\n        out[channel] = channelDef.map(cd => replaceRepeaterInChannelDef(cd, repeater)).filter(cd => cd);\n      } else {\n        const cd = replaceRepeaterInChannelDef(channelDef, repeater);\n        if (cd !== undefined) {\n          out[channel] = cd;\n        }\n      }\n    }\n  }\n  return out;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}