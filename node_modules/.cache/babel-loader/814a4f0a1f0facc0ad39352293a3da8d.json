{"ast":null,"code":"// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\nexport default function formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  this.fill = match[1] || \" \";\n  this.align = match[2] || \">\";\n  this.sign = match[3] || \"-\";\n  this.symbol = match[4] || \"\";\n  this.zero = !!match[5];\n  this.width = match[6] && +match[6];\n  this.comma = !!match[7];\n  this.precision = match[8] && +match[8].slice(1);\n  this.trim = !!match[9];\n  this.type = match[10] || \"\";\n}\n\nFormatSpecifier.prototype.toString = function () {\n  return this.fill + this.align + this.sign + this.symbol + (this.zero ? \"0\" : \"\") + (this.width == null ? \"\" : Math.max(1, this.width | 0)) + (this.comma ? \",\" : \"\") + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0)) + (this.trim ? \"~\" : \"\") + this.type;\n};","map":{"version":3,"sources":["C:/NewReactResume/resm/node_modules/d3-format/src/formatSpecifier.js"],"names":["re","formatSpecifier","specifier","FormatSpecifier","prototype","match","exec","Error","fill","align","sign","symbol","zero","width","comma","precision","slice","trim","type","toString","Math","max"],"mappings":"AAAA;AACA,IAAIA,EAAE,GAAG,0EAAT;AAEA,eAAe,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AACjD,SAAO,IAAIC,eAAJ,CAAoBD,SAApB,CAAP;AACD;AAEDD,eAAe,CAACG,SAAhB,GAA4BD,eAAe,CAACC,SAA5C,C,CAAuD;;AAEvD,SAASD,eAAT,CAAyBD,SAAzB,EAAoC;AAClC,MAAI,EAAEG,KAAK,GAAGL,EAAE,CAACM,IAAH,CAAQJ,SAAR,CAAV,CAAJ,EAAmC,MAAM,IAAIK,KAAJ,CAAU,qBAAqBL,SAA/B,CAAN;AACnC,MAAIG,KAAJ;AACA,OAAKG,IAAL,GAAYH,KAAK,CAAC,CAAD,CAAL,IAAY,GAAxB;AACA,OAAKI,KAAL,GAAaJ,KAAK,CAAC,CAAD,CAAL,IAAY,GAAzB;AACA,OAAKK,IAAL,GAAYL,KAAK,CAAC,CAAD,CAAL,IAAY,GAAxB;AACA,OAAKM,MAAL,GAAcN,KAAK,CAAC,CAAD,CAAL,IAAY,EAA1B;AACA,OAAKO,IAAL,GAAY,CAAC,CAACP,KAAK,CAAC,CAAD,CAAnB;AACA,OAAKQ,KAAL,GAAaR,KAAK,CAAC,CAAD,CAAL,IAAY,CAACA,KAAK,CAAC,CAAD,CAA/B;AACA,OAAKS,KAAL,GAAa,CAAC,CAACT,KAAK,CAAC,CAAD,CAApB;AACA,OAAKU,SAAL,GAAiBV,KAAK,CAAC,CAAD,CAAL,IAAY,CAACA,KAAK,CAAC,CAAD,CAAL,CAASW,KAAT,CAAe,CAAf,CAA9B;AACA,OAAKC,IAAL,GAAY,CAAC,CAACZ,KAAK,CAAC,CAAD,CAAnB;AACA,OAAKa,IAAL,GAAYb,KAAK,CAAC,EAAD,CAAL,IAAa,EAAzB;AACD;;AAEDF,eAAe,CAACC,SAAhB,CAA0Be,QAA1B,GAAqC,YAAW;AAC9C,SAAO,KAAKX,IAAL,GACD,KAAKC,KADJ,GAED,KAAKC,IAFJ,GAGD,KAAKC,MAHJ,IAIA,KAAKC,IAAL,GAAY,GAAZ,GAAkB,EAJlB,KAKA,KAAKC,KAAL,IAAc,IAAd,GAAqB,EAArB,GAA0BO,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKR,KAAL,GAAa,CAAzB,CAL1B,KAMA,KAAKC,KAAL,GAAa,GAAb,GAAmB,EANnB,KAOA,KAAKC,SAAL,IAAkB,IAAlB,GAAyB,EAAzB,GAA8B,MAAMK,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKN,SAAL,GAAiB,CAA7B,CAPpC,KAQA,KAAKE,IAAL,GAAY,GAAZ,GAAkB,EARlB,IASD,KAAKC,IATX;AAUD,CAXD","sourcesContent":["// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  this.fill = match[1] || \" \";\n  this.align = match[2] || \">\";\n  this.sign = match[3] || \"-\";\n  this.symbol = match[4] || \"\";\n  this.zero = !!match[5];\n  this.width = match[6] && +match[6];\n  this.comma = !!match[7];\n  this.precision = match[8] && +match[8].slice(1);\n  this.trim = !!match[9];\n  this.type = match[10] || \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n"]},"metadata":{},"sourceType":"module"}